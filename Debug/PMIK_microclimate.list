
PMIK_microclimate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cee4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800d088  0800d088  0001d088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d528  0800d528  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800d528  0800d528  0001d528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d530  0800d530  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d530  0800d530  0001d530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d534  0800d534  0001d534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800d538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000268  0800d7a0  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  0800d7a0  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022775  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000472a  00000000  00000000  00042a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a50  00000000  00000000  00047138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001840  00000000  00000000  00048b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b133  00000000  00000000  0004a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016488  00000000  00000000  000654fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000980d2  00000000  00000000  0007b983  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00113a55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a48  00000000  00000000  00113ad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000268 	.word	0x20000268
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d06c 	.word	0x0800d06c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	0800d06c 	.word	0x0800d06c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f6a:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f6c:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <MX_ADC1_Init+0xa0>)
 8000f6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f9c:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <MX_ADC1_Init+0xa4>)
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fba:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000fbc:	f004 f9f2 	bl	80053a4 <HAL_ADC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000fc6:	f001 f989 	bl	80022dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fca:	230a      	movs	r3, #10
 8000fcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000fdc:	f004 fb18 	bl	8005610 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fe6:	f001 f979 	bl	80022dc <Error_Handler>
  }

}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000320 	.word	0x20000320
 8000ff8:	40012000 	.word	0x40012000
 8000ffc:	0f000001 	.word	0x0f000001

08001000 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a2f      	ldr	r2, [pc, #188]	; (80010dc <HAL_ADC_MspInit+0xdc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d157      	bne.n	80010d2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a2d      	ldr	r2, [pc, #180]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800105a:	2301      	movs	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105e:	2303      	movs	r3, #3
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	481d      	ldr	r0, [pc, #116]	; (80010e4 <HAL_ADC_MspInit+0xe4>)
 800106e:	f005 fcc5 	bl	80069fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 8001074:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <HAL_ADC_MspInit+0xec>)
 8001076:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 800108c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001090:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 8001094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001098:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 800109c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010b6:	480c      	ldr	r0, [pc, #48]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010b8:	f004 fe5c 	bl	8005d74 <HAL_DMA_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010c2:	f001 f90b 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010ca:	639a      	str	r2, [r3, #56]	; 0x38
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	; 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40012000 	.word	0x40012000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020800 	.word	0x40020800
 80010e8:	20000368 	.word	0x20000368
 80010ec:	40026410 	.word	0x40026410

080010f0 <buzzer_alarm>:

#include "buzzer.h"



void buzzer_alarm(uint8_t time,uint8_t power){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	460a      	mov	r2, r1
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	4613      	mov	r3, r2
 80010fe:	71bb      	strb	r3, [r7, #6]
	htim3.Instance->CCR1 = power;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <buzzer_alarm+0x38>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	79ba      	ldrb	r2, [r7, #6]
 8001106:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001108:	2100      	movs	r1, #0
 800110a:	4807      	ldr	r0, [pc, #28]	; (8001128 <buzzer_alarm+0x38>)
 800110c:	f007 fd70 	bl	8008bf0 <HAL_TIM_PWM_Start>
	delay_counter = time * 1000;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	461a      	mov	r2, r3
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <buzzer_alarm+0x3c>)
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200004d0 	.word	0x200004d0
 800112c:	2000028c 	.word	0x2000028c

08001130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_DMA_Init+0x3c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <MX_DMA_Init+0x3c>)
 8001140:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_DMA_Init+0x3c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2038      	movs	r0, #56	; 0x38
 8001158:	f004 fdd5 	bl	8005d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800115c:	2038      	movs	r0, #56	; 0x38
 800115e:	f004 fdee 	bl	8005d3e <HAL_NVIC_EnableIRQ>

}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001176:	2306      	movs	r3, #6
 8001178:	847b      	strh	r3, [r7, #34]	; 0x22
 800117a:	2306      	movs	r3, #6
 800117c:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	83fb      	strh	r3, [r7, #30]
 8001186:	2300      	movs	r3, #0
 8001188:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 800118a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118e:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001194:	4b9f      	ldr	r3, [pc, #636]	; (8001414 <EE_Init+0x2a4>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800119a:	4b9f      	ldr	r3, [pc, #636]	; (8001418 <EE_Init+0x2a8>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80011a0:	2300      	movs	r3, #0
 80011a2:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 80011a4:	2306      	movs	r3, #6
 80011a6:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80011ac:	2302      	movs	r3, #2
 80011ae:	613b      	str	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80011b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011b2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d057      	beq.n	800126a <EE_Init+0xfa>
 80011ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011be:	4293      	cmp	r3, r2
 80011c0:	d003      	beq.n	80011ca <EE_Init+0x5a>
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80f4 	beq.w	80013b0 <EE_Init+0x240>
 80011c8:	e18d      	b.n	80014e6 <EE_Init+0x376>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80011ca:	8c3b      	ldrh	r3, [r7, #32]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d116      	bne.n	80011fe <EE_Init+0x8e>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80011d0:	4890      	ldr	r0, [pc, #576]	; (8001414 <EE_Init+0x2a4>)
 80011d2:	f000 f9a9 	bl	8001528 <EE_VerifyPageFullyErased>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f040 818e 	bne.w	80014fa <EE_Init+0x38a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011de:	f107 0214 	add.w	r2, r7, #20
 80011e2:	463b      	mov	r3, r7
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f005 fae6 	bl	80067b8 <HAL_FLASHEx_Erase>
 80011ec:	4603      	mov	r3, r0
 80011ee:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80011f0:	7efb      	ldrb	r3, [r7, #27]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8181 	beq.w	80014fa <EE_Init+0x38a>
          {
            return FlashStatus;
 80011f8:	7efb      	ldrb	r3, [r7, #27]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	e185      	b.n	800150a <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001204:	4293      	cmp	r3, r2
 8001206:	d125      	bne.n	8001254 <EE_Init+0xe4>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001208:	4882      	ldr	r0, [pc, #520]	; (8001414 <EE_Init+0x2a4>)
 800120a:	f000 f98d 	bl	8001528 <EE_VerifyPageFullyErased>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10e      	bne.n	8001232 <EE_Init+0xc2>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001214:	f107 0214 	add.w	r2, r7, #20
 8001218:	463b      	mov	r3, r7
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f005 facb 	bl	80067b8 <HAL_FLASHEx_Erase>
 8001222:	4603      	mov	r3, r0
 8001224:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001226:	7efb      	ldrb	r3, [r7, #27]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <EE_Init+0xc2>
          {
            return FlashStatus;
 800122c:	7efb      	ldrb	r3, [r7, #27]
 800122e:	b29b      	uxth	r3, r3
 8001230:	e16b      	b.n	800150a <EE_Init+0x39a>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	4977      	ldr	r1, [pc, #476]	; (8001418 <EE_Init+0x2a8>)
 800123c:	2001      	movs	r0, #1
 800123e:	f005 f907 	bl	8006450 <HAL_FLASH_Program>
 8001242:	4603      	mov	r3, r0
 8001244:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001246:	7efb      	ldrb	r3, [r7, #27]
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 8156 	beq.w	80014fa <EE_Init+0x38a>
        {
          return FlashStatus;
 800124e:	7efb      	ldrb	r3, [r7, #27]
 8001250:	b29b      	uxth	r3, r3
 8001252:	e15a      	b.n	800150a <EE_Init+0x39a>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001254:	f000 f9fe 	bl	8001654 <EE_Format>
 8001258:	4603      	mov	r3, r0
 800125a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800125c:	7efb      	ldrb	r3, [r7, #27]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 814b 	beq.w	80014fa <EE_Init+0x38a>
        {
          return FlashStatus;
 8001264:	7efb      	ldrb	r3, [r7, #27]
 8001266:	b29b      	uxth	r3, r3
 8001268:	e14f      	b.n	800150a <EE_Init+0x39a>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800126a:	8c3b      	ldrh	r3, [r7, #32]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d163      	bne.n	8001338 <EE_Init+0x1c8>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001270:	2300      	movs	r3, #0
 8001272:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001274:	e030      	b.n	80012d8 <EE_Init+0x168>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001276:	4b69      	ldr	r3, [pc, #420]	; (800141c <EE_Init+0x2ac>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	b29a      	uxth	r2, r3
 800127c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800127e:	4968      	ldr	r1, [pc, #416]	; (8001420 <EE_Init+0x2b0>)
 8001280:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001284:	429a      	cmp	r2, r3
 8001286:	d101      	bne.n	800128c <EE_Init+0x11c>
          {
            x = VarIdx;
 8001288:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800128a:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 800128c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800128e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001292:	429a      	cmp	r2, r3
 8001294:	d01d      	beq.n	80012d2 <EE_Init+0x162>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001296:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001298:	4a61      	ldr	r2, [pc, #388]	; (8001420 <EE_Init+0x2b0>)
 800129a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800129e:	4961      	ldr	r1, [pc, #388]	; (8001424 <EE_Init+0x2b4>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f96b 	bl	800157c <EE_ReadVariable>
 80012a6:	4603      	mov	r3, r0
 80012a8:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80012aa:	8bbb      	ldrh	r3, [r7, #28]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d010      	beq.n	80012d2 <EE_Init+0x162>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80012b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012b2:	4a5b      	ldr	r2, [pc, #364]	; (8001420 <EE_Init+0x2b0>)
 80012b4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012b8:	4b5a      	ldr	r3, [pc, #360]	; (8001424 <EE_Init+0x2b4>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	4610      	mov	r0, r2
 80012c0:	f000 fa60 	bl	8001784 <EE_VerifyPageFullWriteVariable>
 80012c4:	4603      	mov	r3, r0
 80012c6:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80012c8:	8bfb      	ldrh	r3, [r7, #30]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <EE_Init+0x162>
              {
                return EepromStatus;
 80012ce:	8bfb      	ldrh	r3, [r7, #30]
 80012d0:	e11b      	b.n	800150a <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80012d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012d4:	3301      	adds	r3, #1
 80012d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80012d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d9cb      	bls.n	8001276 <EE_Init+0x106>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	494b      	ldr	r1, [pc, #300]	; (8001414 <EE_Init+0x2a4>)
 80012e8:	2001      	movs	r0, #1
 80012ea:	f005 f8b1 	bl	8006450 <HAL_FLASH_Program>
 80012ee:	4603      	mov	r3, r0
 80012f0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80012f2:	7efb      	ldrb	r3, [r7, #27]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <EE_Init+0x18e>
        {
          return FlashStatus;
 80012f8:	7efb      	ldrb	r3, [r7, #27]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	e105      	b.n	800150a <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE1_ID;
 80012fe:	2307      	movs	r3, #7
 8001300:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001306:	2302      	movs	r3, #2
 8001308:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800130a:	4843      	ldr	r0, [pc, #268]	; (8001418 <EE_Init+0x2a8>)
 800130c:	f000 f90c 	bl	8001528 <EE_VerifyPageFullyErased>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 80f3 	bne.w	80014fe <EE_Init+0x38e>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001318:	f107 0214 	add.w	r2, r7, #20
 800131c:	463b      	mov	r3, r7
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f005 fa49 	bl	80067b8 <HAL_FLASHEx_Erase>
 8001326:	4603      	mov	r3, r0
 8001328:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800132a:	7efb      	ldrb	r3, [r7, #27]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80e6 	beq.w	80014fe <EE_Init+0x38e>
          {
            return FlashStatus;
 8001332:	7efb      	ldrb	r3, [r7, #27]
 8001334:	b29b      	uxth	r3, r3
 8001336:	e0e8      	b.n	800150a <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8001338:	8c3b      	ldrh	r3, [r7, #32]
 800133a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133e:	4293      	cmp	r3, r2
 8001340:	d12b      	bne.n	800139a <EE_Init+0x22a>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001342:	2307      	movs	r3, #7
 8001344:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001346:	2301      	movs	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800134a:	2302      	movs	r3, #2
 800134c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800134e:	4832      	ldr	r0, [pc, #200]	; (8001418 <EE_Init+0x2a8>)
 8001350:	f000 f8ea 	bl	8001528 <EE_VerifyPageFullyErased>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10e      	bne.n	8001378 <EE_Init+0x208>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800135a:	f107 0214 	add.w	r2, r7, #20
 800135e:	463b      	mov	r3, r7
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f005 fa28 	bl	80067b8 <HAL_FLASHEx_Erase>
 8001368:	4603      	mov	r3, r0
 800136a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800136c:	7efb      	ldrb	r3, [r7, #27]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <EE_Init+0x208>
          {
            return FlashStatus;
 8001372:	7efb      	ldrb	r3, [r7, #27]
 8001374:	b29b      	uxth	r3, r3
 8001376:	e0c8      	b.n	800150a <EE_Init+0x39a>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	4924      	ldr	r1, [pc, #144]	; (8001414 <EE_Init+0x2a4>)
 8001382:	2001      	movs	r0, #1
 8001384:	f005 f864 	bl	8006450 <HAL_FLASH_Program>
 8001388:	4603      	mov	r3, r0
 800138a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800138c:	7efb      	ldrb	r3, [r7, #27]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 80b5 	beq.w	80014fe <EE_Init+0x38e>
        {
          return FlashStatus;
 8001394:	7efb      	ldrb	r3, [r7, #27]
 8001396:	b29b      	uxth	r3, r3
 8001398:	e0b7      	b.n	800150a <EE_Init+0x39a>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800139a:	f000 f95b 	bl	8001654 <EE_Format>
 800139e:	4603      	mov	r3, r0
 80013a0:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013a2:	7efb      	ldrb	r3, [r7, #27]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80aa 	beq.w	80014fe <EE_Init+0x38e>
        {
          return FlashStatus;
 80013aa:	7efb      	ldrb	r3, [r7, #27]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	e0ac      	b.n	800150a <EE_Init+0x39a>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013b0:	8c3b      	ldrh	r3, [r7, #32]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10a      	bne.n	80013cc <EE_Init+0x25c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013b6:	f000 f94d 	bl	8001654 <EE_Format>
 80013ba:	4603      	mov	r3, r0
 80013bc:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013be:	7efb      	ldrb	r3, [r7, #27]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 809e 	beq.w	8001502 <EE_Init+0x392>
        {
          return FlashStatus;
 80013c6:	7efb      	ldrb	r3, [r7, #27]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	e09e      	b.n	800150a <EE_Init+0x39a>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013cc:	8c3b      	ldrh	r3, [r7, #32]
 80013ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d11b      	bne.n	800140e <EE_Init+0x29e>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013d6:	2307      	movs	r3, #7
 80013d8:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013de:	2302      	movs	r3, #2
 80013e0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <EE_Init+0x2a8>)
 80013e4:	f000 f8a0 	bl	8001528 <EE_VerifyPageFullyErased>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f040 8089 	bne.w	8001502 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80013f0:	f107 0214 	add.w	r2, r7, #20
 80013f4:	463b      	mov	r3, r7
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 f9dd 	bl	80067b8 <HAL_FLASHEx_Erase>
 80013fe:	4603      	mov	r3, r0
 8001400:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001402:	7efb      	ldrb	r3, [r7, #27]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d07c      	beq.n	8001502 <EE_Init+0x392>
          {
            return FlashStatus;
 8001408:	7efb      	ldrb	r3, [r7, #27]
 800140a:	b29b      	uxth	r3, r3
 800140c:	e07d      	b.n	800150a <EE_Init+0x39a>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800140e:	2300      	movs	r3, #0
 8001410:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001412:	e03a      	b.n	800148a <EE_Init+0x31a>
 8001414:	08008000 	.word	0x08008000
 8001418:	08028000 	.word	0x08028000
 800141c:	08008006 	.word	0x08008006
 8001420:	2000041c 	.word	0x2000041c
 8001424:	20000284 	.word	0x20000284
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001428:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <EE_Init+0x3a4>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	b29a      	uxth	r2, r3
 800142e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001430:	4939      	ldr	r1, [pc, #228]	; (8001518 <EE_Init+0x3a8>)
 8001432:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001436:	429a      	cmp	r2, r3
 8001438:	d101      	bne.n	800143e <EE_Init+0x2ce>
          {
            x = VarIdx;
 800143a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800143c:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 800143e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001440:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001444:	429a      	cmp	r2, r3
 8001446:	d01d      	beq.n	8001484 <EE_Init+0x314>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001448:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800144a:	4a33      	ldr	r2, [pc, #204]	; (8001518 <EE_Init+0x3a8>)
 800144c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001450:	4932      	ldr	r1, [pc, #200]	; (800151c <EE_Init+0x3ac>)
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f892 	bl	800157c <EE_ReadVariable>
 8001458:	4603      	mov	r3, r0
 800145a:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800145c:	8bbb      	ldrh	r3, [r7, #28]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d010      	beq.n	8001484 <EE_Init+0x314>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001462:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001464:	4a2c      	ldr	r2, [pc, #176]	; (8001518 <EE_Init+0x3a8>)
 8001466:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <EE_Init+0x3ac>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	4619      	mov	r1, r3
 8001470:	4610      	mov	r0, r2
 8001472:	f000 f987 	bl	8001784 <EE_VerifyPageFullWriteVariable>
 8001476:	4603      	mov	r3, r0
 8001478:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800147a:	8bfb      	ldrh	r3, [r7, #30]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <EE_Init+0x314>
              {
                return EepromStatus;
 8001480:	8bfb      	ldrh	r3, [r7, #30]
 8001482:	e042      	b.n	800150a <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001484:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001486:	3301      	adds	r3, #1
 8001488:	84fb      	strh	r3, [r7, #38]	; 0x26
 800148a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148c:	2b03      	cmp	r3, #3
 800148e:	d9cb      	bls.n	8001428 <EE_Init+0x2b8>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	4921      	ldr	r1, [pc, #132]	; (8001520 <EE_Init+0x3b0>)
 800149a:	2001      	movs	r0, #1
 800149c:	f004 ffd8 	bl	8006450 <HAL_FLASH_Program>
 80014a0:	4603      	mov	r3, r0
 80014a2:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80014a4:	7efb      	ldrb	r3, [r7, #27]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <EE_Init+0x340>
        {
          return FlashStatus;
 80014aa:	7efb      	ldrb	r3, [r7, #27]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	e02c      	b.n	800150a <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE0_ID;
 80014b0:	2306      	movs	r3, #6
 80014b2:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80014b8:	2302      	movs	r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80014bc:	4819      	ldr	r0, [pc, #100]	; (8001524 <EE_Init+0x3b4>)
 80014be:	f000 f833 	bl	8001528 <EE_VerifyPageFullyErased>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d11c      	bne.n	8001502 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80014c8:	f107 0214 	add.w	r2, r7, #20
 80014cc:	463b      	mov	r3, r7
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 f971 	bl	80067b8 <HAL_FLASHEx_Erase>
 80014d6:	4603      	mov	r3, r0
 80014d8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80014da:	7efb      	ldrb	r3, [r7, #27]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d010      	beq.n	8001502 <EE_Init+0x392>
          {
            return FlashStatus;
 80014e0:	7efb      	ldrb	r3, [r7, #27]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	e011      	b.n	800150a <EE_Init+0x39a>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80014e6:	f000 f8b5 	bl	8001654 <EE_Format>
 80014ea:	4603      	mov	r3, r0
 80014ec:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80014ee:	7efb      	ldrb	r3, [r7, #27]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <EE_Init+0x396>
      {
        return FlashStatus;
 80014f4:	7efb      	ldrb	r3, [r7, #27]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	e007      	b.n	800150a <EE_Init+0x39a>
      break;
 80014fa:	bf00      	nop
 80014fc:	e004      	b.n	8001508 <EE_Init+0x398>
      break;
 80014fe:	bf00      	nop
 8001500:	e002      	b.n	8001508 <EE_Init+0x398>
      break;
 8001502:	bf00      	nop
 8001504:	e000      	b.n	8001508 <EE_Init+0x398>
      }
      break;
 8001506:	bf00      	nop
  }

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	08028006 	.word	0x08028006
 8001518:	2000041c 	.word	0x2000041c
 800151c:	20000284 	.word	0x20000284
 8001520:	08028000 	.word	0x08028000
 8001524:	08008000 	.word	0x08008000

08001528 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8001530:	2301      	movs	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
  uint32_t BeginAddress = Address;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	613b      	str	r3, [r7, #16]
  uint16_t AddressValue = 0x5555;
 8001538:	f245 5355 	movw	r3, #21845	; 0x5555
 800153c:	81fb      	strh	r3, [r7, #14]

  /* Check each active page address starting from end */
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800153e:	e00d      	b.n	800155c <EE_VerifyPageFullyErased+0x34>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8001546:	89fb      	ldrh	r3, [r7, #14]
 8001548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800154c:	4293      	cmp	r3, r2
 800154e:	d002      	beq.n	8001556 <EE_VerifyPageFullyErased+0x2e>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

      break;
 8001554:	e00a      	b.n	800156c <EE_VerifyPageFullyErased+0x44>
    }
    /* Next address location */
    Address = Address + 4;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3304      	adds	r3, #4
 800155a:	607b      	str	r3, [r7, #4]
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8001562:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	d9e9      	bls.n	8001540 <EE_VerifyPageFullyErased+0x18>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	b29b      	uxth	r3, r3
}
 8001570:	4618      	mov	r0, r3
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001588:	2300      	movs	r3, #0
 800158a:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800158c:	f245 5355 	movw	r3, #21845	; 0x5555
 8001590:	81bb      	strh	r3, [r7, #12]
 8001592:	2301      	movs	r3, #1
 8001594:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <EE_ReadVariable+0x8c>)
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <EE_ReadVariable+0x8c>)
 800159c:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f8aa 	bl	80016f8 <EE_FindValidPage>
 80015a4:	4603      	mov	r3, r0
 80015a6:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80015a8:	89fb      	ldrh	r3, [r7, #14]
 80015aa:	2bab      	cmp	r3, #171	; 0xab
 80015ac:	d101      	bne.n	80015b2 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80015ae:	23ab      	movs	r3, #171	; 0xab
 80015b0:	e026      	b.n	8001600 <EE_ReadVariable+0x84>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80015b2:	89fb      	ldrh	r3, [r7, #14]
 80015b4:	045b      	lsls	r3, r3, #17
 80015b6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80015ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015be:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	3301      	adds	r3, #1
 80015c4:	045a      	lsls	r2, r3, #17
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <EE_ReadVariable+0x90>)
 80015c8:	4413      	add	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80015cc:	e012      	b.n	80015f4 <EE_ReadVariable+0x78>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80015d4:	89ba      	ldrh	r2, [r7, #12]
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d108      	bne.n	80015ee <EE_ReadVariable+0x72>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	3b02      	subs	r3, #2
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	82fb      	strh	r3, [r7, #22]

      break;
 80015ec:	e007      	b.n	80015fe <EE_ReadVariable+0x82>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	3b04      	subs	r3, #4
 80015f2:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3302      	adds	r3, #2
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d8e7      	bhi.n	80015ce <EE_ReadVariable+0x52>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80015fe:	8afb      	ldrh	r3, [r7, #22]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	08008000 	.word	0x08008000
 800160c:	08007ffe 	.word	0x08007ffe

08001610 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	460a      	mov	r2, r1
 800161a:	80fb      	strh	r3, [r7, #6]
 800161c:	4613      	mov	r3, r2
 800161e:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001624:	88ba      	ldrh	r2, [r7, #4]
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f8aa 	bl	8001784 <EE_VerifyPageFullWriteVariable>
 8001630:	4603      	mov	r3, r0
 8001632:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8001634:	89fb      	ldrh	r3, [r7, #14]
 8001636:	2b80      	cmp	r3, #128	; 0x80
 8001638:	d107      	bne.n	800164a <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800163a:	88ba      	ldrh	r2, [r7, #4]
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f8ff 	bl	8001844 <EE_PageTransfer>
 8001646:	4603      	mov	r3, r0
 8001648:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800164a:	89fb      	ldrh	r3, [r7, #14]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8001666:	2306      	movs	r3, #6
 8001668:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 800166a:	2301      	movs	r3, #1
 800166c:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800166e:	2302      	movs	r3, #2
 8001670:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001672:	481f      	ldr	r0, [pc, #124]	; (80016f0 <EE_Format+0x9c>)
 8001674:	f7ff ff58 	bl	8001528 <EE_VerifyPageFullyErased>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10d      	bne.n	800169a <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800167e:	f107 0218 	add.w	r2, r7, #24
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f005 f896 	bl	80067b8 <HAL_FLASHEx_Erase>
 800168c:	4603      	mov	r3, r0
 800168e:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8001690:	7ffb      	ldrb	r3, [r7, #31]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <EE_Format+0x46>
    {
      return FlashStatus;
 8001696:	7ffb      	ldrb	r3, [r7, #31]
 8001698:	e025      	b.n	80016e6 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	4913      	ldr	r1, [pc, #76]	; (80016f0 <EE_Format+0x9c>)
 80016a4:	2001      	movs	r0, #1
 80016a6:	f004 fed3 	bl	8006450 <HAL_FLASH_Program>
 80016aa:	4603      	mov	r3, r0
 80016ac:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80016ae:	7ffb      	ldrb	r3, [r7, #31]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <EE_Format+0x64>
  {
    return FlashStatus;
 80016b4:	7ffb      	ldrb	r3, [r7, #31]
 80016b6:	e016      	b.n	80016e6 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 80016b8:	2307      	movs	r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <EE_Format+0xa0>)
 80016be:	f7ff ff33 	bl	8001528 <EE_VerifyPageFullyErased>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10d      	bne.n	80016e4 <EE_Format+0x90>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80016c8:	f107 0218 	add.w	r2, r7, #24
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f005 f871 	bl	80067b8 <HAL_FLASHEx_Erase>
 80016d6:	4603      	mov	r3, r0
 80016d8:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <EE_Format+0x90>
    {
      return FlashStatus;
 80016e0:	7ffb      	ldrb	r3, [r7, #31]
 80016e2:	e000      	b.n	80016e6 <EE_Format+0x92>
    }
  }

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	08008000 	.word	0x08008000
 80016f4:	08028000 	.word	0x08028000

080016f8 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001702:	2306      	movs	r3, #6
 8001704:	81fb      	strh	r3, [r7, #14]
 8001706:	2306      	movs	r3, #6
 8001708:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <EE_FindValidPage+0x84>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <EE_FindValidPage+0x88>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01b      	beq.n	8001754 <EE_FindValidPage+0x5c>
 800171c:	2b01      	cmp	r3, #1
 800171e:	d125      	bne.n	800176c <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001720:	89bb      	ldrh	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d108      	bne.n	8001738 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800172c:	4293      	cmp	r3, r2
 800172e:	d101      	bne.n	8001734 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001730:	2300      	movs	r3, #0
 8001732:	e01c      	b.n	800176e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001734:	2301      	movs	r3, #1
 8001736:	e01a      	b.n	800176e <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d108      	bne.n	8001750 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800173e:	89bb      	ldrh	r3, [r7, #12]
 8001740:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001744:	4293      	cmp	r3, r2
 8001746:	d101      	bne.n	800174c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001748:	2301      	movs	r3, #1
 800174a:	e010      	b.n	800176e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800174c:	2300      	movs	r3, #0
 800174e:	e00e      	b.n	800176e <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001750:	23ab      	movs	r3, #171	; 0xab
 8001752:	e00c      	b.n	800176e <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800175a:	2300      	movs	r3, #0
 800175c:	e007      	b.n	800176e <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800175e:	89bb      	ldrh	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001764:	2301      	movs	r3, #1
 8001766:	e002      	b.n	800176e <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001768:	23ab      	movs	r3, #171	; 0xab
 800176a:	e000      	b.n	800176e <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800176c:	2300      	movs	r3, #0
  }
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	08008000 	.word	0x08008000
 8001780:	08028000 	.word	0x08028000

08001784 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	460a      	mov	r2, r1
 800178e:	80fb      	strh	r3, [r7, #6]
 8001790:	4613      	mov	r3, r2
 8001792:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8001798:	2300      	movs	r3, #0
 800179a:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <EE_VerifyPageFullWriteVariable+0xb4>)
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <EE_VerifyPageFullWriteVariable+0xb8>)
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f7ff ffa7 	bl	80016f8 <EE_FindValidPage>
 80017aa:	4603      	mov	r3, r0
 80017ac:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80017ae:	8a3b      	ldrh	r3, [r7, #16]
 80017b0:	2bab      	cmp	r3, #171	; 0xab
 80017b2:	d101      	bne.n	80017b8 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 80017b4:	23ab      	movs	r3, #171	; 0xab
 80017b6:	e03a      	b.n	800182e <EE_VerifyPageFullWriteVariable+0xaa>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80017b8:	8a3b      	ldrh	r3, [r7, #16]
 80017ba:	045b      	lsls	r3, r3, #17
 80017bc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80017c4:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 80017c6:	8a3b      	ldrh	r3, [r7, #16]
 80017c8:	3301      	adds	r3, #1
 80017ca:	045a      	lsls	r2, r3, #17
 80017cc:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <EE_VerifyPageFullWriteVariable+0xbc>)
 80017ce:	4413      	add	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 80017d2:	e027      	b.n	8001824 <EE_VerifyPageFullWriteVariable+0xa0>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d11f      	bne.n	800181e <EE_VerifyPageFullWriteVariable+0x9a>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);
 80017de:	88bb      	ldrh	r3, [r7, #4]
 80017e0:	f04f 0400 	mov.w	r4, #0
 80017e4:	461a      	mov	r2, r3
 80017e6:	4623      	mov	r3, r4
 80017e8:	6979      	ldr	r1, [r7, #20]
 80017ea:	2001      	movs	r0, #1
 80017ec:	f004 fe30 	bl	8006450 <HAL_FLASH_Program>
 80017f0:	4603      	mov	r3, r0
 80017f2:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80017f4:	7cfb      	ldrb	r3, [r7, #19]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <EE_VerifyPageFullWriteVariable+0x7c>
      {
        return FlashStatus;
 80017fa:	7cfb      	ldrb	r3, [r7, #19]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	e016      	b.n	800182e <EE_VerifyPageFullWriteVariable+0xaa>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	1c99      	adds	r1, r3, #2
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	f04f 0400 	mov.w	r4, #0
 800180a:	461a      	mov	r2, r3
 800180c:	4623      	mov	r3, r4
 800180e:	2001      	movs	r0, #1
 8001810:	f004 fe1e 	bl	8006450 <HAL_FLASH_Program>
 8001814:	4603      	mov	r3, r0
 8001816:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8001818:	7cfb      	ldrb	r3, [r7, #19]
 800181a:	b29b      	uxth	r3, r3
 800181c:	e007      	b.n	800182e <EE_VerifyPageFullWriteVariable+0xaa>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3304      	adds	r3, #4
 8001822:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d3d3      	bcc.n	80017d4 <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800182c:	2380      	movs	r3, #128	; 0x80
}
 800182e:	4618      	mov	r0, r3
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}
 8001836:	bf00      	nop
 8001838:	08008000 	.word	0x08008000
 800183c:	08028000 	.word	0x08028000
 8001840:	08007fff 	.word	0x08007fff

08001844 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	; 0x30
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	80fb      	strh	r3, [r7, #6]
 8001850:	4613      	mov	r3, r2
 8001852:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800185a:	4b54      	ldr	r3, [pc, #336]	; (80019ac <EE_PageTransfer+0x168>)
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 800185e:	2300      	movs	r3, #0
 8001860:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001866:	2300      	movs	r3, #0
 8001868:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	847b      	strh	r3, [r7, #34]	; 0x22
 800186e:	2300      	movs	r3, #0
 8001870:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff ff3e 	bl	80016f8 <EE_FindValidPage>
 800187c:	4603      	mov	r3, r0
 800187e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001882:	2b01      	cmp	r3, #1
 8001884:	d104      	bne.n	8001890 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001886:	4b49      	ldr	r3, [pc, #292]	; (80019ac <EE_PageTransfer+0x168>)
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 800188a:	2307      	movs	r3, #7
 800188c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800188e:	e009      	b.n	80018a4 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001892:	2b00      	cmp	r3, #0
 8001894:	d104      	bne.n	80018a0 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001896:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <EE_PageTransfer+0x16c>)
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 800189a:	2306      	movs	r3, #6
 800189c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800189e:	e001      	b.n	80018a4 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80018a0:	23ab      	movs	r3, #171	; 0xab
 80018a2:	e07e      	b.n	80019a2 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 80018a4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018ae:	2001      	movs	r0, #1
 80018b0:	f004 fdce 	bl	8006450 <HAL_FLASH_Program>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80018ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 80018c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	e06b      	b.n	80019a2 <EE_PageTransfer+0x15e>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80018ca:	88ba      	ldrh	r2, [r7, #4]
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff57 	bl	8001784 <EE_VerifyPageFullWriteVariable>
 80018d6:	4603      	mov	r3, r0
 80018d8:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 80018da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 80018e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018e2:	e05e      	b.n	80019a2 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	853b      	strh	r3, [r7, #40]	; 0x28
 80018e8:	e027      	b.n	800193a <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80018ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018ec:	4a31      	ldr	r2, [pc, #196]	; (80019b4 <EE_PageTransfer+0x170>)
 80018ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018f2:	88fa      	ldrh	r2, [r7, #6]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d01d      	beq.n	8001934 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80018f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018fa:	4a2e      	ldr	r2, [pc, #184]	; (80019b4 <EE_PageTransfer+0x170>)
 80018fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001900:	492d      	ldr	r1, [pc, #180]	; (80019b8 <EE_PageTransfer+0x174>)
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fe3a 	bl	800157c <EE_ReadVariable>
 8001908:	4603      	mov	r3, r0
 800190a:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 800190c:	8c3b      	ldrh	r3, [r7, #32]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d010      	beq.n	8001934 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001912:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001914:	4a27      	ldr	r2, [pc, #156]	; (80019b4 <EE_PageTransfer+0x170>)
 8001916:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800191a:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <EE_PageTransfer+0x174>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	4619      	mov	r1, r3
 8001920:	4610      	mov	r0, r2
 8001922:	f7ff ff2f 	bl	8001784 <EE_VerifyPageFullWriteVariable>
 8001926:	4603      	mov	r3, r0
 8001928:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800192a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8001930:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001932:	e036      	b.n	80019a2 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001934:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001936:	3301      	adds	r3, #1
 8001938:	853b      	strh	r3, [r7, #40]	; 0x28
 800193a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800193c:	2b03      	cmp	r3, #3
 800193e:	d9d4      	bls.n	80018ea <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8001944:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001946:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8001948:	2301      	movs	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800194c:	2302      	movs	r3, #2
 800194e:	61bb      	str	r3, [r7, #24]

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001950:	f107 021c 	add.w	r2, r7, #28
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f004 ff2c 	bl	80067b8 <HAL_FLASHEx_Erase>
 8001960:	4603      	mov	r3, r0
 8001962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 800196e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001972:	b29b      	uxth	r3, r3
 8001974:	e015      	b.n	80019a2 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001980:	2001      	movs	r0, #1
 8001982:	f004 fd65 	bl	8006450 <HAL_FLASH_Program>
 8001986:	4603      	mov	r3, r0
 8001988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800198c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8001994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001998:	b29b      	uxth	r3, r3
 800199a:	e002      	b.n	80019a2 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 800199c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019a0:	b29b      	uxth	r3, r3
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3730      	adds	r7, #48	; 0x30
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	08008000 	.word	0x08008000
 80019b0:	08028000 	.word	0x08028000
 80019b4:	2000041c 	.word	0x2000041c
 80019b8:	20000284 	.word	0x20000284

080019bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <MX_GPIO_Init+0xd4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a2d      	ldr	r2, [pc, #180]	; (8001a90 <MX_GPIO_Init+0xd4>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <MX_GPIO_Init+0xd4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <MX_GPIO_Init+0xd4>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <MX_GPIO_Init+0xd4>)
 80019f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <MX_GPIO_Init+0xd4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <MX_GPIO_Init+0xd4>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a1f      	ldr	r2, [pc, #124]	; (8001a90 <MX_GPIO_Init+0xd4>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_GPIO_Init+0xd4>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <MX_GPIO_Init+0xd4>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <MX_GPIO_Init+0xd4>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <MX_GPIO_Init+0xd4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KB_R3_Pin|KB_R4_Pin|KB_R2_Pin
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 51c7 	mov.w	r1, #6368	; 0x18e0
 8001a48:	4812      	ldr	r0, [pc, #72]	; (8001a94 <MX_GPIO_Init+0xd8>)
 8001a4a:	f005 fa53 	bl	8006ef4 <HAL_GPIO_WritePin>
                          |KB_R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KB_C2_Pin|KB_C3_Pin|KB_C1_Pin;
 8001a4e:	f240 2312 	movw	r3, #530	; 0x212
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	480c      	ldr	r0, [pc, #48]	; (8001a94 <MX_GPIO_Init+0xd8>)
 8001a64:	f004 ffca 	bl	80069fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|KB_R3_Pin|KB_R4_Pin|KB_R2_Pin
 8001a68:	f44f 53c7 	mov.w	r3, #6368	; 0x18e0
 8001a6c:	617b      	str	r3, [r7, #20]
                          |KB_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4804      	ldr	r0, [pc, #16]	; (8001a94 <MX_GPIO_Init+0xd8>)
 8001a82:	f004 ffbb 	bl	80069fc <HAL_GPIO_Init>

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020000 	.word	0x40020000

08001a98 <hts221_init>:

#include "hts221_add.h"



int32_t hts221_init(){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
	int32_t status;
	status = IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 8001a9e:	2105      	movs	r1, #5
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f003 f971 	bl	8004d88 <IKS01A2_ENV_SENSOR_Init>
 8001aa6:	6078      	str	r0, [r7, #4]
	return status;
 8001aa8:	687b      	ldr	r3, [r7, #4]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <hts221_read_temp>:

int32_t hts221_read_temp(float *temp){
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
	int32_t status;
	status = IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_TEMPERATURE, temp);
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	2101      	movs	r1, #1
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f003 fa22 	bl	8004f08 <IKS01A2_ENV_SENSOR_GetValue>
 8001ac4:	60f8      	str	r0, [r7, #12]
	return status;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <hts221_read_humid>:
int32_t hts221_read_humid(float *hum){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	int32_t status;
	status = IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_HUMIDITY, hum);
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	2104      	movs	r1, #4
 8001adc:	2000      	movs	r0, #0
 8001ade:	f003 fa13 	bl	8004f08 <IKS01A2_ENV_SENSOR_GetValue>
 8001ae2:	60f8      	str	r0, [r7, #12]
	return status;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_I2C3_Init+0x50>)
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <MX_I2C3_Init+0x54>)
 8001af8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_I2C3_Init+0x50>)
 8001afc:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <MX_I2C3_Init+0x58>)
 8001afe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_I2C3_Init+0x50>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_I2C3_Init+0x50>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_I2C3_Init+0x50>)
 8001b0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b12:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <MX_I2C3_Init+0x50>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_I2C3_Init+0x50>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <MX_I2C3_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_I2C3_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_I2C3_Init+0x50>)
 8001b2e:	f005 f9fb 	bl	8006f28 <HAL_I2C_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b38:	f000 fbd0 	bl	80022dc <Error_Handler>
  }

}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200003c8 	.word	0x200003c8
 8001b44:	40005c00 	.word	0x40005c00
 8001b48:	000186a0 	.word	0x000186a0

08001b4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a29      	ldr	r2, [pc, #164]	; (8001c10 <HAL_I2C_MspInit+0xc4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d14b      	bne.n	8001c06 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a27      	ldr	r2, [pc, #156]	; (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a20      	ldr	r2, [pc, #128]	; (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bac:	2312      	movs	r3, #18
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bb8:	2304      	movs	r3, #4
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4815      	ldr	r0, [pc, #84]	; (8001c18 <HAL_I2C_MspInit+0xcc>)
 8001bc4:	f004 ff1a 	bl	80069fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bce:	2312      	movs	r3, #18
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	480d      	ldr	r0, [pc, #52]	; (8001c1c <HAL_I2C_MspInit+0xd0>)
 8001be6:	f004 ff09 	bl	80069fc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001bf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	; 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40005c00 	.word	0x40005c00
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020800 	.word	0x40020800
 8001c1c:	40020000 	.word	0x40020000

08001c20 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <HAL_I2C_MspDeInit+0x3c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10f      	bne.n	8001c52 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_I2C_MspDeInit+0x40>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_I2C_MspDeInit+0x40>)
 8001c38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001c3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c42:	4808      	ldr	r0, [pc, #32]	; (8001c64 <HAL_I2C_MspDeInit+0x44>)
 8001c44:	f005 f85c 	bl	8006d00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8001c48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c4c:	4806      	ldr	r0, [pc, #24]	; (8001c68 <HAL_I2C_MspDeInit+0x48>)
 8001c4e:	f005 f857 	bl	8006d00 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40005c00 	.word	0x40005c00
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020000 	.word	0x40020000

08001c6c <kb_read_key>:
{7, 8, 9},
{KB_STAR, 0 , KB_HASH}};
const uint16_t kbRows[4] = {KB_R1_Pin, KB_R2_Pin, KB_R3_Pin, KB_R4_Pin};
const uint16_t kbCols[3] = {KB_C1_Pin,KB_C2_Pin,KB_C3_Pin};

uint8_t kb_read_key(){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
	uint8_t r,c;
	for(r=0;r<4;r++){
 8001c72:	2300      	movs	r3, #0
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	e02f      	b.n	8001cd8 <kb_read_key+0x6c>
		HAL_GPIO_WritePin(KB_PORT, KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8001c7e:	481a      	ldr	r0, [pc, #104]	; (8001ce8 <kb_read_key+0x7c>)
 8001c80:	f005 f938 	bl	8006ef4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(KB_PORT, kbRows[r], GPIO_PIN_RESET);
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4a19      	ldr	r2, [pc, #100]	; (8001cec <kb_read_key+0x80>)
 8001c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4815      	ldr	r0, [pc, #84]	; (8001ce8 <kb_read_key+0x7c>)
 8001c92:	f005 f92f 	bl	8006ef4 <HAL_GPIO_WritePin>
		for(c=0;c<3;c++){
 8001c96:	2300      	movs	r3, #0
 8001c98:	71bb      	strb	r3, [r7, #6]
 8001c9a:	e017      	b.n	8001ccc <kb_read_key+0x60>
			if((!HAL_GPIO_ReadPin(KB_PORT, kbCols[c]))){
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <kb_read_key+0x84>)
 8001ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4810      	ldr	r0, [pc, #64]	; (8001ce8 <kb_read_key+0x7c>)
 8001ca8:	f005 f90c 	bl	8006ec4 <HAL_GPIO_ReadPin>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <kb_read_key+0x5a>
				return kbMap[r][c];
 8001cb2:	79fa      	ldrb	r2, [r7, #7]
 8001cb4:	79b9      	ldrb	r1, [r7, #6]
 8001cb6:	480f      	ldr	r0, [pc, #60]	; (8001cf4 <kb_read_key+0x88>)
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4403      	add	r3, r0
 8001cc0:	440b      	add	r3, r1
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	e00c      	b.n	8001ce0 <kb_read_key+0x74>
		for(c=0;c<3;c++){
 8001cc6:	79bb      	ldrb	r3, [r7, #6]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	71bb      	strb	r3, [r7, #6]
 8001ccc:	79bb      	ldrb	r3, [r7, #6]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d9e4      	bls.n	8001c9c <kb_read_key+0x30>
	for(r=0;r<4;r++){
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	71fb      	strb	r3, [r7, #7]
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d9cc      	bls.n	8001c78 <kb_read_key+0xc>
			}
		}
	}
	return 0xFF; //nic nie wciśnięte
 8001cde:	23ff      	movs	r3, #255	; 0xff
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	0800d274 	.word	0x0800d274
 8001cf0:	0800d27c 	.word	0x0800d27c
 8001cf4:	0800d268 	.word	0x0800d268

08001cf8 <kb_service>:

uint8_t kb_service(){
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	while(KB_STATE==KB_STATE_IDLE || KB_STATE==KB_STATE_WAIT);
 8001cfc:	bf00      	nop
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <kb_service+0x30>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0fb      	beq.n	8001cfe <kb_service+0x6>
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <kb_service+0x30>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d0f7      	beq.n	8001cfe <kb_service+0x6>
	if(KB_STATE==KB_STATE_PRESSED)
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <kb_service+0x30>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d102      	bne.n	8001d1c <kb_service+0x24>
		return KB_KEY;
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <kb_service+0x34>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	e7ff      	b.n	8001d1c <kb_service+0x24>
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000286 	.word	0x20000286
 8001d2c:	20000000 	.word	0x20000000

08001d30 <lcd_init>:
 *      Author: Adam Siemasz
 */

#include "lcd.h"

void lcd_init(struct lcd_disp * lcd){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
	if(lcd->bl)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <lcd_init+0x1a>
		xpin = BL_PIN;
 8001d46:	2308      	movs	r3, #8
 8001d48:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(40);
 8001d4a:	2028      	movs	r0, #40	; 0x28
 8001d4c:	f003 fb08 	bl	8005360 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8BIT, xpin);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	2130      	movs	r1, #48	; 0x30
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f853 	bl	8001e04 <lcd_write>
	HAL_Delay(5);
 8001d5e:	2005      	movs	r0, #5
 8001d60:	f003 fafe 	bl	8005360 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8BIT, xpin);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	2130      	movs	r1, #48	; 0x30
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 f849 	bl	8001e04 <lcd_write>
	HAL_Delay(1);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f003 faf4 	bl	8005360 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8BIT, xpin);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	2130      	movs	r1, #48	; 0x30
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 f83f 	bl	8001e04 <lcd_write>
	HAL_Delay(10);
 8001d86:	200a      	movs	r0, #10
 8001d88:	f003 faea 	bl	8005360 <HAL_Delay>
	lcd_write(lcd->addr, INIT_4BIT, xpin);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	2102      	movs	r1, #2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 f835 	bl	8001e04 <lcd_write>
	HAL_Delay(10);
 8001d9a:	200a      	movs	r0, #10
 8001d9c:	f003 fae0 	bl	8005360 <HAL_Delay>

	lcd_write(lcd->addr,0x28,xpin); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	2128      	movs	r1, #40	; 0x28
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f82b 	bl	8001e04 <lcd_write>
	HAL_Delay(1);
 8001dae:	2001      	movs	r0, #1
 8001db0:	f003 fad6 	bl	8005360 <HAL_Delay>
	lcd_write(lcd->addr,0x08,xpin); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	2108      	movs	r1, #8
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 f821 	bl	8001e04 <lcd_write>
	HAL_Delay(1);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f003 facc 	bl	8005360 <HAL_Delay>
	lcd_clear(&disp);
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <lcd_init+0xd0>)
 8001dca:	f000 f8b3 	bl	8001f34 <lcd_clear>
	HAL_Delay(1);
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f003 fac6 	bl	8005360 <HAL_Delay>
	lcd_write(lcd->addr,0x06,xpin); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	2106      	movs	r1, #6
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 f811 	bl	8001e04 <lcd_write>
	HAL_Delay(1);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f003 fabc 	bl	8005360 <HAL_Delay>
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF,xpin);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	210c      	movs	r1, #12
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 f807 	bl	8001e04 <lcd_write>

}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000042c 	.word	0x2000042c

08001e04 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	71bb      	strb	r3, [r7, #6]
 8001e12:	4613      	mov	r3, r2
 8001e14:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8001e16:	79bb      	ldrb	r3, [r7, #6]
 8001e18:	f023 030f 	bic.w	r3, r3, #15
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	797b      	ldrb	r3, [r7, #5]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001e2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e30:	f023 030f 	bic.w	r3, r3, #15
 8001e34:	b25a      	sxtb	r2, r3
 8001e36:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8001e42:	79bb      	ldrb	r3, [r7, #6]
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	797b      	ldrb	r3, [r7, #5]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8001e56:	79bb      	ldrb	r3, [r7, #6]
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	b25a      	sxtb	r2, r3
 8001e5c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	b25b      	sxtb	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&HI2C, addr, tx_data, 4, 100);
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	b299      	uxth	r1, r3
 8001e6c:	f107 020c 	add.w	r2, r7, #12
 8001e70:	2364      	movs	r3, #100	; 0x64
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2304      	movs	r3, #4
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <lcd_write+0x88>)
 8001e78:	f005 f9be 	bl	80071f8 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001e7c:	2005      	movs	r0, #5
 8001e7e:	f003 fa6f 	bl	8005360 <HAL_Delay>
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200003c8 	.word	0x200003c8

08001e90 <lcd_display>:

void lcd_display(struct lcd_disp * lcd){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0 , i = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73bb      	strb	r3, [r7, #14]
	if(lcd->bl){
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <lcd_display+0x1e>
		xpin = BL_PIN;
 8001eaa:	2308      	movs	r3, #8
 8001eac:	73fb      	strb	r3, [r7, #15]
	}

	lcd_write(lcd->addr, LINE_1, xpin);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ffa4 	bl	8001e04 <lcd_write>
	while(lcd->f_line[i])
 8001ebc:	e00f      	b.n	8001ede <lcd_display+0x4e>
	{
		lcd_write(lcd->addr,lcd->f_line[i], (xpin | RS_PIN));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7818      	ldrb	r0, [r3, #0]
 8001ec2:	7bbb      	ldrb	r3, [r7, #14]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	7859      	ldrb	r1, [r3, #1]
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f7ff ff96 	bl	8001e04 <lcd_write>
		i++;
 8001ed8:	7bbb      	ldrb	r3, [r7, #14]
 8001eda:	3301      	adds	r3, #1
 8001edc:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001ede:	7bbb      	ldrb	r3, [r7, #14]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	785b      	ldrb	r3, [r3, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1e9      	bne.n	8001ebe <lcd_display+0x2e>
	}
	i = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, LINE_2, xpin);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	21c0      	movs	r1, #192	; 0xc0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff84 	bl	8001e04 <lcd_write>
	while(lcd->s_line[i])
 8001efc:	e00f      	b.n	8001f1e <lcd_display+0x8e>
		{
			lcd_write(lcd->addr,lcd->s_line[i], (xpin | RS_PIN));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7818      	ldrb	r0, [r3, #0]
 8001f02:	7bbb      	ldrb	r3, [r7, #14]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	7c99      	ldrb	r1, [r3, #18]
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	f7ff ff76 	bl	8001e04 <lcd_write>
			i++;
 8001f18:	7bbb      	ldrb	r3, [r7, #14]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001f1e:	7bbb      	ldrb	r3, [r7, #14]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	7c9b      	ldrb	r3, [r3, #18]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1e9      	bne.n	8001efe <lcd_display+0x6e>
		}
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	 sprintf((char *)disp.f_line, " ");
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <lcd_clear+0x40>)
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <lcd_clear+0x44>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	8013      	strh	r3, [r2, #0]
	 sprintf((char *)disp.s_line, " ");
 8001f44:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <lcd_clear+0x48>)
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <lcd_clear+0x44>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	8013      	strh	r3, [r2, #0]
	uint8_t xpin = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]
	if(lcd->bl)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <lcd_clear+0x2a>
	{
		xpin = BL_PIN;
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	73fb      	strb	r3, [r7, #15]
	}
	lcd_write(lcd->addr,LCD_CLEAR,xpin);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	2101      	movs	r1, #1
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff4c 	bl	8001e04 <lcd_write>

}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	2000042d 	.word	0x2000042d
 8001f78:	0800d088 	.word	0x0800d088
 8001f7c:	2000043e 	.word	0x2000043e

08001f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f84:	f003 f97a 	bl	800527c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f88:	f000 f8c6 	bl	8002118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f8c:	f7ff fd16 	bl	80019bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001f90:	f7ff f8ce 	bl	8001130 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f94:	f001 fac4 	bl	8003520 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001f98:	f7fe ffde 	bl	8000f58 <MX_ADC1_Init>
  MX_TIM11_Init();
 8001f9c:	f001 fa08 	bl	80033b0 <MX_TIM11_Init>
  MX_I2C3_Init();
 8001fa0:	f7ff fda6 	bl	8001af0 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001fa4:	f001 f940 	bl	8003228 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fa8:	f001 f98c 	bl	80032c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_SYSTICK_Config(72000);
 8001fac:	484a      	ldr	r0, [pc, #296]	; (80020d8 <main+0x158>)
 8001fae:	f003 fed4 	bl	8005d5a <HAL_SYSTICK_Config>
  hts221_init();
 8001fb2:	f7ff fd71 	bl	8001a98 <hts221_init>

  data_setting_init();
 8001fb6:	f000 f999 	bl	80022ec <data_setting_init>

  disp.addr = (0x27 << 1);
 8001fba:	4b48      	ldr	r3, [pc, #288]	; (80020dc <main+0x15c>)
 8001fbc:	224e      	movs	r2, #78	; 0x4e
 8001fbe:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8001fc0:	4b46      	ldr	r3, [pc, #280]	; (80020dc <main+0x15c>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 8001fc8:	4844      	ldr	r0, [pc, #272]	; (80020dc <main+0x15c>)
 8001fca:	f7ff feb1 	bl	8001d30 <lcd_init>
  sprintf((char *)disp.f_line, "Start ");
 8001fce:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <main+0x160>)
 8001fd0:	4a44      	ldr	r2, [pc, #272]	; (80020e4 <main+0x164>)
 8001fd2:	6810      	ldr	r0, [r2, #0]
 8001fd4:	6018      	str	r0, [r3, #0]
 8001fd6:	8891      	ldrh	r1, [r2, #4]
 8001fd8:	7992      	ldrb	r2, [r2, #6]
 8001fda:	8099      	strh	r1, [r3, #4]
 8001fdc:	719a      	strb	r2, [r3, #6]
  sprintf((char *) disp.s_line,"programu");
 8001fde:	4a42      	ldr	r2, [pc, #264]	; (80020e8 <main+0x168>)
 8001fe0:	4b42      	ldr	r3, [pc, #264]	; (80020ec <main+0x16c>)
 8001fe2:	cb03      	ldmia	r3!, {r0, r1}
 8001fe4:	6010      	str	r0, [r2, #0]
 8001fe6:	6051      	str	r1, [r2, #4]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	7213      	strb	r3, [r2, #8]
  lcd_display(&disp);
 8001fec:	483b      	ldr	r0, [pc, #236]	; (80020dc <main+0x15c>)
 8001fee:	f7ff ff4f 	bl	8001e90 <lcd_display>
  HAL_Delay(500);
 8001ff2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ff6:	f003 f9b3 	bl	8005360 <HAL_Delay>
  lcd_clear(&disp);
 8001ffa:	4838      	ldr	r0, [pc, #224]	; (80020dc <main+0x15c>)
 8001ffc:	f7ff ff9a 	bl	8001f34 <lcd_clear>


  HAL_FLASH_Unlock();
 8002000:	f004 fa7a 	bl	80064f8 <HAL_FLASH_Unlock>
  if(EE_Init() != HAL_OK){
 8002004:	f7ff f8b4 	bl	8001170 <EE_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <main+0x92>
	  Error_Handler();
 800200e:	f000 f965 	bl	80022dc <Error_Handler>
  }

  if(EE_ReadVariable(MIN_HUM_ADDR, &p) == 1){
 8002012:	4937      	ldr	r1, [pc, #220]	; (80020f0 <main+0x170>)
 8002014:	2001      	movs	r0, #1
 8002016:	f7ff fab1 	bl	800157c <EE_ReadVariable>
 800201a:	4603      	mov	r3, r0
 800201c:	2b01      	cmp	r3, #1
 800201e:	d120      	bne.n	8002062 <main+0xe2>
	  sprintf((char *)disp.f_line,"Loading initial ");
 8002020:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <main+0x15c>)
 8002022:	4a34      	ldr	r2, [pc, #208]	; (80020f4 <main+0x174>)
 8002024:	1c5d      	adds	r5, r3, #1
 8002026:	4614      	mov	r4, r2
 8002028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202a:	6028      	str	r0, [r5, #0]
 800202c:	6069      	str	r1, [r5, #4]
 800202e:	60aa      	str	r2, [r5, #8]
 8002030:	60eb      	str	r3, [r5, #12]
 8002032:	7823      	ldrb	r3, [r4, #0]
 8002034:	742b      	strb	r3, [r5, #16]
	  sprintf((char *)disp.s_line,"settings.");
 8002036:	4a2c      	ldr	r2, [pc, #176]	; (80020e8 <main+0x168>)
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <main+0x178>)
 800203a:	cb03      	ldmia	r3!, {r0, r1}
 800203c:	6010      	str	r0, [r2, #0]
 800203e:	6051      	str	r1, [r2, #4]
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	8113      	strh	r3, [r2, #8]
	  lcd_display(&disp);
 8002044:	4825      	ldr	r0, [pc, #148]	; (80020dc <main+0x15c>)
 8002046:	f7ff ff23 	bl	8001e90 <lcd_display>
	  data_setting_save();
 800204a:	f000 f96f 	bl	800232c <data_setting_save>
	  HAL_Delay(3000);
 800204e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002052:	f003 f985 	bl	8005360 <HAL_Delay>
	  lcd_clear(&disp);
 8002056:	4821      	ldr	r0, [pc, #132]	; (80020dc <main+0x15c>)
 8002058:	f7ff ff6c 	bl	8001f34 <lcd_clear>
	  data_setting_print();
 800205c:	f000 fc58 	bl	8002910 <data_setting_print>
 8002060:	e01e      	b.n	80020a0 <main+0x120>

  }
  else{
	  sprintf((char *)disp.f_line,"Loading settings");
 8002062:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <main+0x15c>)
 8002064:	4a25      	ldr	r2, [pc, #148]	; (80020fc <main+0x17c>)
 8002066:	1c5d      	adds	r5, r3, #1
 8002068:	4614      	mov	r4, r2
 800206a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206c:	6028      	str	r0, [r5, #0]
 800206e:	6069      	str	r1, [r5, #4]
 8002070:	60aa      	str	r2, [r5, #8]
 8002072:	60eb      	str	r3, [r5, #12]
 8002074:	7823      	ldrb	r3, [r4, #0]
 8002076:	742b      	strb	r3, [r5, #16]
	  sprintf((char *)disp.s_line,"from memory.");
 8002078:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <main+0x168>)
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <main+0x180>)
 800207c:	4614      	mov	r4, r2
 800207e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002080:	6020      	str	r0, [r4, #0]
 8002082:	6061      	str	r1, [r4, #4]
 8002084:	60a2      	str	r2, [r4, #8]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	7323      	strb	r3, [r4, #12]
	  data_setting_load();
 800208a:	f000 f987 	bl	800239c <data_setting_load>
	  HAL_Delay(3000);
 800208e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002092:	f003 f965 	bl	8005360 <HAL_Delay>
	  lcd_clear(&disp);
 8002096:	4811      	ldr	r0, [pc, #68]	; (80020dc <main+0x15c>)
 8002098:	f7ff ff4c 	bl	8001f34 <lcd_clear>
	  data_setting_print();
 800209c:	f000 fc38 	bl	8002910 <data_setting_print>
  }


  HAL_ADC_Start_DMA(&hadc1, &s, 1);
 80020a0:	2201      	movs	r2, #1
 80020a2:	4918      	ldr	r1, [pc, #96]	; (8002104 <main+0x184>)
 80020a4:	4818      	ldr	r0, [pc, #96]	; (8002108 <main+0x188>)
 80020a6:	f003 f9c1 	bl	800542c <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim11);
 80020aa:	4818      	ldr	r0, [pc, #96]	; (800210c <main+0x18c>)
 80020ac:	f006 fd47 	bl	8008b3e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80020b0:	4817      	ldr	r0, [pc, #92]	; (8002110 <main+0x190>)
 80020b2:	f006 fd44 	bl	8008b3e <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(setting_mode == 0)
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <main+0x194>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d103      	bne.n	80020c6 <main+0x146>
		lcd_display(&disp);
 80020be:	4807      	ldr	r0, [pc, #28]	; (80020dc <main+0x15c>)
 80020c0:	f7ff fee6 	bl	8001e90 <lcd_display>
 80020c4:	e7f7      	b.n	80020b6 <main+0x136>
	else{
		data_setting_enter();
 80020c6:	f000 f9a9 	bl	800241c <data_setting_enter>
		data_setting_save();
 80020ca:	f000 f92f 	bl	800232c <data_setting_save>
		setting_mode = 0;
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <main+0x194>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
	if(setting_mode == 0)
 80020d4:	e7ef      	b.n	80020b6 <main+0x136>
 80020d6:	bf00      	nop
 80020d8:	00011940 	.word	0x00011940
 80020dc:	2000042c 	.word	0x2000042c
 80020e0:	2000042d 	.word	0x2000042d
 80020e4:	0800d08c 	.word	0x0800d08c
 80020e8:	2000043e 	.word	0x2000043e
 80020ec:	0800d094 	.word	0x0800d094
 80020f0:	20000424 	.word	0x20000424
 80020f4:	0800d0a0 	.word	0x0800d0a0
 80020f8:	0800d0b4 	.word	0x0800d0b4
 80020fc:	0800d0c0 	.word	0x0800d0c0
 8002100:	0800d0d4 	.word	0x0800d0d4
 8002104:	20000428 	.word	0x20000428
 8002108:	20000320 	.word	0x20000320
 800210c:	20000510 	.word	0x20000510
 8002110:	20000550 	.word	0x20000550
 8002114:	20000288 	.word	0x20000288

08002118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b094      	sub	sp, #80	; 0x50
 800211c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211e:	f107 0320 	add.w	r3, r7, #32
 8002122:	2230      	movs	r2, #48	; 0x30
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f008 f8de 	bl	800a2e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <SystemClock_Config+0xd0>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a28      	ldr	r2, [pc, #160]	; (80021e8 <SystemClock_Config+0xd0>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <SystemClock_Config+0xd0>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <SystemClock_Config+0xd4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002164:	4a21      	ldr	r2, [pc, #132]	; (80021ec <SystemClock_Config+0xd4>)
 8002166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <SystemClock_Config+0xd4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002178:	2302      	movs	r3, #2
 800217a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800217c:	2301      	movs	r3, #1
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002180:	2310      	movs	r3, #16
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002184:	2302      	movs	r3, #2
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002188:	2300      	movs	r3, #0
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800218c:	2310      	movs	r3, #16
 800218e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 8002190:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002194:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002196:	2304      	movs	r3, #4
 8002198:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800219a:	2307      	movs	r3, #7
 800219c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800219e:	f107 0320 	add.w	r3, r7, #32
 80021a2:	4618      	mov	r0, r3
 80021a4:	f006 f83e 	bl	8008224 <HAL_RCC_OscConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80021ae:	f000 f895 	bl	80022dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021b2:	230f      	movs	r3, #15
 80021b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b6:	2302      	movs	r3, #2
 80021b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	2102      	movs	r1, #2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f006 fa98 	bl	8008704 <HAL_RCC_ClockConfig>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80021da:	f000 f87f 	bl	80022dc <Error_Handler>
  }
}
 80021de:	bf00      	nop
 80021e0:	3750      	adds	r7, #80	; 0x50
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40007000 	.word	0x40007000

080021f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11 ){
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a30      	ldr	r2, [pc, #192]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d124      	bne.n	800224c <HAL_TIM_PeriodElapsedCallback+0x5c>
		uint8_t temp_key = kb_read_key();
 8002202:	f7ff fd33 	bl	8001c6c <kb_read_key>
 8002206:	4603      	mov	r3, r0
 8002208:	73fb      	strb	r3, [r7, #15]

		if(temp_key==0xFF)
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	2bff      	cmp	r3, #255	; 0xff
 800220e:	d103      	bne.n	8002218 <HAL_TIM_PeriodElapsedCallback+0x28>
		KB_STATE=KB_STATE_IDLE;
 8002210:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
 8002216:	e00e      	b.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x46>
		else if(temp_key==KB_KEY)
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	429a      	cmp	r2, r3
 8002220:	d103      	bne.n	800222a <HAL_TIM_PeriodElapsedCallback+0x3a>
		KB_STATE=KB_STATE_PRESSED;
 8002222:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	e005      	b.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x46>
		else{
		KB_STATE=KB_STATE_WAIT;
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800222c:	2202      	movs	r2, #2
 800222e:	701a      	strb	r2, [r3, #0]
		KB_KEY=temp_key;
 8002230:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	7013      	strb	r3, [r2, #0]
		}
		if(KB_STATE == KB_STATE_PRESSED && KB_KEY==KB_HASH)
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d106      	bne.n	800224c <HAL_TIM_PeriodElapsedCallback+0x5c>
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b0b      	cmp	r3, #11
 8002244:	d102      	bne.n	800224c <HAL_TIM_PeriodElapsedCallback+0x5c>
			setting_mode = 1;
 8002246:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
	}


	if(htim->Instance == TIM2){
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002254:	d131      	bne.n	80022ba <HAL_TIM_PeriodElapsedCallback+0xca>
		if(setting_mode)
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d12c      	bne.n	80022b8 <HAL_TIM_PeriodElapsedCallback+0xc8>
			return;
		get_data();
 800225e:	f000 fbf5 	bl	8002a4c <get_data>
		data_status = check_data();
 8002262:	f000 fd6b 	bl	8002d3c <check_data>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800226c:	701a      	strb	r2, [r3, #0]
		if(data_status == S_OK){
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d103      	bne.n	800227e <HAL_TIM_PeriodElapsedCallback+0x8e>
			print_data(&disp);
 8002276:	4817      	ldr	r0, [pc, #92]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002278:	f000 fc4a 	bl	8002b10 <print_data>
 800227c:	e01d      	b.n	80022ba <HAL_TIM_PeriodElapsedCallback+0xca>
		}
		else{
			if(alert_mode == 1){
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10d      	bne.n	80022a2 <HAL_TIM_PeriodElapsedCallback+0xb2>
				print_alert((int)data_status,&disp);
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4912      	ldr	r1, [pc, #72]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800228c:	4618      	mov	r0, r3
 800228e:	f000 fce7 	bl	8002c60 <print_alert>
				buzzer_alarm(1, 200);
 8002292:	21c8      	movs	r1, #200	; 0xc8
 8002294:	2001      	movs	r0, #1
 8002296:	f7fe ff2b 	bl	80010f0 <buzzer_alarm>
				alert_mode = 0;
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	e00b      	b.n	80022ba <HAL_TIM_PeriodElapsedCallback+0xca>
			}
			else if(alert_mode == 0 ){
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d107      	bne.n	80022ba <HAL_TIM_PeriodElapsedCallback+0xca>
				print_data(&disp);
 80022aa:	480a      	ldr	r0, [pc, #40]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80022ac:	f000 fc30 	bl	8002b10 <print_data>
				alert_mode = 1;
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e000      	b.n	80022ba <HAL_TIM_PeriodElapsedCallback+0xca>
			return;
 80022b8:	bf00      	nop
			}
		}

	}
}
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40014800 	.word	0x40014800
 80022c4:	20000286 	.word	0x20000286
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000288 	.word	0x20000288
 80022d0:	20000450 	.word	0x20000450
 80022d4:	2000042c 	.word	0x2000042c
 80022d8:	20000287 	.word	0x20000287

080022dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//lcd_display(0, 0, "Error occured!");
	HAL_Delay(5000);
 80022e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80022e4:	f003 f83c 	bl	8005360 <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}

080022ec <data_setting_init>:

data current_data;
data setting_min;
data setting_max;

void data_setting_init(){
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
	setting_min.humid = 50.00;
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <data_setting_init+0x28>)
 80022f2:	4a09      	ldr	r2, [pc, #36]	; (8002318 <data_setting_init+0x2c>)
 80022f4:	605a      	str	r2, [r3, #4]
	setting_min.temp = 18.00;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <data_setting_init+0x28>)
 80022f8:	4a08      	ldr	r2, [pc, #32]	; (800231c <data_setting_init+0x30>)
 80022fa:	601a      	str	r2, [r3, #0]
	setting_max.humid = 70.00;
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <data_setting_init+0x34>)
 80022fe:	4a09      	ldr	r2, [pc, #36]	; (8002324 <data_setting_init+0x38>)
 8002300:	605a      	str	r2, [r3, #4]
	setting_max.temp = 30.00;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <data_setting_init+0x34>)
 8002304:	4a08      	ldr	r2, [pc, #32]	; (8002328 <data_setting_init+0x3c>)
 8002306:	601a      	str	r2, [r3, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000460 	.word	0x20000460
 8002318:	42480000 	.word	0x42480000
 800231c:	41900000 	.word	0x41900000
 8002320:	20000470 	.word	0x20000470
 8002324:	428c0000 	.word	0x428c0000
 8002328:	41f00000 	.word	0x41f00000

0800232c <data_setting_save>:

void data_setting_save(){
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	EE_WriteVariable(MIN_HUM_ADDR, (uint16_t) setting_min.humid);
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <data_setting_save+0x68>)
 8002332:	edd3 7a01 	vldr	s15, [r3, #4]
 8002336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800233a:	ee17 3a90 	vmov	r3, s15
 800233e:	b29b      	uxth	r3, r3
 8002340:	4619      	mov	r1, r3
 8002342:	2001      	movs	r0, #1
 8002344:	f7ff f964 	bl	8001610 <EE_WriteVariable>
	EE_WriteVariable(MAX_HUM_ADDR, (uint16_t) setting_max.humid);
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <data_setting_save+0x6c>)
 800234a:	edd3 7a01 	vldr	s15, [r3, #4]
 800234e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002352:	ee17 3a90 	vmov	r3, s15
 8002356:	b29b      	uxth	r3, r3
 8002358:	4619      	mov	r1, r3
 800235a:	2002      	movs	r0, #2
 800235c:	f7ff f958 	bl	8001610 <EE_WriteVariable>
	EE_WriteVariable(MIN_TEMP_ADDR, (uint16_t) setting_min.temp);
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <data_setting_save+0x68>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800236a:	ee17 3a90 	vmov	r3, s15
 800236e:	b29b      	uxth	r3, r3
 8002370:	4619      	mov	r1, r3
 8002372:	2003      	movs	r0, #3
 8002374:	f7ff f94c 	bl	8001610 <EE_WriteVariable>
	EE_WriteVariable(MAX_TEMP_ADDR, (uint16_t) setting_max.temp);
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <data_setting_save+0x6c>)
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002382:	ee17 3a90 	vmov	r3, s15
 8002386:	b29b      	uxth	r3, r3
 8002388:	4619      	mov	r1, r3
 800238a:	2004      	movs	r0, #4
 800238c:	f7ff f940 	bl	8001610 <EE_WriteVariable>
}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000460 	.word	0x20000460
 8002398:	20000470 	.word	0x20000470

0800239c <data_setting_load>:

void data_setting_load(){
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
	uint16_t buf;
	EE_ReadVariable(MIN_HUM_ADDR, &buf);
 80023a2:	1dbb      	adds	r3, r7, #6
 80023a4:	4619      	mov	r1, r3
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7ff f8e8 	bl	800157c <EE_ReadVariable>
	setting_min.humid = (float) buf;
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <data_setting_load+0x78>)
 80023b8:	edc3 7a01 	vstr	s15, [r3, #4]

	EE_ReadVariable(MAX_HUM_ADDR, &buf);
 80023bc:	1dbb      	adds	r3, r7, #6
 80023be:	4619      	mov	r1, r3
 80023c0:	2002      	movs	r0, #2
 80023c2:	f7ff f8db 	bl	800157c <EE_ReadVariable>
	setting_max.humid = (float) buf;
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <data_setting_load+0x7c>)
 80023d2:	edc3 7a01 	vstr	s15, [r3, #4]

	EE_ReadVariable(MIN_TEMP_ADDR, &buf);
 80023d6:	1dbb      	adds	r3, r7, #6
 80023d8:	4619      	mov	r1, r3
 80023da:	2003      	movs	r0, #3
 80023dc:	f7ff f8ce 	bl	800157c <EE_ReadVariable>
	setting_min.temp = (float) buf;
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <data_setting_load+0x78>)
 80023ec:	edc3 7a00 	vstr	s15, [r3]

	EE_ReadVariable(MAX_TEMP_ADDR, &buf);
 80023f0:	1dbb      	adds	r3, r7, #6
 80023f2:	4619      	mov	r1, r3
 80023f4:	2004      	movs	r0, #4
 80023f6:	f7ff f8c1 	bl	800157c <EE_ReadVariable>
	setting_max.temp = (float) buf;
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <data_setting_load+0x7c>)
 8002406:	edc3 7a00 	vstr	s15, [r3]
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000460 	.word	0x20000460
 8002418:	20000470 	.word	0x20000470

0800241c <data_setting_enter>:

void data_setting_enter(){
 800241c:	b5b0      	push	{r4, r5, r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
	float s=0;
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
	char buf[2];
	uint8_t key;
	sprintf((char *)disp.f_line,"Enter settings! ");
 8002428:	4ba1      	ldr	r3, [pc, #644]	; (80026b0 <data_setting_enter+0x294>)
 800242a:	4aa2      	ldr	r2, [pc, #648]	; (80026b4 <data_setting_enter+0x298>)
 800242c:	1c5d      	adds	r5, r3, #1
 800242e:	4614      	mov	r4, r2
 8002430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002432:	6028      	str	r0, [r5, #0]
 8002434:	6069      	str	r1, [r5, #4]
 8002436:	60aa      	str	r2, [r5, #8]
 8002438:	60eb      	str	r3, [r5, #12]
 800243a:	7823      	ldrb	r3, [r4, #0]
 800243c:	742b      	strb	r3, [r5, #16]
	sprintf((char *)disp.s_line,"                ");
 800243e:	4b9c      	ldr	r3, [pc, #624]	; (80026b0 <data_setting_enter+0x294>)
 8002440:	4a9d      	ldr	r2, [pc, #628]	; (80026b8 <data_setting_enter+0x29c>)
 8002442:	f103 0512 	add.w	r5, r3, #18
 8002446:	4614      	mov	r4, r2
 8002448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244a:	6028      	str	r0, [r5, #0]
 800244c:	6069      	str	r1, [r5, #4]
 800244e:	60aa      	str	r2, [r5, #8]
 8002450:	60eb      	str	r3, [r5, #12]
 8002452:	7823      	ldrb	r3, [r4, #0]
 8002454:	742b      	strb	r3, [r5, #16]
	usart_send_string("Setting mode...");
 8002456:	4899      	ldr	r0, [pc, #612]	; (80026bc <data_setting_enter+0x2a0>)
 8002458:	f001 f8d4 	bl	8003604 <usart_send_string>
	lcd_display(&disp);
 800245c:	4894      	ldr	r0, [pc, #592]	; (80026b0 <data_setting_enter+0x294>)
 800245e:	f7ff fd17 	bl	8001e90 <lcd_display>
	HAL_Delay(2000);
 8002462:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002466:	f002 ff7b 	bl	8005360 <HAL_Delay>
	lcd_clear(&disp);
 800246a:	4891      	ldr	r0, [pc, #580]	; (80026b0 <data_setting_enter+0x294>)
 800246c:	f7ff fd62 	bl	8001f34 <lcd_clear>

	int i;

	sprintf((char *)disp.f_line,"Min. humid.: ");
 8002470:	4a93      	ldr	r2, [pc, #588]	; (80026c0 <data_setting_enter+0x2a4>)
 8002472:	4b94      	ldr	r3, [pc, #592]	; (80026c4 <data_setting_enter+0x2a8>)
 8002474:	4614      	mov	r4, r2
 8002476:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002478:	6020      	str	r0, [r4, #0]
 800247a:	6061      	str	r1, [r4, #4]
 800247c:	60a2      	str	r2, [r4, #8]
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	81a3      	strh	r3, [r4, #12]
	sprintf((char *)disp.s_line,"");
 8002482:	4b8b      	ldr	r3, [pc, #556]	; (80026b0 <data_setting_enter+0x294>)
 8002484:	2200      	movs	r2, #0
 8002486:	749a      	strb	r2, [r3, #18]
	lcd_display(&disp);
 8002488:	4889      	ldr	r0, [pc, #548]	; (80026b0 <data_setting_enter+0x294>)
 800248a:	f7ff fd01 	bl	8001e90 <lcd_display>
	for(i=0 ; i<4 ; i++){
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	e068      	b.n	8002566 <data_setting_enter+0x14a>
		key = kb_service();
 8002494:	f7ff fc30 	bl	8001cf8 <kb_service>
 8002498:	4603      	mov	r3, r0
 800249a:	71fb      	strb	r3, [r7, #7]
		sprintf(buf,"%d",key);
 800249c:	79fa      	ldrb	r2, [r7, #7]
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	4989      	ldr	r1, [pc, #548]	; (80026c8 <data_setting_enter+0x2ac>)
 80024a2:	4618      	mov	r0, r3
 80024a4:	f008 fb84 	bl	800abb0 <siprintf>
		strncat(disp.s_line,buf,1);
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2201      	movs	r2, #1
 80024ac:	4619      	mov	r1, r3
 80024ae:	4887      	ldr	r0, [pc, #540]	; (80026cc <data_setting_enter+0x2b0>)
 80024b0:	f008 fb9e 	bl	800abf0 <strncat>
		if(i==1)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d10b      	bne.n	80024d2 <data_setting_enter+0xb6>
			strncat(disp.s_line,".",1);
 80024ba:	4884      	ldr	r0, [pc, #528]	; (80026cc <data_setting_enter+0x2b0>)
 80024bc:	f7fd fe90 	bl	80001e0 <strlen>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b81      	ldr	r3, [pc, #516]	; (80026cc <data_setting_enter+0x2b0>)
 80024c6:	4413      	add	r3, r2
 80024c8:	4981      	ldr	r1, [pc, #516]	; (80026d0 <data_setting_enter+0x2b4>)
 80024ca:	461a      	mov	r2, r3
 80024cc:	460b      	mov	r3, r1
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	8013      	strh	r3, [r2, #0]
		lcd_display(&disp);
 80024d2:	4877      	ldr	r0, [pc, #476]	; (80026b0 <data_setting_enter+0x294>)
 80024d4:	f7ff fcdc 	bl	8001e90 <lcd_display>
		s += 10.0/powf(10.0,(float)i) * (float)key;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e2:	eef0 0a67 	vmov.f32	s1, s15
 80024e6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80024ea:	f00a f8b9 	bl	800c660 <powf>
 80024ee:	ee10 3a10 	vmov	r3, s0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f830 	bl	8000558 <__aeabi_f2d>
 80024f8:	4603      	mov	r3, r0
 80024fa:	460c      	mov	r4, r1
 80024fc:	461a      	mov	r2, r3
 80024fe:	4623      	mov	r3, r4
 8002500:	f04f 0000 	mov.w	r0, #0
 8002504:	4973      	ldr	r1, [pc, #460]	; (80026d4 <data_setting_enter+0x2b8>)
 8002506:	f7fe f9a9 	bl	800085c <__aeabi_ddiv>
 800250a:	4603      	mov	r3, r0
 800250c:	460c      	mov	r4, r1
 800250e:	4625      	mov	r5, r4
 8002510:	461c      	mov	r4, r3
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	ee07 3a90 	vmov	s15, r3
 8002518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251c:	ee17 0a90 	vmov	r0, s15
 8002520:	f7fe f81a 	bl	8000558 <__aeabi_f2d>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4620      	mov	r0, r4
 800252a:	4629      	mov	r1, r5
 800252c:	f7fe f86c 	bl	8000608 <__aeabi_dmul>
 8002530:	4603      	mov	r3, r0
 8002532:	460c      	mov	r4, r1
 8002534:	4625      	mov	r5, r4
 8002536:	461c      	mov	r4, r3
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f7fe f80d 	bl	8000558 <__aeabi_f2d>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4620      	mov	r0, r4
 8002544:	4629      	mov	r1, r5
 8002546:	f7fd fea9 	bl	800029c <__adddf3>
 800254a:	4603      	mov	r3, r0
 800254c:	460c      	mov	r4, r1
 800254e:	4618      	mov	r0, r3
 8002550:	4621      	mov	r1, r4
 8002552:	f7fe fb31 	bl	8000bb8 <__aeabi_d2f>
 8002556:	4603      	mov	r3, r0
 8002558:	60fb      	str	r3, [r7, #12]
		HAL_Delay(100);
 800255a:	2064      	movs	r0, #100	; 0x64
 800255c:	f002 ff00 	bl	8005360 <HAL_Delay>
	for(i=0 ; i<4 ; i++){
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	3301      	adds	r3, #1
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b03      	cmp	r3, #3
 800256a:	dd93      	ble.n	8002494 <data_setting_enter+0x78>
	}
	lcd_clear(&disp);
 800256c:	4850      	ldr	r0, [pc, #320]	; (80026b0 <data_setting_enter+0x294>)
 800256e:	f7ff fce1 	bl	8001f34 <lcd_clear>
	setting_min.humid = s;
 8002572:	4a59      	ldr	r2, [pc, #356]	; (80026d8 <data_setting_enter+0x2bc>)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6053      	str	r3, [r2, #4]
	s=0;
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]

	sprintf((char *)disp.f_line,"Max. humid.: ");
 800257e:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <data_setting_enter+0x2a4>)
 8002580:	4b56      	ldr	r3, [pc, #344]	; (80026dc <data_setting_enter+0x2c0>)
 8002582:	4614      	mov	r4, r2
 8002584:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002586:	6020      	str	r0, [r4, #0]
 8002588:	6061      	str	r1, [r4, #4]
 800258a:	60a2      	str	r2, [r4, #8]
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	81a3      	strh	r3, [r4, #12]
	sprintf((char *)disp.s_line,"");
 8002590:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <data_setting_enter+0x294>)
 8002592:	2200      	movs	r2, #0
 8002594:	749a      	strb	r2, [r3, #18]
	lcd_display(&disp);
 8002596:	4846      	ldr	r0, [pc, #280]	; (80026b0 <data_setting_enter+0x294>)
 8002598:	f7ff fc7a 	bl	8001e90 <lcd_display>
	for(i=0 ; i<4 ; i++){
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	e068      	b.n	8002674 <data_setting_enter+0x258>
		key = kb_service();
 80025a2:	f7ff fba9 	bl	8001cf8 <kb_service>
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
		sprintf(buf,"%d",key);
 80025aa:	79fa      	ldrb	r2, [r7, #7]
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	4946      	ldr	r1, [pc, #280]	; (80026c8 <data_setting_enter+0x2ac>)
 80025b0:	4618      	mov	r0, r3
 80025b2:	f008 fafd 	bl	800abb0 <siprintf>
		strncat(disp.s_line,buf,1);
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	2201      	movs	r2, #1
 80025ba:	4619      	mov	r1, r3
 80025bc:	4843      	ldr	r0, [pc, #268]	; (80026cc <data_setting_enter+0x2b0>)
 80025be:	f008 fb17 	bl	800abf0 <strncat>
		if(i==1)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10b      	bne.n	80025e0 <data_setting_enter+0x1c4>
			strncat(disp.s_line,".",1);
 80025c8:	4840      	ldr	r0, [pc, #256]	; (80026cc <data_setting_enter+0x2b0>)
 80025ca:	f7fd fe09 	bl	80001e0 <strlen>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b3e      	ldr	r3, [pc, #248]	; (80026cc <data_setting_enter+0x2b0>)
 80025d4:	4413      	add	r3, r2
 80025d6:	493e      	ldr	r1, [pc, #248]	; (80026d0 <data_setting_enter+0x2b4>)
 80025d8:	461a      	mov	r2, r3
 80025da:	460b      	mov	r3, r1
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	8013      	strh	r3, [r2, #0]
		lcd_display(&disp);
 80025e0:	4833      	ldr	r0, [pc, #204]	; (80026b0 <data_setting_enter+0x294>)
 80025e2:	f7ff fc55 	bl	8001e90 <lcd_display>
		s += 10.0/powf(10.0,(float)i) * (float)key;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	ee07 3a90 	vmov	s15, r3
 80025ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f0:	eef0 0a67 	vmov.f32	s1, s15
 80025f4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80025f8:	f00a f832 	bl	800c660 <powf>
 80025fc:	ee10 3a10 	vmov	r3, s0
 8002600:	4618      	mov	r0, r3
 8002602:	f7fd ffa9 	bl	8000558 <__aeabi_f2d>
 8002606:	4603      	mov	r3, r0
 8002608:	460c      	mov	r4, r1
 800260a:	461a      	mov	r2, r3
 800260c:	4623      	mov	r3, r4
 800260e:	f04f 0000 	mov.w	r0, #0
 8002612:	4930      	ldr	r1, [pc, #192]	; (80026d4 <data_setting_enter+0x2b8>)
 8002614:	f7fe f922 	bl	800085c <__aeabi_ddiv>
 8002618:	4603      	mov	r3, r0
 800261a:	460c      	mov	r4, r1
 800261c:	4625      	mov	r5, r4
 800261e:	461c      	mov	r4, r3
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800262a:	ee17 0a90 	vmov	r0, s15
 800262e:	f7fd ff93 	bl	8000558 <__aeabi_f2d>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4620      	mov	r0, r4
 8002638:	4629      	mov	r1, r5
 800263a:	f7fd ffe5 	bl	8000608 <__aeabi_dmul>
 800263e:	4603      	mov	r3, r0
 8002640:	460c      	mov	r4, r1
 8002642:	4625      	mov	r5, r4
 8002644:	461c      	mov	r4, r3
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f7fd ff86 	bl	8000558 <__aeabi_f2d>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4620      	mov	r0, r4
 8002652:	4629      	mov	r1, r5
 8002654:	f7fd fe22 	bl	800029c <__adddf3>
 8002658:	4603      	mov	r3, r0
 800265a:	460c      	mov	r4, r1
 800265c:	4618      	mov	r0, r3
 800265e:	4621      	mov	r1, r4
 8002660:	f7fe faaa 	bl	8000bb8 <__aeabi_d2f>
 8002664:	4603      	mov	r3, r0
 8002666:	60fb      	str	r3, [r7, #12]
		HAL_Delay(100);
 8002668:	2064      	movs	r0, #100	; 0x64
 800266a:	f002 fe79 	bl	8005360 <HAL_Delay>
	for(i=0 ; i<4 ; i++){
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	3301      	adds	r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b03      	cmp	r3, #3
 8002678:	dd93      	ble.n	80025a2 <data_setting_enter+0x186>
	}
	lcd_clear(&disp);
 800267a:	480d      	ldr	r0, [pc, #52]	; (80026b0 <data_setting_enter+0x294>)
 800267c:	f7ff fc5a 	bl	8001f34 <lcd_clear>
	setting_max.humid = s;
 8002680:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <data_setting_enter+0x2c4>)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6053      	str	r3, [r2, #4]
	s=0;
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]

	sprintf((char *)disp.f_line,"Min. temp.: ");
 800268c:	4a0c      	ldr	r2, [pc, #48]	; (80026c0 <data_setting_enter+0x2a4>)
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <data_setting_enter+0x2c8>)
 8002690:	4614      	mov	r4, r2
 8002692:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002694:	6020      	str	r0, [r4, #0]
 8002696:	6061      	str	r1, [r4, #4]
 8002698:	60a2      	str	r2, [r4, #8]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	7323      	strb	r3, [r4, #12]
	sprintf((char *)disp.s_line,"");
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <data_setting_enter+0x294>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	749a      	strb	r2, [r3, #18]
	lcd_display(&disp);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <data_setting_enter+0x294>)
 80026a6:	f7ff fbf3 	bl	8001e90 <lcd_display>
	for(i=0 ; i<4 ; i++){
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	e084      	b.n	80027ba <data_setting_enter+0x39e>
 80026b0:	2000042c 	.word	0x2000042c
 80026b4:	0800d0e4 	.word	0x0800d0e4
 80026b8:	0800d0f8 	.word	0x0800d0f8
 80026bc:	0800d10c 	.word	0x0800d10c
 80026c0:	2000042d 	.word	0x2000042d
 80026c4:	0800d11c 	.word	0x0800d11c
 80026c8:	0800d12c 	.word	0x0800d12c
 80026cc:	2000043e 	.word	0x2000043e
 80026d0:	0800d130 	.word	0x0800d130
 80026d4:	40240000 	.word	0x40240000
 80026d8:	20000460 	.word	0x20000460
 80026dc:	0800d134 	.word	0x0800d134
 80026e0:	20000470 	.word	0x20000470
 80026e4:	0800d144 	.word	0x0800d144
		key = kb_service();
 80026e8:	f7ff fb06 	bl	8001cf8 <kb_service>
 80026ec:	4603      	mov	r3, r0
 80026ee:	71fb      	strb	r3, [r7, #7]
		sprintf(buf,"%d",key);
 80026f0:	79fa      	ldrb	r2, [r7, #7]
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	497c      	ldr	r1, [pc, #496]	; (80028e8 <data_setting_enter+0x4cc>)
 80026f6:	4618      	mov	r0, r3
 80026f8:	f008 fa5a 	bl	800abb0 <siprintf>
		strncat(disp.s_line,buf,1);
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	2201      	movs	r2, #1
 8002700:	4619      	mov	r1, r3
 8002702:	487a      	ldr	r0, [pc, #488]	; (80028ec <data_setting_enter+0x4d0>)
 8002704:	f008 fa74 	bl	800abf0 <strncat>
		if(i==1)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d10b      	bne.n	8002726 <data_setting_enter+0x30a>
			strncat(disp.s_line,".",1);
 800270e:	4877      	ldr	r0, [pc, #476]	; (80028ec <data_setting_enter+0x4d0>)
 8002710:	f7fd fd66 	bl	80001e0 <strlen>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	4b74      	ldr	r3, [pc, #464]	; (80028ec <data_setting_enter+0x4d0>)
 800271a:	4413      	add	r3, r2
 800271c:	4974      	ldr	r1, [pc, #464]	; (80028f0 <data_setting_enter+0x4d4>)
 800271e:	461a      	mov	r2, r3
 8002720:	460b      	mov	r3, r1
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	8013      	strh	r3, [r2, #0]
		lcd_display(&disp);
 8002726:	4873      	ldr	r0, [pc, #460]	; (80028f4 <data_setting_enter+0x4d8>)
 8002728:	f7ff fbb2 	bl	8001e90 <lcd_display>
		s += 10.0/powf(10.0,(float)i) * (float)key;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002736:	eef0 0a67 	vmov.f32	s1, s15
 800273a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800273e:	f009 ff8f 	bl	800c660 <powf>
 8002742:	ee10 3a10 	vmov	r3, s0
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd ff06 	bl	8000558 <__aeabi_f2d>
 800274c:	4603      	mov	r3, r0
 800274e:	460c      	mov	r4, r1
 8002750:	461a      	mov	r2, r3
 8002752:	4623      	mov	r3, r4
 8002754:	f04f 0000 	mov.w	r0, #0
 8002758:	4967      	ldr	r1, [pc, #412]	; (80028f8 <data_setting_enter+0x4dc>)
 800275a:	f7fe f87f 	bl	800085c <__aeabi_ddiv>
 800275e:	4603      	mov	r3, r0
 8002760:	460c      	mov	r4, r1
 8002762:	4625      	mov	r5, r4
 8002764:	461c      	mov	r4, r3
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	ee07 3a90 	vmov	s15, r3
 800276c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002770:	ee17 0a90 	vmov	r0, s15
 8002774:	f7fd fef0 	bl	8000558 <__aeabi_f2d>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4620      	mov	r0, r4
 800277e:	4629      	mov	r1, r5
 8002780:	f7fd ff42 	bl	8000608 <__aeabi_dmul>
 8002784:	4603      	mov	r3, r0
 8002786:	460c      	mov	r4, r1
 8002788:	4625      	mov	r5, r4
 800278a:	461c      	mov	r4, r3
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7fd fee3 	bl	8000558 <__aeabi_f2d>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4620      	mov	r0, r4
 8002798:	4629      	mov	r1, r5
 800279a:	f7fd fd7f 	bl	800029c <__adddf3>
 800279e:	4603      	mov	r3, r0
 80027a0:	460c      	mov	r4, r1
 80027a2:	4618      	mov	r0, r3
 80027a4:	4621      	mov	r1, r4
 80027a6:	f7fe fa07 	bl	8000bb8 <__aeabi_d2f>
 80027aa:	4603      	mov	r3, r0
 80027ac:	60fb      	str	r3, [r7, #12]
		HAL_Delay(100);
 80027ae:	2064      	movs	r0, #100	; 0x64
 80027b0:	f002 fdd6 	bl	8005360 <HAL_Delay>
	for(i=0 ; i<4 ; i++){
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	3301      	adds	r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	dd93      	ble.n	80026e8 <data_setting_enter+0x2cc>
	}
	lcd_clear(&disp);
 80027c0:	484c      	ldr	r0, [pc, #304]	; (80028f4 <data_setting_enter+0x4d8>)
 80027c2:	f7ff fbb7 	bl	8001f34 <lcd_clear>
	setting_min.temp = s;
 80027c6:	4a4d      	ldr	r2, [pc, #308]	; (80028fc <data_setting_enter+0x4e0>)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6013      	str	r3, [r2, #0]
	s=0;
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]

	sprintf((char *)disp.f_line,"Max. temp.: ");
 80027d2:	4a4b      	ldr	r2, [pc, #300]	; (8002900 <data_setting_enter+0x4e4>)
 80027d4:	4b4b      	ldr	r3, [pc, #300]	; (8002904 <data_setting_enter+0x4e8>)
 80027d6:	4614      	mov	r4, r2
 80027d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027da:	6020      	str	r0, [r4, #0]
 80027dc:	6061      	str	r1, [r4, #4]
 80027de:	60a2      	str	r2, [r4, #8]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	7323      	strb	r3, [r4, #12]
	sprintf((char *)disp.s_line,"");
 80027e4:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <data_setting_enter+0x4d8>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	749a      	strb	r2, [r3, #18]
	lcd_display(&disp);
 80027ea:	4842      	ldr	r0, [pc, #264]	; (80028f4 <data_setting_enter+0x4d8>)
 80027ec:	f7ff fb50 	bl	8001e90 <lcd_display>
	for(i=0 ; i<4 ; i++){
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	e068      	b.n	80028c8 <data_setting_enter+0x4ac>
		key = kb_service();
 80027f6:	f7ff fa7f 	bl	8001cf8 <kb_service>
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
		sprintf(buf,"%d",key);
 80027fe:	79fa      	ldrb	r2, [r7, #7]
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	4939      	ldr	r1, [pc, #228]	; (80028e8 <data_setting_enter+0x4cc>)
 8002804:	4618      	mov	r0, r3
 8002806:	f008 f9d3 	bl	800abb0 <siprintf>
		strncat(disp.s_line,buf,1);
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2201      	movs	r2, #1
 800280e:	4619      	mov	r1, r3
 8002810:	4836      	ldr	r0, [pc, #216]	; (80028ec <data_setting_enter+0x4d0>)
 8002812:	f008 f9ed 	bl	800abf0 <strncat>
		if(i==1)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10b      	bne.n	8002834 <data_setting_enter+0x418>
			strncat(disp.s_line,".",1);
 800281c:	4833      	ldr	r0, [pc, #204]	; (80028ec <data_setting_enter+0x4d0>)
 800281e:	f7fd fcdf 	bl	80001e0 <strlen>
 8002822:	4603      	mov	r3, r0
 8002824:	461a      	mov	r2, r3
 8002826:	4b31      	ldr	r3, [pc, #196]	; (80028ec <data_setting_enter+0x4d0>)
 8002828:	4413      	add	r3, r2
 800282a:	4931      	ldr	r1, [pc, #196]	; (80028f0 <data_setting_enter+0x4d4>)
 800282c:	461a      	mov	r2, r3
 800282e:	460b      	mov	r3, r1
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	8013      	strh	r3, [r2, #0]
		lcd_display(&disp);
 8002834:	482f      	ldr	r0, [pc, #188]	; (80028f4 <data_setting_enter+0x4d8>)
 8002836:	f7ff fb2b 	bl	8001e90 <lcd_display>
		s += 10.0/powf(10.0,(float)i) * (float)key;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	ee07 3a90 	vmov	s15, r3
 8002840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002844:	eef0 0a67 	vmov.f32	s1, s15
 8002848:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800284c:	f009 ff08 	bl	800c660 <powf>
 8002850:	ee10 3a10 	vmov	r3, s0
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fe7f 	bl	8000558 <__aeabi_f2d>
 800285a:	4603      	mov	r3, r0
 800285c:	460c      	mov	r4, r1
 800285e:	461a      	mov	r2, r3
 8002860:	4623      	mov	r3, r4
 8002862:	f04f 0000 	mov.w	r0, #0
 8002866:	4924      	ldr	r1, [pc, #144]	; (80028f8 <data_setting_enter+0x4dc>)
 8002868:	f7fd fff8 	bl	800085c <__aeabi_ddiv>
 800286c:	4603      	mov	r3, r0
 800286e:	460c      	mov	r4, r1
 8002870:	4625      	mov	r5, r4
 8002872:	461c      	mov	r4, r3
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287e:	ee17 0a90 	vmov	r0, s15
 8002882:	f7fd fe69 	bl	8000558 <__aeabi_f2d>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4620      	mov	r0, r4
 800288c:	4629      	mov	r1, r5
 800288e:	f7fd febb 	bl	8000608 <__aeabi_dmul>
 8002892:	4603      	mov	r3, r0
 8002894:	460c      	mov	r4, r1
 8002896:	4625      	mov	r5, r4
 8002898:	461c      	mov	r4, r3
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f7fd fe5c 	bl	8000558 <__aeabi_f2d>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4620      	mov	r0, r4
 80028a6:	4629      	mov	r1, r5
 80028a8:	f7fd fcf8 	bl	800029c <__adddf3>
 80028ac:	4603      	mov	r3, r0
 80028ae:	460c      	mov	r4, r1
 80028b0:	4618      	mov	r0, r3
 80028b2:	4621      	mov	r1, r4
 80028b4:	f7fe f980 	bl	8000bb8 <__aeabi_d2f>
 80028b8:	4603      	mov	r3, r0
 80028ba:	60fb      	str	r3, [r7, #12]
		HAL_Delay(100);
 80028bc:	2064      	movs	r0, #100	; 0x64
 80028be:	f002 fd4f 	bl	8005360 <HAL_Delay>
	for(i=0 ; i<4 ; i++){
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	dd93      	ble.n	80027f6 <data_setting_enter+0x3da>
	}
	lcd_clear(&disp);
 80028ce:	4809      	ldr	r0, [pc, #36]	; (80028f4 <data_setting_enter+0x4d8>)
 80028d0:	f7ff fb30 	bl	8001f34 <lcd_clear>
	setting_max.temp = s;
 80028d4:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <data_setting_enter+0x4ec>)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6013      	str	r3, [r2, #0]
	usart_send_string("Settings saved.");
 80028da:	480c      	ldr	r0, [pc, #48]	; (800290c <data_setting_enter+0x4f0>)
 80028dc:	f000 fe92 	bl	8003604 <usart_send_string>
}
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bdb0      	pop	{r4, r5, r7, pc}
 80028e8:	0800d12c 	.word	0x0800d12c
 80028ec:	2000043e 	.word	0x2000043e
 80028f0:	0800d130 	.word	0x0800d130
 80028f4:	2000042c 	.word	0x2000042c
 80028f8:	40240000 	.word	0x40240000
 80028fc:	20000460 	.word	0x20000460
 8002900:	2000042d 	.word	0x2000042d
 8002904:	0800d154 	.word	0x0800d154
 8002908:	20000470 	.word	0x20000470
 800290c:	0800d164 	.word	0x0800d164

08002910 <data_setting_print>:

void data_setting_print(){
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
	lcd_clear(&disp);
 8002916:	4843      	ldr	r0, [pc, #268]	; (8002a24 <data_setting_print+0x114>)
 8002918:	f7ff fb0c 	bl	8001f34 <lcd_clear>
	char buf[3];

	sprintf(buf,"%f",setting_min.humid);
 800291c:	4b42      	ldr	r3, [pc, #264]	; (8002a28 <data_setting_print+0x118>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fe19 	bl	8000558 <__aeabi_f2d>
 8002926:	4603      	mov	r3, r0
 8002928:	460c      	mov	r4, r1
 800292a:	1d38      	adds	r0, r7, #4
 800292c:	461a      	mov	r2, r3
 800292e:	4623      	mov	r3, r4
 8002930:	493e      	ldr	r1, [pc, #248]	; (8002a2c <data_setting_print+0x11c>)
 8002932:	f008 f93d 	bl	800abb0 <siprintf>
	sprintf((char *)disp.f_line,"Min. hum:");
 8002936:	4a3e      	ldr	r2, [pc, #248]	; (8002a30 <data_setting_print+0x120>)
 8002938:	4b3e      	ldr	r3, [pc, #248]	; (8002a34 <data_setting_print+0x124>)
 800293a:	cb03      	ldmia	r3!, {r0, r1}
 800293c:	6010      	str	r0, [r2, #0]
 800293e:	6051      	str	r1, [r2, #4]
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	8113      	strh	r3, [r2, #8]
	strncat((char *)disp.f_line,buf,5);
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	2205      	movs	r2, #5
 8002948:	4619      	mov	r1, r3
 800294a:	4839      	ldr	r0, [pc, #228]	; (8002a30 <data_setting_print+0x120>)
 800294c:	f008 f950 	bl	800abf0 <strncat>

	sprintf(buf,"%f",setting_max.humid);
 8002950:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <data_setting_print+0x128>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fdff 	bl	8000558 <__aeabi_f2d>
 800295a:	4603      	mov	r3, r0
 800295c:	460c      	mov	r4, r1
 800295e:	1d38      	adds	r0, r7, #4
 8002960:	461a      	mov	r2, r3
 8002962:	4623      	mov	r3, r4
 8002964:	4931      	ldr	r1, [pc, #196]	; (8002a2c <data_setting_print+0x11c>)
 8002966:	f008 f923 	bl	800abb0 <siprintf>
	sprintf((char *)disp.s_line,"Max. hum:");
 800296a:	4a34      	ldr	r2, [pc, #208]	; (8002a3c <data_setting_print+0x12c>)
 800296c:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <data_setting_print+0x130>)
 800296e:	cb03      	ldmia	r3!, {r0, r1}
 8002970:	6010      	str	r0, [r2, #0]
 8002972:	6051      	str	r1, [r2, #4]
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	8113      	strh	r3, [r2, #8]
	strncat((char *)disp.s_line,buf,5);
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	2205      	movs	r2, #5
 800297c:	4619      	mov	r1, r3
 800297e:	482f      	ldr	r0, [pc, #188]	; (8002a3c <data_setting_print+0x12c>)
 8002980:	f008 f936 	bl	800abf0 <strncat>

	lcd_display(&disp);
 8002984:	4827      	ldr	r0, [pc, #156]	; (8002a24 <data_setting_print+0x114>)
 8002986:	f7ff fa83 	bl	8001e90 <lcd_display>
	HAL_Delay(5000);
 800298a:	f241 3088 	movw	r0, #5000	; 0x1388
 800298e:	f002 fce7 	bl	8005360 <HAL_Delay>
	lcd_clear(&disp);
 8002992:	4824      	ldr	r0, [pc, #144]	; (8002a24 <data_setting_print+0x114>)
 8002994:	f7ff face 	bl	8001f34 <lcd_clear>

	sprintf(buf,"%f",setting_min.temp);
 8002998:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <data_setting_print+0x118>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fddb 	bl	8000558 <__aeabi_f2d>
 80029a2:	4603      	mov	r3, r0
 80029a4:	460c      	mov	r4, r1
 80029a6:	1d38      	adds	r0, r7, #4
 80029a8:	461a      	mov	r2, r3
 80029aa:	4623      	mov	r3, r4
 80029ac:	491f      	ldr	r1, [pc, #124]	; (8002a2c <data_setting_print+0x11c>)
 80029ae:	f008 f8ff 	bl	800abb0 <siprintf>
	sprintf((char *)disp.f_line,"Min. temp:");
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <data_setting_print+0x120>)
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <data_setting_print+0x134>)
 80029b6:	cb03      	ldmia	r3!, {r0, r1}
 80029b8:	6010      	str	r0, [r2, #0]
 80029ba:	6051      	str	r1, [r2, #4]
 80029bc:	8819      	ldrh	r1, [r3, #0]
 80029be:	789b      	ldrb	r3, [r3, #2]
 80029c0:	8111      	strh	r1, [r2, #8]
 80029c2:	7293      	strb	r3, [r2, #10]
	strncat((char *)disp.f_line,buf,5);
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2205      	movs	r2, #5
 80029c8:	4619      	mov	r1, r3
 80029ca:	4819      	ldr	r0, [pc, #100]	; (8002a30 <data_setting_print+0x120>)
 80029cc:	f008 f910 	bl	800abf0 <strncat>

	sprintf(buf,"%f",setting_max.temp);
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <data_setting_print+0x128>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fdbf 	bl	8000558 <__aeabi_f2d>
 80029da:	4603      	mov	r3, r0
 80029dc:	460c      	mov	r4, r1
 80029de:	1d38      	adds	r0, r7, #4
 80029e0:	461a      	mov	r2, r3
 80029e2:	4623      	mov	r3, r4
 80029e4:	4911      	ldr	r1, [pc, #68]	; (8002a2c <data_setting_print+0x11c>)
 80029e6:	f008 f8e3 	bl	800abb0 <siprintf>
	sprintf((char *)disp.s_line,"Max. temp:");
 80029ea:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <data_setting_print+0x12c>)
 80029ec:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <data_setting_print+0x138>)
 80029ee:	cb03      	ldmia	r3!, {r0, r1}
 80029f0:	6010      	str	r0, [r2, #0]
 80029f2:	6051      	str	r1, [r2, #4]
 80029f4:	8819      	ldrh	r1, [r3, #0]
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	8111      	strh	r1, [r2, #8]
 80029fa:	7293      	strb	r3, [r2, #10]
	strncat((char *)disp.s_line,buf,5);
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	2205      	movs	r2, #5
 8002a00:	4619      	mov	r1, r3
 8002a02:	480e      	ldr	r0, [pc, #56]	; (8002a3c <data_setting_print+0x12c>)
 8002a04:	f008 f8f4 	bl	800abf0 <strncat>

	lcd_display(&disp);
 8002a08:	4806      	ldr	r0, [pc, #24]	; (8002a24 <data_setting_print+0x114>)
 8002a0a:	f7ff fa41 	bl	8001e90 <lcd_display>
	HAL_Delay(5000);
 8002a0e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002a12:	f002 fca5 	bl	8005360 <HAL_Delay>
	lcd_clear(&disp);
 8002a16:	4803      	ldr	r0, [pc, #12]	; (8002a24 <data_setting_print+0x114>)
 8002a18:	f7ff fa8c 	bl	8001f34 <lcd_clear>
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd90      	pop	{r4, r7, pc}
 8002a24:	2000042c 	.word	0x2000042c
 8002a28:	20000460 	.word	0x20000460
 8002a2c:	0800d174 	.word	0x0800d174
 8002a30:	2000042d 	.word	0x2000042d
 8002a34:	0800d178 	.word	0x0800d178
 8002a38:	20000470 	.word	0x20000470
 8002a3c:	2000043e 	.word	0x2000043e
 8002a40:	0800d184 	.word	0x0800d184
 8002a44:	0800d190 	.word	0x0800d190
 8002a48:	0800d19c 	.word	0x0800d19c

08002a4c <get_data>:

void get_data(){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	hts221_read_humid(&(current_data.humid));
 8002a50:	4807      	ldr	r0, [pc, #28]	; (8002a70 <get_data+0x24>)
 8002a52:	f7ff f83d 	bl	8001ad0 <hts221_read_humid>
	hts221_read_temp(&(current_data.temp));
 8002a56:	4807      	ldr	r0, [pc, #28]	; (8002a74 <get_data+0x28>)
 8002a58:	f7ff f82b 	bl	8001ab2 <hts221_read_temp>
	current_data.soil = convert_moisture(s);
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <get_data+0x2c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 f80b 	bl	8002a7c <convert_moisture>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b02      	ldr	r3, [pc, #8]	; (8002a74 <get_data+0x28>)
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000458 	.word	0x20000458
 8002a74:	20000454 	.word	0x20000454
 8002a78:	20000428 	.word	0x20000428

08002a7c <convert_moisture>:

char* convert_moisture(uint32_t adc_data){
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	intervals = (wet_val-dry_val)/4;
 8002a84:	23a0      	movs	r3, #160	; 0xa0
 8002a86:	461a      	mov	r2, r3
 8002a88:	2314      	movs	r3, #20
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	da00      	bge.n	8002a92 <convert_moisture+0x16>
 8002a90:	3303      	adds	r3, #3
 8002a92:	109b      	asrs	r3, r3, #2
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b19      	ldr	r3, [pc, #100]	; (8002afc <convert_moisture+0x80>)
 8002a98:	701a      	strb	r2, [r3, #0]
	if(adc_data < intervals)
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <convert_moisture+0x80>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d201      	bcs.n	8002aaa <convert_moisture+0x2e>
		return "dry";
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <convert_moisture+0x84>)
 8002aa8:	e022      	b.n	8002af0 <convert_moisture+0x74>
	else if(adc_data >= intervals && adc_data < 2*intervals)
 8002aaa:	4b14      	ldr	r3, [pc, #80]	; (8002afc <convert_moisture+0x80>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d308      	bcc.n	8002ac8 <convert_moisture+0x4c>
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <convert_moisture+0x80>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	461a      	mov	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d201      	bcs.n	8002ac8 <convert_moisture+0x4c>
		return "little wet";
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <convert_moisture+0x88>)
 8002ac6:	e013      	b.n	8002af0 <convert_moisture+0x74>
	else if(adc_data>= 2*intervals && adc_data < 3*intervals)
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <convert_moisture+0x80>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d30b      	bcc.n	8002aee <convert_moisture+0x72>
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <convert_moisture+0x80>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d201      	bcs.n	8002aee <convert_moisture+0x72>
		return "wet";
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <convert_moisture+0x8c>)
 8002aec:	e000      	b.n	8002af0 <convert_moisture+0x74>
	else
		return "very wet";
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <convert_moisture+0x90>)
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	2000046c 	.word	0x2000046c
 8002b00:	0800d1a8 	.word	0x0800d1a8
 8002b04:	0800d1ac 	.word	0x0800d1ac
 8002b08:	0800d1b8 	.word	0x0800d1b8
 8002b0c:	0800d1bc 	.word	0x0800d1bc

08002b10 <print_data>:

void print_data(struct lcd_disp *disp){
 8002b10:	b5b0      	push	{r4, r5, r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	char arr1[5];
	char arr2[5];
	char zeros[8] = "        ";
 8002b18:	4a48      	ldr	r2, [pc, #288]	; (8002c3c <print_data+0x12c>)
 8002b1a:	f107 0308 	add.w	r3, r7, #8
 8002b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b22:	e883 0003 	stmia.w	r3, {r0, r1}
	gcvt(current_data.humid,4,arr1);
 8002b26:	4b46      	ldr	r3, [pc, #280]	; (8002c40 <print_data+0x130>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fd14 	bl	8000558 <__aeabi_f2d>
 8002b30:	4604      	mov	r4, r0
 8002b32:	460d      	mov	r5, r1
 8002b34:	f107 0318 	add.w	r3, r7, #24
 8002b38:	4619      	mov	r1, r3
 8002b3a:	2004      	movs	r0, #4
 8002b3c:	ec45 4b10 	vmov	d0, r4, r5
 8002b40:	f007 fb7c 	bl	800a23c <gcvt>
	gcvt(current_data.temp,4,arr2);
 8002b44:	4b3e      	ldr	r3, [pc, #248]	; (8002c40 <print_data+0x130>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fd05 	bl	8000558 <__aeabi_f2d>
 8002b4e:	4604      	mov	r4, r0
 8002b50:	460d      	mov	r5, r1
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	4619      	mov	r1, r3
 8002b58:	2004      	movs	r0, #4
 8002b5a:	ec45 4b10 	vmov	d0, r4, r5
 8002b5e:	f007 fb6d 	bl	800a23c <gcvt>

	sprintf((char *)disp->f_line, "H:");
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3301      	adds	r3, #1
 8002b66:	4a37      	ldr	r2, [pc, #220]	; (8002c44 <print_data+0x134>)
 8002b68:	8811      	ldrh	r1, [r2, #0]
 8002b6a:	7892      	ldrb	r2, [r2, #2]
 8002b6c:	8019      	strh	r1, [r3, #0]
 8002b6e:	709a      	strb	r2, [r3, #2]
	strncat(disp->f_line, arr1,5);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3301      	adds	r3, #1
 8002b74:	f107 0118 	add.w	r1, r7, #24
 8002b78:	2205      	movs	r2, #5
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f008 f838 	bl	800abf0 <strncat>
	strncat(disp->f_line,"  T:",4);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	1c5c      	adds	r4, r3, #1
 8002b84:	4620      	mov	r0, r4
 8002b86:	f7fd fb2b 	bl	80001e0 <strlen>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4423      	add	r3, r4
 8002b8e:	4a2e      	ldr	r2, [pc, #184]	; (8002c48 <print_data+0x138>)
 8002b90:	6810      	ldr	r0, [r2, #0]
 8002b92:	6018      	str	r0, [r3, #0]
 8002b94:	7912      	ldrb	r2, [r2, #4]
 8002b96:	711a      	strb	r2, [r3, #4]
	strncat(disp->f_line,arr2,5);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f107 0110 	add.w	r1, r7, #16
 8002ba0:	2205      	movs	r2, #5
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f008 f824 	bl	800abf0 <strncat>
	sprintf((char *)disp->s_line, "Soil: ");
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3312      	adds	r3, #18
 8002bac:	4a27      	ldr	r2, [pc, #156]	; (8002c4c <print_data+0x13c>)
 8002bae:	6810      	ldr	r0, [r2, #0]
 8002bb0:	6018      	str	r0, [r3, #0]
 8002bb2:	8891      	ldrh	r1, [r2, #4]
 8002bb4:	7992      	ldrb	r2, [r2, #6]
 8002bb6:	8099      	strh	r1, [r3, #4]
 8002bb8:	719a      	strb	r2, [r3, #6]
	strncat(disp->s_line,current_data.soil,strlen(current_data.soil));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f103 0412 	add.w	r4, r3, #18
 8002bc0:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <print_data+0x130>)
 8002bc2:	689d      	ldr	r5, [r3, #8]
 8002bc4:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <print_data+0x130>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fb09 	bl	80001e0 <strlen>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f008 f80b 	bl	800abf0 <strncat>
	strncat(disp->s_line,zeros,16-6-strlen(current_data.soil));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f103 0412 	add.w	r4, r3, #18
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <print_data+0x130>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd fafb 	bl	80001e0 <strlen>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f1c3 020a 	rsb	r2, r3, #10
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f007 fffa 	bl	800abf0 <strncat>
	usart_send_string("Hum: ");
 8002bfc:	4814      	ldr	r0, [pc, #80]	; (8002c50 <print_data+0x140>)
 8002bfe:	f000 fd01 	bl	8003604 <usart_send_string>
	usart_send_string(arr1);
 8002c02:	f107 0318 	add.w	r3, r7, #24
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fcfc 	bl	8003604 <usart_send_string>
	usart_send_string("    Temp: ");
 8002c0c:	4811      	ldr	r0, [pc, #68]	; (8002c54 <print_data+0x144>)
 8002c0e:	f000 fcf9 	bl	8003604 <usart_send_string>
	usart_send_string(arr2);
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fcf4 	bl	8003604 <usart_send_string>
	usart_send_string("    Soil: ");
 8002c1c:	480e      	ldr	r0, [pc, #56]	; (8002c58 <print_data+0x148>)
 8002c1e:	f000 fcf1 	bl	8003604 <usart_send_string>
	usart_send_string(current_data.soil);
 8002c22:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <print_data+0x130>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fcec 	bl	8003604 <usart_send_string>
	usart_send_string("\n\r");
 8002c2c:	480b      	ldr	r0, [pc, #44]	; (8002c5c <print_data+0x14c>)
 8002c2e:	f000 fce9 	bl	8003604 <usart_send_string>
}
 8002c32:	bf00      	nop
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bdb0      	pop	{r4, r5, r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	0800d200 	.word	0x0800d200
 8002c40:	20000454 	.word	0x20000454
 8002c44:	0800d1c8 	.word	0x0800d1c8
 8002c48:	0800d1cc 	.word	0x0800d1cc
 8002c4c:	0800d1d4 	.word	0x0800d1d4
 8002c50:	0800d1dc 	.word	0x0800d1dc
 8002c54:	0800d1e4 	.word	0x0800d1e4
 8002c58:	0800d1f0 	.word	0x0800d1f0
 8002c5c:	0800d1fc 	.word	0x0800d1fc

08002c60 <print_alert>:

void print_alert(int e, struct lcd_disp *disp){
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
	sprintf((char *)disp->f_line, "ALERT!          ");
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	4a2d      	ldr	r2, [pc, #180]	; (8002d24 <print_alert+0xc4>)
 8002c70:	461d      	mov	r5, r3
 8002c72:	4614      	mov	r4, r2
 8002c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c76:	6028      	str	r0, [r5, #0]
 8002c78:	6069      	str	r1, [r5, #4]
 8002c7a:	60aa      	str	r2, [r5, #8]
 8002c7c:	60eb      	str	r3, [r5, #12]
 8002c7e:	7823      	ldrb	r3, [r4, #0]
 8002c80:	742b      	strb	r3, [r5, #16]
	switch(e){
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d83a      	bhi.n	8002d00 <print_alert+0xa0>
 8002c8a:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <print_alert+0x30>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002cbb 	.word	0x08002cbb
 8002c94:	08002ca1 	.word	0x08002ca1
 8002c98:	08002ceb 	.word	0x08002ceb
 8002c9c:	08002cd1 	.word	0x08002cd1
	case S_HIGHTEMP:
		sprintf((char *)disp->s_line,"Temp too high!  "); break;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	3312      	adds	r3, #18
 8002ca4:	4a20      	ldr	r2, [pc, #128]	; (8002d28 <print_alert+0xc8>)
 8002ca6:	461d      	mov	r5, r3
 8002ca8:	4614      	mov	r4, r2
 8002caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cac:	6028      	str	r0, [r5, #0]
 8002cae:	6069      	str	r1, [r5, #4]
 8002cb0:	60aa      	str	r2, [r5, #8]
 8002cb2:	60eb      	str	r3, [r5, #12]
 8002cb4:	7823      	ldrb	r3, [r4, #0]
 8002cb6:	742b      	strb	r3, [r5, #16]
 8002cb8:	e022      	b.n	8002d00 <print_alert+0xa0>
	case S_LOWTEMP:
		sprintf((char *)disp->s_line,"Temp too low!  "); break;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	3312      	adds	r3, #18
 8002cbe:	4a1b      	ldr	r2, [pc, #108]	; (8002d2c <print_alert+0xcc>)
 8002cc0:	461c      	mov	r4, r3
 8002cc2:	4615      	mov	r5, r2
 8002cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cc6:	6020      	str	r0, [r4, #0]
 8002cc8:	6061      	str	r1, [r4, #4]
 8002cca:	60a2      	str	r2, [r4, #8]
 8002ccc:	60e3      	str	r3, [r4, #12]
 8002cce:	e017      	b.n	8002d00 <print_alert+0xa0>
	case S_HIGHHUM:
		sprintf((char *)disp->s_line, "Hum too high!   "); break;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	3312      	adds	r3, #18
 8002cd4:	4a16      	ldr	r2, [pc, #88]	; (8002d30 <print_alert+0xd0>)
 8002cd6:	461d      	mov	r5, r3
 8002cd8:	4614      	mov	r4, r2
 8002cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cdc:	6028      	str	r0, [r5, #0]
 8002cde:	6069      	str	r1, [r5, #4]
 8002ce0:	60aa      	str	r2, [r5, #8]
 8002ce2:	60eb      	str	r3, [r5, #12]
 8002ce4:	7823      	ldrb	r3, [r4, #0]
 8002ce6:	742b      	strb	r3, [r5, #16]
 8002ce8:	e00a      	b.n	8002d00 <print_alert+0xa0>
	case S_LOWHUM:
		sprintf((char *)disp->s_line, "Hum too low!   "); break;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	3312      	adds	r3, #18
 8002cee:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <print_alert+0xd4>)
 8002cf0:	461c      	mov	r4, r3
 8002cf2:	4615      	mov	r5, r2
 8002cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf6:	6020      	str	r0, [r4, #0]
 8002cf8:	6061      	str	r1, [r4, #4]
 8002cfa:	60a2      	str	r2, [r4, #8]
 8002cfc:	60e3      	str	r3, [r4, #12]
 8002cfe:	bf00      	nop
	}
	usart_send_string(disp->f_line);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fc7d 	bl	8003604 <usart_send_string>
	usart_send_string(disp->s_line);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	3312      	adds	r3, #18
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fc78 	bl	8003604 <usart_send_string>
	usart_send_string("\n\r");
 8002d14:	4808      	ldr	r0, [pc, #32]	; (8002d38 <print_alert+0xd8>)
 8002d16:	f000 fc75 	bl	8003604 <usart_send_string>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bdb0      	pop	{r4, r5, r7, pc}
 8002d22:	bf00      	nop
 8002d24:	0800d20c 	.word	0x0800d20c
 8002d28:	0800d220 	.word	0x0800d220
 8002d2c:	0800d234 	.word	0x0800d234
 8002d30:	0800d244 	.word	0x0800d244
 8002d34:	0800d258 	.word	0x0800d258
 8002d38:	0800d1fc 	.word	0x0800d1fc

08002d3c <check_data>:

uint8_t check_data(){
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
	if(current_data.temp > setting_max.temp)
 8002d40:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <check_data+0x78>)
 8002d42:	ed93 7a00 	vldr	s14, [r3]
 8002d46:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <check_data+0x7c>)
 8002d48:	edd3 7a00 	vldr	s15, [r3]
 8002d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d54:	dd01      	ble.n	8002d5a <check_data+0x1e>
		return S_HIGHTEMP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	e027      	b.n	8002daa <check_data+0x6e>
	if(current_data.temp < setting_min.temp)
 8002d5a:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <check_data+0x78>)
 8002d5c:	ed93 7a00 	vldr	s14, [r3]
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <check_data+0x80>)
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6e:	d501      	bpl.n	8002d74 <check_data+0x38>
		return S_LOWTEMP;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e01a      	b.n	8002daa <check_data+0x6e>
	if(current_data.humid > setting_max.humid)
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <check_data+0x78>)
 8002d76:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <check_data+0x7c>)
 8002d7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d88:	dd01      	ble.n	8002d8e <check_data+0x52>
		return S_HIGHHUM;
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	e00d      	b.n	8002daa <check_data+0x6e>
	if(current_data.humid < setting_min.humid)
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <check_data+0x78>)
 8002d90:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <check_data+0x80>)
 8002d96:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da2:	d501      	bpl.n	8002da8 <check_data+0x6c>
		return S_LOWHUM;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e000      	b.n	8002daa <check_data+0x6e>
	return S_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	20000454 	.word	0x20000454
 8002db8:	20000470 	.word	0x20000470
 8002dbc:	20000460 	.word	0x20000460

08002dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <HAL_MspInit+0x4c>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	4a0f      	ldr	r2, [pc, #60]	; (8002e0c <HAL_MspInit+0x4c>)
 8002dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <HAL_MspInit+0x4c>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dde:	607b      	str	r3, [r7, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_MspInit+0x4c>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	4a08      	ldr	r2, [pc, #32]	; (8002e0c <HAL_MspInit+0x4c>)
 8002dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df0:	6413      	str	r3, [r2, #64]	; 0x40
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_MspInit+0x4c>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002dfe:	2007      	movs	r0, #7
 8002e00:	f002 ff76 	bl	8005cf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40023800 	.word	0x40023800

08002e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e22:	e7fe      	b.n	8002e22 <HardFault_Handler+0x4>

08002e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e28:	e7fe      	b.n	8002e28 <MemManage_Handler+0x4>

08002e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e2e:	e7fe      	b.n	8002e2e <BusFault_Handler+0x4>

08002e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e34:	e7fe      	b.n	8002e34 <UsageFault_Handler+0x4>

08002e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(delay_counter){
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <SysTick_Handler+0x2c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <SysTick_Handler+0x22>
		if(--delay_counter == 0)
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <SysTick_Handler+0x2c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	4a06      	ldr	r2, [pc, #24]	; (8002e8c <SysTick_Handler+0x2c>)
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d103      	bne.n	8002e82 <SysTick_Handler+0x22>
			HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4804      	ldr	r0, [pc, #16]	; (8002e90 <SysTick_Handler+0x30>)
 8002e7e:	f005 fee9 	bl	8008c54 <HAL_TIM_PWM_Stop>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e82:	f002 fa4d 	bl	8005320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	2000028c 	.word	0x2000028c
 8002e90:	200004d0 	.word	0x200004d0

08002e94 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002e98:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002e9a:	f005 ff27 	bl	8008cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000510 	.word	0x20000510

08002ea8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002eac:	4802      	ldr	r0, [pc, #8]	; (8002eb8 <TIM2_IRQHandler+0x10>)
 8002eae:	f005 ff1d 	bl	8008cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000550 	.word	0x20000550

08002ebc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <DMA2_Stream0_IRQHandler+0x10>)
 8002ec2:	f003 f85d 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000368 	.word	0x20000368

08002ed0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <BSP_I2C1_Init+0x58>)
 8002edc:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <BSP_I2C1_Init+0x5c>)
 8002ede:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002ee0:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <BSP_I2C1_Init+0x60>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	4912      	ldr	r1, [pc, #72]	; (8002f30 <BSP_I2C1_Init+0x60>)
 8002ee8:	600a      	str	r2, [r1, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d117      	bne.n	8002f1e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002eee:	480e      	ldr	r0, [pc, #56]	; (8002f28 <BSP_I2C1_Init+0x58>)
 8002ef0:	f004 fda0 	bl	8007a34 <HAL_I2C_GetState>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d111      	bne.n	8002f1e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002efa:	480b      	ldr	r0, [pc, #44]	; (8002f28 <BSP_I2C1_Init+0x58>)
 8002efc:	f000 f8e2 	bl	80030c4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10b      	bne.n	8002f1e <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002f06:	4808      	ldr	r0, [pc, #32]	; (8002f28 <BSP_I2C1_Init+0x58>)
 8002f08:	f000 f8a8 	bl	800305c <MX_I2C1_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8002f12:	f06f 0307 	mvn.w	r3, #7
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	e001      	b.n	8002f1e <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002f1e:	687b      	ldr	r3, [r7, #4]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	2000047c 	.word	0x2000047c
 8002f2c:	40005400 	.word	0x40005400
 8002f30:	20000290 	.word	0x20000290

08002f34 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <BSP_I2C1_DeInit+0x48>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d014      	beq.n	8002f70 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <BSP_I2C1_DeInit+0x48>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <BSP_I2C1_DeInit+0x48>)
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <BSP_I2C1_DeInit+0x48>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10b      	bne.n	8002f70 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002f58:	4809      	ldr	r0, [pc, #36]	; (8002f80 <BSP_I2C1_DeInit+0x4c>)
 8002f5a:	f000 f8fd 	bl	8003158 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002f5e:	4808      	ldr	r0, [pc, #32]	; (8002f80 <BSP_I2C1_DeInit+0x4c>)
 8002f60:	f004 f91a 	bl	8007198 <HAL_I2C_DeInit>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002f6a:	f06f 0307 	mvn.w	r3, #7
 8002f6e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002f70:	687b      	ldr	r3, [r7, #4]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000290 	.word	0x20000290
 8002f80:	2000047c 	.word	0x2000047c

08002f84 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af04      	add	r7, sp, #16
 8002f8a:	60ba      	str	r2, [r7, #8]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	81fb      	strh	r3, [r7, #14]
 8002f92:	460b      	mov	r3, r1
 8002f94:	81bb      	strh	r3, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002f9e:	89ba      	ldrh	r2, [r7, #12]
 8002fa0:	89f9      	ldrh	r1, [r7, #14]
 8002fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa6:	9302      	str	r3, [sp, #8]
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	480c      	ldr	r0, [pc, #48]	; (8002fe4 <BSP_I2C1_WriteReg+0x60>)
 8002fb4:	f004 fa1e 	bl	80073f4 <HAL_I2C_Mem_Write>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00c      	beq.n	8002fd8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002fbe:	4809      	ldr	r0, [pc, #36]	; (8002fe4 <BSP_I2C1_WriteReg+0x60>)
 8002fc0:	f004 fd46 	bl	8007a50 <HAL_I2C_GetError>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d103      	bne.n	8002fd2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002fca:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	e002      	b.n	8002fd8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002fd2:	f06f 0303 	mvn.w	r3, #3
 8002fd6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002fd8:	697b      	ldr	r3, [r7, #20]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000047c 	.word	0x2000047c

08002fe8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af04      	add	r7, sp, #16
 8002fee:	60ba      	str	r2, [r7, #8]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	81fb      	strh	r3, [r7, #14]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	81bb      	strh	r3, [r7, #12]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003002:	89ba      	ldrh	r2, [r7, #12]
 8003004:	89f9      	ldrh	r1, [r7, #14]
 8003006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300a:	9302      	str	r3, [sp, #8]
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2301      	movs	r3, #1
 8003016:	480c      	ldr	r0, [pc, #48]	; (8003048 <BSP_I2C1_ReadReg+0x60>)
 8003018:	f004 fae6 	bl	80075e8 <HAL_I2C_Mem_Read>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00c      	beq.n	800303c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8003022:	4809      	ldr	r0, [pc, #36]	; (8003048 <BSP_I2C1_ReadReg+0x60>)
 8003024:	f004 fd14 	bl	8007a50 <HAL_I2C_GetError>
 8003028:	4603      	mov	r3, r0
 800302a:	2b04      	cmp	r3, #4
 800302c:	d103      	bne.n	8003036 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800302e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e002      	b.n	800303c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003036:	f06f 0303 	mvn.w	r3, #3
 800303a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800303c:	697b      	ldr	r3, [r7, #20]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	2000047c 	.word	0x2000047c

0800304c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003050:	f002 f97a 	bl	8005348 <HAL_GetTick>
 8003054:	4603      	mov	r3, r0
}
 8003056:	4618      	mov	r0, r3
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a14      	ldr	r2, [pc, #80]	; (80030bc <MX_I2C1_Init+0x60>)
 800306c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <MX_I2C1_Init+0x64>)
 8003072:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003086:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f003 ff41 	bl	8006f28 <HAL_I2C_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40005400 	.word	0x40005400
 80030c0:	00061a80 	.word	0x00061a80

080030c4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030cc:	2300      	movs	r3, #0
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <I2C1_MspInit+0x8c>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	4a1e      	ldr	r2, [pc, #120]	; (8003150 <I2C1_MspInit+0x8c>)
 80030d6:	f043 0302 	orr.w	r3, r3, #2
 80030da:	6313      	str	r3, [r2, #48]	; 0x30
 80030dc:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <I2C1_MspInit+0x8c>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80030e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ee:	2312      	movs	r3, #18
 80030f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030f2:	2301      	movs	r3, #1
 80030f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f6:	2303      	movs	r3, #3
 80030f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80030fa:	2304      	movs	r3, #4
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80030fe:	f107 0314 	add.w	r3, r7, #20
 8003102:	4619      	mov	r1, r3
 8003104:	4813      	ldr	r0, [pc, #76]	; (8003154 <I2C1_MspInit+0x90>)
 8003106:	f003 fc79 	bl	80069fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800310a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800310e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003110:	2312      	movs	r3, #18
 8003112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003114:	2301      	movs	r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003118:	2303      	movs	r3, #3
 800311a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800311c:	2304      	movs	r3, #4
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	4619      	mov	r1, r3
 8003126:	480b      	ldr	r0, [pc, #44]	; (8003154 <I2C1_MspInit+0x90>)
 8003128:	f003 fc68 	bl	80069fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <I2C1_MspInit+0x8c>)
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	4a06      	ldr	r2, [pc, #24]	; (8003150 <I2C1_MspInit+0x8c>)
 8003136:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800313a:	6413      	str	r3, [r2, #64]	; 0x40
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <I2C1_MspInit+0x8c>)
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8003148:	bf00      	nop
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40023800 	.word	0x40023800
 8003154:	40020400 	.word	0x40020400

08003158 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <I2C1_MspDeInit+0x30>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	4a08      	ldr	r2, [pc, #32]	; (8003188 <I2C1_MspDeInit+0x30>)
 8003166:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800316a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800316c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003170:	4806      	ldr	r0, [pc, #24]	; (800318c <I2C1_MspDeInit+0x34>)
 8003172:	f003 fdc5 	bl	8006d00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8003176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800317a:	4804      	ldr	r0, [pc, #16]	; (800318c <I2C1_MspDeInit+0x34>)
 800317c:	f003 fdc0 	bl	8006d00 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40023800 	.word	0x40023800
 800318c:	40020400 	.word	0x40020400

08003190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003198:	4a14      	ldr	r2, [pc, #80]	; (80031ec <_sbrk+0x5c>)
 800319a:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <_sbrk+0x60>)
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <_sbrk+0x64>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031ac:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <_sbrk+0x64>)
 80031ae:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <_sbrk+0x68>)
 80031b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <_sbrk+0x64>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d207      	bcs.n	80031d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031c0:	f007 f868 	bl	800a294 <__errno>
 80031c4:	4602      	mov	r2, r0
 80031c6:	230c      	movs	r3, #12
 80031c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80031ca:	f04f 33ff 	mov.w	r3, #4294967295
 80031ce:	e009      	b.n	80031e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <_sbrk+0x64>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031d6:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <_sbrk+0x64>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	4a05      	ldr	r2, [pc, #20]	; (80031f4 <_sbrk+0x64>)
 80031e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031e2:	68fb      	ldr	r3, [r7, #12]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20018000 	.word	0x20018000
 80031f0:	00000400 	.word	0x00000400
 80031f4:	20000294 	.word	0x20000294
 80031f8:	20000600 	.word	0x20000600

080031fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003200:	4b08      	ldr	r3, [pc, #32]	; (8003224 <SystemInit+0x28>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	4a07      	ldr	r2, [pc, #28]	; (8003224 <SystemInit+0x28>)
 8003208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800320c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <SystemInit+0x28>)
 8003212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003216:	609a      	str	r2, [r3, #8]
#endif
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800322e:	f107 0308 	add.w	r3, r7, #8
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800323c:	463b      	mov	r3, r7
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8003244:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <MX_TIM2_Init+0x98>)
 8003246:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800324a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 61999;
 800324c:	4b1c      	ldr	r3, [pc, #112]	; (80032c0 <MX_TIM2_Init+0x98>)
 800324e:	f24f 222f 	movw	r2, #61999	; 0xf22f
 8003252:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <MX_TIM2_Init+0x98>)
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 800325a:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <MX_TIM2_Init+0x98>)
 800325c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003260:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <MX_TIM2_Init+0x98>)
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003268:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <MX_TIM2_Init+0x98>)
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800326e:	4814      	ldr	r0, [pc, #80]	; (80032c0 <MX_TIM2_Init+0x98>)
 8003270:	f005 fc3a 	bl	8008ae8 <HAL_TIM_Base_Init>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800327a:	f7ff f82f 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800327e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003282:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003284:	f107 0308 	add.w	r3, r7, #8
 8003288:	4619      	mov	r1, r3
 800328a:	480d      	ldr	r0, [pc, #52]	; (80032c0 <MX_TIM2_Init+0x98>)
 800328c:	f005 fefc 	bl	8009088 <HAL_TIM_ConfigClockSource>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003296:	f7ff f821 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800329a:	2300      	movs	r3, #0
 800329c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032a2:	463b      	mov	r3, r7
 80032a4:	4619      	mov	r1, r3
 80032a6:	4806      	ldr	r0, [pc, #24]	; (80032c0 <MX_TIM2_Init+0x98>)
 80032a8:	f006 fa9a 	bl	80097e0 <HAL_TIMEx_MasterConfigSynchronization>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80032b2:	f7ff f813 	bl	80022dc <Error_Handler>
  }

}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000550 	.word	0x20000550

080032c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08e      	sub	sp, #56	; 0x38
 80032c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d8:	f107 0320 	add.w	r3, r7, #32
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]
 80032f0:	615a      	str	r2, [r3, #20]
 80032f2:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80032f4:	4b2c      	ldr	r3, [pc, #176]	; (80033a8 <MX_TIM3_Init+0xe4>)
 80032f6:	4a2d      	ldr	r2, [pc, #180]	; (80033ac <MX_TIM3_Init+0xe8>)
 80032f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 691;
 80032fa:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <MX_TIM3_Init+0xe4>)
 80032fc:	f240 22b3 	movw	r2, #691	; 0x2b3
 8003300:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003302:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <MX_TIM3_Init+0xe4>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 8003308:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <MX_TIM3_Init+0xe4>)
 800330a:	22fe      	movs	r2, #254	; 0xfe
 800330c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800330e:	4b26      	ldr	r3, [pc, #152]	; (80033a8 <MX_TIM3_Init+0xe4>)
 8003310:	2200      	movs	r2, #0
 8003312:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003314:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <MX_TIM3_Init+0xe4>)
 8003316:	2280      	movs	r2, #128	; 0x80
 8003318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800331a:	4823      	ldr	r0, [pc, #140]	; (80033a8 <MX_TIM3_Init+0xe4>)
 800331c:	f005 fbe4 	bl	8008ae8 <HAL_TIM_Base_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003326:	f7fe ffd9 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800332a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003334:	4619      	mov	r1, r3
 8003336:	481c      	ldr	r0, [pc, #112]	; (80033a8 <MX_TIM3_Init+0xe4>)
 8003338:	f005 fea6 	bl	8009088 <HAL_TIM_ConfigClockSource>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003342:	f7fe ffcb 	bl	80022dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003346:	4818      	ldr	r0, [pc, #96]	; (80033a8 <MX_TIM3_Init+0xe4>)
 8003348:	f005 fc1d 	bl	8008b86 <HAL_TIM_PWM_Init>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003352:	f7fe ffc3 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800335e:	f107 0320 	add.w	r3, r7, #32
 8003362:	4619      	mov	r1, r3
 8003364:	4810      	ldr	r0, [pc, #64]	; (80033a8 <MX_TIM3_Init+0xe4>)
 8003366:	f006 fa3b 	bl	80097e0 <HAL_TIMEx_MasterConfigSynchronization>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003370:	f7fe ffb4 	bl	80022dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003374:	2360      	movs	r3, #96	; 0x60
 8003376:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003384:	1d3b      	adds	r3, r7, #4
 8003386:	2200      	movs	r2, #0
 8003388:	4619      	mov	r1, r3
 800338a:	4807      	ldr	r0, [pc, #28]	; (80033a8 <MX_TIM3_Init+0xe4>)
 800338c:	f005 fdb6 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003396:	f7fe ffa1 	bl	80022dc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800339a:	4803      	ldr	r0, [pc, #12]	; (80033a8 <MX_TIM3_Init+0xe4>)
 800339c:	f000 f886 	bl	80034ac <HAL_TIM_MspPostInit>

}
 80033a0:	bf00      	nop
 80033a2:	3738      	adds	r7, #56	; 0x38
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	200004d0 	.word	0x200004d0
 80033ac:	40000400 	.word	0x40000400

080033b0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 80033b4:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <MX_TIM11_Init+0x40>)
 80033b6:	4a0f      	ldr	r2, [pc, #60]	; (80033f4 <MX_TIM11_Init+0x44>)
 80033b8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 7199;
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <MX_TIM11_Init+0x40>)
 80033bc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80033c0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <MX_TIM11_Init+0x40>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 199;
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <MX_TIM11_Init+0x40>)
 80033ca:	22c7      	movs	r2, #199	; 0xc7
 80033cc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <MX_TIM11_Init+0x40>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <MX_TIM11_Init+0x40>)
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80033da:	4805      	ldr	r0, [pc, #20]	; (80033f0 <MX_TIM11_Init+0x40>)
 80033dc:	f005 fb84 	bl	8008ae8 <HAL_TIM_Base_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80033e6:	f7fe ff79 	bl	80022dc <Error_Handler>
  }

}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000510 	.word	0x20000510
 80033f4:	40014800 	.word	0x40014800

080033f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003408:	d116      	bne.n	8003438 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <HAL_TIM_Base_MspInit+0xa8>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <HAL_TIM_Base_MspInit+0xa8>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
 800341a:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <HAL_TIM_Base_MspInit+0xa8>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2100      	movs	r1, #0
 800342a:	201c      	movs	r0, #28
 800342c:	f002 fc6b 	bl	8005d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003430:	201c      	movs	r0, #28
 8003432:	f002 fc84 	bl	8005d3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003436:	e02e      	b.n	8003496 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a19      	ldr	r2, [pc, #100]	; (80034a4 <HAL_TIM_Base_MspInit+0xac>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10e      	bne.n	8003460 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <HAL_TIM_Base_MspInit+0xa8>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <HAL_TIM_Base_MspInit+0xa8>)
 800344c:	f043 0302 	orr.w	r3, r3, #2
 8003450:	6413      	str	r3, [r2, #64]	; 0x40
 8003452:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <HAL_TIM_Base_MspInit+0xa8>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]
}
 800345e:	e01a      	b.n	8003496 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM11)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <HAL_TIM_Base_MspInit+0xb0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d115      	bne.n	8003496 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <HAL_TIM_Base_MspInit+0xa8>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <HAL_TIM_Base_MspInit+0xa8>)
 8003474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003478:	6453      	str	r3, [r2, #68]	; 0x44
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_TIM_Base_MspInit+0xa8>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	2100      	movs	r1, #0
 800348a:	201a      	movs	r0, #26
 800348c:	f002 fc3b 	bl	8005d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003490:	201a      	movs	r0, #26
 8003492:	f002 fc54 	bl	8005d3e <HAL_NVIC_EnableIRQ>
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40014800 	.word	0x40014800

080034ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b4:	f107 030c 	add.w	r3, r7, #12
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a12      	ldr	r2, [pc, #72]	; (8003514 <HAL_TIM_MspPostInit+0x68>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d11d      	bne.n	800350a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <HAL_TIM_MspPostInit+0x6c>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	4a10      	ldr	r2, [pc, #64]	; (8003518 <HAL_TIM_MspPostInit+0x6c>)
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	6313      	str	r3, [r2, #48]	; 0x30
 80034de:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <HAL_TIM_MspPostInit+0x6c>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034ea:	2340      	movs	r3, #64	; 0x40
 80034ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	2302      	movs	r3, #2
 80034f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034fa:	2302      	movs	r3, #2
 80034fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034fe:	f107 030c 	add.w	r3, r7, #12
 8003502:	4619      	mov	r1, r3
 8003504:	4805      	ldr	r0, [pc, #20]	; (800351c <HAL_TIM_MspPostInit+0x70>)
 8003506:	f003 fa79 	bl	80069fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800350a:	bf00      	nop
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40000400 	.word	0x40000400
 8003518:	40023800 	.word	0x40023800
 800351c:	40020800 	.word	0x40020800

08003520 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <MX_USART2_UART_Init+0x4c>)
 8003526:	4a12      	ldr	r2, [pc, #72]	; (8003570 <MX_USART2_UART_Init+0x50>)
 8003528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <MX_USART2_UART_Init+0x4c>)
 800352c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003532:	4b0e      	ldr	r3, [pc, #56]	; (800356c <MX_USART2_UART_Init+0x4c>)
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <MX_USART2_UART_Init+0x4c>)
 800353a:	2200      	movs	r2, #0
 800353c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <MX_USART2_UART_Init+0x4c>)
 8003540:	2200      	movs	r2, #0
 8003542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003544:	4b09      	ldr	r3, [pc, #36]	; (800356c <MX_USART2_UART_Init+0x4c>)
 8003546:	220c      	movs	r2, #12
 8003548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <MX_USART2_UART_Init+0x4c>)
 800354c:	2200      	movs	r2, #0
 800354e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <MX_USART2_UART_Init+0x4c>)
 8003552:	2200      	movs	r2, #0
 8003554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003556:	4805      	ldr	r0, [pc, #20]	; (800356c <MX_USART2_UART_Init+0x4c>)
 8003558:	f006 f9c4 	bl	80098e4 <HAL_UART_Init>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003562:	f7fe febb 	bl	80022dc <Error_Handler>
  }

}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000590 	.word	0x20000590
 8003570:	40004400 	.word	0x40004400

08003574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357c:	f107 0314 	add.w	r3, r7, #20
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <HAL_UART_MspInit+0x84>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d12b      	bne.n	80035ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	4b18      	ldr	r3, [pc, #96]	; (80035fc <HAL_UART_MspInit+0x88>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	4a17      	ldr	r2, [pc, #92]	; (80035fc <HAL_UART_MspInit+0x88>)
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a4:	6413      	str	r3, [r2, #64]	; 0x40
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_UART_MspInit+0x88>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	4b11      	ldr	r3, [pc, #68]	; (80035fc <HAL_UART_MspInit+0x88>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4a10      	ldr	r2, [pc, #64]	; (80035fc <HAL_UART_MspInit+0x88>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6313      	str	r3, [r2, #48]	; 0x30
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <HAL_UART_MspInit+0x88>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035ce:	230c      	movs	r3, #12
 80035d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d2:	2302      	movs	r3, #2
 80035d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035da:	2303      	movs	r3, #3
 80035dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035de:	2307      	movs	r3, #7
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e2:	f107 0314 	add.w	r3, r7, #20
 80035e6:	4619      	mov	r1, r3
 80035e8:	4805      	ldr	r0, [pc, #20]	; (8003600 <HAL_UART_MspInit+0x8c>)
 80035ea:	f003 fa07 	bl	80069fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80035ee:	bf00      	nop
 80035f0:	3728      	adds	r7, #40	; 0x28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40004400 	.word	0x40004400
 80035fc:	40023800 	.word	0x40023800
 8003600:	40020000 	.word	0x40020000

08003604 <usart_send_string>:
HAL_StatusTypeDef usart_send_char(char ch){
	HAL_StatusTypeDef result = HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, USART_TIMEOUT);
	return result;
}

HAL_StatusTypeDef usart_send_string(char *s){
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result = HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), USART_TIMEOUT);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7fc fde7 	bl	80001e0 <strlen>
 8003612:	4603      	mov	r3, r0
 8003614:	b29a      	uxth	r2, r3
 8003616:	2364      	movs	r3, #100	; 0x64
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4805      	ldr	r0, [pc, #20]	; (8003630 <usart_send_string+0x2c>)
 800361c:	f006 f9af 	bl	800997e <HAL_UART_Transmit>
 8003620:	4603      	mov	r3, r0
 8003622:	73fb      	strb	r3, [r7, #15]
	return result;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000590 	.word	0x20000590

08003634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800366c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003638:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800363a:	e003      	b.n	8003644 <LoopCopyDataInit>

0800363c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800363c:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800363e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003640:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003642:	3104      	adds	r1, #4

08003644 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003644:	480b      	ldr	r0, [pc, #44]	; (8003674 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003646:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003648:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800364a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800364c:	d3f6      	bcc.n	800363c <CopyDataInit>
  ldr  r2, =_sbss
 800364e:	4a0b      	ldr	r2, [pc, #44]	; (800367c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003650:	e002      	b.n	8003658 <LoopFillZerobss>

08003652 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003652:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003654:	f842 3b04 	str.w	r3, [r2], #4

08003658 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800365a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800365c:	d3f9      	bcc.n	8003652 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800365e:	f7ff fdcd 	bl	80031fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003662:	f006 fe1d 	bl	800a2a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003666:	f7fe fc8b 	bl	8001f80 <main>
  bx  lr    
 800366a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800366c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003670:	0800d538 	.word	0x0800d538
  ldr  r0, =_sdata
 8003674:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003678:	20000268 	.word	0x20000268
  ldr  r2, =_sbss
 800367c:	20000268 	.word	0x20000268
  ldr  r3, = _ebss
 8003680:	20000600 	.word	0x20000600

08003684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003684:	e7fe      	b.n	8003684 <ADC_IRQHandler>
	...

08003688 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d103      	bne.n	80036a0 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8003698:	f04f 33ff 	mov.w	r3, #4294967295
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e030      	b.n	8003702 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	7b1a      	ldrb	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a0c      	ldr	r2, [pc, #48]	; (800370c <HTS221_RegisterBusIO+0x84>)
 80036dc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <HTS221_RegisterBusIO+0x88>)
 80036e2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d004      	beq.n	80036fc <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4798      	blx	r3
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	e002      	b.n	8003702 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 80036fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003700:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003702:	68fb      	ldr	r3, [r7, #12]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	08003db3 	.word	0x08003db3
 8003710:	08003e15 	.word	0x08003e15

08003714 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003722:	2b00      	cmp	r3, #0
 8003724:	d108      	bne.n	8003738 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fade 	bl	8003ce8 <HTS221_Initialize>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8003732:	f04f 33ff 	mov.w	r3, #4294967295
 8003736:	e004      	b.n	8003742 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003758:	2b01      	cmp	r3, #1
 800375a:	d111      	bne.n	8003780 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f878 	bl	8003852 <HTS221_HUM_Disable>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8003768:	f04f 33ff 	mov.w	r3, #4294967295
 800376c:	e00d      	b.n	800378a <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f97b 	bl	8003a6a <HTS221_TEMP_Disable>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 800377a:	f04f 33ff 	mov.w	r3, #4294967295
 800377e:	e004      	b.n	800378a <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	331c      	adds	r3, #28
 80037a0:	6839      	ldr	r1, [r7, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fc3e 	bl	8004024 <hts221_device_id_get>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 80037ae:	f04f 33ff 	mov.w	r3, #4294967295
 80037b2:	e000      	b.n	80037b6 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2201      	movs	r2, #1
 80037ce:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2200      	movs	r2, #0
 80037d4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2201      	movs	r2, #1
 80037da:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2200      	movs	r2, #0
 80037e0:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	4a07      	ldr	r2, [pc, #28]	; (8003804 <HTS221_GetCapabilities+0x44>)
 80037e6:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4a06      	ldr	r2, [pc, #24]	; (8003804 <HTS221_GetCapabilities+0x44>)
 80037ec:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	41480000 	.word	0x41480000

08003808 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e015      	b.n	800384a <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	331c      	adds	r3, #28
 800382c:	2101      	movs	r1, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fc09 	bl	8004046 <hts221_power_on_set>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
 800383e:	e004      	b.n	800384a <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e015      	b.n	8003894 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	331c      	adds	r3, #28
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fbe4 	bl	8004046 <hts221_power_on_set>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8003884:	f04f 33ff 	mov.w	r3, #4294967295
 8003888:	e004      	b.n	8003894 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80038a6:	6839      	ldr	r1, [r7, #0]
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f9a9 	bl	8003c00 <HTS221_GetOutputDataRate>
 80038ae:	4603      	mov	r3, r0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80038c4:	ed97 0a00 	vldr	s0, [r7]
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f9dd 	bl	8003c88 <HTS221_SetOutputDataRate>
 80038ce:	4603      	mov	r3, r0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  hts221_axis1bit16_t coeff;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	331c      	adds	r3, #28
 80038e6:	f107 0218 	add.w	r2, r7, #24
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fc52 	bl	8004196 <hts221_hum_adc_point_0_get>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80038f8:	f04f 33ff 	mov.w	r3, #4294967295
 80038fc:	e088      	b.n	8003a10 <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.x0 = (float)coeff.i16bit;
 80038fe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800390a:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	331c      	adds	r3, #28
 8003912:	f107 0218 	add.w	r2, r7, #24
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fbba 	bl	8004092 <hts221_hum_rh_point_0_get>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HTS221_HUM_GetHumidity+0x52>
  {
    return HTS221_ERROR;
 8003924:	f04f 33ff 	mov.w	r3, #4294967295
 8003928:	e072      	b.n	8003a10 <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.y0 = (float)coeff.u8bit[0];
 800392a:	7e3b      	ldrb	r3, [r7, #24]
 800392c:	ee07 3a90 	vmov	s15, r3
 8003930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003934:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	331c      	adds	r3, #28
 800393c:	f107 0218 	add.w	r2, r7, #24
 8003940:	4611      	mov	r1, r2
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fc38 	bl	80041b8 <hts221_hum_adc_point_1_get>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HTS221_HUM_GetHumidity+0x7c>
  {
    return HTS221_ERROR;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	e05d      	b.n	8003a10 <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.x1 = (float)coeff.i16bit;
 8003954:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003958:	ee07 3a90 	vmov	s15, r3
 800395c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003960:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	331c      	adds	r3, #28
 8003968:	f107 0218 	add.w	r2, r7, #24
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fba6 	bl	80040c0 <hts221_hum_rh_point_1_get>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HTS221_HUM_GetHumidity+0xa8>
  {
    return HTS221_ERROR;
 800397a:	f04f 33ff 	mov.w	r3, #4294967295
 800397e:	e047      	b.n	8003a10 <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.y1 = (float)coeff.u8bit[0];
 8003980:	7e3b      	ldrb	r3, [r7, #24]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 800398e:	f107 031c 	add.w	r3, r7, #28
 8003992:	2202      	movs	r2, #2
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f006 fca6 	bl	800a2e8 <memset>
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	331c      	adds	r3, #28
 80039a0:	f107 021c 	add.w	r2, r7, #28
 80039a4:	4611      	mov	r1, r2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fb1a 	bl	8003fe0 <hts221_humidity_raw_get>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HTS221_HUM_GetHumidity+0xe0>
  {
    return HTS221_ERROR;
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295
 80039b6:	e02b      	b.n	8003a10 <HTS221_HUM_GetHumidity+0x138>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80039b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80039bc:	ee07 3a90 	vmov	s15, r3
 80039c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039c4:	f107 0308 	add.w	r3, r7, #8
 80039c8:	eeb0 0a67 	vmov.f32	s0, s15
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f9b7 	bl	8003d40 <Linear_Interpolation>
 80039d2:	eef0 7a40 	vmov.f32	s15, s0
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	edd3 7a00 	vldr	s15, [r3]
 80039e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ea:	d503      	bpl.n	80039f4 <HTS221_HUM_GetHumidity+0x11c>
  {
    *Value = 0.0f;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	edd3 7a00 	vldr	s15, [r3]
 80039fa:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003a18 <HTS221_HUM_GetHumidity+0x140>
 80039fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a06:	dd02      	ble.n	8003a0e <HTS221_HUM_GetHumidity+0x136>
  {
    *Value = 100.0f;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <HTS221_HUM_GetHumidity+0x144>)
 8003a0c:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3720      	adds	r7, #32
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	42c80000 	.word	0x42c80000
 8003a1c:	42c80000 	.word	0x42c80000

08003a20 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e015      	b.n	8003a62 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	331c      	adds	r3, #28
 8003a44:	2101      	movs	r1, #1
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fafd 	bl	8004046 <hts221_power_on_set>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295
 8003a56:	e004      	b.n	8003a62 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e015      	b.n	8003aac <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	331c      	adds	r3, #28
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fad8 	bl	8004046 <hts221_power_on_set>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa0:	e004      	b.n	8003aac <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003abe:	6839      	ldr	r1, [r7, #0]
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f89d 	bl	8003c00 <HTS221_GetOutputDataRate>
 8003ac6:	4603      	mov	r3, r0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003adc:	ed97 0a00 	vldr	s0, [r7]
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f8d1 	bl	8003c88 <HTS221_SetOutputDataRate>
 8003ae6:	4603      	mov	r3, r0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  hts221_axis1bit16_t coeff;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	331c      	adds	r3, #28
 8003afe:	f107 0218 	add.w	r2, r7, #24
 8003b02:	4611      	mov	r1, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fb68 	bl	80041da <hts221_temp_adc_point_0_get>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003b10:	f04f 33ff 	mov.w	r3, #4294967295
 8003b14:	e06f      	b.n	8003bf6 <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.x0 = (float)coeff.i16bit;
 8003b16:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b22:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	331c      	adds	r3, #28
 8003b2a:	f107 0218 	add.w	r2, r7, #24
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fadc 	bl	80040ee <hts221_temp_deg_point_0_get>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HTS221_TEMP_GetTemperature+0x52>
  {
    return HTS221_ERROR;
 8003b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b40:	e059      	b.n	8003bf6 <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.y0 = (float)coeff.u8bit[0];
 8003b42:	7e3b      	ldrb	r3, [r7, #24]
 8003b44:	ee07 3a90 	vmov	s15, r3
 8003b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	331c      	adds	r3, #28
 8003b54:	f107 0218 	add.w	r2, r7, #24
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fb4e 	bl	80041fc <hts221_temp_adc_point_1_get>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HTS221_TEMP_GetTemperature+0x7c>
  {
    return HTS221_ERROR;
 8003b66:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6a:	e044      	b.n	8003bf6 <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.x1 = (float)coeff.i16bit;
 8003b6c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003b70:	ee07 3a90 	vmov	s15, r3
 8003b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b78:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	331c      	adds	r3, #28
 8003b80:	f107 0218 	add.w	r2, r7, #24
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fadb 	bl	8004142 <hts221_temp_deg_point_1_get>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HTS221_TEMP_GetTemperature+0xa8>
  {
    return HTS221_ERROR;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295
 8003b96:	e02e      	b.n	8003bf6 <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.y1 = (float)coeff.u8bit[0];
 8003b98:	7e3b      	ldrb	r3, [r7, #24]
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba2:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8003ba6:	f107 031c 	add.w	r3, r7, #28
 8003baa:	2202      	movs	r2, #2
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f006 fb9a 	bl	800a2e8 <memset>
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	331c      	adds	r3, #28
 8003bb8:	f107 021c 	add.w	r2, r7, #28
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fa1f 	bl	8004002 <hts221_temperature_raw_get>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HTS221_TEMP_GetTemperature+0xe0>
  {
    return HTS221_ERROR;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295
 8003bce:	e012      	b.n	8003bf6 <HTS221_TEMP_GetTemperature+0x106>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8003bd0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003bd4:	ee07 3a90 	vmov	s15, r3
 8003bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bdc:	f107 0308 	add.w	r3, r7, #8
 8003be0:	eeb0 0a67 	vmov.f32	s0, s15
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 f8ab 	bl	8003d40 <Linear_Interpolation>
 8003bea:	eef0 7a40 	vmov.f32	s15, s0
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	331c      	adds	r3, #28
 8003c12:	f107 020b 	add.w	r2, r7, #11
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f983 	bl	8003f24 <hts221_data_rate_get>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	e025      	b.n	8003c76 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8003c2a:	7afb      	ldrb	r3, [r7, #11]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d81d      	bhi.n	8003c6c <HTS221_GetOutputDataRate+0x6c>
 8003c30:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <HTS221_GetOutputDataRate+0x38>)
 8003c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c36:	bf00      	nop
 8003c38:	08003c49 	.word	0x08003c49
 8003c3c:	08003c53 	.word	0x08003c53
 8003c40:	08003c5d 	.word	0x08003c5d
 8003c44:	08003c65 	.word	0x08003c65
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
      break;
 8003c50:	e010      	b.n	8003c74 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c58:	601a      	str	r2, [r3, #0]
      break;
 8003c5a:	e00b      	b.n	8003c74 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <HTS221_GetOutputDataRate+0x80>)
 8003c60:	601a      	str	r2, [r3, #0]
      break;
 8003c62:	e007      	b.n	8003c74 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4a07      	ldr	r2, [pc, #28]	; (8003c84 <HTS221_GetOutputDataRate+0x84>)
 8003c68:	601a      	str	r2, [r3, #0]
      break;
 8003c6a:	e003      	b.n	8003c74 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c70:	60fb      	str	r3, [r7, #12]
      break;
 8003c72:	bf00      	nop
  }

  return ret;
 8003c74:	68fb      	ldr	r3, [r7, #12]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40e00000 	.word	0x40e00000
 8003c84:	41480000 	.word	0x41480000

08003c88 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003c94:	edd7 7a00 	vldr	s15, [r7]
 8003c98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca4:	d801      	bhi.n	8003caa <HTS221_SetOutputDataRate+0x22>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e00b      	b.n	8003cc2 <HTS221_SetOutputDataRate+0x3a>
 8003caa:	edd7 7a00 	vldr	s15, [r7]
 8003cae:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cba:	d801      	bhi.n	8003cc0 <HTS221_SetOutputDataRate+0x38>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e000      	b.n	8003cc2 <HTS221_SetOutputDataRate+0x3a>
 8003cc0:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8003cc2:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	331c      	adds	r3, #28
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 f902 	bl	8003ed6 <hts221_data_rate_set>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	e000      	b.n	8003ce0 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	331c      	adds	r3, #28
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f9a5 	bl	8004046 <hts221_power_on_set>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003d02:	f04f 33ff 	mov.w	r3, #4294967295
 8003d06:	e017      	b.n	8003d38 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	331c      	adds	r3, #28
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f940 	bl	8003f94 <hts221_block_data_update_set>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8003d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1e:	e00b      	b.n	8003d38 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003d20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ffaf 	bl	8003c88 <HTS221_SetOutputDataRate>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003d30:	f04f 33ff 	mov.w	r3, #4294967295
 8003d34:	e000      	b.n	8003d38 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d5c:	edd7 7a00 	vldr	s15, [r7]
 8003d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	edd3 6a02 	vldr	s13, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	ed93 6a00 	vldr	s12, [r3]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d84:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	edd3 7a00 	vldr	s15, [r3]
 8003d98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003da0:	eef0 7a66 	vmov.f32	s15, s13
}
 8003da4:	eeb0 0a67 	vmov.f32	s0, s15
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003db2:	b590      	push	{r4, r7, lr}
 8003db4:	b087      	sub	sp, #28
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	72fb      	strb	r3, [r7, #11]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10e      	bne.n	8003df0 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	695c      	ldr	r4, [r3, #20]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	7b1b      	ldrb	r3, [r3, #12]
 8003dda:	b298      	uxth	r0, r3
 8003ddc:	7afb      	ldrb	r3, [r7, #11]
 8003dde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	b299      	uxth	r1, r3
 8003de6:	893b      	ldrh	r3, [r7, #8]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	47a0      	blx	r4
 8003dec:	4603      	mov	r3, r0
 8003dee:	e00d      	b.n	8003e0c <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	695c      	ldr	r4, [r3, #20]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	7b1b      	ldrb	r3, [r3, #12]
 8003df8:	b298      	uxth	r0, r3
 8003dfa:	7afb      	ldrb	r3, [r7, #11]
 8003dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	b299      	uxth	r1, r3
 8003e04:	893b      	ldrh	r3, [r7, #8]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	47a0      	blx	r4
 8003e0a:	4603      	mov	r3, r0
  }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd90      	pop	{r4, r7, pc}

08003e14 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	460b      	mov	r3, r1
 8003e22:	72fb      	strb	r3, [r7, #11]
 8003e24:	4613      	mov	r3, r2
 8003e26:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10e      	bne.n	8003e52 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	691c      	ldr	r4, [r3, #16]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	7b1b      	ldrb	r3, [r3, #12]
 8003e3c:	b298      	uxth	r0, r3
 8003e3e:	7afb      	ldrb	r3, [r7, #11]
 8003e40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	b299      	uxth	r1, r3
 8003e48:	893b      	ldrh	r3, [r7, #8]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	47a0      	blx	r4
 8003e4e:	4603      	mov	r3, r0
 8003e50:	e00d      	b.n	8003e6e <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	691c      	ldr	r4, [r3, #16]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	7b1b      	ldrb	r3, [r3, #12]
 8003e5a:	b298      	uxth	r0, r3
 8003e5c:	7afb      	ldrb	r3, [r7, #11]
 8003e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	b299      	uxth	r1, r3
 8003e66:	893b      	ldrh	r3, [r7, #8]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	47a0      	blx	r4
 8003e6c:	4603      	mov	r3, r0
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd90      	pop	{r4, r7, pc}

08003e76 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 8003e76:	b590      	push	{r4, r7, lr}
 8003e78:	b087      	sub	sp, #28
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	461a      	mov	r2, r3
 8003e82:	460b      	mov	r3, r1
 8003e84:	72fb      	strb	r3, [r7, #11]
 8003e86:	4613      	mov	r3, r2
 8003e88:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685c      	ldr	r4, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6898      	ldr	r0, [r3, #8]
 8003e92:	893b      	ldrh	r3, [r7, #8]
 8003e94:	7af9      	ldrb	r1, [r7, #11]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	47a0      	blx	r4
 8003e9a:	6178      	str	r0, [r7, #20]
  return ret;
 8003e9c:	697b      	ldr	r3, [r7, #20]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd90      	pop	{r4, r7, pc}

08003ea6 <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8003ea6:	b590      	push	{r4, r7, lr}
 8003ea8:	b087      	sub	sp, #28
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	72fb      	strb	r3, [r7, #11]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681c      	ldr	r4, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6898      	ldr	r0, [r3, #8]
 8003ec2:	893b      	ldrh	r3, [r7, #8]
 8003ec4:	7af9      	ldrb	r1, [r7, #11]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	47a0      	blx	r4
 8003eca:	6178      	str	r0, [r7, #20]
  return ret;
 8003ecc:	697b      	ldr	r3, [r7, #20]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd90      	pop	{r4, r7, pc}

08003ed6 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003ee2:	f107 0208 	add.w	r2, r7, #8
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	2120      	movs	r1, #32
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff ffc3 	bl	8003e76 <hts221_read_reg>
 8003ef0:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10f      	bne.n	8003f18 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	7a3b      	ldrb	r3, [r7, #8]
 8003f02:	f362 0301 	bfi	r3, r2, #0, #2
 8003f06:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003f08:	f107 0208 	add.w	r2, r7, #8
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	2120      	movs	r1, #32
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ffc8 	bl	8003ea6 <hts221_write_reg>
 8003f16:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f18:	68fb      	ldr	r3, [r7, #12]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003f2e:	f107 0208 	add.w	r2, r7, #8
 8003f32:	2301      	movs	r3, #1
 8003f34:	2120      	movs	r1, #32
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff ff9d 	bl	8003e76 <hts221_read_reg>
 8003f3c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8003f3e:	7a3b      	ldrb	r3, [r7, #8]
 8003f40:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d81a      	bhi.n	8003f80 <hts221_data_rate_get+0x5c>
 8003f4a:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <hts221_data_rate_get+0x2c>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003f61 	.word	0x08003f61
 8003f54:	08003f69 	.word	0x08003f69
 8003f58:	08003f71 	.word	0x08003f71
 8003f5c:	08003f79 	.word	0x08003f79
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
      break;
 8003f66:	e00f      	b.n	8003f88 <hts221_data_rate_get+0x64>
    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	701a      	strb	r2, [r3, #0]
      break;
 8003f6e:	e00b      	b.n	8003f88 <hts221_data_rate_get+0x64>
    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2202      	movs	r2, #2
 8003f74:	701a      	strb	r2, [r3, #0]
      break;
 8003f76:	e007      	b.n	8003f88 <hts221_data_rate_get+0x64>
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	701a      	strb	r2, [r3, #0]
      break;
 8003f7e:	e003      	b.n	8003f88 <hts221_data_rate_get+0x64>
    default:
      *val = HTS221_ODR_ND;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2204      	movs	r2, #4
 8003f84:	701a      	strb	r2, [r3, #0]
      break;
 8003f86:	bf00      	nop
  }

  return ret;
 8003f88:	68fb      	ldr	r3, [r7, #12]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop

08003f94 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003fa0:	f107 0208 	add.w	r2, r7, #8
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	2120      	movs	r1, #32
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff ff64 	bl	8003e76 <hts221_read_reg>
 8003fae:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10f      	bne.n	8003fd6 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	7a3b      	ldrb	r3, [r7, #8]
 8003fc0:	f362 0382 	bfi	r3, r2, #2, #1
 8003fc4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003fc6:	f107 0208 	add.w	r2, r7, #8
 8003fca:	2301      	movs	r3, #1
 8003fcc:	2120      	movs	r1, #32
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff ff69 	bl	8003ea6 <hts221_write_reg>
 8003fd4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003fea:	2302      	movs	r3, #2
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	2128      	movs	r1, #40	; 0x28
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ff40 	bl	8003e76 <hts221_read_reg>
 8003ff6:	60f8      	str	r0, [r7, #12]
  return ret;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800400c:	2302      	movs	r3, #2
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	212a      	movs	r1, #42	; 0x2a
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff ff2f 	bl	8003e76 <hts221_read_reg>
 8004018:	60f8      	str	r0, [r7, #12]
  return ret;
 800401a:	68fb      	ldr	r3, [r7, #12]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800402e:	2301      	movs	r3, #1
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	210f      	movs	r1, #15
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ff1e 	bl	8003e76 <hts221_read_reg>
 800403a:	60f8      	str	r0, [r7, #12]
  return ret;
 800403c:	68fb      	ldr	r3, [r7, #12]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8004052:	f107 0208 	add.w	r2, r7, #8
 8004056:	2301      	movs	r3, #1
 8004058:	2120      	movs	r1, #32
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ff0b 	bl	8003e76 <hts221_read_reg>
 8004060:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10f      	bne.n	8004088 <hts221_power_on_set+0x42>
    reg.pd = val;
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	b2da      	uxtb	r2, r3
 8004070:	7a3b      	ldrb	r3, [r7, #8]
 8004072:	f362 13c7 	bfi	r3, r2, #7, #1
 8004076:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8004078:	f107 0208 	add.w	r2, r7, #8
 800407c:	2301      	movs	r3, #1
 800407e:	2120      	movs	r1, #32
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff ff10 	bl	8003ea6 <hts221_write_reg>
 8004086:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004088:	68fb      	ldr	r3, [r7, #12]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 800409c:	2301      	movs	r3, #1
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	2130      	movs	r1, #48	; 0x30
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff fee7 	bl	8003e76 <hts221_read_reg>
 80040a8:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	701a      	strb	r2, [r3, #0]

  return ret;
 80040b6:	68fb      	ldr	r3, [r7, #12]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 80040ca:	2301      	movs	r3, #1
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	2131      	movs	r1, #49	; 0x31
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff fed0 	bl	8003e76 <hts221_read_reg>
 80040d6:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	701a      	strb	r2, [r3, #0]

  return ret;
 80040e4:	68fb      	ldr	r3, [r7, #12]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80040f8:	f107 020f 	add.w	r2, r7, #15
 80040fc:	2301      	movs	r3, #1
 80040fe:	2132      	movs	r1, #50	; 0x32
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff feb8 	bl	8003e76 <hts221_read_reg>
 8004106:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d114      	bne.n	8004138 <hts221_temp_deg_point_0_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 800410e:	f107 0210 	add.w	r2, r7, #16
 8004112:	2301      	movs	r3, #1
 8004114:	2135      	movs	r1, #53	; 0x35
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff fead 	bl	8003e76 <hts221_read_reg>
 800411c:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800411e:	7c3b      	ldrb	r3, [r7, #16]
 8004120:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004124:	b2db      	uxtb	r3, r3
 8004126:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	4413      	add	r3, r2
 8004130:	10db      	asrs	r3, r3, #3
 8004132:	b2da      	uxtb	r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004138:	697b      	ldr	r3, [r7, #20]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800414c:	f107 020f 	add.w	r2, r7, #15
 8004150:	2301      	movs	r3, #1
 8004152:	2133      	movs	r1, #51	; 0x33
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff fe8e 	bl	8003e76 <hts221_read_reg>
 800415a:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d114      	bne.n	800418c <hts221_temp_deg_point_1_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8004162:	f107 0210 	add.w	r2, r7, #16
 8004166:	2301      	movs	r3, #1
 8004168:	2135      	movs	r1, #53	; 0x35
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fe83 	bl	8003e76 <hts221_read_reg>
 8004170:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8004172:	7c3b      	ldrb	r3, [r7, #16]
 8004174:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004178:	b2db      	uxtb	r3, r3
 800417a:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	4413      	add	r3, r2
 8004184:	10db      	asrs	r3, r3, #3
 8004186:	b2da      	uxtb	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800418c:	697b      	ldr	r3, [r7, #20]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 80041a0:	2302      	movs	r3, #2
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	2136      	movs	r1, #54	; 0x36
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff fe65 	bl	8003e76 <hts221_read_reg>
 80041ac:	60f8      	str	r0, [r7, #12]
  return ret;
 80041ae:	68fb      	ldr	r3, [r7, #12]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 80041c2:	2302      	movs	r3, #2
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	213a      	movs	r1, #58	; 0x3a
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff fe54 	bl	8003e76 <hts221_read_reg>
 80041ce:	60f8      	str	r0, [r7, #12]
  return ret;
 80041d0:	68fb      	ldr	r3, [r7, #12]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 80041e4:	2302      	movs	r3, #2
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	213c      	movs	r1, #60	; 0x3c
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fe43 	bl	8003e76 <hts221_read_reg>
 80041f0:	60f8      	str	r0, [r7, #12]
  return ret;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 8004206:	2302      	movs	r3, #2
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	213e      	movs	r1, #62	; 0x3e
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff fe32 	bl	8003e76 <hts221_read_reg>
 8004212:	60f8      	str	r0, [r7, #12]
  return ret;
 8004214:	68fb      	ldr	r3, [r7, #12]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d103      	bne.n	800423c <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8004234:	f04f 33ff 	mov.w	r3, #4294967295
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e04d      	b.n	80042d8 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	7b1a      	ldrb	r2, [r3, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a1b      	ldr	r2, [pc, #108]	; (80042e4 <LPS22HB_RegisterBusIO+0xc4>)
 8004278:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a1a      	ldr	r2, [pc, #104]	; (80042e8 <LPS22HB_RegisterBusIO+0xc8>)
 800427e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	e020      	b.n	80042d8 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4798      	blx	r3
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 80042a2:	f04f 33ff 	mov.w	r3, #4294967295
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	e016      	b.n	80042d8 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d112      	bne.n	80042d8 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10d      	bne.n	80042d8 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80042bc:	2301      	movs	r3, #1
 80042be:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 80042c0:	7afb      	ldrb	r3, [r7, #11]
 80042c2:	461a      	mov	r2, r3
 80042c4:	2110      	movs	r1, #16
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f9df 	bl	800468a <LPS22HB_Write_Reg>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 80042d2:	f04f 33ff 	mov.w	r3, #4294967295
 80042d6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80042d8:	68fb      	ldr	r3, [r7, #12]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	0800494b 	.word	0x0800494b
 80042e8:	080049d1 	.word	0x080049d1

080042ec <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d108      	bne.n	8004310 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 faca 	bl	8004898 <LPS22HB_Initialize>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 800430a:	f04f 33ff 	mov.w	r3, #4294967295
 800430e:	e004      	b.n	800431a <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004330:	2b01      	cmp	r3, #1
 8004332:	d111      	bne.n	8004358 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f877 	bl	8004428 <LPS22HB_PRESS_Disable>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8004340:	f04f 33ff 	mov.w	r3, #4294967295
 8004344:	e00d      	b.n	8004362 <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f918 	bl	800457c <LPS22HB_TEMP_Disable>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8004352:	f04f 33ff 	mov.w	r3, #4294967295
 8004356:	e004      	b.n	8004362 <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	331c      	adds	r3, #28
 8004378:	6839      	ldr	r1, [r7, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fca6 	bl	8004ccc <lps22hb_device_id_get>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	e000      	b.n	800438e <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2200      	movs	r2, #0
 80043a6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2201      	movs	r2, #1
 80043ac:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2201      	movs	r2, #1
 80043b2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2200      	movs	r2, #0
 80043b8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	4a05      	ldr	r2, [pc, #20]	; (80043dc <LPS22HB_GetCapabilities+0x44>)
 80043c6:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	4a04      	ldr	r2, [pc, #16]	; (80043dc <LPS22HB_GetCapabilities+0x44>)
 80043cc:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	42960000 	.word	0x42960000

080043e0 <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e014      	b.n	8004420 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f103 021c 	add.w	r2, r3, #28
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004402:	4619      	mov	r1, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f000 fbd5 	bl	8004bb4 <lps22hb_data_rate_set>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8004410:	f04f 33ff 	mov.w	r3, #4294967295
 8004414:	e004      	b.n	8004420 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e024      	b.n	8004488 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004444:	2b00      	cmp	r3, #0
 8004446:	d11a      	bne.n	800447e <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f103 021c 	add.w	r2, r3, #28
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	332b      	adds	r3, #43	; 0x2b
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f000 fbd3 	bl	8004c00 <lps22hb_data_rate_get>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8004460:	f04f 33ff 	mov.w	r3, #4294967295
 8004464:	e010      	b.n	8004488 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	331c      	adds	r3, #28
 800446a:	2100      	movs	r1, #0
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fba1 	bl	8004bb4 <lps22hb_data_rate_set>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8004478:	f04f 33ff 	mov.w	r3, #4294967295
 800447c:	e004      	b.n	8004488 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 800449a:	6839      	ldr	r1, [r7, #0]
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f90f 	bl	80046c0 <LPS22HB_GetOutputDataRate>
 80044a2:	4603      	mov	r3, r0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d106      	bne.n	80044d0 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 80044c2:	ed97 0a00 	vldr	s0, [r7]
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f94e 	bl	8004768 <LPS22HB_SetOutputDataRate_When_Enabled>
 80044cc:	4603      	mov	r3, r0
 80044ce:	e005      	b.n	80044dc <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 80044d0:	ed97 0a00 	vldr	s0, [r7]
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f99f 	bl	8004818 <LPS22HB_SetOutputDataRate_When_Disabled>
 80044da:	4603      	mov	r3, r0
  }
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80044ee:	f107 030c 	add.w	r3, r7, #12
 80044f2:	2204      	movs	r2, #4
 80044f4:	2100      	movs	r1, #0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f005 fef6 	bl	800a2e8 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	331c      	adds	r3, #28
 8004500:	f107 020c 	add.w	r2, r7, #12
 8004504:	4611      	mov	r1, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fbbe 	bl	8004c88 <lps22hb_pressure_raw_get>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8004512:	f04f 33ff 	mov.w	r3, #4294967295
 8004516:	e009      	b.n	800452c <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 facc 	bl	8004ab8 <lps22hb_from_lsb_to_hpa>
 8004520:	eef0 7a40 	vmov.f32	s15, s0
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	e014      	b.n	8004574 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f103 021c 	add.w	r2, r3, #28
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f000 fb2b 	bl	8004bb4 <lps22hb_data_rate_set>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8004564:	f04f 33ff 	mov.w	r3, #4294967295
 8004568:	e004      	b.n	8004574 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e024      	b.n	80045dc <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004598:	2b00      	cmp	r3, #0
 800459a:	d11a      	bne.n	80045d2 <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f103 021c 	add.w	r2, r3, #28
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	332b      	adds	r3, #43	; 0x2b
 80045a6:	4619      	mov	r1, r3
 80045a8:	4610      	mov	r0, r2
 80045aa:	f000 fb29 	bl	8004c00 <lps22hb_data_rate_get>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 80045b4:	f04f 33ff 	mov.w	r3, #4294967295
 80045b8:	e010      	b.n	80045dc <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	331c      	adds	r3, #28
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 faf7 	bl	8004bb4 <lps22hb_data_rate_set>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 80045cc:	f04f 33ff 	mov.w	r3, #4294967295
 80045d0:	e004      	b.n	80045dc <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80045ee:	6839      	ldr	r1, [r7, #0]
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f865 	bl	80046c0 <LPS22HB_GetOutputDataRate>
 80045f6:	4603      	mov	r3, r0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004612:	2b01      	cmp	r3, #1
 8004614:	d106      	bne.n	8004624 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004616:	ed97 0a00 	vldr	s0, [r7]
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f8a4 	bl	8004768 <LPS22HB_SetOutputDataRate_When_Enabled>
 8004620:	4603      	mov	r3, r0
 8004622:	e005      	b.n	8004630 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004624:	ed97 0a00 	vldr	s0, [r7]
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f8f5 	bl	8004818 <LPS22HB_SetOutputDataRate_When_Disabled>
 800462e:	4603      	mov	r3, r0
  }
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004642:	f107 030c 	add.w	r3, r7, #12
 8004646:	2202      	movs	r2, #2
 8004648:	2100      	movs	r1, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f005 fe4c 	bl	800a2e8 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	331c      	adds	r3, #28
 8004654:	f107 020c 	add.w	r2, r7, #12
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fb25 	bl	8004caa <lps22hb_temperature_raw_get>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295
 800466a:	e00a      	b.n	8004682 <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 800466c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fa39 	bl	8004ae8 <lps22hb_from_lsb_to_degc>
 8004676:	eef0 7a40 	vmov.f32	s15, s0
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	460b      	mov	r3, r1
 8004694:	70fb      	strb	r3, [r7, #3]
 8004696:	4613      	mov	r3, r2
 8004698:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f103 001c 	add.w	r0, r3, #28
 80046a0:	1cba      	adds	r2, r7, #2
 80046a2:	78f9      	ldrb	r1, [r7, #3]
 80046a4:	2301      	movs	r3, #1
 80046a6:	f000 f9ee 	bl	8004a86 <lps22hb_write_reg>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 80046b0:	f04f 33ff 	mov.w	r3, #4294967295
 80046b4:	e000      	b.n	80046b8 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	331c      	adds	r3, #28
 80046d2:	f107 020b 	add.w	r2, r7, #11
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fa91 	bl	8004c00 <lps22hb_data_rate_get>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 80046e4:	f04f 33ff 	mov.w	r3, #4294967295
 80046e8:	e031      	b.n	800474e <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 80046ea:	7afb      	ldrb	r3, [r7, #11]
 80046ec:	2b05      	cmp	r3, #5
 80046ee:	d829      	bhi.n	8004744 <LPS22HB_GetOutputDataRate+0x84>
 80046f0:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <LPS22HB_GetOutputDataRate+0x38>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	08004711 	.word	0x08004711
 80046fc:	0800471b 	.word	0x0800471b
 8004700:	08004725 	.word	0x08004725
 8004704:	0800472d 	.word	0x0800472d
 8004708:	08004735 	.word	0x08004735
 800470c:	0800473d 	.word	0x0800473d
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
      break;
 8004718:	e018      	b.n	800474c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004720:	601a      	str	r2, [r3, #0]
      break;
 8004722:	e013      	b.n	800474c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	4a0c      	ldr	r2, [pc, #48]	; (8004758 <LPS22HB_GetOutputDataRate+0x98>)
 8004728:	601a      	str	r2, [r3, #0]
      break;
 800472a:	e00f      	b.n	800474c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	4a0b      	ldr	r2, [pc, #44]	; (800475c <LPS22HB_GetOutputDataRate+0x9c>)
 8004730:	601a      	str	r2, [r3, #0]
      break;
 8004732:	e00b      	b.n	800474c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <LPS22HB_GetOutputDataRate+0xa0>)
 8004738:	601a      	str	r2, [r3, #0]
      break;
 800473a:	e007      	b.n	800474c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	4a09      	ldr	r2, [pc, #36]	; (8004764 <LPS22HB_GetOutputDataRate+0xa4>)
 8004740:	601a      	str	r2, [r3, #0]
      break;
 8004742:	e003      	b.n	800474c <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8004744:	f04f 33ff 	mov.w	r3, #4294967295
 8004748:	60fb      	str	r3, [r7, #12]
      break;
 800474a:	bf00      	nop
  }

  return ret;
 800474c:	68fb      	ldr	r3, [r7, #12]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	41200000 	.word	0x41200000
 800475c:	41c80000 	.word	0x41c80000
 8004760:	42480000 	.word	0x42480000
 8004764:	42960000 	.word	0x42960000

08004768 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004774:	edd7 7a00 	vldr	s15, [r7]
 8004778:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800477c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004784:	d801      	bhi.n	800478a <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8004786:	2301      	movs	r3, #1
 8004788:	e021      	b.n	80047ce <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800478a:	edd7 7a00 	vldr	s15, [r7]
 800478e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479a:	d801      	bhi.n	80047a0 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 800479c:	2302      	movs	r3, #2
 800479e:	e016      	b.n	80047ce <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80047a0:	edd7 7a00 	vldr	s15, [r7]
 80047a4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80047a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b0:	d801      	bhi.n	80047b6 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 80047b2:	2303      	movs	r3, #3
 80047b4:	e00b      	b.n	80047ce <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80047b6:	edd7 7a00 	vldr	s15, [r7]
 80047ba:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004814 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 80047be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c6:	d801      	bhi.n	80047cc <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 80047c8:	2304      	movs	r3, #4
 80047ca:	e000      	b.n	80047ce <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80047cc:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80047ce:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	331c      	adds	r3, #28
 80047d4:	7bfa      	ldrb	r2, [r7, #15]
 80047d6:	4611      	mov	r1, r2
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 f9eb 	bl	8004bb4 <lps22hb_data_rate_set>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295
 80047e8:	e00f      	b.n	800480a <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f103 021c 	add.w	r2, r3, #28
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	332b      	adds	r3, #43	; 0x2b
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f000 fa02 	bl	8004c00 <lps22hb_data_rate_get>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 8004802:	f04f 33ff 	mov.w	r3, #4294967295
 8004806:	e000      	b.n	800480a <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	42480000 	.word	0x42480000

08004818 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004824:	edd7 7a00 	vldr	s15, [r7]
 8004828:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800482c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004834:	d801      	bhi.n	800483a <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 8004836:	2301      	movs	r3, #1
 8004838:	e021      	b.n	800487e <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 800483a:	edd7 7a00 	vldr	s15, [r7]
 800483e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484a:	d801      	bhi.n	8004850 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 800484c:	2302      	movs	r3, #2
 800484e:	e016      	b.n	800487e <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004850:	edd7 7a00 	vldr	s15, [r7]
 8004854:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800485c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004860:	d801      	bhi.n	8004866 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 8004862:	2303      	movs	r3, #3
 8004864:	e00b      	b.n	800487e <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004866:	edd7 7a00 	vldr	s15, [r7]
 800486a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004894 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 800486e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004876:	d801      	bhi.n	800487c <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004878:	2304      	movs	r3, #4
 800487a:	e000      	b.n	800487e <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 800487c:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	42480000 	.word	0x42480000

08004898 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	331c      	adds	r3, #28
 80048a4:	2101      	movs	r1, #1
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fa21 	bl	8004cee <lps22hb_low_power_set>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 80048b2:	f04f 33ff 	mov.w	r3, #4294967295
 80048b6:	e044      	b.n	8004942 <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	331c      	adds	r3, #28
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f978 	bl	8004bb4 <lps22hb_data_rate_set>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 80048ca:	f04f 33ff 	mov.w	r3, #4294967295
 80048ce:	e038      	b.n	8004942 <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	331c      	adds	r3, #28
 80048d4:	2102      	movs	r1, #2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f946 	bl	8004b68 <lps22hb_low_pass_filter_mode_set>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 80048e2:	f04f 33ff 	mov.w	r3, #4294967295
 80048e6:	e02c      	b.n	8004942 <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	331c      	adds	r3, #28
 80048ec:	2101      	movs	r1, #1
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 f914 	bl	8004b1c <lps22hb_block_data_update_set>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 80048fa:	f04f 33ff 	mov.w	r3, #4294967295
 80048fe:	e020      	b.n	8004942 <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10b      	bne.n	8004920 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	331c      	adds	r3, #28
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fa13 	bl	8004d3a <lps22hb_auto_add_inc_set>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00e      	beq.n	8004938 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800491a:	f04f 33ff 	mov.w	r3, #4294967295
 800491e:	e010      	b.n	8004942 <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	331c      	adds	r3, #28
 8004924:	2101      	movs	r1, #1
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fa07 	bl	8004d3a <lps22hb_auto_add_inc_set>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004932:	f04f 33ff 	mov.w	r3, #4294967295
 8004936:	e004      	b.n	8004942 <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2203      	movs	r2, #3
 800493c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800494a:	b590      	push	{r4, r7, lr}
 800494c:	b089      	sub	sp, #36	; 0x24
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	461a      	mov	r2, r3
 8004956:	460b      	mov	r3, r1
 8004958:	72fb      	strb	r3, [r7, #11]
 800495a:	4613      	mov	r3, r2
 800495c:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d121      	bne.n	80049b2 <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 800496e:	2300      	movs	r3, #0
 8004970:	83fb      	strh	r3, [r7, #30]
 8004972:	e018      	b.n	80049a6 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	695c      	ldr	r4, [r3, #20]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	7b1b      	ldrb	r3, [r3, #12]
 800497c:	b298      	uxth	r0, r3
 800497e:	7afb      	ldrb	r3, [r7, #11]
 8004980:	b29a      	uxth	r2, r3
 8004982:	8bfb      	ldrh	r3, [r7, #30]
 8004984:	4413      	add	r3, r2
 8004986:	b299      	uxth	r1, r3
 8004988:	8bfb      	ldrh	r3, [r7, #30]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	441a      	add	r2, r3
 800498e:	2301      	movs	r3, #1
 8004990:	47a0      	blx	r4
 8004992:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800499a:	f04f 33ff 	mov.w	r3, #4294967295
 800499e:	e013      	b.n	80049c8 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80049a0:	8bfb      	ldrh	r3, [r7, #30]
 80049a2:	3301      	adds	r3, #1
 80049a4:	83fb      	strh	r3, [r7, #30]
 80049a6:	8bfa      	ldrh	r2, [r7, #30]
 80049a8:	893b      	ldrh	r3, [r7, #8]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3e2      	bcc.n	8004974 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	e00a      	b.n	80049c8 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	695c      	ldr	r4, [r3, #20]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	7b1b      	ldrb	r3, [r3, #12]
 80049ba:	b298      	uxth	r0, r3
 80049bc:	7afb      	ldrb	r3, [r7, #11]
 80049be:	b299      	uxth	r1, r3
 80049c0:	893b      	ldrh	r3, [r7, #8]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	47a0      	blx	r4
 80049c6:	4603      	mov	r3, r0
  }
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3724      	adds	r7, #36	; 0x24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd90      	pop	{r4, r7, pc}

080049d0 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b089      	sub	sp, #36	; 0x24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	607a      	str	r2, [r7, #4]
 80049da:	461a      	mov	r2, r3
 80049dc:	460b      	mov	r3, r1
 80049de:	72fb      	strb	r3, [r7, #11]
 80049e0:	4613      	mov	r3, r2
 80049e2:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d121      	bne.n	8004a38 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80049f4:	2300      	movs	r3, #0
 80049f6:	83fb      	strh	r3, [r7, #30]
 80049f8:	e018      	b.n	8004a2c <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	691c      	ldr	r4, [r3, #16]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	7b1b      	ldrb	r3, [r3, #12]
 8004a02:	b298      	uxth	r0, r3
 8004a04:	7afb      	ldrb	r3, [r7, #11]
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	8bfb      	ldrh	r3, [r7, #30]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	b299      	uxth	r1, r3
 8004a0e:	8bfb      	ldrh	r3, [r7, #30]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	441a      	add	r2, r3
 8004a14:	2301      	movs	r3, #1
 8004a16:	47a0      	blx	r4
 8004a18:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004a20:	f04f 33ff 	mov.w	r3, #4294967295
 8004a24:	e013      	b.n	8004a4e <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004a26:	8bfb      	ldrh	r3, [r7, #30]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	83fb      	strh	r3, [r7, #30]
 8004a2c:	8bfa      	ldrh	r2, [r7, #30]
 8004a2e:	893b      	ldrh	r3, [r7, #8]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d3e2      	bcc.n	80049fa <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	e00a      	b.n	8004a4e <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	691c      	ldr	r4, [r3, #16]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	7b1b      	ldrb	r3, [r3, #12]
 8004a40:	b298      	uxth	r0, r3
 8004a42:	7afb      	ldrb	r3, [r7, #11]
 8004a44:	b299      	uxth	r1, r3
 8004a46:	893b      	ldrh	r3, [r7, #8]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	47a0      	blx	r4
 8004a4c:	4603      	mov	r3, r0
  }
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3724      	adds	r7, #36	; 0x24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd90      	pop	{r4, r7, pc}

08004a56 <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004a56:	b590      	push	{r4, r7, lr}
 8004a58:	b087      	sub	sp, #28
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	461a      	mov	r2, r3
 8004a62:	460b      	mov	r3, r1
 8004a64:	72fb      	strb	r3, [r7, #11]
 8004a66:	4613      	mov	r3, r2
 8004a68:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685c      	ldr	r4, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6898      	ldr	r0, [r3, #8]
 8004a72:	893b      	ldrh	r3, [r7, #8]
 8004a74:	7af9      	ldrb	r1, [r7, #11]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	47a0      	blx	r4
 8004a7a:	6178      	str	r0, [r7, #20]
  return ret;
 8004a7c:	697b      	ldr	r3, [r7, #20]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd90      	pop	{r4, r7, pc}

08004a86 <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004a86:	b590      	push	{r4, r7, lr}
 8004a88:	b087      	sub	sp, #28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	461a      	mov	r2, r3
 8004a92:	460b      	mov	r3, r1
 8004a94:	72fb      	strb	r3, [r7, #11]
 8004a96:	4613      	mov	r3, r2
 8004a98:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681c      	ldr	r4, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6898      	ldr	r0, [r3, #8]
 8004aa2:	893b      	ldrh	r3, [r7, #8]
 8004aa4:	7af9      	ldrb	r1, [r7, #11]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	47a0      	blx	r4
 8004aaa:	6178      	str	r0, [r7, #20]
  return ret;
 8004aac:	697b      	ldr	r3, [r7, #20]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	371c      	adds	r7, #28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd90      	pop	{r4, r7, pc}
	...

08004ab8 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 4096.0f );
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aca:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004ae4 <lps22hb_from_lsb_to_hpa+0x2c>
 8004ace:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004ad2:	eef0 7a66 	vmov.f32	s15, s13
}
 8004ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	45800000 	.word	0x45800000

08004ae8 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 8004af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004afe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004b18 <lps22hb_from_lsb_to_degc+0x30>
 8004b02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b06:	eef0 7a66 	vmov.f32	s15, s13
}
 8004b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	42c80000 	.word	0x42c80000

08004b1c <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004b28:	f107 0208 	add.w	r2, r7, #8
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	2110      	movs	r1, #16
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff ff90 	bl	8004a56 <lps22hb_read_reg>
 8004b36:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10f      	bne.n	8004b5e <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	7a3b      	ldrb	r3, [r7, #8]
 8004b48:	f362 0341 	bfi	r3, r2, #1, #1
 8004b4c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004b4e:	f107 0208 	add.w	r2, r7, #8
 8004b52:	2301      	movs	r3, #1
 8004b54:	2110      	movs	r1, #16
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff ff95 	bl	8004a86 <lps22hb_write_reg>
 8004b5c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004b74:	f107 0208 	add.w	r2, r7, #8
 8004b78:	2301      	movs	r3, #1
 8004b7a:	2110      	movs	r1, #16
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff ff6a 	bl	8004a56 <lps22hb_read_reg>
 8004b82:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10f      	bne.n	8004baa <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	7a3b      	ldrb	r3, [r7, #8]
 8004b94:	f362 0383 	bfi	r3, r2, #2, #2
 8004b98:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004b9a:	f107 0208 	add.w	r2, r7, #8
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	2110      	movs	r1, #16
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff ff6f 	bl	8004a86 <lps22hb_write_reg>
 8004ba8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004baa:	68fb      	ldr	r3, [r7, #12]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004bc0:	f107 0208 	add.w	r2, r7, #8
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	2110      	movs	r1, #16
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff ff44 	bl	8004a56 <lps22hb_read_reg>
 8004bce:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10f      	bne.n	8004bf6 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	7a3b      	ldrb	r3, [r7, #8]
 8004be0:	f362 1306 	bfi	r3, r2, #4, #3
 8004be4:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004be6:	f107 0208 	add.w	r2, r7, #8
 8004bea:	2301      	movs	r3, #1
 8004bec:	2110      	movs	r1, #16
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7ff ff49 	bl	8004a86 <lps22hb_write_reg>
 8004bf4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004c0a:	f107 0208 	add.w	r2, r7, #8
 8004c0e:	2301      	movs	r3, #1
 8004c10:	2110      	movs	r1, #16
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff ff1f 	bl	8004a56 <lps22hb_read_reg>
 8004c18:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg1.odr){
 8004c1a:	7a3b      	ldrb	r3, [r7, #8]
 8004c1c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d826      	bhi.n	8004c74 <lps22hb_data_rate_get+0x74>
 8004c26:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <lps22hb_data_rate_get+0x2c>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c45 	.word	0x08004c45
 8004c30:	08004c4d 	.word	0x08004c4d
 8004c34:	08004c55 	.word	0x08004c55
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c65 	.word	0x08004c65
 8004c40:	08004c6d 	.word	0x08004c6d
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2200      	movs	r2, #0
 8004c48:	701a      	strb	r2, [r3, #0]
      break;
 8004c4a:	e017      	b.n	8004c7c <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]
      break;
 8004c52:	e013      	b.n	8004c7c <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2202      	movs	r2, #2
 8004c58:	701a      	strb	r2, [r3, #0]
      break;
 8004c5a:	e00f      	b.n	8004c7c <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2203      	movs	r2, #3
 8004c60:	701a      	strb	r2, [r3, #0]
      break;
 8004c62:	e00b      	b.n	8004c7c <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2204      	movs	r2, #4
 8004c68:	701a      	strb	r2, [r3, #0]
      break;
 8004c6a:	e007      	b.n	8004c7c <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2205      	movs	r2, #5
 8004c70:	701a      	strb	r2, [r3, #0]
      break;
 8004c72:	e003      	b.n	8004c7c <lps22hb_data_rate_get+0x7c>
    default:
      *val = LPS22HB_ODR_1_Hz;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]
      break;
 8004c7a:	bf00      	nop
  }

  return ret;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop

08004c88 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 8004c92:	2303      	movs	r3, #3
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	2128      	movs	r1, #40	; 0x28
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff fedc 	bl	8004a56 <lps22hb_read_reg>
 8004c9e:	60f8      	str	r0, [r7, #12]
  return ret;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	212b      	movs	r1, #43	; 0x2b
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff fecb 	bl	8004a56 <lps22hb_read_reg>
 8004cc0:	60f8      	str	r0, [r7, #12]
  return ret;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	210f      	movs	r1, #15
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff feba 	bl	8004a56 <lps22hb_read_reg>
 8004ce2:	60f8      	str	r0, [r7, #12]
  return ret;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8004cfa:	f107 0208 	add.w	r2, r7, #8
 8004cfe:	2301      	movs	r3, #1
 8004d00:	211a      	movs	r1, #26
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fea7 	bl	8004a56 <lps22hb_read_reg>
 8004d08:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10f      	bne.n	8004d30 <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	7a3b      	ldrb	r3, [r7, #8]
 8004d1a:	f362 0300 	bfi	r3, r2, #0, #1
 8004d1e:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8004d20:	f107 0208 	add.w	r2, r7, #8
 8004d24:	2301      	movs	r3, #1
 8004d26:	211a      	movs	r1, #26
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff feac 	bl	8004a86 <lps22hb_write_reg>
 8004d2e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004d30:	68fb      	ldr	r3, [r7, #12]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	460b      	mov	r3, r1
 8004d44:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004d46:	f107 0208 	add.w	r2, r7, #8
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	2111      	movs	r1, #17
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff fe81 	bl	8004a56 <lps22hb_read_reg>
 8004d54:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10f      	bne.n	8004d7c <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	7a3b      	ldrb	r3, [r7, #8]
 8004d66:	f362 1304 	bfi	r3, r2, #4, #1
 8004d6a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004d6c:	f107 0208 	add.w	r2, r7, #8
 8004d70:	2301      	movs	r3, #1
 8004d72:	2111      	movs	r1, #17
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fe86 	bl	8004a86 <lps22hb_write_reg>
 8004d7a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8004d96:	2301      	movs	r3, #1
 8004d98:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <IKS01A2_ENV_SENSOR_Init+0x22>
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d032      	beq.n	8004e0e <IKS01A2_ENV_SENSOR_Init+0x86>
 8004da8:	e063      	b.n	8004e72 <IKS01A2_ENV_SENSOR_Init+0xea>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8004daa:	6838      	ldr	r0, [r7, #0]
 8004dac:	f000 f8f0 	bl	8004f90 <HTS221_0_Probe>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <IKS01A2_ENV_SENSOR_Init+0x34>
      {
        return BSP_ERROR_NO_INIT;
 8004db6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dba:	e098      	b.n	8004eee <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004dbc:	4a4e      	ldr	r2, [pc, #312]	; (8004ef8 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	494d      	ldr	r1, [pc, #308]	; (8004efc <IKS01A2_ENV_SENSOR_Init+0x174>)
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004dce:	f107 0108 	add.w	r1, r7, #8
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	4798      	blx	r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <IKS01A2_ENV_SENSOR_Init+0x5a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004ddc:	f06f 0306 	mvn.w	r3, #6
 8004de0:	e085      	b.n	8004eee <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 8004de2:	7a3b      	ldrb	r3, [r7, #8]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d103      	bne.n	8004df0 <IKS01A2_ENV_SENSOR_Init+0x68>
      {
        component_functions |= ENV_TEMPERATURE;
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8004df0:	7abb      	ldrb	r3, [r7, #10]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d103      	bne.n	8004dfe <IKS01A2_ENV_SENSOR_Init+0x76>
      {
        component_functions |= ENV_HUMIDITY;
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	f043 0304 	orr.w	r3, r3, #4
 8004dfc:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8004dfe:	7a7b      	ldrb	r3, [r7, #9]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d13a      	bne.n	8004e7a <IKS01A2_ENV_SENSOR_Init+0xf2>
      {
        component_functions |= ENV_PRESSURE;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	f043 0302 	orr.w	r3, r3, #2
 8004e0a:	61bb      	str	r3, [r7, #24]
      }
      break;
 8004e0c:	e035      	b.n	8004e7a <IKS01A2_ENV_SENSOR_Init+0xf2>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8004e0e:	6838      	ldr	r0, [r7, #0]
 8004e10:	f000 f978 	bl	8005104 <LPS22HB_0_Probe>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <IKS01A2_ENV_SENSOR_Init+0x98>
      {
        return BSP_ERROR_NO_INIT;
 8004e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1e:	e066      	b.n	8004eee <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004e20:	4a35      	ldr	r2, [pc, #212]	; (8004ef8 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	4934      	ldr	r1, [pc, #208]	; (8004efc <IKS01A2_ENV_SENSOR_Init+0x174>)
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004e32:	f107 0108 	add.w	r1, r7, #8
 8004e36:	4610      	mov	r0, r2
 8004e38:	4798      	blx	r3
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <IKS01A2_ENV_SENSOR_Init+0xbe>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004e40:	f06f 0306 	mvn.w	r3, #6
 8004e44:	e053      	b.n	8004eee <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 8004e46:	7a3b      	ldrb	r3, [r7, #8]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d103      	bne.n	8004e54 <IKS01A2_ENV_SENSOR_Init+0xcc>
      {
        component_functions |= ENV_TEMPERATURE;
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8004e54:	7abb      	ldrb	r3, [r7, #10]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d103      	bne.n	8004e62 <IKS01A2_ENV_SENSOR_Init+0xda>
      {
        component_functions |= ENV_HUMIDITY;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	f043 0304 	orr.w	r3, r3, #4
 8004e60:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8004e62:	7a7b      	ldrb	r3, [r7, #9]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10a      	bne.n	8004e7e <IKS01A2_ENV_SENSOR_Init+0xf6>
      {
        component_functions |= ENV_PRESSURE;
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	f043 0302 	orr.w	r3, r3, #2
 8004e6e:	61bb      	str	r3, [r7, #24]
      }
      break;
 8004e70:	e005      	b.n	8004e7e <IKS01A2_ENV_SENSOR_Init+0xf6>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004e72:	f06f 0301 	mvn.w	r3, #1
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004e78:	e002      	b.n	8004e80 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e000      	b.n	8004e80 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 8004e7e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <IKS01A2_ENV_SENSOR_Init+0x102>
  {
    return ret;
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	e031      	b.n	8004eee <IKS01A2_ENV_SENSOR_Init+0x166>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	e02a      	b.n	8004ee6 <IKS01A2_ENV_SENSOR_Init+0x15e>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	4013      	ands	r3, r2
 8004e96:	6a3a      	ldr	r2, [r7, #32]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d11e      	bne.n	8004eda <IKS01A2_ENV_SENSOR_Init+0x152>
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	6a3a      	ldr	r2, [r7, #32]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d118      	bne.n	8004eda <IKS01A2_ENV_SENSOR_Init+0x152>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8004ea8:	4a15      	ldr	r2, [pc, #84]	; (8004f00 <IKS01A2_ENV_SENSOR_Init+0x178>)
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004eb0:	4814      	ldr	r0, [pc, #80]	; (8004f04 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4413      	add	r3, r2
 8004eba:	440b      	add	r3, r1
 8004ebc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	490e      	ldr	r1, [pc, #56]	; (8004efc <IKS01A2_ENV_SENSOR_Init+0x174>)
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004eca:	4610      	mov	r0, r2
 8004ecc:	4798      	blx	r3
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <IKS01A2_ENV_SENSOR_Init+0x152>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8004ed4:	f06f 0304 	mvn.w	r3, #4
 8004ed8:	e009      	b.n	8004eee <IKS01A2_ENV_SENSOR_Init+0x166>
      }
    }
    function = function << 1;
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	61fb      	str	r3, [r7, #28]
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d9d1      	bls.n	8004e90 <IKS01A2_ENV_SENSOR_Init+0x108>
  }

  return ret;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3728      	adds	r7, #40	; 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	200002b0 	.word	0x200002b0
 8004efc:	200005d0 	.word	0x200005d0
 8004f00:	20000078 	.word	0x20000078
 8004f04:	20000298 	.word	0x20000298

08004f08 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d903      	bls.n	8004f22 <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004f1a:	f06f 0301 	mvn.w	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e029      	b.n	8004f76 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8004f22:	4a17      	ldr	r2, [pc, #92]	; (8004f80 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d11d      	bne.n	8004f70 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8004f34:	4a13      	ldr	r2, [pc, #76]	; (8004f84 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f3c:	4812      	ldr	r0, [pc, #72]	; (8004f88 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	440b      	add	r3, r1
 8004f48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	490f      	ldr	r1, [pc, #60]	; (8004f8c <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4798      	blx	r3
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f62:	f06f 0304 	mvn.w	r3, #4
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	e005      	b.n	8004f76 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	e002      	b.n	8004f76 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004f70:	f06f 0301 	mvn.w	r3, #1
 8004f74:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004f76:	697b      	ldr	r3, [r7, #20]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	200002b8 	.word	0x200002b8
 8004f84:	20000078 	.word	0x20000078
 8004f88:	20000298 	.word	0x20000298
 8004f8c:	200005d0 	.word	0x200005d0

08004f90 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b090      	sub	sp, #64	; 0x40
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8004fa0:	23bf      	movs	r3, #191	; 0xbf
 8004fa2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004fa6:	4b49      	ldr	r3, [pc, #292]	; (80050cc <HTS221_0_Probe+0x13c>)
 8004fa8:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004faa:	4b49      	ldr	r3, [pc, #292]	; (80050d0 <HTS221_0_Probe+0x140>)
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8004fae:	4b49      	ldr	r3, [pc, #292]	; (80050d4 <HTS221_0_Probe+0x144>)
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004fb2:	4b49      	ldr	r3, [pc, #292]	; (80050d8 <HTS221_0_Probe+0x148>)
 8004fb4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004fb6:	4b49      	ldr	r3, [pc, #292]	; (80050dc <HTS221_0_Probe+0x14c>)
 8004fb8:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8004fba:	f107 0320 	add.w	r3, r7, #32
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4847      	ldr	r0, [pc, #284]	; (80050e0 <HTS221_0_Probe+0x150>)
 8004fc2:	f7fe fb61 	bl	8003688 <HTS221_RegisterBusIO>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004fcc:	f06f 0306 	mvn.w	r3, #6
 8004fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd2:	e076      	b.n	80050c2 <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8004fd4:	f107 031f 	add.w	r3, r7, #31
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4841      	ldr	r0, [pc, #260]	; (80050e0 <HTS221_0_Probe+0x150>)
 8004fdc:	f7fe fbd9 	bl	8003792 <HTS221_ReadID>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004fe6:	f06f 0306 	mvn.w	r3, #6
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fec:	e069      	b.n	80050c2 <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8004fee:	7ffb      	ldrb	r3, [r7, #31]
 8004ff0:	2bbc      	cmp	r3, #188	; 0xbc
 8004ff2:	d003      	beq.n	8004ffc <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004ff4:	f06f 0306 	mvn.w	r3, #6
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffa:	e062      	b.n	80050c2 <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8004ffc:	f107 030c 	add.w	r3, r7, #12
 8005000:	4619      	mov	r1, r3
 8005002:	4837      	ldr	r0, [pc, #220]	; (80050e0 <HTS221_0_Probe+0x150>)
 8005004:	f7fe fbdc 	bl	80037c0 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005008:	7b3b      	ldrb	r3, [r7, #12]
 800500a:	461a      	mov	r2, r3
 800500c:	7b7b      	ldrb	r3, [r7, #13]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8005012:	7bbb      	ldrb	r3, [r7, #14]
 8005014:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005016:	4313      	orrs	r3, r2
 8005018:	4a32      	ldr	r2, [pc, #200]	; (80050e4 <HTS221_0_Probe+0x154>)
 800501a:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 800501c:	4b32      	ldr	r3, [pc, #200]	; (80050e8 <HTS221_0_Probe+0x158>)
 800501e:	4a30      	ldr	r2, [pc, #192]	; (80050e0 <HTS221_0_Probe+0x150>)
 8005020:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8005022:	4b32      	ldr	r3, [pc, #200]	; (80050ec <HTS221_0_Probe+0x15c>)
 8005024:	4a32      	ldr	r2, [pc, #200]	; (80050f0 <HTS221_0_Probe+0x160>)
 8005026:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d11d      	bne.n	800506a <HTS221_0_Probe+0xda>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d018      	beq.n	800506a <HTS221_0_Probe+0xda>
 8005038:	7b3b      	ldrb	r3, [r7, #12]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d115      	bne.n	800506a <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800503e:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <HTS221_0_Probe+0x164>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4a2d      	ldr	r2, [pc, #180]	; (80050f8 <HTS221_0_Probe+0x168>)
 8005044:	492d      	ldr	r1, [pc, #180]	; (80050fc <HTS221_0_Probe+0x16c>)
 8005046:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800504a:	4b28      	ldr	r3, [pc, #160]	; (80050ec <HTS221_0_Probe+0x15c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a25      	ldr	r2, [pc, #148]	; (80050e8 <HTS221_0_Probe+0x158>)
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	4610      	mov	r0, r2
 8005056:	4798      	blx	r3
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800505e:	f06f 0304 	mvn.w	r3, #4
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005064:	e001      	b.n	800506a <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005066:	2300      	movs	r3, #0
 8005068:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d11d      	bne.n	80050ac <HTS221_0_Probe+0x11c>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d018      	beq.n	80050ac <HTS221_0_Probe+0x11c>
 800507a:	7bbb      	ldrb	r3, [r7, #14]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d115      	bne.n	80050ac <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8005080:	4b1c      	ldr	r3, [pc, #112]	; (80050f4 <HTS221_0_Probe+0x164>)
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	4a1c      	ldr	r2, [pc, #112]	; (80050f8 <HTS221_0_Probe+0x168>)
 8005086:	491e      	ldr	r1, [pc, #120]	; (8005100 <HTS221_0_Probe+0x170>)
 8005088:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800508c:	4b17      	ldr	r3, [pc, #92]	; (80050ec <HTS221_0_Probe+0x15c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a15      	ldr	r2, [pc, #84]	; (80050e8 <HTS221_0_Probe+0x158>)
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	4610      	mov	r0, r2
 8005098:	4798      	blx	r3
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80050a0:	f06f 0304 	mvn.w	r3, #4
 80050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a6:	e001      	b.n	80050ac <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80050ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d107      	bne.n	80050c2 <HTS221_0_Probe+0x132>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80050bc:	f06f 0304 	mvn.w	r3, #4
 80050c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 80050c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3740      	adds	r7, #64	; 0x40
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	08002ed1 	.word	0x08002ed1
 80050d0:	08002f35 	.word	0x08002f35
 80050d4:	08002fe9 	.word	0x08002fe9
 80050d8:	08002f85 	.word	0x08002f85
 80050dc:	0800304d 	.word	0x0800304d
 80050e0:	200002c0 	.word	0x200002c0
 80050e4:	200002b8 	.word	0x200002b8
 80050e8:	200005d0 	.word	0x200005d0
 80050ec:	200002b0 	.word	0x200002b0
 80050f0:	20000008 	.word	0x20000008
 80050f4:	20000078 	.word	0x20000078
 80050f8:	20000298 	.word	0x20000298
 80050fc:	2000002c 	.word	0x2000002c
 8005100:	20000018 	.word	0x20000018

08005104 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b090      	sub	sp, #64	; 0x40
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800510c:	2300      	movs	r3, #0
 800510e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 8005110:	2300      	movs	r3, #0
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 8005114:	23bb      	movs	r3, #187	; 0xbb
 8005116:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 800511a:	4b4a      	ldr	r3, [pc, #296]	; (8005244 <LPS22HB_0_Probe+0x140>)
 800511c:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800511e:	4b4a      	ldr	r3, [pc, #296]	; (8005248 <LPS22HB_0_Probe+0x144>)
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005122:	4b4a      	ldr	r3, [pc, #296]	; (800524c <LPS22HB_0_Probe+0x148>)
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005126:	4b4a      	ldr	r3, [pc, #296]	; (8005250 <LPS22HB_0_Probe+0x14c>)
 8005128:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 800512a:	4b4a      	ldr	r3, [pc, #296]	; (8005254 <LPS22HB_0_Probe+0x150>)
 800512c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 800512e:	f107 0320 	add.w	r3, r7, #32
 8005132:	4619      	mov	r1, r3
 8005134:	4848      	ldr	r0, [pc, #288]	; (8005258 <LPS22HB_0_Probe+0x154>)
 8005136:	f7ff f873 	bl	8004220 <LPS22HB_RegisterBusIO>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005140:	f06f 0306 	mvn.w	r3, #6
 8005144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005146:	e078      	b.n	800523a <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8005148:	f107 031f 	add.w	r3, r7, #31
 800514c:	4619      	mov	r1, r3
 800514e:	4842      	ldr	r0, [pc, #264]	; (8005258 <LPS22HB_0_Probe+0x154>)
 8005150:	f7ff f90b 	bl	800436a <LPS22HB_ReadID>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800515a:	f06f 0306 	mvn.w	r3, #6
 800515e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005160:	e06b      	b.n	800523a <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 8005162:	7ffb      	ldrb	r3, [r7, #31]
 8005164:	2bb1      	cmp	r3, #177	; 0xb1
 8005166:	d003      	beq.n	8005170 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005168:	f06f 0306 	mvn.w	r3, #6
 800516c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800516e:	e064      	b.n	800523a <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8005170:	f107 030c 	add.w	r3, r7, #12
 8005174:	4619      	mov	r1, r3
 8005176:	4838      	ldr	r0, [pc, #224]	; (8005258 <LPS22HB_0_Probe+0x154>)
 8005178:	f7ff f90e 	bl	8004398 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800517c:	7b3b      	ldrb	r3, [r7, #12]
 800517e:	461a      	mov	r2, r3
 8005180:	7b7b      	ldrb	r3, [r7, #13]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8005186:	7bbb      	ldrb	r3, [r7, #14]
 8005188:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800518a:	4313      	orrs	r3, r2
 800518c:	4a33      	ldr	r2, [pc, #204]	; (800525c <LPS22HB_0_Probe+0x158>)
 800518e:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 8005190:	4b33      	ldr	r3, [pc, #204]	; (8005260 <LPS22HB_0_Probe+0x15c>)
 8005192:	4a31      	ldr	r2, [pc, #196]	; (8005258 <LPS22HB_0_Probe+0x154>)
 8005194:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8005196:	4b33      	ldr	r3, [pc, #204]	; (8005264 <LPS22HB_0_Probe+0x160>)
 8005198:	4a33      	ldr	r2, [pc, #204]	; (8005268 <LPS22HB_0_Probe+0x164>)
 800519a:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800519c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d11e      	bne.n	80051e0 <LPS22HB_0_Probe+0xdc>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d019      	beq.n	80051e0 <LPS22HB_0_Probe+0xdc>
 80051ac:	7b3b      	ldrb	r3, [r7, #12]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d116      	bne.n	80051e0 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 80051b2:	4b2e      	ldr	r3, [pc, #184]	; (800526c <LPS22HB_0_Probe+0x168>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	4a2e      	ldr	r2, [pc, #184]	; (8005270 <LPS22HB_0_Probe+0x16c>)
 80051b8:	3303      	adds	r3, #3
 80051ba:	492e      	ldr	r1, [pc, #184]	; (8005274 <LPS22HB_0_Probe+0x170>)
 80051bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80051c0:	4b28      	ldr	r3, [pc, #160]	; (8005264 <LPS22HB_0_Probe+0x160>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a26      	ldr	r2, [pc, #152]	; (8005260 <LPS22HB_0_Probe+0x15c>)
 80051c8:	6852      	ldr	r2, [r2, #4]
 80051ca:	4610      	mov	r0, r2
 80051cc:	4798      	blx	r3
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80051d4:	f06f 0304 	mvn.w	r3, #4
 80051d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051da:	e001      	b.n	80051e0 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80051dc:	2300      	movs	r3, #0
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d11e      	bne.n	8005224 <LPS22HB_0_Probe+0x120>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d019      	beq.n	8005224 <LPS22HB_0_Probe+0x120>
 80051f0:	7b7b      	ldrb	r3, [r7, #13]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d116      	bne.n	8005224 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 80051f6:	4b1d      	ldr	r3, [pc, #116]	; (800526c <LPS22HB_0_Probe+0x168>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	4a1d      	ldr	r2, [pc, #116]	; (8005270 <LPS22HB_0_Probe+0x16c>)
 80051fc:	3303      	adds	r3, #3
 80051fe:	491e      	ldr	r1, [pc, #120]	; (8005278 <LPS22HB_0_Probe+0x174>)
 8005200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8005204:	4b17      	ldr	r3, [pc, #92]	; (8005264 <LPS22HB_0_Probe+0x160>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a15      	ldr	r2, [pc, #84]	; (8005260 <LPS22HB_0_Probe+0x15c>)
 800520c:	6852      	ldr	r2, [r2, #4]
 800520e:	4610      	mov	r0, r2
 8005210:	4798      	blx	r3
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005218:	f06f 0304 	mvn.w	r3, #4
 800521c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800521e:	e001      	b.n	8005224 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005220:	2300      	movs	r3, #0
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8005224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d107      	bne.n	800523a <LPS22HB_0_Probe+0x136>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005234:	f06f 0304 	mvn.w	r3, #4
 8005238:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800523a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800523c:	4618      	mov	r0, r3
 800523e:	3740      	adds	r7, #64	; 0x40
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	08002ed1 	.word	0x08002ed1
 8005248:	08002f35 	.word	0x08002f35
 800524c:	08002fe9 	.word	0x08002fe9
 8005250:	08002f85 	.word	0x08002f85
 8005254:	0800304d 	.word	0x0800304d
 8005258:	200002ec 	.word	0x200002ec
 800525c:	200002b8 	.word	0x200002b8
 8005260:	200005d0 	.word	0x200005d0
 8005264:	200002b0 	.word	0x200002b0
 8005268:	20000040 	.word	0x20000040
 800526c:	20000078 	.word	0x20000078
 8005270:	20000298 	.word	0x20000298
 8005274:	20000064 	.word	0x20000064
 8005278:	20000050 	.word	0x20000050

0800527c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005280:	4b0e      	ldr	r3, [pc, #56]	; (80052bc <HAL_Init+0x40>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a0d      	ldr	r2, [pc, #52]	; (80052bc <HAL_Init+0x40>)
 8005286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800528a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800528c:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <HAL_Init+0x40>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <HAL_Init+0x40>)
 8005292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005298:	4b08      	ldr	r3, [pc, #32]	; (80052bc <HAL_Init+0x40>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a07      	ldr	r2, [pc, #28]	; (80052bc <HAL_Init+0x40>)
 800529e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052a4:	2003      	movs	r0, #3
 80052a6:	f000 fd23 	bl	8005cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052aa:	2000      	movs	r0, #0
 80052ac:	f000 f808 	bl	80052c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052b0:	f7fd fd86 	bl	8002dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40023c00 	.word	0x40023c00

080052c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052c8:	4b12      	ldr	r3, [pc, #72]	; (8005314 <HAL_InitTick+0x54>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4b12      	ldr	r3, [pc, #72]	; (8005318 <HAL_InitTick+0x58>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	4619      	mov	r1, r3
 80052d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80052da:	fbb2 f3f3 	udiv	r3, r2, r3
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fd3b 	bl	8005d5a <HAL_SYSTICK_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e00e      	b.n	800530c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b0f      	cmp	r3, #15
 80052f2:	d80a      	bhi.n	800530a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052f4:	2200      	movs	r2, #0
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	f000 fd03 	bl	8005d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005300:	4a06      	ldr	r2, [pc, #24]	; (800531c <HAL_InitTick+0x5c>)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	e000      	b.n	800530c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20000004 	.word	0x20000004
 8005318:	20000090 	.word	0x20000090
 800531c:	2000008c 	.word	0x2000008c

08005320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005324:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_IncTick+0x20>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	4b06      	ldr	r3, [pc, #24]	; (8005344 <HAL_IncTick+0x24>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4413      	add	r3, r2
 8005330:	4a04      	ldr	r2, [pc, #16]	; (8005344 <HAL_IncTick+0x24>)
 8005332:	6013      	str	r3, [r2, #0]
}
 8005334:	bf00      	nop
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000090 	.word	0x20000090
 8005344:	200005d8 	.word	0x200005d8

08005348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return uwTick;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_GetTick+0x14>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	200005d8 	.word	0x200005d8

08005360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005368:	f7ff ffee 	bl	8005348 <HAL_GetTick>
 800536c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d005      	beq.n	8005386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800537a:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <HAL_Delay+0x40>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005386:	bf00      	nop
 8005388:	f7ff ffde 	bl	8005348 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	429a      	cmp	r2, r3
 8005396:	d8f7      	bhi.n	8005388 <HAL_Delay+0x28>
  {
  }
}
 8005398:	bf00      	nop
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000090 	.word	0x20000090

080053a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e033      	b.n	8005422 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fb fe1c 	bl	8001000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d118      	bne.n	8005414 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80053ea:	f023 0302 	bic.w	r3, r3, #2
 80053ee:	f043 0202 	orr.w	r2, r3, #2
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fa2c 	bl	8005854 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	f043 0201 	orr.w	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
 8005412:	e001      	b.n	8005418 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005420:	7bfb      	ldrb	r3, [r7, #15]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <HAL_ADC_Start_DMA+0x1e>
 8005446:	2302      	movs	r3, #2
 8005448:	e0b1      	b.n	80055ae <HAL_ADC_Start_DMA+0x182>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b01      	cmp	r3, #1
 800545e:	d018      	beq.n	8005492 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005470:	4b51      	ldr	r3, [pc, #324]	; (80055b8 <HAL_ADC_Start_DMA+0x18c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a51      	ldr	r2, [pc, #324]	; (80055bc <HAL_ADC_Start_DMA+0x190>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	0c9a      	lsrs	r2, r3, #18
 800547c:	4613      	mov	r3, r2
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	4413      	add	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005484:	e002      	b.n	800548c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	3b01      	subs	r3, #1
 800548a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f9      	bne.n	8005486 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b01      	cmp	r3, #1
 800549e:	f040 8085 	bne.w	80055ac <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054aa:	f023 0301 	bic.w	r3, r3, #1
 80054ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e0:	d106      	bne.n	80054f0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e6:	f023 0206 	bic.w	r2, r3, #6
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44
 80054ee:	e002      	b.n	80054f6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054fe:	4b30      	ldr	r3, [pc, #192]	; (80055c0 <HAL_ADC_Start_DMA+0x194>)
 8005500:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	4a2f      	ldr	r2, [pc, #188]	; (80055c4 <HAL_ADC_Start_DMA+0x198>)
 8005508:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	4a2e      	ldr	r2, [pc, #184]	; (80055c8 <HAL_ADC_Start_DMA+0x19c>)
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	4a2d      	ldr	r2, [pc, #180]	; (80055cc <HAL_ADC_Start_DMA+0x1a0>)
 8005518:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005522:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005532:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005542:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	334c      	adds	r3, #76	; 0x4c
 800554e:	4619      	mov	r1, r3
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f000 fcbc 	bl	8005ed0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10f      	bne.n	8005584 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d11c      	bne.n	80055ac <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005580:	609a      	str	r2, [r3, #8]
 8005582:	e013      	b.n	80055ac <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a11      	ldr	r2, [pc, #68]	; (80055d0 <HAL_ADC_Start_DMA+0x1a4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d10e      	bne.n	80055ac <HAL_ADC_Start_DMA+0x180>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d107      	bne.n	80055ac <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80055aa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000004 	.word	0x20000004
 80055bc:	431bde83 	.word	0x431bde83
 80055c0:	40012300 	.word	0x40012300
 80055c4:	08005a4d 	.word	0x08005a4d
 80055c8:	08005b07 	.word	0x08005b07
 80055cc:	08005b23 	.word	0x08005b23
 80055d0:	40012000 	.word	0x40012000

080055d4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_ADC_ConfigChannel+0x1c>
 8005628:	2302      	movs	r3, #2
 800562a:	e105      	b.n	8005838 <HAL_ADC_ConfigChannel+0x228>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b09      	cmp	r3, #9
 800563a:	d925      	bls.n	8005688 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68d9      	ldr	r1, [r3, #12]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	4613      	mov	r3, r2
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	4413      	add	r3, r2
 8005650:	3b1e      	subs	r3, #30
 8005652:	2207      	movs	r2, #7
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	43da      	mvns	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	400a      	ands	r2, r1
 8005660:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68d9      	ldr	r1, [r3, #12]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	b29b      	uxth	r3, r3
 8005672:	4618      	mov	r0, r3
 8005674:	4603      	mov	r3, r0
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	4403      	add	r3, r0
 800567a:	3b1e      	subs	r3, #30
 800567c:	409a      	lsls	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	60da      	str	r2, [r3, #12]
 8005686:	e022      	b.n	80056ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6919      	ldr	r1, [r3, #16]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	4613      	mov	r3, r2
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4413      	add	r3, r2
 800569c:	2207      	movs	r2, #7
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43da      	mvns	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	400a      	ands	r2, r1
 80056aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6919      	ldr	r1, [r3, #16]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	4618      	mov	r0, r3
 80056be:	4603      	mov	r3, r0
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	4403      	add	r3, r0
 80056c4:	409a      	lsls	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b06      	cmp	r3, #6
 80056d4:	d824      	bhi.n	8005720 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	3b05      	subs	r3, #5
 80056e8:	221f      	movs	r2, #31
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	43da      	mvns	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	400a      	ands	r2, r1
 80056f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	4618      	mov	r0, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	3b05      	subs	r3, #5
 8005712:	fa00 f203 	lsl.w	r2, r0, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	635a      	str	r2, [r3, #52]	; 0x34
 800571e:	e04c      	b.n	80057ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b0c      	cmp	r3, #12
 8005726:	d824      	bhi.n	8005772 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	3b23      	subs	r3, #35	; 0x23
 800573a:	221f      	movs	r2, #31
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	43da      	mvns	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	400a      	ands	r2, r1
 8005748:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	4618      	mov	r0, r3
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	3b23      	subs	r3, #35	; 0x23
 8005764:	fa00 f203 	lsl.w	r2, r0, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	631a      	str	r2, [r3, #48]	; 0x30
 8005770:	e023      	b.n	80057ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	3b41      	subs	r3, #65	; 0x41
 8005784:	221f      	movs	r2, #31
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43da      	mvns	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	400a      	ands	r2, r1
 8005792:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	4618      	mov	r0, r3
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	3b41      	subs	r3, #65	; 0x41
 80057ae:	fa00 f203 	lsl.w	r2, r0, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057ba:	4b22      	ldr	r3, [pc, #136]	; (8005844 <HAL_ADC_ConfigChannel+0x234>)
 80057bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a21      	ldr	r2, [pc, #132]	; (8005848 <HAL_ADC_ConfigChannel+0x238>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d109      	bne.n	80057dc <HAL_ADC_ConfigChannel+0x1cc>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b12      	cmp	r3, #18
 80057ce:	d105      	bne.n	80057dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a19      	ldr	r2, [pc, #100]	; (8005848 <HAL_ADC_ConfigChannel+0x238>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d123      	bne.n	800582e <HAL_ADC_ConfigChannel+0x21e>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b10      	cmp	r3, #16
 80057ec:	d003      	beq.n	80057f6 <HAL_ADC_ConfigChannel+0x1e6>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b11      	cmp	r3, #17
 80057f4:	d11b      	bne.n	800582e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b10      	cmp	r3, #16
 8005808:	d111      	bne.n	800582e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800580a:	4b10      	ldr	r3, [pc, #64]	; (800584c <HAL_ADC_ConfigChannel+0x23c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a10      	ldr	r2, [pc, #64]	; (8005850 <HAL_ADC_ConfigChannel+0x240>)
 8005810:	fba2 2303 	umull	r2, r3, r2, r3
 8005814:	0c9a      	lsrs	r2, r3, #18
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005820:	e002      	b.n	8005828 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	3b01      	subs	r3, #1
 8005826:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f9      	bne.n	8005822 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	40012300 	.word	0x40012300
 8005848:	40012000 	.word	0x40012000
 800584c:	20000004 	.word	0x20000004
 8005850:	431bde83 	.word	0x431bde83

08005854 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800585c:	4b79      	ldr	r3, [pc, #484]	; (8005a44 <ADC_Init+0x1f0>)
 800585e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	431a      	orrs	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6859      	ldr	r1, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	021a      	lsls	r2, r3, #8
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80058ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6859      	ldr	r1, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6899      	ldr	r1, [r3, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	4a58      	ldr	r2, [pc, #352]	; (8005a48 <ADC_Init+0x1f4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d022      	beq.n	8005932 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6899      	ldr	r1, [r3, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800591c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6899      	ldr	r1, [r3, #8]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	609a      	str	r2, [r3, #8]
 8005930:	e00f      	b.n	8005952 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005950:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0202 	bic.w	r2, r2, #2
 8005960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6899      	ldr	r1, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	7e1b      	ldrb	r3, [r3, #24]
 800596c:	005a      	lsls	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01b      	beq.n	80059b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800598e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800599e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6859      	ldr	r1, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	3b01      	subs	r3, #1
 80059ac:	035a      	lsls	r2, r3, #13
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
 80059b6:	e007      	b.n	80059c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80059d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	051a      	lsls	r2, r3, #20
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6899      	ldr	r1, [r3, #8]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a0a:	025a      	lsls	r2, r3, #9
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6899      	ldr	r1, [r3, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	029a      	lsls	r2, r3, #10
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	40012300 	.word	0x40012300
 8005a48:	0f000001 	.word	0x0f000001

08005a4c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d13c      	bne.n	8005ae0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d12b      	bne.n	8005ad8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d127      	bne.n	8005ad8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d006      	beq.n	8005aa4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d119      	bne.n	8005ad8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0220 	bic.w	r2, r2, #32
 8005ab2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d105      	bne.n	8005ad8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	f043 0201 	orr.w	r2, r3, #1
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f7ff fd7b 	bl	80055d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005ade:	e00e      	b.n	8005afe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f7ff fd85 	bl	80055fc <HAL_ADC_ErrorCallback>
}
 8005af2:	e004      	b.n	8005afe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	4798      	blx	r3
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f7ff fd67 	bl	80055e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2240      	movs	r2, #64	; 0x40
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3a:	f043 0204 	orr.w	r2, r3, #4
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff fd5a 	bl	80055fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b60:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <__NVIC_SetPriorityGrouping+0x44>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b82:	4a04      	ldr	r2, [pc, #16]	; (8005b94 <__NVIC_SetPriorityGrouping+0x44>)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	60d3      	str	r3, [r2, #12]
}
 8005b88:	bf00      	nop
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	e000ed00 	.word	0xe000ed00

08005b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b9c:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	f003 0307 	and.w	r3, r3, #7
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	e000ed00 	.word	0xe000ed00

08005bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	db0b      	blt.n	8005bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	f003 021f 	and.w	r2, r3, #31
 8005bcc:	4907      	ldr	r1, [pc, #28]	; (8005bec <__NVIC_EnableIRQ+0x38>)
 8005bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8005bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	e000e100 	.word	0xe000e100

08005bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	6039      	str	r1, [r7, #0]
 8005bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	db0a      	blt.n	8005c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	490c      	ldr	r1, [pc, #48]	; (8005c3c <__NVIC_SetPriority+0x4c>)
 8005c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c0e:	0112      	lsls	r2, r2, #4
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	440b      	add	r3, r1
 8005c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c18:	e00a      	b.n	8005c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	4908      	ldr	r1, [pc, #32]	; (8005c40 <__NVIC_SetPriority+0x50>)
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	3b04      	subs	r3, #4
 8005c28:	0112      	lsls	r2, r2, #4
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	761a      	strb	r2, [r3, #24]
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	e000e100 	.word	0xe000e100
 8005c40:	e000ed00 	.word	0xe000ed00

08005c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b089      	sub	sp, #36	; 0x24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f1c3 0307 	rsb	r3, r3, #7
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	bf28      	it	cs
 8005c62:	2304      	movcs	r3, #4
 8005c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	2b06      	cmp	r3, #6
 8005c6c:	d902      	bls.n	8005c74 <NVIC_EncodePriority+0x30>
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	3b03      	subs	r3, #3
 8005c72:	e000      	b.n	8005c76 <NVIC_EncodePriority+0x32>
 8005c74:	2300      	movs	r3, #0
 8005c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c78:	f04f 32ff 	mov.w	r2, #4294967295
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	43da      	mvns	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	401a      	ands	r2, r3
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	fa01 f303 	lsl.w	r3, r1, r3
 8005c96:	43d9      	mvns	r1, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c9c:	4313      	orrs	r3, r2
         );
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3724      	adds	r7, #36	; 0x24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cbc:	d301      	bcc.n	8005cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e00f      	b.n	8005ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cc2:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <SysTick_Config+0x40>)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cca:	210f      	movs	r1, #15
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	f7ff ff8e 	bl	8005bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <SysTick_Config+0x40>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cda:	4b04      	ldr	r3, [pc, #16]	; (8005cec <SysTick_Config+0x40>)
 8005cdc:	2207      	movs	r2, #7
 8005cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	e000e010 	.word	0xe000e010

08005cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff ff29 	bl	8005b50 <__NVIC_SetPriorityGrouping>
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b086      	sub	sp, #24
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d18:	f7ff ff3e 	bl	8005b98 <__NVIC_GetPriorityGrouping>
 8005d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	6978      	ldr	r0, [r7, #20]
 8005d24:	f7ff ff8e 	bl	8005c44 <NVIC_EncodePriority>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff ff5d 	bl	8005bf0 <__NVIC_SetPriority>
}
 8005d36:	bf00      	nop
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	4603      	mov	r3, r0
 8005d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff ff31 	bl	8005bb4 <__NVIC_EnableIRQ>
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff ffa2 	bl	8005cac <SysTick_Config>
 8005d68:	4603      	mov	r3, r0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d80:	f7ff fae2 	bl	8005348 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e099      	b.n	8005ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0201 	bic.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005db0:	e00f      	b.n	8005dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005db2:	f7ff fac9 	bl	8005348 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b05      	cmp	r3, #5
 8005dbe:	d908      	bls.n	8005dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2203      	movs	r2, #3
 8005dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e078      	b.n	8005ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e8      	bne.n	8005db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4b38      	ldr	r3, [pc, #224]	; (8005ecc <HAL_DMA_Init+0x158>)
 8005dec:	4013      	ands	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d107      	bne.n	8005e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e34:	4313      	orrs	r3, r2
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0307 	bic.w	r3, r3, #7
 8005e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d117      	bne.n	8005e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00e      	beq.n	8005e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fa6f 	bl	800635c <DMA_CheckFifoParam>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2240      	movs	r2, #64	; 0x40
 8005e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005e92:	2301      	movs	r3, #1
 8005e94:	e016      	b.n	8005ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fa26 	bl	80062f0 <DMA_CalcBaseAndBitshift>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eac:	223f      	movs	r2, #63	; 0x3f
 8005eae:	409a      	lsls	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	f010803f 	.word	0xf010803f

08005ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_DMA_Start_IT+0x26>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e040      	b.n	8005f78 <HAL_DMA_Start_IT+0xa8>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d12f      	bne.n	8005f6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f9b8 	bl	8006294 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f28:	223f      	movs	r2, #63	; 0x3f
 8005f2a:	409a      	lsls	r2, r3
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0216 	orr.w	r2, r2, #22
 8005f3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0208 	orr.w	r2, r2, #8
 8005f56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	e005      	b.n	8005f76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005f72:	2302      	movs	r3, #2
 8005f74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f8c:	4b92      	ldr	r3, [pc, #584]	; (80061d8 <HAL_DMA_IRQHandler+0x258>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a92      	ldr	r2, [pc, #584]	; (80061dc <HAL_DMA_IRQHandler+0x25c>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	0a9b      	lsrs	r3, r3, #10
 8005f98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005faa:	2208      	movs	r2, #8
 8005fac:	409a      	lsls	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d01a      	beq.n	8005fec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d013      	beq.n	8005fec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0204 	bic.w	r2, r2, #4
 8005fd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd8:	2208      	movs	r2, #8
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe4:	f043 0201 	orr.w	r2, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d012      	beq.n	8006022 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600e:	2201      	movs	r2, #1
 8006010:	409a      	lsls	r2, r3
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601a:	f043 0202 	orr.w	r2, r3, #2
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006026:	2204      	movs	r2, #4
 8006028:	409a      	lsls	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4013      	ands	r3, r2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d012      	beq.n	8006058 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006044:	2204      	movs	r2, #4
 8006046:	409a      	lsls	r2, r3
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006050:	f043 0204 	orr.w	r2, r3, #4
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605c:	2210      	movs	r2, #16
 800605e:	409a      	lsls	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4013      	ands	r3, r2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d043      	beq.n	80060f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d03c      	beq.n	80060f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607a:	2210      	movs	r2, #16
 800607c:	409a      	lsls	r2, r3
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d018      	beq.n	80060c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d108      	bne.n	80060b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d024      	beq.n	80060f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
 80060ae:	e01f      	b.n	80060f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d01b      	beq.n	80060f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
 80060c0:	e016      	b.n	80060f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d107      	bne.n	80060e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0208 	bic.w	r2, r2, #8
 80060de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f4:	2220      	movs	r2, #32
 80060f6:	409a      	lsls	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4013      	ands	r3, r2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 808e 	beq.w	800621e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 8086 	beq.w	800621e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006116:	2220      	movs	r2, #32
 8006118:	409a      	lsls	r2, r3
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b05      	cmp	r3, #5
 8006128:	d136      	bne.n	8006198 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0216 	bic.w	r2, r2, #22
 8006138:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	695a      	ldr	r2, [r3, #20]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006148:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d103      	bne.n	800615a <HAL_DMA_IRQHandler+0x1da>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006156:	2b00      	cmp	r3, #0
 8006158:	d007      	beq.n	800616a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0208 	bic.w	r2, r2, #8
 8006168:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616e:	223f      	movs	r2, #63	; 0x3f
 8006170:	409a      	lsls	r2, r3
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618a:	2b00      	cmp	r3, #0
 800618c:	d07d      	beq.n	800628a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4798      	blx	r3
        }
        return;
 8006196:	e078      	b.n	800628a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01c      	beq.n	80061e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d108      	bne.n	80061c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d030      	beq.n	800621e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
 80061c4:	e02b      	b.n	800621e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d027      	beq.n	800621e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	4798      	blx	r3
 80061d6:	e022      	b.n	800621e <HAL_DMA_IRQHandler+0x29e>
 80061d8:	20000004 	.word	0x20000004
 80061dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10f      	bne.n	800620e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0210 	bic.w	r2, r2, #16
 80061fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006222:	2b00      	cmp	r3, #0
 8006224:	d032      	beq.n	800628c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d022      	beq.n	8006278 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2205      	movs	r2, #5
 8006236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	3301      	adds	r3, #1
 800624e:	60bb      	str	r3, [r7, #8]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	429a      	cmp	r2, r3
 8006254:	d307      	bcc.n	8006266 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1f2      	bne.n	800624a <HAL_DMA_IRQHandler+0x2ca>
 8006264:	e000      	b.n	8006268 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006266:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	4798      	blx	r3
 8006288:	e000      	b.n	800628c <HAL_DMA_IRQHandler+0x30c>
        return;
 800628a:	bf00      	nop
    }
  }
}
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop

08006294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b40      	cmp	r3, #64	; 0x40
 80062c0:	d108      	bne.n	80062d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062d2:	e007      	b.n	80062e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	60da      	str	r2, [r3, #12]
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	3b10      	subs	r3, #16
 8006300:	4a14      	ldr	r2, [pc, #80]	; (8006354 <DMA_CalcBaseAndBitshift+0x64>)
 8006302:	fba2 2303 	umull	r2, r3, r2, r3
 8006306:	091b      	lsrs	r3, r3, #4
 8006308:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800630a:	4a13      	ldr	r2, [pc, #76]	; (8006358 <DMA_CalcBaseAndBitshift+0x68>)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b03      	cmp	r3, #3
 800631c:	d909      	bls.n	8006332 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006326:	f023 0303 	bic.w	r3, r3, #3
 800632a:	1d1a      	adds	r2, r3, #4
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	659a      	str	r2, [r3, #88]	; 0x58
 8006330:	e007      	b.n	8006342 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800633a:	f023 0303 	bic.w	r3, r3, #3
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	aaaaaaab 	.word	0xaaaaaaab
 8006358:	0800d29c 	.word	0x0800d29c

0800635c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d11f      	bne.n	80063b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b03      	cmp	r3, #3
 800637a:	d855      	bhi.n	8006428 <DMA_CheckFifoParam+0xcc>
 800637c:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <DMA_CheckFifoParam+0x28>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	08006395 	.word	0x08006395
 8006388:	080063a7 	.word	0x080063a7
 800638c:	08006395 	.word	0x08006395
 8006390:	08006429 	.word	0x08006429
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d045      	beq.n	800642c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063a4:	e042      	b.n	800642c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063ae:	d13f      	bne.n	8006430 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063b4:	e03c      	b.n	8006430 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063be:	d121      	bne.n	8006404 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d836      	bhi.n	8006434 <DMA_CheckFifoParam+0xd8>
 80063c6:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <DMA_CheckFifoParam+0x70>)
 80063c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063cc:	080063dd 	.word	0x080063dd
 80063d0:	080063e3 	.word	0x080063e3
 80063d4:	080063dd 	.word	0x080063dd
 80063d8:	080063f5 	.word	0x080063f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	73fb      	strb	r3, [r7, #15]
      break;
 80063e0:	e02f      	b.n	8006442 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d024      	beq.n	8006438 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063f2:	e021      	b.n	8006438 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063fc:	d11e      	bne.n	800643c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006402:	e01b      	b.n	800643c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d902      	bls.n	8006410 <DMA_CheckFifoParam+0xb4>
 800640a:	2b03      	cmp	r3, #3
 800640c:	d003      	beq.n	8006416 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800640e:	e018      	b.n	8006442 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	73fb      	strb	r3, [r7, #15]
      break;
 8006414:	e015      	b.n	8006442 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00e      	beq.n	8006440 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
      break;
 8006426:	e00b      	b.n	8006440 <DMA_CheckFifoParam+0xe4>
      break;
 8006428:	bf00      	nop
 800642a:	e00a      	b.n	8006442 <DMA_CheckFifoParam+0xe6>
      break;
 800642c:	bf00      	nop
 800642e:	e008      	b.n	8006442 <DMA_CheckFifoParam+0xe6>
      break;
 8006430:	bf00      	nop
 8006432:	e006      	b.n	8006442 <DMA_CheckFifoParam+0xe6>
      break;
 8006434:	bf00      	nop
 8006436:	e004      	b.n	8006442 <DMA_CheckFifoParam+0xe6>
      break;
 8006438:	bf00      	nop
 800643a:	e002      	b.n	8006442 <DMA_CheckFifoParam+0xe6>
      break;   
 800643c:	bf00      	nop
 800643e:	e000      	b.n	8006442 <DMA_CheckFifoParam+0xe6>
      break;
 8006440:	bf00      	nop
    }
  } 
  
  return status; 
 8006442:	7bfb      	ldrb	r3, [r7, #15]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006462:	4b23      	ldr	r3, [pc, #140]	; (80064f0 <HAL_FLASH_Program+0xa0>)
 8006464:	7e1b      	ldrb	r3, [r3, #24]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_FLASH_Program+0x1e>
 800646a:	2302      	movs	r3, #2
 800646c:	e03b      	b.n	80064e6 <HAL_FLASH_Program+0x96>
 800646e:	4b20      	ldr	r3, [pc, #128]	; (80064f0 <HAL_FLASH_Program+0xa0>)
 8006470:	2201      	movs	r2, #1
 8006472:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006474:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006478:	f000 f860 	bl	800653c <FLASH_WaitForLastOperation>
 800647c:	4603      	mov	r3, r0
 800647e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006480:	7dfb      	ldrb	r3, [r7, #23]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d12b      	bne.n	80064de <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d105      	bne.n	8006498 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800648c:	783b      	ldrb	r3, [r7, #0]
 800648e:	4619      	mov	r1, r3
 8006490:	68b8      	ldr	r0, [r7, #8]
 8006492:	f000 f909 	bl	80066a8 <FLASH_Program_Byte>
 8006496:	e016      	b.n	80064c6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d105      	bne.n	80064aa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800649e:	883b      	ldrh	r3, [r7, #0]
 80064a0:	4619      	mov	r1, r3
 80064a2:	68b8      	ldr	r0, [r7, #8]
 80064a4:	f000 f8dc 	bl	8006660 <FLASH_Program_HalfWord>
 80064a8:	e00d      	b.n	80064c6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d105      	bne.n	80064bc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	4619      	mov	r1, r3
 80064b4:	68b8      	ldr	r0, [r7, #8]
 80064b6:	f000 f8b1 	bl	800661c <FLASH_Program_Word>
 80064ba:	e004      	b.n	80064c6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80064bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064c0:	68b8      	ldr	r0, [r7, #8]
 80064c2:	f000 f87b 	bl	80065bc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80064c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80064ca:	f000 f837 	bl	800653c <FLASH_WaitForLastOperation>
 80064ce:	4603      	mov	r3, r0
 80064d0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80064d2:	4b08      	ldr	r3, [pc, #32]	; (80064f4 <HAL_FLASH_Program+0xa4>)
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	4a07      	ldr	r2, [pc, #28]	; (80064f4 <HAL_FLASH_Program+0xa4>)
 80064d8:	f023 0301 	bic.w	r3, r3, #1
 80064dc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80064de:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <HAL_FLASH_Program+0xa0>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	200005dc 	.word	0x200005dc
 80064f4:	40023c00 	.word	0x40023c00

080064f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006502:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <HAL_FLASH_Unlock+0x38>)
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	da0b      	bge.n	8006522 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <HAL_FLASH_Unlock+0x38>)
 800650c:	4a09      	ldr	r2, [pc, #36]	; (8006534 <HAL_FLASH_Unlock+0x3c>)
 800650e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006510:	4b07      	ldr	r3, [pc, #28]	; (8006530 <HAL_FLASH_Unlock+0x38>)
 8006512:	4a09      	ldr	r2, [pc, #36]	; (8006538 <HAL_FLASH_Unlock+0x40>)
 8006514:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006516:	4b06      	ldr	r3, [pc, #24]	; (8006530 <HAL_FLASH_Unlock+0x38>)
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	da01      	bge.n	8006522 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006522:	79fb      	ldrb	r3, [r7, #7]
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	40023c00 	.word	0x40023c00
 8006534:	45670123 	.word	0x45670123
 8006538:	cdef89ab 	.word	0xcdef89ab

0800653c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006548:	4b1a      	ldr	r3, [pc, #104]	; (80065b4 <FLASH_WaitForLastOperation+0x78>)
 800654a:	2200      	movs	r2, #0
 800654c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800654e:	f7fe fefb 	bl	8005348 <HAL_GetTick>
 8006552:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006554:	e010      	b.n	8006578 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655c:	d00c      	beq.n	8006578 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d007      	beq.n	8006574 <FLASH_WaitForLastOperation+0x38>
 8006564:	f7fe fef0 	bl	8005348 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	429a      	cmp	r2, r3
 8006572:	d201      	bcs.n	8006578 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e019      	b.n	80065ac <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006578:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <FLASH_WaitForLastOperation+0x7c>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e8      	bne.n	8006556 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006584:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <FLASH_WaitForLastOperation+0x7c>)
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006590:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <FLASH_WaitForLastOperation+0x7c>)
 8006592:	2201      	movs	r2, #1
 8006594:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006596:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <FLASH_WaitForLastOperation+0x7c>)
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80065a2:	f000 f8a3 	bl	80066ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
  
}  
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	200005dc 	.word	0x200005dc
 80065b8:	40023c00 	.word	0x40023c00

080065bc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80065bc:	b490      	push	{r4, r7}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80065c8:	4b13      	ldr	r3, [pc, #76]	; (8006618 <FLASH_Program_DoubleWord+0x5c>)
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	4a12      	ldr	r2, [pc, #72]	; (8006618 <FLASH_Program_DoubleWord+0x5c>)
 80065ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80065d4:	4b10      	ldr	r3, [pc, #64]	; (8006618 <FLASH_Program_DoubleWord+0x5c>)
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	4a0f      	ldr	r2, [pc, #60]	; (8006618 <FLASH_Program_DoubleWord+0x5c>)
 80065da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80065de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80065e0:	4b0d      	ldr	r3, [pc, #52]	; (8006618 <FLASH_Program_DoubleWord+0x5c>)
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	4a0c      	ldr	r2, [pc, #48]	; (8006618 <FLASH_Program_DoubleWord+0x5c>)
 80065e6:	f043 0301 	orr.w	r3, r3, #1
 80065ea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80065f2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80065f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80065fa:	f04f 0300 	mov.w	r3, #0
 80065fe:	f04f 0400 	mov.w	r4, #0
 8006602:	0013      	movs	r3, r2
 8006604:	2400      	movs	r4, #0
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	3204      	adds	r2, #4
 800660a:	6013      	str	r3, [r2, #0]
}
 800660c:	bf00      	nop
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bc90      	pop	{r4, r7}
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40023c00 	.word	0x40023c00

0800661c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006626:	4b0d      	ldr	r3, [pc, #52]	; (800665c <FLASH_Program_Word+0x40>)
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	4a0c      	ldr	r2, [pc, #48]	; (800665c <FLASH_Program_Word+0x40>)
 800662c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006630:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006632:	4b0a      	ldr	r3, [pc, #40]	; (800665c <FLASH_Program_Word+0x40>)
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	4a09      	ldr	r2, [pc, #36]	; (800665c <FLASH_Program_Word+0x40>)
 8006638:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800663c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800663e:	4b07      	ldr	r3, [pc, #28]	; (800665c <FLASH_Program_Word+0x40>)
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	4a06      	ldr	r2, [pc, #24]	; (800665c <FLASH_Program_Word+0x40>)
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	601a      	str	r2, [r3, #0]
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	40023c00 	.word	0x40023c00

08006660 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800666c:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <FLASH_Program_HalfWord+0x44>)
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	4a0c      	ldr	r2, [pc, #48]	; (80066a4 <FLASH_Program_HalfWord+0x44>)
 8006672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006676:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <FLASH_Program_HalfWord+0x44>)
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	4a09      	ldr	r2, [pc, #36]	; (80066a4 <FLASH_Program_HalfWord+0x44>)
 800667e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006682:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006684:	4b07      	ldr	r3, [pc, #28]	; (80066a4 <FLASH_Program_HalfWord+0x44>)
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	4a06      	ldr	r2, [pc, #24]	; (80066a4 <FLASH_Program_HalfWord+0x44>)
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	887a      	ldrh	r2, [r7, #2]
 8006694:	801a      	strh	r2, [r3, #0]
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40023c00 	.word	0x40023c00

080066a8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80066b4:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <FLASH_Program_Byte+0x40>)
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	4a0b      	ldr	r2, [pc, #44]	; (80066e8 <FLASH_Program_Byte+0x40>)
 80066ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80066c0:	4b09      	ldr	r3, [pc, #36]	; (80066e8 <FLASH_Program_Byte+0x40>)
 80066c2:	4a09      	ldr	r2, [pc, #36]	; (80066e8 <FLASH_Program_Byte+0x40>)
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80066c8:	4b07      	ldr	r3, [pc, #28]	; (80066e8 <FLASH_Program_Byte+0x40>)
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	4a06      	ldr	r2, [pc, #24]	; (80066e8 <FLASH_Program_Byte+0x40>)
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	78fa      	ldrb	r2, [r7, #3]
 80066d8:	701a      	strb	r2, [r3, #0]
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	40023c00 	.word	0x40023c00

080066ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80066f0:	4b2f      	ldr	r3, [pc, #188]	; (80067b0 <FLASH_SetErrorCode+0xc4>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80066fc:	4b2d      	ldr	r3, [pc, #180]	; (80067b4 <FLASH_SetErrorCode+0xc8>)
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	f043 0310 	orr.w	r3, r3, #16
 8006704:	4a2b      	ldr	r2, [pc, #172]	; (80067b4 <FLASH_SetErrorCode+0xc8>)
 8006706:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006708:	4b29      	ldr	r3, [pc, #164]	; (80067b0 <FLASH_SetErrorCode+0xc4>)
 800670a:	2210      	movs	r2, #16
 800670c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800670e:	4b28      	ldr	r3, [pc, #160]	; (80067b0 <FLASH_SetErrorCode+0xc4>)
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f003 0320 	and.w	r3, r3, #32
 8006716:	2b00      	cmp	r3, #0
 8006718:	d008      	beq.n	800672c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800671a:	4b26      	ldr	r3, [pc, #152]	; (80067b4 <FLASH_SetErrorCode+0xc8>)
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f043 0308 	orr.w	r3, r3, #8
 8006722:	4a24      	ldr	r2, [pc, #144]	; (80067b4 <FLASH_SetErrorCode+0xc8>)
 8006724:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006726:	4b22      	ldr	r3, [pc, #136]	; (80067b0 <FLASH_SetErrorCode+0xc4>)
 8006728:	2220      	movs	r2, #32
 800672a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800672c:	4b20      	ldr	r3, [pc, #128]	; (80067b0 <FLASH_SetErrorCode+0xc4>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d008      	beq.n	800674a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006738:	4b1e      	ldr	r3, [pc, #120]	; (80067b4 <FLASH_SetErrorCode+0xc8>)
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	f043 0304 	orr.w	r3, r3, #4
 8006740:	4a1c      	ldr	r2, [pc, #112]	; (80067b4 <FLASH_SetErrorCode+0xc8>)
 8006742:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006744:	4b1a      	ldr	r3, [pc, #104]	; (80067b0 <FLASH_SetErrorCode+0xc4>)
 8006746:	2240      	movs	r2, #64	; 0x40
 8006748:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800674a:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <FLASH_SetErrorCode+0xc4>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006752:	2b00      	cmp	r3, #0
 8006754:	d008      	beq.n	8006768 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006756:	4b17      	ldr	r3, [pc, #92]	; (80067b4 <FLASH_SetErrorCode+0xc8>)
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	f043 0302 	orr.w	r3, r3, #2
 800675e:	4a15      	ldr	r2, [pc, #84]	; (80067b4 <FLASH_SetErrorCode+0xc8>)
 8006760:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006762:	4b13      	ldr	r3, [pc, #76]	; (80067b0 <FLASH_SetErrorCode+0xc4>)
 8006764:	2280      	movs	r2, #128	; 0x80
 8006766:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006768:	4b11      	ldr	r3, [pc, #68]	; (80067b0 <FLASH_SetErrorCode+0xc4>)
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006770:	2b00      	cmp	r3, #0
 8006772:	d009      	beq.n	8006788 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006774:	4b0f      	ldr	r3, [pc, #60]	; (80067b4 <FLASH_SetErrorCode+0xc8>)
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	f043 0301 	orr.w	r3, r3, #1
 800677c:	4a0d      	ldr	r2, [pc, #52]	; (80067b4 <FLASH_SetErrorCode+0xc8>)
 800677e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <FLASH_SetErrorCode+0xc4>)
 8006782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006786:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006788:	4b09      	ldr	r3, [pc, #36]	; (80067b0 <FLASH_SetErrorCode+0xc4>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d008      	beq.n	80067a6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006794:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <FLASH_SetErrorCode+0xc8>)
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	f043 0320 	orr.w	r3, r3, #32
 800679c:	4a05      	ldr	r2, [pc, #20]	; (80067b4 <FLASH_SetErrorCode+0xc8>)
 800679e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80067a0:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <FLASH_SetErrorCode+0xc4>)
 80067a2:	2202      	movs	r2, #2
 80067a4:	60da      	str	r2, [r3, #12]
  }
}
 80067a6:	bf00      	nop
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	40023c00 	.word	0x40023c00
 80067b4:	200005dc 	.word	0x200005dc

080067b8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80067ca:	4b31      	ldr	r3, [pc, #196]	; (8006890 <HAL_FLASHEx_Erase+0xd8>)
 80067cc:	7e1b      	ldrb	r3, [r3, #24]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <HAL_FLASHEx_Erase+0x1e>
 80067d2:	2302      	movs	r3, #2
 80067d4:	e058      	b.n	8006888 <HAL_FLASHEx_Erase+0xd0>
 80067d6:	4b2e      	ldr	r3, [pc, #184]	; (8006890 <HAL_FLASHEx_Erase+0xd8>)
 80067d8:	2201      	movs	r2, #1
 80067da:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80067dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80067e0:	f7ff feac 	bl	800653c <FLASH_WaitForLastOperation>
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d148      	bne.n	8006880 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	f04f 32ff 	mov.w	r2, #4294967295
 80067f4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d115      	bne.n	800682a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	b2da      	uxtb	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	4619      	mov	r1, r3
 800680a:	4610      	mov	r0, r2
 800680c:	f000 f844 	bl	8006898 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006810:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006814:	f7ff fe92 	bl	800653c <FLASH_WaitForLastOperation>
 8006818:	4603      	mov	r3, r0
 800681a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800681c:	4b1d      	ldr	r3, [pc, #116]	; (8006894 <HAL_FLASHEx_Erase+0xdc>)
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	4a1c      	ldr	r2, [pc, #112]	; (8006894 <HAL_FLASHEx_Erase+0xdc>)
 8006822:	f023 0304 	bic.w	r3, r3, #4
 8006826:	6113      	str	r3, [r2, #16]
 8006828:	e028      	b.n	800687c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	60bb      	str	r3, [r7, #8]
 8006830:	e01c      	b.n	800686c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	4619      	mov	r1, r3
 800683a:	68b8      	ldr	r0, [r7, #8]
 800683c:	f000 f850 	bl	80068e0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006840:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006844:	f7ff fe7a 	bl	800653c <FLASH_WaitForLastOperation>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800684c:	4b11      	ldr	r3, [pc, #68]	; (8006894 <HAL_FLASHEx_Erase+0xdc>)
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	4a10      	ldr	r2, [pc, #64]	; (8006894 <HAL_FLASHEx_Erase+0xdc>)
 8006852:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006856:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	601a      	str	r2, [r3, #0]
          break;
 8006864:	e00a      	b.n	800687c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	3301      	adds	r3, #1
 800686a:	60bb      	str	r3, [r7, #8]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	4413      	add	r3, r2
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	429a      	cmp	r2, r3
 800687a:	d3da      	bcc.n	8006832 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800687c:	f000 f878 	bl	8006970 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006880:	4b03      	ldr	r3, [pc, #12]	; (8006890 <HAL_FLASHEx_Erase+0xd8>)
 8006882:	2200      	movs	r2, #0
 8006884:	761a      	strb	r2, [r3, #24]

  return status;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	200005dc 	.word	0x200005dc
 8006894:	40023c00 	.word	0x40023c00

08006898 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	6039      	str	r1, [r7, #0]
 80068a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80068a4:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <FLASH_MassErase+0x44>)
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	4a0c      	ldr	r2, [pc, #48]	; (80068dc <FLASH_MassErase+0x44>)
 80068aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <FLASH_MassErase+0x44>)
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	4a09      	ldr	r2, [pc, #36]	; (80068dc <FLASH_MassErase+0x44>)
 80068b6:	f043 0304 	orr.w	r3, r3, #4
 80068ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80068bc:	4b07      	ldr	r3, [pc, #28]	; (80068dc <FLASH_MassErase+0x44>)
 80068be:	691a      	ldr	r2, [r3, #16]
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	4313      	orrs	r3, r2
 80068c6:	4a05      	ldr	r2, [pc, #20]	; (80068dc <FLASH_MassErase+0x44>)
 80068c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068cc:	6113      	str	r3, [r2, #16]
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40023c00 	.word	0x40023c00

080068e0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	e010      	b.n	800691e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d103      	bne.n	800690a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	e009      	b.n	800691e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	2b02      	cmp	r3, #2
 800690e:	d103      	bne.n	8006918 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	e002      	b.n	800691e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006918:	f44f 7340 	mov.w	r3, #768	; 0x300
 800691c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800691e:	4b13      	ldr	r3, [pc, #76]	; (800696c <FLASH_Erase_Sector+0x8c>)
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	4a12      	ldr	r2, [pc, #72]	; (800696c <FLASH_Erase_Sector+0x8c>)
 8006924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006928:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800692a:	4b10      	ldr	r3, [pc, #64]	; (800696c <FLASH_Erase_Sector+0x8c>)
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	490f      	ldr	r1, [pc, #60]	; (800696c <FLASH_Erase_Sector+0x8c>)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006936:	4b0d      	ldr	r3, [pc, #52]	; (800696c <FLASH_Erase_Sector+0x8c>)
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	4a0c      	ldr	r2, [pc, #48]	; (800696c <FLASH_Erase_Sector+0x8c>)
 800693c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006940:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006942:	4b0a      	ldr	r3, [pc, #40]	; (800696c <FLASH_Erase_Sector+0x8c>)
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	4313      	orrs	r3, r2
 800694c:	4a07      	ldr	r2, [pc, #28]	; (800696c <FLASH_Erase_Sector+0x8c>)
 800694e:	f043 0302 	orr.w	r3, r3, #2
 8006952:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006954:	4b05      	ldr	r3, [pc, #20]	; (800696c <FLASH_Erase_Sector+0x8c>)
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	4a04      	ldr	r2, [pc, #16]	; (800696c <FLASH_Erase_Sector+0x8c>)
 800695a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800695e:	6113      	str	r3, [r2, #16]
}
 8006960:	bf00      	nop
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	40023c00 	.word	0x40023c00

08006970 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8006974:	4b20      	ldr	r3, [pc, #128]	; (80069f8 <FLASH_FlushCaches+0x88>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800697c:	2b00      	cmp	r3, #0
 800697e:	d017      	beq.n	80069b0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006980:	4b1d      	ldr	r3, [pc, #116]	; (80069f8 <FLASH_FlushCaches+0x88>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a1c      	ldr	r2, [pc, #112]	; (80069f8 <FLASH_FlushCaches+0x88>)
 8006986:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800698a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800698c:	4b1a      	ldr	r3, [pc, #104]	; (80069f8 <FLASH_FlushCaches+0x88>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a19      	ldr	r2, [pc, #100]	; (80069f8 <FLASH_FlushCaches+0x88>)
 8006992:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	4b17      	ldr	r3, [pc, #92]	; (80069f8 <FLASH_FlushCaches+0x88>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a16      	ldr	r2, [pc, #88]	; (80069f8 <FLASH_FlushCaches+0x88>)
 800699e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069a2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80069a4:	4b14      	ldr	r3, [pc, #80]	; (80069f8 <FLASH_FlushCaches+0x88>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a13      	ldr	r2, [pc, #76]	; (80069f8 <FLASH_FlushCaches+0x88>)
 80069aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069ae:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80069b0:	4b11      	ldr	r3, [pc, #68]	; (80069f8 <FLASH_FlushCaches+0x88>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d017      	beq.n	80069ec <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80069bc:	4b0e      	ldr	r3, [pc, #56]	; (80069f8 <FLASH_FlushCaches+0x88>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a0d      	ldr	r2, [pc, #52]	; (80069f8 <FLASH_FlushCaches+0x88>)
 80069c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069c6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80069c8:	4b0b      	ldr	r3, [pc, #44]	; (80069f8 <FLASH_FlushCaches+0x88>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a0a      	ldr	r2, [pc, #40]	; (80069f8 <FLASH_FlushCaches+0x88>)
 80069ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	4b08      	ldr	r3, [pc, #32]	; (80069f8 <FLASH_FlushCaches+0x88>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a07      	ldr	r2, [pc, #28]	; (80069f8 <FLASH_FlushCaches+0x88>)
 80069da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069de:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80069e0:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <FLASH_FlushCaches+0x88>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a04      	ldr	r2, [pc, #16]	; (80069f8 <FLASH_FlushCaches+0x88>)
 80069e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069ea:	6013      	str	r3, [r2, #0]
  }
}
 80069ec:	bf00      	nop
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	40023c00 	.word	0x40023c00

080069fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b089      	sub	sp, #36	; 0x24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a12:	2300      	movs	r3, #0
 8006a14:	61fb      	str	r3, [r7, #28]
 8006a16:	e159      	b.n	8006ccc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a18:	2201      	movs	r2, #1
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	f040 8148 	bne.w	8006cc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d00b      	beq.n	8006a56 <HAL_GPIO_Init+0x5a>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d007      	beq.n	8006a56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a4a:	2b11      	cmp	r3, #17
 8006a4c:	d003      	beq.n	8006a56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b12      	cmp	r3, #18
 8006a54:	d130      	bne.n	8006ab8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	2203      	movs	r2, #3
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	43db      	mvns	r3, r3
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	43db      	mvns	r3, r3
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	091b      	lsrs	r3, r3, #4
 8006aa2:	f003 0201 	and.w	r2, r3, #1
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	4013      	ands	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d003      	beq.n	8006af8 <HAL_GPIO_Init+0xfc>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2b12      	cmp	r3, #18
 8006af6:	d123      	bne.n	8006b40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	08da      	lsrs	r2, r3, #3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3208      	adds	r2, #8
 8006b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	220f      	movs	r2, #15
 8006b10:	fa02 f303 	lsl.w	r3, r2, r3
 8006b14:	43db      	mvns	r3, r3
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	08da      	lsrs	r2, r3, #3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3208      	adds	r2, #8
 8006b3a:	69b9      	ldr	r1, [r7, #24]
 8006b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	43db      	mvns	r3, r3
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	4013      	ands	r3, r2
 8006b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f003 0203 	and.w	r2, r3, #3
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	fa02 f303 	lsl.w	r3, r2, r3
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 80a2 	beq.w	8006cc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	4b56      	ldr	r3, [pc, #344]	; (8006ce0 <HAL_GPIO_Init+0x2e4>)
 8006b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8a:	4a55      	ldr	r2, [pc, #340]	; (8006ce0 <HAL_GPIO_Init+0x2e4>)
 8006b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b90:	6453      	str	r3, [r2, #68]	; 0x44
 8006b92:	4b53      	ldr	r3, [pc, #332]	; (8006ce0 <HAL_GPIO_Init+0x2e4>)
 8006b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b9e:	4a51      	ldr	r2, [pc, #324]	; (8006ce4 <HAL_GPIO_Init+0x2e8>)
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	089b      	lsrs	r3, r3, #2
 8006ba4:	3302      	adds	r3, #2
 8006ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	220f      	movs	r2, #15
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a48      	ldr	r2, [pc, #288]	; (8006ce8 <HAL_GPIO_Init+0x2ec>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d019      	beq.n	8006bfe <HAL_GPIO_Init+0x202>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a47      	ldr	r2, [pc, #284]	; (8006cec <HAL_GPIO_Init+0x2f0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d013      	beq.n	8006bfa <HAL_GPIO_Init+0x1fe>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a46      	ldr	r2, [pc, #280]	; (8006cf0 <HAL_GPIO_Init+0x2f4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00d      	beq.n	8006bf6 <HAL_GPIO_Init+0x1fa>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a45      	ldr	r2, [pc, #276]	; (8006cf4 <HAL_GPIO_Init+0x2f8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d007      	beq.n	8006bf2 <HAL_GPIO_Init+0x1f6>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a44      	ldr	r2, [pc, #272]	; (8006cf8 <HAL_GPIO_Init+0x2fc>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d101      	bne.n	8006bee <HAL_GPIO_Init+0x1f2>
 8006bea:	2304      	movs	r3, #4
 8006bec:	e008      	b.n	8006c00 <HAL_GPIO_Init+0x204>
 8006bee:	2307      	movs	r3, #7
 8006bf0:	e006      	b.n	8006c00 <HAL_GPIO_Init+0x204>
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e004      	b.n	8006c00 <HAL_GPIO_Init+0x204>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e002      	b.n	8006c00 <HAL_GPIO_Init+0x204>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e000      	b.n	8006c00 <HAL_GPIO_Init+0x204>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	f002 0203 	and.w	r2, r2, #3
 8006c06:	0092      	lsls	r2, r2, #2
 8006c08:	4093      	lsls	r3, r2
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c10:	4934      	ldr	r1, [pc, #208]	; (8006ce4 <HAL_GPIO_Init+0x2e8>)
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	089b      	lsrs	r3, r3, #2
 8006c16:	3302      	adds	r3, #2
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c1e:	4b37      	ldr	r3, [pc, #220]	; (8006cfc <HAL_GPIO_Init+0x300>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	43db      	mvns	r3, r3
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c42:	4a2e      	ldr	r2, [pc, #184]	; (8006cfc <HAL_GPIO_Init+0x300>)
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c48:	4b2c      	ldr	r3, [pc, #176]	; (8006cfc <HAL_GPIO_Init+0x300>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	43db      	mvns	r3, r3
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	4013      	ands	r3, r2
 8006c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c6c:	4a23      	ldr	r2, [pc, #140]	; (8006cfc <HAL_GPIO_Init+0x300>)
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c72:	4b22      	ldr	r3, [pc, #136]	; (8006cfc <HAL_GPIO_Init+0x300>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	43db      	mvns	r3, r3
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c96:	4a19      	ldr	r2, [pc, #100]	; (8006cfc <HAL_GPIO_Init+0x300>)
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c9c:	4b17      	ldr	r3, [pc, #92]	; (8006cfc <HAL_GPIO_Init+0x300>)
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006cc0:	4a0e      	ldr	r2, [pc, #56]	; (8006cfc <HAL_GPIO_Init+0x300>)
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	61fb      	str	r3, [r7, #28]
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	2b0f      	cmp	r3, #15
 8006cd0:	f67f aea2 	bls.w	8006a18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006cd4:	bf00      	nop
 8006cd6:	3724      	adds	r7, #36	; 0x24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	40023800 	.word	0x40023800
 8006ce4:	40013800 	.word	0x40013800
 8006ce8:	40020000 	.word	0x40020000
 8006cec:	40020400 	.word	0x40020400
 8006cf0:	40020800 	.word	0x40020800
 8006cf4:	40020c00 	.word	0x40020c00
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	40013c00 	.word	0x40013c00

08006d00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d16:	2300      	movs	r3, #0
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	e0bb      	b.n	8006e94 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	f040 80ab 	bne.w	8006e8e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006d38:	4a5b      	ldr	r2, [pc, #364]	; (8006ea8 <HAL_GPIO_DeInit+0x1a8>)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	089b      	lsrs	r3, r3, #2
 8006d3e:	3302      	adds	r3, #2
 8006d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d44:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	220f      	movs	r2, #15
 8006d50:	fa02 f303 	lsl.w	r3, r2, r3
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	4013      	ands	r3, r2
 8006d58:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a53      	ldr	r2, [pc, #332]	; (8006eac <HAL_GPIO_DeInit+0x1ac>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d019      	beq.n	8006d96 <HAL_GPIO_DeInit+0x96>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a52      	ldr	r2, [pc, #328]	; (8006eb0 <HAL_GPIO_DeInit+0x1b0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d013      	beq.n	8006d92 <HAL_GPIO_DeInit+0x92>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a51      	ldr	r2, [pc, #324]	; (8006eb4 <HAL_GPIO_DeInit+0x1b4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00d      	beq.n	8006d8e <HAL_GPIO_DeInit+0x8e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a50      	ldr	r2, [pc, #320]	; (8006eb8 <HAL_GPIO_DeInit+0x1b8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d007      	beq.n	8006d8a <HAL_GPIO_DeInit+0x8a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a4f      	ldr	r2, [pc, #316]	; (8006ebc <HAL_GPIO_DeInit+0x1bc>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d101      	bne.n	8006d86 <HAL_GPIO_DeInit+0x86>
 8006d82:	2304      	movs	r3, #4
 8006d84:	e008      	b.n	8006d98 <HAL_GPIO_DeInit+0x98>
 8006d86:	2307      	movs	r3, #7
 8006d88:	e006      	b.n	8006d98 <HAL_GPIO_DeInit+0x98>
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e004      	b.n	8006d98 <HAL_GPIO_DeInit+0x98>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e002      	b.n	8006d98 <HAL_GPIO_DeInit+0x98>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <HAL_GPIO_DeInit+0x98>
 8006d96:	2300      	movs	r3, #0
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	f002 0203 	and.w	r2, r2, #3
 8006d9e:	0092      	lsls	r2, r2, #2
 8006da0:	4093      	lsls	r3, r2
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d132      	bne.n	8006e0e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006da8:	4b45      	ldr	r3, [pc, #276]	; (8006ec0 <HAL_GPIO_DeInit+0x1c0>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	43db      	mvns	r3, r3
 8006db0:	4943      	ldr	r1, [pc, #268]	; (8006ec0 <HAL_GPIO_DeInit+0x1c0>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006db6:	4b42      	ldr	r3, [pc, #264]	; (8006ec0 <HAL_GPIO_DeInit+0x1c0>)
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	4940      	ldr	r1, [pc, #256]	; (8006ec0 <HAL_GPIO_DeInit+0x1c0>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006dc4:	4b3e      	ldr	r3, [pc, #248]	; (8006ec0 <HAL_GPIO_DeInit+0x1c0>)
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	493c      	ldr	r1, [pc, #240]	; (8006ec0 <HAL_GPIO_DeInit+0x1c0>)
 8006dce:	4013      	ands	r3, r2
 8006dd0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006dd2:	4b3b      	ldr	r3, [pc, #236]	; (8006ec0 <HAL_GPIO_DeInit+0x1c0>)
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	43db      	mvns	r3, r3
 8006dda:	4939      	ldr	r1, [pc, #228]	; (8006ec0 <HAL_GPIO_DeInit+0x1c0>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	220f      	movs	r2, #15
 8006dea:	fa02 f303 	lsl.w	r3, r2, r3
 8006dee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006df0:	4a2d      	ldr	r2, [pc, #180]	; (8006ea8 <HAL_GPIO_DeInit+0x1a8>)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	089b      	lsrs	r3, r3, #2
 8006df6:	3302      	adds	r3, #2
 8006df8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	43da      	mvns	r2, r3
 8006e00:	4829      	ldr	r0, [pc, #164]	; (8006ea8 <HAL_GPIO_DeInit+0x1a8>)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	089b      	lsrs	r3, r3, #2
 8006e06:	400a      	ands	r2, r1
 8006e08:	3302      	adds	r3, #2
 8006e0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	2103      	movs	r1, #3
 8006e18:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	401a      	ands	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	08da      	lsrs	r2, r3, #3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3208      	adds	r2, #8
 8006e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	220f      	movs	r2, #15
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	43db      	mvns	r3, r3
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	08d2      	lsrs	r2, r2, #3
 8006e44:	4019      	ands	r1, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3208      	adds	r2, #8
 8006e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	2103      	movs	r1, #3
 8006e58:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	401a      	ands	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	2101      	movs	r1, #1
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e70:	43db      	mvns	r3, r3
 8006e72:	401a      	ands	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	2103      	movs	r1, #3
 8006e82:	fa01 f303 	lsl.w	r3, r1, r3
 8006e86:	43db      	mvns	r3, r3
 8006e88:	401a      	ands	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	3301      	adds	r3, #1
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b0f      	cmp	r3, #15
 8006e98:	f67f af40 	bls.w	8006d1c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006e9c:	bf00      	nop
 8006e9e:	371c      	adds	r7, #28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	40013800 	.word	0x40013800
 8006eac:	40020000 	.word	0x40020000
 8006eb0:	40020400 	.word	0x40020400
 8006eb4:	40020800 	.word	0x40020800
 8006eb8:	40020c00 	.word	0x40020c00
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	40013c00 	.word	0x40013c00

08006ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	887b      	ldrh	r3, [r7, #2]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006edc:	2301      	movs	r3, #1
 8006ede:	73fb      	strb	r3, [r7, #15]
 8006ee0:	e001      	b.n	8006ee6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	807b      	strh	r3, [r7, #2]
 8006f00:	4613      	mov	r3, r2
 8006f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f04:	787b      	ldrb	r3, [r7, #1]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f0a:	887a      	ldrh	r2, [r7, #2]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f10:	e003      	b.n	8006f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f12:	887b      	ldrh	r3, [r7, #2]
 8006f14:	041a      	lsls	r2, r3, #16
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	619a      	str	r2, [r3, #24]
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e11f      	b.n	800717a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fa fdfc 	bl	8001b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2224      	movs	r2, #36	; 0x24
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f8c:	f001 fd84 	bl	8008a98 <HAL_RCC_GetPCLK1Freq>
 8006f90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	4a7b      	ldr	r2, [pc, #492]	; (8007184 <HAL_I2C_Init+0x25c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d807      	bhi.n	8006fac <HAL_I2C_Init+0x84>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4a7a      	ldr	r2, [pc, #488]	; (8007188 <HAL_I2C_Init+0x260>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	bf94      	ite	ls
 8006fa4:	2301      	movls	r3, #1
 8006fa6:	2300      	movhi	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	e006      	b.n	8006fba <HAL_I2C_Init+0x92>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a77      	ldr	r2, [pc, #476]	; (800718c <HAL_I2C_Init+0x264>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	bf94      	ite	ls
 8006fb4:	2301      	movls	r3, #1
 8006fb6:	2300      	movhi	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e0db      	b.n	800717a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4a72      	ldr	r2, [pc, #456]	; (8007190 <HAL_I2C_Init+0x268>)
 8006fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fca:	0c9b      	lsrs	r3, r3, #18
 8006fcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	4a64      	ldr	r2, [pc, #400]	; (8007184 <HAL_I2C_Init+0x25c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d802      	bhi.n	8006ffc <HAL_I2C_Init+0xd4>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	e009      	b.n	8007010 <HAL_I2C_Init+0xe8>
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007002:	fb02 f303 	mul.w	r3, r2, r3
 8007006:	4a63      	ldr	r2, [pc, #396]	; (8007194 <HAL_I2C_Init+0x26c>)
 8007008:	fba2 2303 	umull	r2, r3, r2, r3
 800700c:	099b      	lsrs	r3, r3, #6
 800700e:	3301      	adds	r3, #1
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	6812      	ldr	r2, [r2, #0]
 8007014:	430b      	orrs	r3, r1
 8007016:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007022:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4956      	ldr	r1, [pc, #344]	; (8007184 <HAL_I2C_Init+0x25c>)
 800702c:	428b      	cmp	r3, r1
 800702e:	d80d      	bhi.n	800704c <HAL_I2C_Init+0x124>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	1e59      	subs	r1, r3, #1
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	fbb1 f3f3 	udiv	r3, r1, r3
 800703e:	3301      	adds	r3, #1
 8007040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007044:	2b04      	cmp	r3, #4
 8007046:	bf38      	it	cc
 8007048:	2304      	movcc	r3, #4
 800704a:	e04f      	b.n	80070ec <HAL_I2C_Init+0x1c4>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d111      	bne.n	8007078 <HAL_I2C_Init+0x150>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	1e58      	subs	r0, r3, #1
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6859      	ldr	r1, [r3, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	440b      	add	r3, r1
 8007062:	fbb0 f3f3 	udiv	r3, r0, r3
 8007066:	3301      	adds	r3, #1
 8007068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800706c:	2b00      	cmp	r3, #0
 800706e:	bf0c      	ite	eq
 8007070:	2301      	moveq	r3, #1
 8007072:	2300      	movne	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	e012      	b.n	800709e <HAL_I2C_Init+0x176>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	1e58      	subs	r0, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6859      	ldr	r1, [r3, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	440b      	add	r3, r1
 8007086:	0099      	lsls	r1, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	fbb0 f3f3 	udiv	r3, r0, r3
 800708e:	3301      	adds	r3, #1
 8007090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007094:	2b00      	cmp	r3, #0
 8007096:	bf0c      	ite	eq
 8007098:	2301      	moveq	r3, #1
 800709a:	2300      	movne	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <HAL_I2C_Init+0x17e>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e022      	b.n	80070ec <HAL_I2C_Init+0x1c4>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10e      	bne.n	80070cc <HAL_I2C_Init+0x1a4>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	1e58      	subs	r0, r3, #1
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6859      	ldr	r1, [r3, #4]
 80070b6:	460b      	mov	r3, r1
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	440b      	add	r3, r1
 80070bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80070c0:	3301      	adds	r3, #1
 80070c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ca:	e00f      	b.n	80070ec <HAL_I2C_Init+0x1c4>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	1e58      	subs	r0, r3, #1
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6859      	ldr	r1, [r3, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	440b      	add	r3, r1
 80070da:	0099      	lsls	r1, r3, #2
 80070dc:	440b      	add	r3, r1
 80070de:	fbb0 f3f3 	udiv	r3, r0, r3
 80070e2:	3301      	adds	r3, #1
 80070e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070ec:	6879      	ldr	r1, [r7, #4]
 80070ee:	6809      	ldr	r1, [r1, #0]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69da      	ldr	r2, [r3, #28]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800711a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6911      	ldr	r1, [r2, #16]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68d2      	ldr	r2, [r2, #12]
 8007126:	4311      	orrs	r1, r2
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6812      	ldr	r2, [r2, #0]
 800712c:	430b      	orrs	r3, r1
 800712e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	695a      	ldr	r2, [r3, #20]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0201 	orr.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2220      	movs	r2, #32
 8007166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	000186a0 	.word	0x000186a0
 8007188:	001e847f 	.word	0x001e847f
 800718c:	003d08ff 	.word	0x003d08ff
 8007190:	431bde83 	.word	0x431bde83
 8007194:	10624dd3 	.word	0x10624dd3

08007198 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e021      	b.n	80071ee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2224      	movs	r2, #36	; 0x24
 80071ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0201 	bic.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7fa fd2c 	bl	8001c20 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	461a      	mov	r2, r3
 8007204:	460b      	mov	r3, r1
 8007206:	817b      	strh	r3, [r7, #10]
 8007208:	4613      	mov	r3, r2
 800720a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800720c:	f7fe f89c 	bl	8005348 <HAL_GetTick>
 8007210:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b20      	cmp	r3, #32
 800721c:	f040 80e0 	bne.w	80073e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	2319      	movs	r3, #25
 8007226:	2201      	movs	r2, #1
 8007228:	4970      	ldr	r1, [pc, #448]	; (80073ec <HAL_I2C_Master_Transmit+0x1f4>)
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 fe1c 	bl	8007e68 <I2C_WaitOnFlagUntilTimeout>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007236:	2302      	movs	r3, #2
 8007238:	e0d3      	b.n	80073e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_I2C_Master_Transmit+0x50>
 8007244:	2302      	movs	r3, #2
 8007246:	e0cc      	b.n	80073e2 <HAL_I2C_Master_Transmit+0x1ea>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b01      	cmp	r3, #1
 800725c:	d007      	beq.n	800726e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f042 0201 	orr.w	r2, r2, #1
 800726c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800727c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2221      	movs	r2, #33	; 0x21
 8007282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2210      	movs	r2, #16
 800728a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	893a      	ldrh	r2, [r7, #8]
 800729e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4a50      	ldr	r2, [pc, #320]	; (80073f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80072ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80072b0:	8979      	ldrh	r1, [r7, #10]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	6a3a      	ldr	r2, [r7, #32]
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 fbd6 	bl	8007a68 <I2C_MasterRequestWrite>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e08d      	b.n	80073e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c6:	2300      	movs	r3, #0
 80072c8:	613b      	str	r3, [r7, #16]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	613b      	str	r3, [r7, #16]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	613b      	str	r3, [r7, #16]
 80072da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80072dc:	e066      	b.n	80073ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	6a39      	ldr	r1, [r7, #32]
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fe96 	bl	8008014 <I2C_WaitOnTXEFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00d      	beq.n	800730a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d107      	bne.n	8007306 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007304:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e06b      	b.n	80073e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007324:	b29b      	uxth	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007332:	3b01      	subs	r3, #1
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b04      	cmp	r3, #4
 8007346:	d11b      	bne.n	8007380 <HAL_I2C_Master_Transmit+0x188>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800734c:	2b00      	cmp	r3, #0
 800734e:	d017      	beq.n	8007380 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	781a      	ldrb	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007378:	3b01      	subs	r3, #1
 800737a:	b29a      	uxth	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	6a39      	ldr	r1, [r7, #32]
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fe86 	bl	8008096 <I2C_WaitOnBTFFlagUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00d      	beq.n	80073ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	2b04      	cmp	r3, #4
 8007396:	d107      	bne.n	80073a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e01a      	b.n	80073e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d194      	bne.n	80072de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	e000      	b.n	80073e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80073e0:	2302      	movs	r3, #2
  }
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	00100002 	.word	0x00100002
 80073f0:	ffff0000 	.word	0xffff0000

080073f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	4608      	mov	r0, r1
 80073fe:	4611      	mov	r1, r2
 8007400:	461a      	mov	r2, r3
 8007402:	4603      	mov	r3, r0
 8007404:	817b      	strh	r3, [r7, #10]
 8007406:	460b      	mov	r3, r1
 8007408:	813b      	strh	r3, [r7, #8]
 800740a:	4613      	mov	r3, r2
 800740c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800740e:	f7fd ff9b 	bl	8005348 <HAL_GetTick>
 8007412:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b20      	cmp	r3, #32
 800741e:	f040 80d9 	bne.w	80075d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	2319      	movs	r3, #25
 8007428:	2201      	movs	r2, #1
 800742a:	496d      	ldr	r1, [pc, #436]	; (80075e0 <HAL_I2C_Mem_Write+0x1ec>)
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fd1b 	bl	8007e68 <I2C_WaitOnFlagUntilTimeout>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007438:	2302      	movs	r3, #2
 800743a:	e0cc      	b.n	80075d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <HAL_I2C_Mem_Write+0x56>
 8007446:	2302      	movs	r3, #2
 8007448:	e0c5      	b.n	80075d6 <HAL_I2C_Mem_Write+0x1e2>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b01      	cmp	r3, #1
 800745e:	d007      	beq.n	8007470 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0201 	orr.w	r2, r2, #1
 800746e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800747e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2221      	movs	r2, #33	; 0x21
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2240      	movs	r2, #64	; 0x40
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a3a      	ldr	r2, [r7, #32]
 800749a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4a4d      	ldr	r2, [pc, #308]	; (80075e4 <HAL_I2C_Mem_Write+0x1f0>)
 80074b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074b2:	88f8      	ldrh	r0, [r7, #6]
 80074b4:	893a      	ldrh	r2, [r7, #8]
 80074b6:	8979      	ldrh	r1, [r7, #10]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	4603      	mov	r3, r0
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fb52 	bl	8007b6c <I2C_RequestMemoryWrite>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d052      	beq.n	8007574 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e081      	b.n	80075d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 fd9c 	bl	8008014 <I2C_WaitOnTXEFlagUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00d      	beq.n	80074fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d107      	bne.n	80074fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e06b      	b.n	80075d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	781a      	ldrb	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007518:	3b01      	subs	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b04      	cmp	r3, #4
 800753a:	d11b      	bne.n	8007574 <HAL_I2C_Mem_Write+0x180>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007540:	2b00      	cmp	r3, #0
 8007542:	d017      	beq.n	8007574 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	781a      	ldrb	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756a:	b29b      	uxth	r3, r3
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1aa      	bne.n	80074d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 fd88 	bl	8008096 <I2C_WaitOnBTFFlagUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00d      	beq.n	80075a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007590:	2b04      	cmp	r3, #4
 8007592:	d107      	bne.n	80075a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e016      	b.n	80075d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	e000      	b.n	80075d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80075d4:	2302      	movs	r3, #2
  }
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	00100002 	.word	0x00100002
 80075e4:	ffff0000 	.word	0xffff0000

080075e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08c      	sub	sp, #48	; 0x30
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	4608      	mov	r0, r1
 80075f2:	4611      	mov	r1, r2
 80075f4:	461a      	mov	r2, r3
 80075f6:	4603      	mov	r3, r0
 80075f8:	817b      	strh	r3, [r7, #10]
 80075fa:	460b      	mov	r3, r1
 80075fc:	813b      	strh	r3, [r7, #8]
 80075fe:	4613      	mov	r3, r2
 8007600:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007602:	f7fd fea1 	bl	8005348 <HAL_GetTick>
 8007606:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b20      	cmp	r3, #32
 8007612:	f040 8208 	bne.w	8007a26 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	2319      	movs	r3, #25
 800761c:	2201      	movs	r2, #1
 800761e:	497b      	ldr	r1, [pc, #492]	; (800780c <HAL_I2C_Mem_Read+0x224>)
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fc21 	bl	8007e68 <I2C_WaitOnFlagUntilTimeout>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800762c:	2302      	movs	r3, #2
 800762e:	e1fb      	b.n	8007a28 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007636:	2b01      	cmp	r3, #1
 8007638:	d101      	bne.n	800763e <HAL_I2C_Mem_Read+0x56>
 800763a:	2302      	movs	r3, #2
 800763c:	e1f4      	b.n	8007a28 <HAL_I2C_Mem_Read+0x440>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b01      	cmp	r3, #1
 8007652:	d007      	beq.n	8007664 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007672:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2222      	movs	r2, #34	; 0x22
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2240      	movs	r2, #64	; 0x40
 8007680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800768e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4a5b      	ldr	r2, [pc, #364]	; (8007810 <HAL_I2C_Mem_Read+0x228>)
 80076a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076a6:	88f8      	ldrh	r0, [r7, #6]
 80076a8:	893a      	ldrh	r2, [r7, #8]
 80076aa:	8979      	ldrh	r1, [r7, #10]
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	4603      	mov	r3, r0
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 faee 	bl	8007c98 <I2C_RequestMemoryRead>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e1b0      	b.n	8007a28 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d113      	bne.n	80076f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ce:	2300      	movs	r3, #0
 80076d0:	623b      	str	r3, [r7, #32]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	623b      	str	r3, [r7, #32]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	623b      	str	r3, [r7, #32]
 80076e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e184      	b.n	8007a00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d11b      	bne.n	8007736 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800770c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	61fb      	str	r3, [r7, #28]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	61fb      	str	r3, [r7, #28]
 8007722:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	e164      	b.n	8007a00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773a:	2b02      	cmp	r3, #2
 800773c:	d11b      	bne.n	8007776 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800774c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800775c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800775e:	2300      	movs	r3, #0
 8007760:	61bb      	str	r3, [r7, #24]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	61bb      	str	r3, [r7, #24]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	61bb      	str	r3, [r7, #24]
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	e144      	b.n	8007a00 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007776:	2300      	movs	r3, #0
 8007778:	617b      	str	r3, [r7, #20]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	617b      	str	r3, [r7, #20]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800778c:	e138      	b.n	8007a00 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007792:	2b03      	cmp	r3, #3
 8007794:	f200 80f1 	bhi.w	800797a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800779c:	2b01      	cmp	r3, #1
 800779e:	d123      	bne.n	80077e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 fcb7 	bl	8008118 <I2C_WaitOnRXNEFlagUntilTimeout>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e139      	b.n	8007a28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691a      	ldr	r2, [r3, #16]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	b2d2      	uxtb	r2, r2
 80077c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d0:	3b01      	subs	r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077dc:	b29b      	uxth	r3, r3
 80077de:	3b01      	subs	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077e6:	e10b      	b.n	8007a00 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d14e      	bne.n	800788e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	2200      	movs	r2, #0
 80077f8:	4906      	ldr	r1, [pc, #24]	; (8007814 <HAL_I2C_Mem_Read+0x22c>)
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 fb34 	bl	8007e68 <I2C_WaitOnFlagUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d008      	beq.n	8007818 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e10e      	b.n	8007a28 <HAL_I2C_Mem_Read+0x440>
 800780a:	bf00      	nop
 800780c:	00100002 	.word	0x00100002
 8007810:	ffff0000 	.word	0xffff0000
 8007814:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	691a      	ldr	r2, [r3, #16]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007844:	3b01      	subs	r3, #1
 8007846:	b29a      	uxth	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007850:	b29b      	uxth	r3, r3
 8007852:	3b01      	subs	r3, #1
 8007854:	b29a      	uxth	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	691a      	ldr	r2, [r3, #16]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	b2d2      	uxtb	r2, r2
 8007866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007876:	3b01      	subs	r3, #1
 8007878:	b29a      	uxth	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007882:	b29b      	uxth	r3, r3
 8007884:	3b01      	subs	r3, #1
 8007886:	b29a      	uxth	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800788c:	e0b8      	b.n	8007a00 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	2200      	movs	r2, #0
 8007896:	4966      	ldr	r1, [pc, #408]	; (8007a30 <HAL_I2C_Mem_Read+0x448>)
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 fae5 	bl	8007e68 <I2C_WaitOnFlagUntilTimeout>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e0bf      	b.n	8007a28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	b2d2      	uxtb	r2, r2
 80078c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d4:	3b01      	subs	r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f0:	2200      	movs	r2, #0
 80078f2:	494f      	ldr	r1, [pc, #316]	; (8007a30 <HAL_I2C_Mem_Read+0x448>)
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fab7 	bl	8007e68 <I2C_WaitOnFlagUntilTimeout>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e091      	b.n	8007a28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007912:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691a      	ldr	r2, [r3, #16]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	b2d2      	uxtb	r2, r2
 8007920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007930:	3b01      	subs	r3, #1
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793c:	b29b      	uxth	r3, r3
 800793e:	3b01      	subs	r3, #1
 8007940:	b29a      	uxth	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	691a      	ldr	r2, [r3, #16]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	b2d2      	uxtb	r2, r2
 8007952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007962:	3b01      	subs	r3, #1
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800796e:	b29b      	uxth	r3, r3
 8007970:	3b01      	subs	r3, #1
 8007972:	b29a      	uxth	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007978:	e042      	b.n	8007a00 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800797a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 fbca 	bl	8008118 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e04c      	b.n	8007a28 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	691a      	ldr	r2, [r3, #16]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	b2d2      	uxtb	r2, r2
 800799a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	3b01      	subs	r3, #1
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d118      	bne.n	8007a00 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	691a      	ldr	r2, [r3, #16]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	b2d2      	uxtb	r2, r2
 80079da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ea:	3b01      	subs	r3, #1
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	3b01      	subs	r3, #1
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f47f aec2 	bne.w	800778e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	e000      	b.n	8007a28 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007a26:	2302      	movs	r3, #2
  }
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3728      	adds	r7, #40	; 0x28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	00010004 	.word	0x00010004

08007a34 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a42:	b2db      	uxtb	r3, r3
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	460b      	mov	r3, r1
 8007a76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d006      	beq.n	8007a92 <I2C_MasterRequestWrite+0x2a>
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d003      	beq.n	8007a92 <I2C_MasterRequestWrite+0x2a>
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a90:	d108      	bne.n	8007aa4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	e00b      	b.n	8007abc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa8:	2b12      	cmp	r3, #18
 8007aaa:	d107      	bne.n	8007abc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 f9cd 	bl	8007e68 <I2C_WaitOnFlagUntilTimeout>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00d      	beq.n	8007af0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae2:	d103      	bne.n	8007aec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e035      	b.n	8007b5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007af8:	d108      	bne.n	8007b0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007afa:	897b      	ldrh	r3, [r7, #10]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	461a      	mov	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b08:	611a      	str	r2, [r3, #16]
 8007b0a:	e01b      	b.n	8007b44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007b0c:	897b      	ldrh	r3, [r7, #10]
 8007b0e:	11db      	asrs	r3, r3, #7
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	f003 0306 	and.w	r3, r3, #6
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	f063 030f 	orn	r3, r3, #15
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	490e      	ldr	r1, [pc, #56]	; (8007b64 <I2C_MasterRequestWrite+0xfc>)
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 f9f3 	bl	8007f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e010      	b.n	8007b5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007b3a:	897b      	ldrh	r3, [r7, #10]
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	4907      	ldr	r1, [pc, #28]	; (8007b68 <I2C_MasterRequestWrite+0x100>)
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 f9e3 	bl	8007f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	00010008 	.word	0x00010008
 8007b68:	00010002 	.word	0x00010002

08007b6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b088      	sub	sp, #32
 8007b70:	af02      	add	r7, sp, #8
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	4608      	mov	r0, r1
 8007b76:	4611      	mov	r1, r2
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	817b      	strh	r3, [r7, #10]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	813b      	strh	r3, [r7, #8]
 8007b82:	4613      	mov	r3, r2
 8007b84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f960 	bl	8007e68 <I2C_WaitOnFlagUntilTimeout>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00d      	beq.n	8007bca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bbc:	d103      	bne.n	8007bc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e05f      	b.n	8007c8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007bca:	897b      	ldrh	r3, [r7, #10]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007bd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	6a3a      	ldr	r2, [r7, #32]
 8007bde:	492d      	ldr	r1, [pc, #180]	; (8007c94 <I2C_RequestMemoryWrite+0x128>)
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f998 	bl	8007f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e04c      	b.n	8007c8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	617b      	str	r3, [r7, #20]
 8007c04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c08:	6a39      	ldr	r1, [r7, #32]
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 fa02 	bl	8008014 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00d      	beq.n	8007c32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	2b04      	cmp	r3, #4
 8007c1c:	d107      	bne.n	8007c2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e02b      	b.n	8007c8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c32:	88fb      	ldrh	r3, [r7, #6]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d105      	bne.n	8007c44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c38:	893b      	ldrh	r3, [r7, #8]
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	611a      	str	r2, [r3, #16]
 8007c42:	e021      	b.n	8007c88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c44:	893b      	ldrh	r3, [r7, #8]
 8007c46:	0a1b      	lsrs	r3, r3, #8
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c54:	6a39      	ldr	r1, [r7, #32]
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 f9dc 	bl	8008014 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00d      	beq.n	8007c7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d107      	bne.n	8007c7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e005      	b.n	8007c8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c7e:	893b      	ldrh	r3, [r7, #8]
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	00010002 	.word	0x00010002

08007c98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af02      	add	r7, sp, #8
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	817b      	strh	r3, [r7, #10]
 8007caa:	460b      	mov	r3, r1
 8007cac:	813b      	strh	r3, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 f8c2 	bl	8007e68 <I2C_WaitOnFlagUntilTimeout>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00d      	beq.n	8007d06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf8:	d103      	bne.n	8007d02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e0aa      	b.n	8007e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d06:	897b      	ldrh	r3, [r7, #10]
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	6a3a      	ldr	r2, [r7, #32]
 8007d1a:	4952      	ldr	r1, [pc, #328]	; (8007e64 <I2C_RequestMemoryRead+0x1cc>)
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f8fa 	bl	8007f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e097      	b.n	8007e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	617b      	str	r3, [r7, #20]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d44:	6a39      	ldr	r1, [r7, #32]
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 f964 	bl	8008014 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00d      	beq.n	8007d6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d107      	bne.n	8007d6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e076      	b.n	8007e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d6e:	88fb      	ldrh	r3, [r7, #6]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d105      	bne.n	8007d80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d74:	893b      	ldrh	r3, [r7, #8]
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	611a      	str	r2, [r3, #16]
 8007d7e:	e021      	b.n	8007dc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d80:	893b      	ldrh	r3, [r7, #8]
 8007d82:	0a1b      	lsrs	r3, r3, #8
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d90:	6a39      	ldr	r1, [r7, #32]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 f93e 	bl	8008014 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00d      	beq.n	8007dba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d107      	bne.n	8007db6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007db4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e050      	b.n	8007e5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dba:	893b      	ldrh	r3, [r7, #8]
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dc6:	6a39      	ldr	r1, [r7, #32]
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 f923 	bl	8008014 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00d      	beq.n	8007df0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d107      	bne.n	8007dec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e035      	b.n	8007e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dfe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f82b 	bl	8007e68 <I2C_WaitOnFlagUntilTimeout>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00d      	beq.n	8007e34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e26:	d103      	bne.n	8007e30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e013      	b.n	8007e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e34:	897b      	ldrh	r3, [r7, #10]
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	f043 0301 	orr.w	r3, r3, #1
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	6a3a      	ldr	r2, [r7, #32]
 8007e48:	4906      	ldr	r1, [pc, #24]	; (8007e64 <I2C_RequestMemoryRead+0x1cc>)
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 f863 	bl	8007f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e000      	b.n	8007e5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	00010002 	.word	0x00010002

08007e68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	4613      	mov	r3, r2
 8007e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e78:	e025      	b.n	8007ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e80:	d021      	beq.n	8007ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e82:	f7fd fa61 	bl	8005348 <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d302      	bcc.n	8007e98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d116      	bne.n	8007ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	f043 0220 	orr.w	r2, r3, #32
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e023      	b.n	8007f0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	0c1b      	lsrs	r3, r3, #16
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d10d      	bne.n	8007eec <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	43da      	mvns	r2, r3
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	4013      	ands	r3, r2
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bf0c      	ite	eq
 8007ee2:	2301      	moveq	r3, #1
 8007ee4:	2300      	movne	r3, #0
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	461a      	mov	r2, r3
 8007eea:	e00c      	b.n	8007f06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	43da      	mvns	r2, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	bf0c      	ite	eq
 8007efe:	2301      	moveq	r3, #1
 8007f00:	2300      	movne	r3, #0
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	461a      	mov	r2, r3
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d0b6      	beq.n	8007e7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	607a      	str	r2, [r7, #4]
 8007f22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f24:	e051      	b.n	8007fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f34:	d123      	bne.n	8007f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6a:	f043 0204 	orr.w	r2, r3, #4
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e046      	b.n	800800c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f84:	d021      	beq.n	8007fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f86:	f7fd f9df 	bl	8005348 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d302      	bcc.n	8007f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d116      	bne.n	8007fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	f043 0220 	orr.w	r2, r3, #32
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e020      	b.n	800800c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	0c1b      	lsrs	r3, r3, #16
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d10c      	bne.n	8007fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	43da      	mvns	r2, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	bf14      	ite	ne
 8007fe6:	2301      	movne	r3, #1
 8007fe8:	2300      	moveq	r3, #0
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	e00b      	b.n	8008006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	43da      	mvns	r2, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	bf14      	ite	ne
 8008000:	2301      	movne	r3, #1
 8008002:	2300      	moveq	r3, #0
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d18d      	bne.n	8007f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008020:	e02d      	b.n	800807e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 f8ce 	bl	80081c4 <I2C_IsAcknowledgeFailed>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e02d      	b.n	800808e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008038:	d021      	beq.n	800807e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800803a:	f7fd f985 	bl	8005348 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	429a      	cmp	r2, r3
 8008048:	d302      	bcc.n	8008050 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d116      	bne.n	800807e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	f043 0220 	orr.w	r2, r3, #32
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e007      	b.n	800808e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008088:	2b80      	cmp	r3, #128	; 0x80
 800808a:	d1ca      	bne.n	8008022 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080a2:	e02d      	b.n	8008100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 f88d 	bl	80081c4 <I2C_IsAcknowledgeFailed>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e02d      	b.n	8008110 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ba:	d021      	beq.n	8008100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080bc:	f7fd f944 	bl	8005348 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d302      	bcc.n	80080d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d116      	bne.n	8008100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2220      	movs	r2, #32
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	f043 0220 	orr.w	r2, r3, #32
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e007      	b.n	8008110 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	f003 0304 	and.w	r3, r3, #4
 800810a:	2b04      	cmp	r3, #4
 800810c:	d1ca      	bne.n	80080a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008124:	e042      	b.n	80081ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	2b10      	cmp	r3, #16
 8008132:	d119      	bne.n	8008168 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0210 	mvn.w	r2, #16
 800813c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2220      	movs	r2, #32
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e029      	b.n	80081bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008168:	f7fd f8ee 	bl	8005348 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	429a      	cmp	r2, r3
 8008176:	d302      	bcc.n	800817e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d116      	bne.n	80081ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2220      	movs	r2, #32
 8008188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008198:	f043 0220 	orr.w	r2, r3, #32
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e007      	b.n	80081bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b6:	2b40      	cmp	r3, #64	; 0x40
 80081b8:	d1b5      	bne.n	8008126 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081da:	d11b      	bne.n	8008214 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2220      	movs	r2, #32
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	f043 0204 	orr.w	r2, r3, #4
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
	...

08008224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e25b      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	2b00      	cmp	r3, #0
 8008240:	d075      	beq.n	800832e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008242:	4ba3      	ldr	r3, [pc, #652]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f003 030c 	and.w	r3, r3, #12
 800824a:	2b04      	cmp	r3, #4
 800824c:	d00c      	beq.n	8008268 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800824e:	4ba0      	ldr	r3, [pc, #640]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008256:	2b08      	cmp	r3, #8
 8008258:	d112      	bne.n	8008280 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800825a:	4b9d      	ldr	r3, [pc, #628]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008266:	d10b      	bne.n	8008280 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008268:	4b99      	ldr	r3, [pc, #612]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d05b      	beq.n	800832c <HAL_RCC_OscConfig+0x108>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d157      	bne.n	800832c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e236      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008288:	d106      	bne.n	8008298 <HAL_RCC_OscConfig+0x74>
 800828a:	4b91      	ldr	r3, [pc, #580]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a90      	ldr	r2, [pc, #576]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	e01d      	b.n	80082d4 <HAL_RCC_OscConfig+0xb0>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082a0:	d10c      	bne.n	80082bc <HAL_RCC_OscConfig+0x98>
 80082a2:	4b8b      	ldr	r3, [pc, #556]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a8a      	ldr	r2, [pc, #552]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80082a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082ac:	6013      	str	r3, [r2, #0]
 80082ae:	4b88      	ldr	r3, [pc, #544]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a87      	ldr	r2, [pc, #540]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80082b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	e00b      	b.n	80082d4 <HAL_RCC_OscConfig+0xb0>
 80082bc:	4b84      	ldr	r3, [pc, #528]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a83      	ldr	r2, [pc, #524]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80082c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	4b81      	ldr	r3, [pc, #516]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a80      	ldr	r2, [pc, #512]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80082ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d013      	beq.n	8008304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082dc:	f7fd f834 	bl	8005348 <HAL_GetTick>
 80082e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082e2:	e008      	b.n	80082f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082e4:	f7fd f830 	bl	8005348 <HAL_GetTick>
 80082e8:	4602      	mov	r2, r0
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	2b64      	cmp	r3, #100	; 0x64
 80082f0:	d901      	bls.n	80082f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e1fb      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082f6:	4b76      	ldr	r3, [pc, #472]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0f0      	beq.n	80082e4 <HAL_RCC_OscConfig+0xc0>
 8008302:	e014      	b.n	800832e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008304:	f7fd f820 	bl	8005348 <HAL_GetTick>
 8008308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800830a:	e008      	b.n	800831e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800830c:	f7fd f81c 	bl	8005348 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	2b64      	cmp	r3, #100	; 0x64
 8008318:	d901      	bls.n	800831e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e1e7      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800831e:	4b6c      	ldr	r3, [pc, #432]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1f0      	bne.n	800830c <HAL_RCC_OscConfig+0xe8>
 800832a:	e000      	b.n	800832e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800832c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b00      	cmp	r3, #0
 8008338:	d063      	beq.n	8008402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800833a:	4b65      	ldr	r3, [pc, #404]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f003 030c 	and.w	r3, r3, #12
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00b      	beq.n	800835e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008346:	4b62      	ldr	r3, [pc, #392]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800834e:	2b08      	cmp	r3, #8
 8008350:	d11c      	bne.n	800838c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008352:	4b5f      	ldr	r3, [pc, #380]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d116      	bne.n	800838c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800835e:	4b5c      	ldr	r3, [pc, #368]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d005      	beq.n	8008376 <HAL_RCC_OscConfig+0x152>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d001      	beq.n	8008376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e1bb      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008376:	4b56      	ldr	r3, [pc, #344]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	4952      	ldr	r1, [pc, #328]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008386:	4313      	orrs	r3, r2
 8008388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800838a:	e03a      	b.n	8008402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d020      	beq.n	80083d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008394:	4b4f      	ldr	r3, [pc, #316]	; (80084d4 <HAL_RCC_OscConfig+0x2b0>)
 8008396:	2201      	movs	r2, #1
 8008398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839a:	f7fc ffd5 	bl	8005348 <HAL_GetTick>
 800839e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083a0:	e008      	b.n	80083b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083a2:	f7fc ffd1 	bl	8005348 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d901      	bls.n	80083b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e19c      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083b4:	4b46      	ldr	r3, [pc, #280]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0f0      	beq.n	80083a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083c0:	4b43      	ldr	r3, [pc, #268]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	00db      	lsls	r3, r3, #3
 80083ce:	4940      	ldr	r1, [pc, #256]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	600b      	str	r3, [r1, #0]
 80083d4:	e015      	b.n	8008402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083d6:	4b3f      	ldr	r3, [pc, #252]	; (80084d4 <HAL_RCC_OscConfig+0x2b0>)
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083dc:	f7fc ffb4 	bl	8005348 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083e2:	e008      	b.n	80083f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083e4:	f7fc ffb0 	bl	8005348 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e17b      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083f6:	4b36      	ldr	r3, [pc, #216]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0302 	and.w	r3, r3, #2
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1f0      	bne.n	80083e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0308 	and.w	r3, r3, #8
 800840a:	2b00      	cmp	r3, #0
 800840c:	d030      	beq.n	8008470 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d016      	beq.n	8008444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008416:	4b30      	ldr	r3, [pc, #192]	; (80084d8 <HAL_RCC_OscConfig+0x2b4>)
 8008418:	2201      	movs	r2, #1
 800841a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800841c:	f7fc ff94 	bl	8005348 <HAL_GetTick>
 8008420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008422:	e008      	b.n	8008436 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008424:	f7fc ff90 	bl	8005348 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e15b      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008436:	4b26      	ldr	r3, [pc, #152]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0f0      	beq.n	8008424 <HAL_RCC_OscConfig+0x200>
 8008442:	e015      	b.n	8008470 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008444:	4b24      	ldr	r3, [pc, #144]	; (80084d8 <HAL_RCC_OscConfig+0x2b4>)
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800844a:	f7fc ff7d 	bl	8005348 <HAL_GetTick>
 800844e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008450:	e008      	b.n	8008464 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008452:	f7fc ff79 	bl	8005348 <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	2b02      	cmp	r3, #2
 800845e:	d901      	bls.n	8008464 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e144      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008464:	4b1a      	ldr	r3, [pc, #104]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1f0      	bne.n	8008452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0304 	and.w	r3, r3, #4
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 80a0 	beq.w	80085be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800847e:	2300      	movs	r3, #0
 8008480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008482:	4b13      	ldr	r3, [pc, #76]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10f      	bne.n	80084ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800848e:	2300      	movs	r3, #0
 8008490:	60bb      	str	r3, [r7, #8]
 8008492:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008496:	4a0e      	ldr	r2, [pc, #56]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 8008498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800849c:	6413      	str	r3, [r2, #64]	; 0x40
 800849e:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <HAL_RCC_OscConfig+0x2ac>)
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084a6:	60bb      	str	r3, [r7, #8]
 80084a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084aa:	2301      	movs	r3, #1
 80084ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ae:	4b0b      	ldr	r3, [pc, #44]	; (80084dc <HAL_RCC_OscConfig+0x2b8>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d121      	bne.n	80084fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084ba:	4b08      	ldr	r3, [pc, #32]	; (80084dc <HAL_RCC_OscConfig+0x2b8>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a07      	ldr	r2, [pc, #28]	; (80084dc <HAL_RCC_OscConfig+0x2b8>)
 80084c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084c6:	f7fc ff3f 	bl	8005348 <HAL_GetTick>
 80084ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084cc:	e011      	b.n	80084f2 <HAL_RCC_OscConfig+0x2ce>
 80084ce:	bf00      	nop
 80084d0:	40023800 	.word	0x40023800
 80084d4:	42470000 	.word	0x42470000
 80084d8:	42470e80 	.word	0x42470e80
 80084dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084e0:	f7fc ff32 	bl	8005348 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d901      	bls.n	80084f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e0fd      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084f2:	4b81      	ldr	r3, [pc, #516]	; (80086f8 <HAL_RCC_OscConfig+0x4d4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0f0      	beq.n	80084e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d106      	bne.n	8008514 <HAL_RCC_OscConfig+0x2f0>
 8008506:	4b7d      	ldr	r3, [pc, #500]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 8008508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850a:	4a7c      	ldr	r2, [pc, #496]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 800850c:	f043 0301 	orr.w	r3, r3, #1
 8008510:	6713      	str	r3, [r2, #112]	; 0x70
 8008512:	e01c      	b.n	800854e <HAL_RCC_OscConfig+0x32a>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	2b05      	cmp	r3, #5
 800851a:	d10c      	bne.n	8008536 <HAL_RCC_OscConfig+0x312>
 800851c:	4b77      	ldr	r3, [pc, #476]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 800851e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008520:	4a76      	ldr	r2, [pc, #472]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 8008522:	f043 0304 	orr.w	r3, r3, #4
 8008526:	6713      	str	r3, [r2, #112]	; 0x70
 8008528:	4b74      	ldr	r3, [pc, #464]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 800852a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852c:	4a73      	ldr	r2, [pc, #460]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 800852e:	f043 0301 	orr.w	r3, r3, #1
 8008532:	6713      	str	r3, [r2, #112]	; 0x70
 8008534:	e00b      	b.n	800854e <HAL_RCC_OscConfig+0x32a>
 8008536:	4b71      	ldr	r3, [pc, #452]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 8008538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800853a:	4a70      	ldr	r2, [pc, #448]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 800853c:	f023 0301 	bic.w	r3, r3, #1
 8008540:	6713      	str	r3, [r2, #112]	; 0x70
 8008542:	4b6e      	ldr	r3, [pc, #440]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 8008544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008546:	4a6d      	ldr	r2, [pc, #436]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 8008548:	f023 0304 	bic.w	r3, r3, #4
 800854c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d015      	beq.n	8008582 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008556:	f7fc fef7 	bl	8005348 <HAL_GetTick>
 800855a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800855c:	e00a      	b.n	8008574 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800855e:	f7fc fef3 	bl	8005348 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	f241 3288 	movw	r2, #5000	; 0x1388
 800856c:	4293      	cmp	r3, r2
 800856e:	d901      	bls.n	8008574 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e0bc      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008574:	4b61      	ldr	r3, [pc, #388]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 8008576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0ee      	beq.n	800855e <HAL_RCC_OscConfig+0x33a>
 8008580:	e014      	b.n	80085ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008582:	f7fc fee1 	bl	8005348 <HAL_GetTick>
 8008586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008588:	e00a      	b.n	80085a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800858a:	f7fc fedd 	bl	8005348 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	f241 3288 	movw	r2, #5000	; 0x1388
 8008598:	4293      	cmp	r3, r2
 800859a:	d901      	bls.n	80085a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e0a6      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085a0:	4b56      	ldr	r3, [pc, #344]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 80085a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a4:	f003 0302 	and.w	r3, r3, #2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1ee      	bne.n	800858a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d105      	bne.n	80085be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085b2:	4b52      	ldr	r3, [pc, #328]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	4a51      	ldr	r2, [pc, #324]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 80085b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 8092 	beq.w	80086ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80085c8:	4b4c      	ldr	r3, [pc, #304]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f003 030c 	and.w	r3, r3, #12
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	d05c      	beq.n	800868e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d141      	bne.n	8008660 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085dc:	4b48      	ldr	r3, [pc, #288]	; (8008700 <HAL_RCC_OscConfig+0x4dc>)
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085e2:	f7fc feb1 	bl	8005348 <HAL_GetTick>
 80085e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085e8:	e008      	b.n	80085fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085ea:	f7fc fead 	bl	8005348 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d901      	bls.n	80085fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e078      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085fc:	4b3f      	ldr	r3, [pc, #252]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1f0      	bne.n	80085ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	431a      	orrs	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	019b      	lsls	r3, r3, #6
 8008618:	431a      	orrs	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	085b      	lsrs	r3, r3, #1
 8008620:	3b01      	subs	r3, #1
 8008622:	041b      	lsls	r3, r3, #16
 8008624:	431a      	orrs	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862a:	061b      	lsls	r3, r3, #24
 800862c:	4933      	ldr	r1, [pc, #204]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 800862e:	4313      	orrs	r3, r2
 8008630:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008632:	4b33      	ldr	r3, [pc, #204]	; (8008700 <HAL_RCC_OscConfig+0x4dc>)
 8008634:	2201      	movs	r2, #1
 8008636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008638:	f7fc fe86 	bl	8005348 <HAL_GetTick>
 800863c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800863e:	e008      	b.n	8008652 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008640:	f7fc fe82 	bl	8005348 <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	2b02      	cmp	r3, #2
 800864c:	d901      	bls.n	8008652 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e04d      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008652:	4b2a      	ldr	r3, [pc, #168]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0f0      	beq.n	8008640 <HAL_RCC_OscConfig+0x41c>
 800865e:	e045      	b.n	80086ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008660:	4b27      	ldr	r3, [pc, #156]	; (8008700 <HAL_RCC_OscConfig+0x4dc>)
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008666:	f7fc fe6f 	bl	8005348 <HAL_GetTick>
 800866a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800866c:	e008      	b.n	8008680 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800866e:	f7fc fe6b 	bl	8005348 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	2b02      	cmp	r3, #2
 800867a:	d901      	bls.n	8008680 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e036      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008680:	4b1e      	ldr	r3, [pc, #120]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1f0      	bne.n	800866e <HAL_RCC_OscConfig+0x44a>
 800868c:	e02e      	b.n	80086ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d101      	bne.n	800869a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e029      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800869a:	4b18      	ldr	r3, [pc, #96]	; (80086fc <HAL_RCC_OscConfig+0x4d8>)
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d11c      	bne.n	80086e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d115      	bne.n	80086e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80086c2:	4013      	ands	r3, r2
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d10d      	bne.n	80086e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d106      	bne.n	80086e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d001      	beq.n	80086ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e000      	b.n	80086ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	40007000 	.word	0x40007000
 80086fc:	40023800 	.word	0x40023800
 8008700:	42470060 	.word	0x42470060

08008704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e0cc      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008718:	4b68      	ldr	r3, [pc, #416]	; (80088bc <HAL_RCC_ClockConfig+0x1b8>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 030f 	and.w	r3, r3, #15
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d90c      	bls.n	8008740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008726:	4b65      	ldr	r3, [pc, #404]	; (80088bc <HAL_RCC_ClockConfig+0x1b8>)
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	b2d2      	uxtb	r2, r2
 800872c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800872e:	4b63      	ldr	r3, [pc, #396]	; (80088bc <HAL_RCC_ClockConfig+0x1b8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 030f 	and.w	r3, r3, #15
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	429a      	cmp	r2, r3
 800873a:	d001      	beq.n	8008740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e0b8      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d020      	beq.n	800878e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008758:	4b59      	ldr	r3, [pc, #356]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	4a58      	ldr	r2, [pc, #352]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 800875e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0308 	and.w	r3, r3, #8
 800876c:	2b00      	cmp	r3, #0
 800876e:	d005      	beq.n	800877c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008770:	4b53      	ldr	r3, [pc, #332]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	4a52      	ldr	r2, [pc, #328]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800877a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800877c:	4b50      	ldr	r3, [pc, #320]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	494d      	ldr	r1, [pc, #308]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 800878a:	4313      	orrs	r3, r2
 800878c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	d044      	beq.n	8008824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d107      	bne.n	80087b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087a2:	4b47      	ldr	r3, [pc, #284]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d119      	bne.n	80087e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e07f      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d003      	beq.n	80087c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d107      	bne.n	80087d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087c2:	4b3f      	ldr	r3, [pc, #252]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d109      	bne.n	80087e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e06f      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087d2:	4b3b      	ldr	r3, [pc, #236]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e067      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087e2:	4b37      	ldr	r3, [pc, #220]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f023 0203 	bic.w	r2, r3, #3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	4934      	ldr	r1, [pc, #208]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087f4:	f7fc fda8 	bl	8005348 <HAL_GetTick>
 80087f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087fa:	e00a      	b.n	8008812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087fc:	f7fc fda4 	bl	8005348 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	f241 3288 	movw	r2, #5000	; 0x1388
 800880a:	4293      	cmp	r3, r2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e04f      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008812:	4b2b      	ldr	r3, [pc, #172]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f003 020c 	and.w	r2, r3, #12
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	429a      	cmp	r2, r3
 8008822:	d1eb      	bne.n	80087fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008824:	4b25      	ldr	r3, [pc, #148]	; (80088bc <HAL_RCC_ClockConfig+0x1b8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 030f 	and.w	r3, r3, #15
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d20c      	bcs.n	800884c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008832:	4b22      	ldr	r3, [pc, #136]	; (80088bc <HAL_RCC_ClockConfig+0x1b8>)
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800883a:	4b20      	ldr	r3, [pc, #128]	; (80088bc <HAL_RCC_ClockConfig+0x1b8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 030f 	and.w	r3, r3, #15
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	429a      	cmp	r2, r3
 8008846:	d001      	beq.n	800884c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e032      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b00      	cmp	r3, #0
 8008856:	d008      	beq.n	800886a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008858:	4b19      	ldr	r3, [pc, #100]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	4916      	ldr	r1, [pc, #88]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008866:	4313      	orrs	r3, r2
 8008868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0308 	and.w	r3, r3, #8
 8008872:	2b00      	cmp	r3, #0
 8008874:	d009      	beq.n	800888a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008876:	4b12      	ldr	r3, [pc, #72]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	490e      	ldr	r1, [pc, #56]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008886:	4313      	orrs	r3, r2
 8008888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800888a:	f000 f821 	bl	80088d0 <HAL_RCC_GetSysClockFreq>
 800888e:	4601      	mov	r1, r0
 8008890:	4b0b      	ldr	r3, [pc, #44]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	091b      	lsrs	r3, r3, #4
 8008896:	f003 030f 	and.w	r3, r3, #15
 800889a:	4a0a      	ldr	r2, [pc, #40]	; (80088c4 <HAL_RCC_ClockConfig+0x1c0>)
 800889c:	5cd3      	ldrb	r3, [r2, r3]
 800889e:	fa21 f303 	lsr.w	r3, r1, r3
 80088a2:	4a09      	ldr	r2, [pc, #36]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 80088a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80088a6:	4b09      	ldr	r3, [pc, #36]	; (80088cc <HAL_RCC_ClockConfig+0x1c8>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fc fd08 	bl	80052c0 <HAL_InitTick>

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	40023c00 	.word	0x40023c00
 80088c0:	40023800 	.word	0x40023800
 80088c4:	0800d284 	.word	0x0800d284
 80088c8:	20000004 	.word	0x20000004
 80088cc:	2000008c 	.word	0x2000008c

080088d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	607b      	str	r3, [r7, #4]
 80088da:	2300      	movs	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	2300      	movs	r3, #0
 80088e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088e6:	4b63      	ldr	r3, [pc, #396]	; (8008a74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f003 030c 	and.w	r3, r3, #12
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	d007      	beq.n	8008902 <HAL_RCC_GetSysClockFreq+0x32>
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	d008      	beq.n	8008908 <HAL_RCC_GetSysClockFreq+0x38>
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f040 80b4 	bne.w	8008a64 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80088fc:	4b5e      	ldr	r3, [pc, #376]	; (8008a78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80088fe:	60bb      	str	r3, [r7, #8]
       break;
 8008900:	e0b3      	b.n	8008a6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008902:	4b5e      	ldr	r3, [pc, #376]	; (8008a7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008904:	60bb      	str	r3, [r7, #8]
      break;
 8008906:	e0b0      	b.n	8008a6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008908:	4b5a      	ldr	r3, [pc, #360]	; (8008a74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008910:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008912:	4b58      	ldr	r3, [pc, #352]	; (8008a74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d04a      	beq.n	80089b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800891e:	4b55      	ldr	r3, [pc, #340]	; (8008a74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	099b      	lsrs	r3, r3, #6
 8008924:	f04f 0400 	mov.w	r4, #0
 8008928:	f240 11ff 	movw	r1, #511	; 0x1ff
 800892c:	f04f 0200 	mov.w	r2, #0
 8008930:	ea03 0501 	and.w	r5, r3, r1
 8008934:	ea04 0602 	and.w	r6, r4, r2
 8008938:	4629      	mov	r1, r5
 800893a:	4632      	mov	r2, r6
 800893c:	f04f 0300 	mov.w	r3, #0
 8008940:	f04f 0400 	mov.w	r4, #0
 8008944:	0154      	lsls	r4, r2, #5
 8008946:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800894a:	014b      	lsls	r3, r1, #5
 800894c:	4619      	mov	r1, r3
 800894e:	4622      	mov	r2, r4
 8008950:	1b49      	subs	r1, r1, r5
 8008952:	eb62 0206 	sbc.w	r2, r2, r6
 8008956:	f04f 0300 	mov.w	r3, #0
 800895a:	f04f 0400 	mov.w	r4, #0
 800895e:	0194      	lsls	r4, r2, #6
 8008960:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008964:	018b      	lsls	r3, r1, #6
 8008966:	1a5b      	subs	r3, r3, r1
 8008968:	eb64 0402 	sbc.w	r4, r4, r2
 800896c:	f04f 0100 	mov.w	r1, #0
 8008970:	f04f 0200 	mov.w	r2, #0
 8008974:	00e2      	lsls	r2, r4, #3
 8008976:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800897a:	00d9      	lsls	r1, r3, #3
 800897c:	460b      	mov	r3, r1
 800897e:	4614      	mov	r4, r2
 8008980:	195b      	adds	r3, r3, r5
 8008982:	eb44 0406 	adc.w	r4, r4, r6
 8008986:	f04f 0100 	mov.w	r1, #0
 800898a:	f04f 0200 	mov.w	r2, #0
 800898e:	0262      	lsls	r2, r4, #9
 8008990:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008994:	0259      	lsls	r1, r3, #9
 8008996:	460b      	mov	r3, r1
 8008998:	4614      	mov	r4, r2
 800899a:	4618      	mov	r0, r3
 800899c:	4621      	mov	r1, r4
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f04f 0400 	mov.w	r4, #0
 80089a4:	461a      	mov	r2, r3
 80089a6:	4623      	mov	r3, r4
 80089a8:	f7f8 f956 	bl	8000c58 <__aeabi_uldivmod>
 80089ac:	4603      	mov	r3, r0
 80089ae:	460c      	mov	r4, r1
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	e049      	b.n	8008a48 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089b4:	4b2f      	ldr	r3, [pc, #188]	; (8008a74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	099b      	lsrs	r3, r3, #6
 80089ba:	f04f 0400 	mov.w	r4, #0
 80089be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80089c2:	f04f 0200 	mov.w	r2, #0
 80089c6:	ea03 0501 	and.w	r5, r3, r1
 80089ca:	ea04 0602 	and.w	r6, r4, r2
 80089ce:	4629      	mov	r1, r5
 80089d0:	4632      	mov	r2, r6
 80089d2:	f04f 0300 	mov.w	r3, #0
 80089d6:	f04f 0400 	mov.w	r4, #0
 80089da:	0154      	lsls	r4, r2, #5
 80089dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80089e0:	014b      	lsls	r3, r1, #5
 80089e2:	4619      	mov	r1, r3
 80089e4:	4622      	mov	r2, r4
 80089e6:	1b49      	subs	r1, r1, r5
 80089e8:	eb62 0206 	sbc.w	r2, r2, r6
 80089ec:	f04f 0300 	mov.w	r3, #0
 80089f0:	f04f 0400 	mov.w	r4, #0
 80089f4:	0194      	lsls	r4, r2, #6
 80089f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80089fa:	018b      	lsls	r3, r1, #6
 80089fc:	1a5b      	subs	r3, r3, r1
 80089fe:	eb64 0402 	sbc.w	r4, r4, r2
 8008a02:	f04f 0100 	mov.w	r1, #0
 8008a06:	f04f 0200 	mov.w	r2, #0
 8008a0a:	00e2      	lsls	r2, r4, #3
 8008a0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008a10:	00d9      	lsls	r1, r3, #3
 8008a12:	460b      	mov	r3, r1
 8008a14:	4614      	mov	r4, r2
 8008a16:	195b      	adds	r3, r3, r5
 8008a18:	eb44 0406 	adc.w	r4, r4, r6
 8008a1c:	f04f 0100 	mov.w	r1, #0
 8008a20:	f04f 0200 	mov.w	r2, #0
 8008a24:	02a2      	lsls	r2, r4, #10
 8008a26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008a2a:	0299      	lsls	r1, r3, #10
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4614      	mov	r4, r2
 8008a30:	4618      	mov	r0, r3
 8008a32:	4621      	mov	r1, r4
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f04f 0400 	mov.w	r4, #0
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	4623      	mov	r3, r4
 8008a3e:	f7f8 f90b 	bl	8000c58 <__aeabi_uldivmod>
 8008a42:	4603      	mov	r3, r0
 8008a44:	460c      	mov	r4, r1
 8008a46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a48:	4b0a      	ldr	r3, [pc, #40]	; (8008a74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	0c1b      	lsrs	r3, r3, #16
 8008a4e:	f003 0303 	and.w	r3, r3, #3
 8008a52:	3301      	adds	r3, #1
 8008a54:	005b      	lsls	r3, r3, #1
 8008a56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a60:	60bb      	str	r3, [r7, #8]
      break;
 8008a62:	e002      	b.n	8008a6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a64:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008a66:	60bb      	str	r3, [r7, #8]
      break;
 8008a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a74:	40023800 	.word	0x40023800
 8008a78:	00f42400 	.word	0x00f42400
 8008a7c:	007a1200 	.word	0x007a1200

08008a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a80:	b480      	push	{r7}
 8008a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a84:	4b03      	ldr	r3, [pc, #12]	; (8008a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a86:	681b      	ldr	r3, [r3, #0]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000004 	.word	0x20000004

08008a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008a9c:	f7ff fff0 	bl	8008a80 <HAL_RCC_GetHCLKFreq>
 8008aa0:	4601      	mov	r1, r0
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	0a9b      	lsrs	r3, r3, #10
 8008aa8:	f003 0307 	and.w	r3, r3, #7
 8008aac:	4a03      	ldr	r2, [pc, #12]	; (8008abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008aae:	5cd3      	ldrb	r3, [r2, r3]
 8008ab0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	40023800 	.word	0x40023800
 8008abc:	0800d294 	.word	0x0800d294

08008ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ac4:	f7ff ffdc 	bl	8008a80 <HAL_RCC_GetHCLKFreq>
 8008ac8:	4601      	mov	r1, r0
 8008aca:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	0b5b      	lsrs	r3, r3, #13
 8008ad0:	f003 0307 	and.w	r3, r3, #7
 8008ad4:	4a03      	ldr	r2, [pc, #12]	; (8008ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ad6:	5cd3      	ldrb	r3, [r2, r3]
 8008ad8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	40023800 	.word	0x40023800
 8008ae4:	0800d294 	.word	0x0800d294

08008ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e01d      	b.n	8008b36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7fa fc72 	bl	80033f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	f000 fb8e 	bl	8009248 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b085      	sub	sp, #20
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f042 0201 	orr.w	r2, r2, #1
 8008b54:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2b06      	cmp	r3, #6
 8008b66:	d007      	beq.n	8008b78 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0201 	orr.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b082      	sub	sp, #8
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e01d      	b.n	8008bd4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d106      	bne.n	8008bb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f815 	bl	8008bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	f000 fb3f 	bl	8009248 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 fdc6 	bl	8009794 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a10      	ldr	r2, [pc, #64]	; (8008c50 <HAL_TIM_PWM_Start+0x60>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d107      	bne.n	8008c22 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f003 0307 	and.w	r3, r3, #7
 8008c2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b06      	cmp	r3, #6
 8008c32:	d007      	beq.n	8008c44 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f042 0201 	orr.w	r2, r2, #1
 8008c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	40010000 	.word	0x40010000

08008c54 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2200      	movs	r2, #0
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 fd94 	bl	8009794 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a1d      	ldr	r2, [pc, #116]	; (8008ce8 <HAL_TIM_PWM_Stop+0x94>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d117      	bne.n	8008ca6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6a1a      	ldr	r2, [r3, #32]
 8008c7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008c80:	4013      	ands	r3, r2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10f      	bne.n	8008ca6 <HAL_TIM_PWM_Stop+0x52>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6a1a      	ldr	r2, [r3, #32]
 8008c8c:	f240 4344 	movw	r3, #1092	; 0x444
 8008c90:	4013      	ands	r3, r2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d107      	bne.n	8008ca6 <HAL_TIM_PWM_Stop+0x52>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ca4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6a1a      	ldr	r2, [r3, #32]
 8008cac:	f241 1311 	movw	r3, #4369	; 0x1111
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10f      	bne.n	8008cd6 <HAL_TIM_PWM_Stop+0x82>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	6a1a      	ldr	r2, [r3, #32]
 8008cbc:	f240 4344 	movw	r3, #1092	; 0x444
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d107      	bne.n	8008cd6 <HAL_TIM_PWM_Stop+0x82>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f022 0201 	bic.w	r2, r2, #1
 8008cd4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	40010000 	.word	0x40010000

08008cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0302 	and.w	r3, r3, #2
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d122      	bne.n	8008d48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d11b      	bne.n	8008d48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f06f 0202 	mvn.w	r2, #2
 8008d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	f003 0303 	and.w	r3, r3, #3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fa6b 	bl	800920a <HAL_TIM_IC_CaptureCallback>
 8008d34:	e005      	b.n	8008d42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fa5d 	bl	80091f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fa6e 	bl	800921e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f003 0304 	and.w	r3, r3, #4
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d122      	bne.n	8008d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f003 0304 	and.w	r3, r3, #4
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d11b      	bne.n	8008d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0204 	mvn.w	r2, #4
 8008d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2202      	movs	r2, #2
 8008d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fa41 	bl	800920a <HAL_TIM_IC_CaptureCallback>
 8008d88:	e005      	b.n	8008d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa33 	bl	80091f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fa44 	bl	800921e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	f003 0308 	and.w	r3, r3, #8
 8008da6:	2b08      	cmp	r3, #8
 8008da8:	d122      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f003 0308 	and.w	r3, r3, #8
 8008db4:	2b08      	cmp	r3, #8
 8008db6:	d11b      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f06f 0208 	mvn.w	r2, #8
 8008dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2204      	movs	r2, #4
 8008dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	f003 0303 	and.w	r3, r3, #3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa17 	bl	800920a <HAL_TIM_IC_CaptureCallback>
 8008ddc:	e005      	b.n	8008dea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fa09 	bl	80091f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fa1a 	bl	800921e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	f003 0310 	and.w	r3, r3, #16
 8008dfa:	2b10      	cmp	r3, #16
 8008dfc:	d122      	bne.n	8008e44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f003 0310 	and.w	r3, r3, #16
 8008e08:	2b10      	cmp	r3, #16
 8008e0a:	d11b      	bne.n	8008e44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0210 	mvn.w	r2, #16
 8008e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2208      	movs	r2, #8
 8008e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f9ed 	bl	800920a <HAL_TIM_IC_CaptureCallback>
 8008e30:	e005      	b.n	8008e3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f9df 	bl	80091f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f9f0 	bl	800921e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d10e      	bne.n	8008e70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f003 0301 	and.w	r3, r3, #1
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d107      	bne.n	8008e70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f06f 0201 	mvn.w	r2, #1
 8008e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7f9 f9c0 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e7a:	2b80      	cmp	r3, #128	; 0x80
 8008e7c:	d10e      	bne.n	8008e9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e88:	2b80      	cmp	r3, #128	; 0x80
 8008e8a:	d107      	bne.n	8008e9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fd1a 	bl	80098d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea6:	2b40      	cmp	r3, #64	; 0x40
 8008ea8:	d10e      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb4:	2b40      	cmp	r3, #64	; 0x40
 8008eb6:	d107      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f9b5 	bl	8009232 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	f003 0320 	and.w	r3, r3, #32
 8008ed2:	2b20      	cmp	r3, #32
 8008ed4:	d10e      	bne.n	8008ef4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f003 0320 	and.w	r3, r3, #32
 8008ee0:	2b20      	cmp	r3, #32
 8008ee2:	d107      	bne.n	8008ef4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f06f 0220 	mvn.w	r2, #32
 8008eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fce4 	bl	80098bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d101      	bne.n	8008f16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008f12:	2302      	movs	r3, #2
 8008f14:	e0b4      	b.n	8009080 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2202      	movs	r2, #2
 8008f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b0c      	cmp	r3, #12
 8008f2a:	f200 809f 	bhi.w	800906c <HAL_TIM_PWM_ConfigChannel+0x170>
 8008f2e:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f69 	.word	0x08008f69
 8008f38:	0800906d 	.word	0x0800906d
 8008f3c:	0800906d 	.word	0x0800906d
 8008f40:	0800906d 	.word	0x0800906d
 8008f44:	08008fa9 	.word	0x08008fa9
 8008f48:	0800906d 	.word	0x0800906d
 8008f4c:	0800906d 	.word	0x0800906d
 8008f50:	0800906d 	.word	0x0800906d
 8008f54:	08008feb 	.word	0x08008feb
 8008f58:	0800906d 	.word	0x0800906d
 8008f5c:	0800906d 	.word	0x0800906d
 8008f60:	0800906d 	.word	0x0800906d
 8008f64:	0800902b 	.word	0x0800902b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68b9      	ldr	r1, [r7, #8]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 f9ea 	bl	8009348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	699a      	ldr	r2, [r3, #24]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f042 0208 	orr.w	r2, r2, #8
 8008f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	699a      	ldr	r2, [r3, #24]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f022 0204 	bic.w	r2, r2, #4
 8008f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6999      	ldr	r1, [r3, #24]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	691a      	ldr	r2, [r3, #16]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	619a      	str	r2, [r3, #24]
      break;
 8008fa6:	e062      	b.n	800906e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68b9      	ldr	r1, [r7, #8]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 fa30 	bl	8009414 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	699a      	ldr	r2, [r3, #24]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	699a      	ldr	r2, [r3, #24]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6999      	ldr	r1, [r3, #24]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	021a      	lsls	r2, r3, #8
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	619a      	str	r2, [r3, #24]
      break;
 8008fe8:	e041      	b.n	800906e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68b9      	ldr	r1, [r7, #8]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 fa7b 	bl	80094ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	69da      	ldr	r2, [r3, #28]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f042 0208 	orr.w	r2, r2, #8
 8009004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69da      	ldr	r2, [r3, #28]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f022 0204 	bic.w	r2, r2, #4
 8009014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69d9      	ldr	r1, [r3, #28]
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	691a      	ldr	r2, [r3, #16]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	61da      	str	r2, [r3, #28]
      break;
 8009028:	e021      	b.n	800906e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68b9      	ldr	r1, [r7, #8]
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fac5 	bl	80095c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	69da      	ldr	r2, [r3, #28]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	69da      	ldr	r2, [r3, #28]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69d9      	ldr	r1, [r3, #28]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	021a      	lsls	r2, r3, #8
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	430a      	orrs	r2, r1
 8009068:	61da      	str	r2, [r3, #28]
      break;
 800906a:	e000      	b.n	800906e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800906c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009098:	2b01      	cmp	r3, #1
 800909a:	d101      	bne.n	80090a0 <HAL_TIM_ConfigClockSource+0x18>
 800909c:	2302      	movs	r3, #2
 800909e:	e0a6      	b.n	80091ee <HAL_TIM_ConfigClockSource+0x166>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2202      	movs	r2, #2
 80090ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80090be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b40      	cmp	r3, #64	; 0x40
 80090d6:	d067      	beq.n	80091a8 <HAL_TIM_ConfigClockSource+0x120>
 80090d8:	2b40      	cmp	r3, #64	; 0x40
 80090da:	d80b      	bhi.n	80090f4 <HAL_TIM_ConfigClockSource+0x6c>
 80090dc:	2b10      	cmp	r3, #16
 80090de:	d073      	beq.n	80091c8 <HAL_TIM_ConfigClockSource+0x140>
 80090e0:	2b10      	cmp	r3, #16
 80090e2:	d802      	bhi.n	80090ea <HAL_TIM_ConfigClockSource+0x62>
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d06f      	beq.n	80091c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80090e8:	e078      	b.n	80091dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80090ea:	2b20      	cmp	r3, #32
 80090ec:	d06c      	beq.n	80091c8 <HAL_TIM_ConfigClockSource+0x140>
 80090ee:	2b30      	cmp	r3, #48	; 0x30
 80090f0:	d06a      	beq.n	80091c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80090f2:	e073      	b.n	80091dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80090f4:	2b70      	cmp	r3, #112	; 0x70
 80090f6:	d00d      	beq.n	8009114 <HAL_TIM_ConfigClockSource+0x8c>
 80090f8:	2b70      	cmp	r3, #112	; 0x70
 80090fa:	d804      	bhi.n	8009106 <HAL_TIM_ConfigClockSource+0x7e>
 80090fc:	2b50      	cmp	r3, #80	; 0x50
 80090fe:	d033      	beq.n	8009168 <HAL_TIM_ConfigClockSource+0xe0>
 8009100:	2b60      	cmp	r3, #96	; 0x60
 8009102:	d041      	beq.n	8009188 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009104:	e06a      	b.n	80091dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800910a:	d066      	beq.n	80091da <HAL_TIM_ConfigClockSource+0x152>
 800910c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009110:	d017      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009112:	e063      	b.n	80091dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6818      	ldr	r0, [r3, #0]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	6899      	ldr	r1, [r3, #8]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	f000 fb16 	bl	8009754 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009136:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	609a      	str	r2, [r3, #8]
      break;
 8009140:	e04c      	b.n	80091dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6818      	ldr	r0, [r3, #0]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	6899      	ldr	r1, [r3, #8]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f000 faff 	bl	8009754 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009164:	609a      	str	r2, [r3, #8]
      break;
 8009166:	e039      	b.n	80091dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	6859      	ldr	r1, [r3, #4]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	461a      	mov	r2, r3
 8009176:	f000 fa73 	bl	8009660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2150      	movs	r1, #80	; 0x50
 8009180:	4618      	mov	r0, r3
 8009182:	f000 facc 	bl	800971e <TIM_ITRx_SetConfig>
      break;
 8009186:	e029      	b.n	80091dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	6859      	ldr	r1, [r3, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	461a      	mov	r2, r3
 8009196:	f000 fa92 	bl	80096be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2160      	movs	r1, #96	; 0x60
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 fabc 	bl	800971e <TIM_ITRx_SetConfig>
      break;
 80091a6:	e019      	b.n	80091dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6818      	ldr	r0, [r3, #0]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	6859      	ldr	r1, [r3, #4]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	461a      	mov	r2, r3
 80091b6:	f000 fa53 	bl	8009660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2140      	movs	r1, #64	; 0x40
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 faac 	bl	800971e <TIM_ITRx_SetConfig>
      break;
 80091c6:	e009      	b.n	80091dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4619      	mov	r1, r3
 80091d2:	4610      	mov	r0, r2
 80091d4:	f000 faa3 	bl	800971e <TIM_ITRx_SetConfig>
      break;
 80091d8:	e000      	b.n	80091dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80091da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
	...

08009248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a34      	ldr	r2, [pc, #208]	; (800932c <TIM_Base_SetConfig+0xe4>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d00f      	beq.n	8009280 <TIM_Base_SetConfig+0x38>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009266:	d00b      	beq.n	8009280 <TIM_Base_SetConfig+0x38>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a31      	ldr	r2, [pc, #196]	; (8009330 <TIM_Base_SetConfig+0xe8>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d007      	beq.n	8009280 <TIM_Base_SetConfig+0x38>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a30      	ldr	r2, [pc, #192]	; (8009334 <TIM_Base_SetConfig+0xec>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d003      	beq.n	8009280 <TIM_Base_SetConfig+0x38>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a2f      	ldr	r2, [pc, #188]	; (8009338 <TIM_Base_SetConfig+0xf0>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d108      	bne.n	8009292 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	4313      	orrs	r3, r2
 8009290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a25      	ldr	r2, [pc, #148]	; (800932c <TIM_Base_SetConfig+0xe4>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d01b      	beq.n	80092d2 <TIM_Base_SetConfig+0x8a>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a0:	d017      	beq.n	80092d2 <TIM_Base_SetConfig+0x8a>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a22      	ldr	r2, [pc, #136]	; (8009330 <TIM_Base_SetConfig+0xe8>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d013      	beq.n	80092d2 <TIM_Base_SetConfig+0x8a>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a21      	ldr	r2, [pc, #132]	; (8009334 <TIM_Base_SetConfig+0xec>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d00f      	beq.n	80092d2 <TIM_Base_SetConfig+0x8a>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a20      	ldr	r2, [pc, #128]	; (8009338 <TIM_Base_SetConfig+0xf0>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d00b      	beq.n	80092d2 <TIM_Base_SetConfig+0x8a>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a1f      	ldr	r2, [pc, #124]	; (800933c <TIM_Base_SetConfig+0xf4>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d007      	beq.n	80092d2 <TIM_Base_SetConfig+0x8a>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a1e      	ldr	r2, [pc, #120]	; (8009340 <TIM_Base_SetConfig+0xf8>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d003      	beq.n	80092d2 <TIM_Base_SetConfig+0x8a>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a1d      	ldr	r2, [pc, #116]	; (8009344 <TIM_Base_SetConfig+0xfc>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d108      	bne.n	80092e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a08      	ldr	r2, [pc, #32]	; (800932c <TIM_Base_SetConfig+0xe4>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d103      	bne.n	8009318 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	691a      	ldr	r2, [r3, #16]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	615a      	str	r2, [r3, #20]
}
 800931e:	bf00      	nop
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	40010000 	.word	0x40010000
 8009330:	40000400 	.word	0x40000400
 8009334:	40000800 	.word	0x40000800
 8009338:	40000c00 	.word	0x40000c00
 800933c:	40014000 	.word	0x40014000
 8009340:	40014400 	.word	0x40014400
 8009344:	40014800 	.word	0x40014800

08009348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	f023 0201 	bic.w	r2, r3, #1
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f023 0303 	bic.w	r3, r3, #3
 800937e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f023 0302 	bic.w	r3, r3, #2
 8009390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	4313      	orrs	r3, r2
 800939a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a1c      	ldr	r2, [pc, #112]	; (8009410 <TIM_OC1_SetConfig+0xc8>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d10c      	bne.n	80093be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	f023 0308 	bic.w	r3, r3, #8
 80093aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f023 0304 	bic.w	r3, r3, #4
 80093bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a13      	ldr	r2, [pc, #76]	; (8009410 <TIM_OC1_SetConfig+0xc8>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d111      	bne.n	80093ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	4313      	orrs	r3, r2
 80093de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	685a      	ldr	r2, [r3, #4]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	621a      	str	r2, [r3, #32]
}
 8009404:	bf00      	nop
 8009406:	371c      	adds	r7, #28
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	40010000 	.word	0x40010000

08009414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	f023 0210 	bic.w	r2, r3, #16
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800944a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	021b      	lsls	r3, r3, #8
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	4313      	orrs	r3, r2
 8009456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f023 0320 	bic.w	r3, r3, #32
 800945e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	4313      	orrs	r3, r2
 800946a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a1e      	ldr	r2, [pc, #120]	; (80094e8 <TIM_OC2_SetConfig+0xd4>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d10d      	bne.n	8009490 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800947a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	011b      	lsls	r3, r3, #4
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	4313      	orrs	r3, r2
 8009486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800948e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a15      	ldr	r2, [pc, #84]	; (80094e8 <TIM_OC2_SetConfig+0xd4>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d113      	bne.n	80094c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800949e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	4313      	orrs	r3, r2
 80094be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	621a      	str	r2, [r3, #32]
}
 80094da:	bf00      	nop
 80094dc:	371c      	adds	r7, #28
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	40010000 	.word	0x40010000

080094ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800951a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f023 0303 	bic.w	r3, r3, #3
 8009522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4313      	orrs	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	021b      	lsls	r3, r3, #8
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	4313      	orrs	r3, r2
 8009540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a1d      	ldr	r2, [pc, #116]	; (80095bc <TIM_OC3_SetConfig+0xd0>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d10d      	bne.n	8009566 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	021b      	lsls	r3, r3, #8
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	4313      	orrs	r3, r2
 800955c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a14      	ldr	r2, [pc, #80]	; (80095bc <TIM_OC3_SetConfig+0xd0>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d113      	bne.n	8009596 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800957c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	011b      	lsls	r3, r3, #4
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	4313      	orrs	r3, r2
 8009588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	4313      	orrs	r3, r2
 8009594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	621a      	str	r2, [r3, #32]
}
 80095b0:	bf00      	nop
 80095b2:	371c      	adds	r7, #28
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	40010000 	.word	0x40010000

080095c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	021b      	lsls	r3, r3, #8
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	4313      	orrs	r3, r2
 8009602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800960a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	031b      	lsls	r3, r3, #12
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	4313      	orrs	r3, r2
 8009616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a10      	ldr	r2, [pc, #64]	; (800965c <TIM_OC4_SetConfig+0x9c>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d109      	bne.n	8009634 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	019b      	lsls	r3, r3, #6
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	4313      	orrs	r3, r2
 8009632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	685a      	ldr	r2, [r3, #4]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	621a      	str	r2, [r3, #32]
}
 800964e:	bf00      	nop
 8009650:	371c      	adds	r7, #28
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	40010000 	.word	0x40010000

08009660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009660:	b480      	push	{r7}
 8009662:	b087      	sub	sp, #28
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	f023 0201 	bic.w	r2, r3, #1
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800968a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	4313      	orrs	r3, r2
 8009694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f023 030a 	bic.w	r3, r3, #10
 800969c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	621a      	str	r2, [r3, #32]
}
 80096b2:	bf00      	nop
 80096b4:	371c      	adds	r7, #28
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096be:	b480      	push	{r7}
 80096c0:	b087      	sub	sp, #28
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	60b9      	str	r1, [r7, #8]
 80096c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	f023 0210 	bic.w	r2, r3, #16
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	031b      	lsls	r3, r3, #12
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80096fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	011b      	lsls	r3, r3, #4
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	4313      	orrs	r3, r2
 8009704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	621a      	str	r2, [r3, #32]
}
 8009712:	bf00      	nop
 8009714:	371c      	adds	r7, #28
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800971e:	b480      	push	{r7}
 8009720:	b085      	sub	sp, #20
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4313      	orrs	r3, r2
 800973c:	f043 0307 	orr.w	r3, r3, #7
 8009740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	609a      	str	r2, [r3, #8]
}
 8009748:	bf00      	nop
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800976e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	021a      	lsls	r2, r3, #8
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	431a      	orrs	r2, r3
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	4313      	orrs	r3, r2
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	4313      	orrs	r3, r2
 8009780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	609a      	str	r2, [r3, #8]
}
 8009788:	bf00      	nop
 800978a:	371c      	adds	r7, #28
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f003 031f 	and.w	r3, r3, #31
 80097a6:	2201      	movs	r2, #1
 80097a8:	fa02 f303 	lsl.w	r3, r2, r3
 80097ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6a1a      	ldr	r2, [r3, #32]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	43db      	mvns	r3, r3
 80097b6:	401a      	ands	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6a1a      	ldr	r2, [r3, #32]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f003 031f 	and.w	r3, r3, #31
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	fa01 f303 	lsl.w	r3, r1, r3
 80097cc:	431a      	orrs	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	621a      	str	r2, [r3, #32]
}
 80097d2:	bf00      	nop
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
	...

080097e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d101      	bne.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097f4:	2302      	movs	r3, #2
 80097f6:	e050      	b.n	800989a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	4313      	orrs	r3, r2
 8009828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a1c      	ldr	r2, [pc, #112]	; (80098a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d018      	beq.n	800986e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009844:	d013      	beq.n	800986e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a18      	ldr	r2, [pc, #96]	; (80098ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d00e      	beq.n	800986e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a16      	ldr	r2, [pc, #88]	; (80098b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d009      	beq.n	800986e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a15      	ldr	r2, [pc, #84]	; (80098b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d004      	beq.n	800986e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a13      	ldr	r2, [pc, #76]	; (80098b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d10c      	bne.n	8009888 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	4313      	orrs	r3, r2
 800987e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	40010000 	.word	0x40010000
 80098ac:	40000400 	.word	0x40000400
 80098b0:	40000800 	.word	0x40000800
 80098b4:	40000c00 	.word	0x40000c00
 80098b8:	40014000 	.word	0x40014000

080098bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d101      	bne.n	80098f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e03f      	b.n	8009976 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d106      	bne.n	8009910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7f9 fe32 	bl	8003574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2224      	movs	r2, #36	; 0x24
 8009914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68da      	ldr	r2, [r3, #12]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f90b 	bl	8009b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	691a      	ldr	r2, [r3, #16]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800993c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	695a      	ldr	r2, [r3, #20]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800994c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68da      	ldr	r2, [r3, #12]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800995c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2220      	movs	r2, #32
 8009968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2220      	movs	r2, #32
 8009970:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b088      	sub	sp, #32
 8009982:	af02      	add	r7, sp, #8
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	603b      	str	r3, [r7, #0]
 800998a:	4613      	mov	r3, r2
 800998c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b20      	cmp	r3, #32
 800999c:	f040 8083 	bne.w	8009aa6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d002      	beq.n	80099ac <HAL_UART_Transmit+0x2e>
 80099a6:	88fb      	ldrh	r3, [r7, #6]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d101      	bne.n	80099b0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	e07b      	b.n	8009aa8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d101      	bne.n	80099be <HAL_UART_Transmit+0x40>
 80099ba:	2302      	movs	r3, #2
 80099bc:	e074      	b.n	8009aa8 <HAL_UART_Transmit+0x12a>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2221      	movs	r2, #33	; 0x21
 80099d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80099d4:	f7fb fcb8 	bl	8005348 <HAL_GetTick>
 80099d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	88fa      	ldrh	r2, [r7, #6]
 80099de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	88fa      	ldrh	r2, [r7, #6]
 80099e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80099ee:	e042      	b.n	8009a76 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	3b01      	subs	r3, #1
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a06:	d122      	bne.n	8009a4e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2180      	movs	r1, #128	; 0x80
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 f84c 	bl	8009ab0 <UART_WaitOnFlagUntilTimeout>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e042      	b.n	8009aa8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	881b      	ldrh	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a34:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d103      	bne.n	8009a46 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	3302      	adds	r3, #2
 8009a42:	60bb      	str	r3, [r7, #8]
 8009a44:	e017      	b.n	8009a76 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	60bb      	str	r3, [r7, #8]
 8009a4c:	e013      	b.n	8009a76 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2200      	movs	r2, #0
 8009a56:	2180      	movs	r1, #128	; 0x80
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 f829 	bl	8009ab0 <UART_WaitOnFlagUntilTimeout>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e01f      	b.n	8009aa8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	1c5a      	adds	r2, r3, #1
 8009a6c:	60ba      	str	r2, [r7, #8]
 8009a6e:	781a      	ldrb	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1b7      	bne.n	80099f0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2200      	movs	r2, #0
 8009a88:	2140      	movs	r1, #64	; 0x40
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 f810 	bl	8009ab0 <UART_WaitOnFlagUntilTimeout>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009a96:	2303      	movs	r3, #3
 8009a98:	e006      	b.n	8009aa8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e000      	b.n	8009aa8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009aa6:	2302      	movs	r3, #2
  }
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3718      	adds	r7, #24
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	4613      	mov	r3, r2
 8009abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ac0:	e02c      	b.n	8009b1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac8:	d028      	beq.n	8009b1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d007      	beq.n	8009ae0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ad0:	f7fb fc3a 	bl	8005348 <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d21d      	bcs.n	8009b1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68da      	ldr	r2, [r3, #12]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009aee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	695a      	ldr	r2, [r3, #20]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f022 0201 	bic.w	r2, r2, #1
 8009afe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2220      	movs	r2, #32
 8009b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e00f      	b.n	8009b3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	4013      	ands	r3, r2
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	bf0c      	ite	eq
 8009b2c:	2301      	moveq	r3, #1
 8009b2e:	2300      	movne	r3, #0
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	461a      	mov	r2, r3
 8009b34:	79fb      	ldrb	r3, [r7, #7]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d0c3      	beq.n	8009ac2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b48:	b085      	sub	sp, #20
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68da      	ldr	r2, [r3, #12]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	430a      	orrs	r2, r1
 8009b62:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	431a      	orrs	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	431a      	orrs	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	69db      	ldr	r3, [r3, #28]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009b86:	f023 030c 	bic.w	r3, r3, #12
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	6812      	ldr	r2, [r2, #0]
 8009b8e:	68f9      	ldr	r1, [r7, #12]
 8009b90:	430b      	orrs	r3, r1
 8009b92:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	695b      	ldr	r3, [r3, #20]
 8009b9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	699a      	ldr	r2, [r3, #24]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bb2:	f040 818b 	bne.w	8009ecc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4ac1      	ldr	r2, [pc, #772]	; (8009ec0 <UART_SetConfig+0x37c>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d005      	beq.n	8009bcc <UART_SetConfig+0x88>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4abf      	ldr	r2, [pc, #764]	; (8009ec4 <UART_SetConfig+0x380>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	f040 80bd 	bne.w	8009d46 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009bcc:	f7fe ff78 	bl	8008ac0 <HAL_RCC_GetPCLK2Freq>
 8009bd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	461d      	mov	r5, r3
 8009bd6:	f04f 0600 	mov.w	r6, #0
 8009bda:	46a8      	mov	r8, r5
 8009bdc:	46b1      	mov	r9, r6
 8009bde:	eb18 0308 	adds.w	r3, r8, r8
 8009be2:	eb49 0409 	adc.w	r4, r9, r9
 8009be6:	4698      	mov	r8, r3
 8009be8:	46a1      	mov	r9, r4
 8009bea:	eb18 0805 	adds.w	r8, r8, r5
 8009bee:	eb49 0906 	adc.w	r9, r9, r6
 8009bf2:	f04f 0100 	mov.w	r1, #0
 8009bf6:	f04f 0200 	mov.w	r2, #0
 8009bfa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009bfe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009c02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009c06:	4688      	mov	r8, r1
 8009c08:	4691      	mov	r9, r2
 8009c0a:	eb18 0005 	adds.w	r0, r8, r5
 8009c0e:	eb49 0106 	adc.w	r1, r9, r6
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	461d      	mov	r5, r3
 8009c18:	f04f 0600 	mov.w	r6, #0
 8009c1c:	196b      	adds	r3, r5, r5
 8009c1e:	eb46 0406 	adc.w	r4, r6, r6
 8009c22:	461a      	mov	r2, r3
 8009c24:	4623      	mov	r3, r4
 8009c26:	f7f7 f817 	bl	8000c58 <__aeabi_uldivmod>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	460c      	mov	r4, r1
 8009c2e:	461a      	mov	r2, r3
 8009c30:	4ba5      	ldr	r3, [pc, #660]	; (8009ec8 <UART_SetConfig+0x384>)
 8009c32:	fba3 2302 	umull	r2, r3, r3, r2
 8009c36:	095b      	lsrs	r3, r3, #5
 8009c38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	461d      	mov	r5, r3
 8009c40:	f04f 0600 	mov.w	r6, #0
 8009c44:	46a9      	mov	r9, r5
 8009c46:	46b2      	mov	sl, r6
 8009c48:	eb19 0309 	adds.w	r3, r9, r9
 8009c4c:	eb4a 040a 	adc.w	r4, sl, sl
 8009c50:	4699      	mov	r9, r3
 8009c52:	46a2      	mov	sl, r4
 8009c54:	eb19 0905 	adds.w	r9, r9, r5
 8009c58:	eb4a 0a06 	adc.w	sl, sl, r6
 8009c5c:	f04f 0100 	mov.w	r1, #0
 8009c60:	f04f 0200 	mov.w	r2, #0
 8009c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c70:	4689      	mov	r9, r1
 8009c72:	4692      	mov	sl, r2
 8009c74:	eb19 0005 	adds.w	r0, r9, r5
 8009c78:	eb4a 0106 	adc.w	r1, sl, r6
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	461d      	mov	r5, r3
 8009c82:	f04f 0600 	mov.w	r6, #0
 8009c86:	196b      	adds	r3, r5, r5
 8009c88:	eb46 0406 	adc.w	r4, r6, r6
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	4623      	mov	r3, r4
 8009c90:	f7f6 ffe2 	bl	8000c58 <__aeabi_uldivmod>
 8009c94:	4603      	mov	r3, r0
 8009c96:	460c      	mov	r4, r1
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4b8b      	ldr	r3, [pc, #556]	; (8009ec8 <UART_SetConfig+0x384>)
 8009c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8009ca0:	095b      	lsrs	r3, r3, #5
 8009ca2:	2164      	movs	r1, #100	; 0x64
 8009ca4:	fb01 f303 	mul.w	r3, r1, r3
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	3332      	adds	r3, #50	; 0x32
 8009cae:	4a86      	ldr	r2, [pc, #536]	; (8009ec8 <UART_SetConfig+0x384>)
 8009cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb4:	095b      	lsrs	r3, r3, #5
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009cbc:	4498      	add	r8, r3
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	461d      	mov	r5, r3
 8009cc2:	f04f 0600 	mov.w	r6, #0
 8009cc6:	46a9      	mov	r9, r5
 8009cc8:	46b2      	mov	sl, r6
 8009cca:	eb19 0309 	adds.w	r3, r9, r9
 8009cce:	eb4a 040a 	adc.w	r4, sl, sl
 8009cd2:	4699      	mov	r9, r3
 8009cd4:	46a2      	mov	sl, r4
 8009cd6:	eb19 0905 	adds.w	r9, r9, r5
 8009cda:	eb4a 0a06 	adc.w	sl, sl, r6
 8009cde:	f04f 0100 	mov.w	r1, #0
 8009ce2:	f04f 0200 	mov.w	r2, #0
 8009ce6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009cee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009cf2:	4689      	mov	r9, r1
 8009cf4:	4692      	mov	sl, r2
 8009cf6:	eb19 0005 	adds.w	r0, r9, r5
 8009cfa:	eb4a 0106 	adc.w	r1, sl, r6
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	461d      	mov	r5, r3
 8009d04:	f04f 0600 	mov.w	r6, #0
 8009d08:	196b      	adds	r3, r5, r5
 8009d0a:	eb46 0406 	adc.w	r4, r6, r6
 8009d0e:	461a      	mov	r2, r3
 8009d10:	4623      	mov	r3, r4
 8009d12:	f7f6 ffa1 	bl	8000c58 <__aeabi_uldivmod>
 8009d16:	4603      	mov	r3, r0
 8009d18:	460c      	mov	r4, r1
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	4b6a      	ldr	r3, [pc, #424]	; (8009ec8 <UART_SetConfig+0x384>)
 8009d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8009d22:	095b      	lsrs	r3, r3, #5
 8009d24:	2164      	movs	r1, #100	; 0x64
 8009d26:	fb01 f303 	mul.w	r3, r1, r3
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	00db      	lsls	r3, r3, #3
 8009d2e:	3332      	adds	r3, #50	; 0x32
 8009d30:	4a65      	ldr	r2, [pc, #404]	; (8009ec8 <UART_SetConfig+0x384>)
 8009d32:	fba2 2303 	umull	r2, r3, r2, r3
 8009d36:	095b      	lsrs	r3, r3, #5
 8009d38:	f003 0207 	and.w	r2, r3, #7
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4442      	add	r2, r8
 8009d42:	609a      	str	r2, [r3, #8]
 8009d44:	e26f      	b.n	800a226 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d46:	f7fe fea7 	bl	8008a98 <HAL_RCC_GetPCLK1Freq>
 8009d4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	461d      	mov	r5, r3
 8009d50:	f04f 0600 	mov.w	r6, #0
 8009d54:	46a8      	mov	r8, r5
 8009d56:	46b1      	mov	r9, r6
 8009d58:	eb18 0308 	adds.w	r3, r8, r8
 8009d5c:	eb49 0409 	adc.w	r4, r9, r9
 8009d60:	4698      	mov	r8, r3
 8009d62:	46a1      	mov	r9, r4
 8009d64:	eb18 0805 	adds.w	r8, r8, r5
 8009d68:	eb49 0906 	adc.w	r9, r9, r6
 8009d6c:	f04f 0100 	mov.w	r1, #0
 8009d70:	f04f 0200 	mov.w	r2, #0
 8009d74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009d78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009d7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009d80:	4688      	mov	r8, r1
 8009d82:	4691      	mov	r9, r2
 8009d84:	eb18 0005 	adds.w	r0, r8, r5
 8009d88:	eb49 0106 	adc.w	r1, r9, r6
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	461d      	mov	r5, r3
 8009d92:	f04f 0600 	mov.w	r6, #0
 8009d96:	196b      	adds	r3, r5, r5
 8009d98:	eb46 0406 	adc.w	r4, r6, r6
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	4623      	mov	r3, r4
 8009da0:	f7f6 ff5a 	bl	8000c58 <__aeabi_uldivmod>
 8009da4:	4603      	mov	r3, r0
 8009da6:	460c      	mov	r4, r1
 8009da8:	461a      	mov	r2, r3
 8009daa:	4b47      	ldr	r3, [pc, #284]	; (8009ec8 <UART_SetConfig+0x384>)
 8009dac:	fba3 2302 	umull	r2, r3, r3, r2
 8009db0:	095b      	lsrs	r3, r3, #5
 8009db2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	461d      	mov	r5, r3
 8009dba:	f04f 0600 	mov.w	r6, #0
 8009dbe:	46a9      	mov	r9, r5
 8009dc0:	46b2      	mov	sl, r6
 8009dc2:	eb19 0309 	adds.w	r3, r9, r9
 8009dc6:	eb4a 040a 	adc.w	r4, sl, sl
 8009dca:	4699      	mov	r9, r3
 8009dcc:	46a2      	mov	sl, r4
 8009dce:	eb19 0905 	adds.w	r9, r9, r5
 8009dd2:	eb4a 0a06 	adc.w	sl, sl, r6
 8009dd6:	f04f 0100 	mov.w	r1, #0
 8009dda:	f04f 0200 	mov.w	r2, #0
 8009dde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009de2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009de6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009dea:	4689      	mov	r9, r1
 8009dec:	4692      	mov	sl, r2
 8009dee:	eb19 0005 	adds.w	r0, r9, r5
 8009df2:	eb4a 0106 	adc.w	r1, sl, r6
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	461d      	mov	r5, r3
 8009dfc:	f04f 0600 	mov.w	r6, #0
 8009e00:	196b      	adds	r3, r5, r5
 8009e02:	eb46 0406 	adc.w	r4, r6, r6
 8009e06:	461a      	mov	r2, r3
 8009e08:	4623      	mov	r3, r4
 8009e0a:	f7f6 ff25 	bl	8000c58 <__aeabi_uldivmod>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	460c      	mov	r4, r1
 8009e12:	461a      	mov	r2, r3
 8009e14:	4b2c      	ldr	r3, [pc, #176]	; (8009ec8 <UART_SetConfig+0x384>)
 8009e16:	fba3 1302 	umull	r1, r3, r3, r2
 8009e1a:	095b      	lsrs	r3, r3, #5
 8009e1c:	2164      	movs	r1, #100	; 0x64
 8009e1e:	fb01 f303 	mul.w	r3, r1, r3
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	00db      	lsls	r3, r3, #3
 8009e26:	3332      	adds	r3, #50	; 0x32
 8009e28:	4a27      	ldr	r2, [pc, #156]	; (8009ec8 <UART_SetConfig+0x384>)
 8009e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e2e:	095b      	lsrs	r3, r3, #5
 8009e30:	005b      	lsls	r3, r3, #1
 8009e32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e36:	4498      	add	r8, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	461d      	mov	r5, r3
 8009e3c:	f04f 0600 	mov.w	r6, #0
 8009e40:	46a9      	mov	r9, r5
 8009e42:	46b2      	mov	sl, r6
 8009e44:	eb19 0309 	adds.w	r3, r9, r9
 8009e48:	eb4a 040a 	adc.w	r4, sl, sl
 8009e4c:	4699      	mov	r9, r3
 8009e4e:	46a2      	mov	sl, r4
 8009e50:	eb19 0905 	adds.w	r9, r9, r5
 8009e54:	eb4a 0a06 	adc.w	sl, sl, r6
 8009e58:	f04f 0100 	mov.w	r1, #0
 8009e5c:	f04f 0200 	mov.w	r2, #0
 8009e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e6c:	4689      	mov	r9, r1
 8009e6e:	4692      	mov	sl, r2
 8009e70:	eb19 0005 	adds.w	r0, r9, r5
 8009e74:	eb4a 0106 	adc.w	r1, sl, r6
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	461d      	mov	r5, r3
 8009e7e:	f04f 0600 	mov.w	r6, #0
 8009e82:	196b      	adds	r3, r5, r5
 8009e84:	eb46 0406 	adc.w	r4, r6, r6
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4623      	mov	r3, r4
 8009e8c:	f7f6 fee4 	bl	8000c58 <__aeabi_uldivmod>
 8009e90:	4603      	mov	r3, r0
 8009e92:	460c      	mov	r4, r1
 8009e94:	461a      	mov	r2, r3
 8009e96:	4b0c      	ldr	r3, [pc, #48]	; (8009ec8 <UART_SetConfig+0x384>)
 8009e98:	fba3 1302 	umull	r1, r3, r3, r2
 8009e9c:	095b      	lsrs	r3, r3, #5
 8009e9e:	2164      	movs	r1, #100	; 0x64
 8009ea0:	fb01 f303 	mul.w	r3, r1, r3
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	3332      	adds	r3, #50	; 0x32
 8009eaa:	4a07      	ldr	r2, [pc, #28]	; (8009ec8 <UART_SetConfig+0x384>)
 8009eac:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb0:	095b      	lsrs	r3, r3, #5
 8009eb2:	f003 0207 	and.w	r2, r3, #7
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4442      	add	r2, r8
 8009ebc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009ebe:	e1b2      	b.n	800a226 <UART_SetConfig+0x6e2>
 8009ec0:	40011000 	.word	0x40011000
 8009ec4:	40011400 	.word	0x40011400
 8009ec8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4ad7      	ldr	r2, [pc, #860]	; (800a230 <UART_SetConfig+0x6ec>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d005      	beq.n	8009ee2 <UART_SetConfig+0x39e>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4ad6      	ldr	r2, [pc, #856]	; (800a234 <UART_SetConfig+0x6f0>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	f040 80d1 	bne.w	800a084 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ee2:	f7fe fded 	bl	8008ac0 <HAL_RCC_GetPCLK2Freq>
 8009ee6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	469a      	mov	sl, r3
 8009eec:	f04f 0b00 	mov.w	fp, #0
 8009ef0:	46d0      	mov	r8, sl
 8009ef2:	46d9      	mov	r9, fp
 8009ef4:	eb18 0308 	adds.w	r3, r8, r8
 8009ef8:	eb49 0409 	adc.w	r4, r9, r9
 8009efc:	4698      	mov	r8, r3
 8009efe:	46a1      	mov	r9, r4
 8009f00:	eb18 080a 	adds.w	r8, r8, sl
 8009f04:	eb49 090b 	adc.w	r9, r9, fp
 8009f08:	f04f 0100 	mov.w	r1, #0
 8009f0c:	f04f 0200 	mov.w	r2, #0
 8009f10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009f14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009f18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009f1c:	4688      	mov	r8, r1
 8009f1e:	4691      	mov	r9, r2
 8009f20:	eb1a 0508 	adds.w	r5, sl, r8
 8009f24:	eb4b 0609 	adc.w	r6, fp, r9
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	f04f 0200 	mov.w	r2, #0
 8009f32:	f04f 0300 	mov.w	r3, #0
 8009f36:	f04f 0400 	mov.w	r4, #0
 8009f3a:	0094      	lsls	r4, r2, #2
 8009f3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f40:	008b      	lsls	r3, r1, #2
 8009f42:	461a      	mov	r2, r3
 8009f44:	4623      	mov	r3, r4
 8009f46:	4628      	mov	r0, r5
 8009f48:	4631      	mov	r1, r6
 8009f4a:	f7f6 fe85 	bl	8000c58 <__aeabi_uldivmod>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	460c      	mov	r4, r1
 8009f52:	461a      	mov	r2, r3
 8009f54:	4bb8      	ldr	r3, [pc, #736]	; (800a238 <UART_SetConfig+0x6f4>)
 8009f56:	fba3 2302 	umull	r2, r3, r3, r2
 8009f5a:	095b      	lsrs	r3, r3, #5
 8009f5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	469b      	mov	fp, r3
 8009f64:	f04f 0c00 	mov.w	ip, #0
 8009f68:	46d9      	mov	r9, fp
 8009f6a:	46e2      	mov	sl, ip
 8009f6c:	eb19 0309 	adds.w	r3, r9, r9
 8009f70:	eb4a 040a 	adc.w	r4, sl, sl
 8009f74:	4699      	mov	r9, r3
 8009f76:	46a2      	mov	sl, r4
 8009f78:	eb19 090b 	adds.w	r9, r9, fp
 8009f7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009f80:	f04f 0100 	mov.w	r1, #0
 8009f84:	f04f 0200 	mov.w	r2, #0
 8009f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f94:	4689      	mov	r9, r1
 8009f96:	4692      	mov	sl, r2
 8009f98:	eb1b 0509 	adds.w	r5, fp, r9
 8009f9c:	eb4c 060a 	adc.w	r6, ip, sl
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	f04f 0200 	mov.w	r2, #0
 8009faa:	f04f 0300 	mov.w	r3, #0
 8009fae:	f04f 0400 	mov.w	r4, #0
 8009fb2:	0094      	lsls	r4, r2, #2
 8009fb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009fb8:	008b      	lsls	r3, r1, #2
 8009fba:	461a      	mov	r2, r3
 8009fbc:	4623      	mov	r3, r4
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	4631      	mov	r1, r6
 8009fc2:	f7f6 fe49 	bl	8000c58 <__aeabi_uldivmod>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	460c      	mov	r4, r1
 8009fca:	461a      	mov	r2, r3
 8009fcc:	4b9a      	ldr	r3, [pc, #616]	; (800a238 <UART_SetConfig+0x6f4>)
 8009fce:	fba3 1302 	umull	r1, r3, r3, r2
 8009fd2:	095b      	lsrs	r3, r3, #5
 8009fd4:	2164      	movs	r1, #100	; 0x64
 8009fd6:	fb01 f303 	mul.w	r3, r1, r3
 8009fda:	1ad3      	subs	r3, r2, r3
 8009fdc:	011b      	lsls	r3, r3, #4
 8009fde:	3332      	adds	r3, #50	; 0x32
 8009fe0:	4a95      	ldr	r2, [pc, #596]	; (800a238 <UART_SetConfig+0x6f4>)
 8009fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe6:	095b      	lsrs	r3, r3, #5
 8009fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fec:	4498      	add	r8, r3
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	469b      	mov	fp, r3
 8009ff2:	f04f 0c00 	mov.w	ip, #0
 8009ff6:	46d9      	mov	r9, fp
 8009ff8:	46e2      	mov	sl, ip
 8009ffa:	eb19 0309 	adds.w	r3, r9, r9
 8009ffe:	eb4a 040a 	adc.w	r4, sl, sl
 800a002:	4699      	mov	r9, r3
 800a004:	46a2      	mov	sl, r4
 800a006:	eb19 090b 	adds.w	r9, r9, fp
 800a00a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a00e:	f04f 0100 	mov.w	r1, #0
 800a012:	f04f 0200 	mov.w	r2, #0
 800a016:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a01a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a01e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a022:	4689      	mov	r9, r1
 800a024:	4692      	mov	sl, r2
 800a026:	eb1b 0509 	adds.w	r5, fp, r9
 800a02a:	eb4c 060a 	adc.w	r6, ip, sl
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	4619      	mov	r1, r3
 800a034:	f04f 0200 	mov.w	r2, #0
 800a038:	f04f 0300 	mov.w	r3, #0
 800a03c:	f04f 0400 	mov.w	r4, #0
 800a040:	0094      	lsls	r4, r2, #2
 800a042:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a046:	008b      	lsls	r3, r1, #2
 800a048:	461a      	mov	r2, r3
 800a04a:	4623      	mov	r3, r4
 800a04c:	4628      	mov	r0, r5
 800a04e:	4631      	mov	r1, r6
 800a050:	f7f6 fe02 	bl	8000c58 <__aeabi_uldivmod>
 800a054:	4603      	mov	r3, r0
 800a056:	460c      	mov	r4, r1
 800a058:	461a      	mov	r2, r3
 800a05a:	4b77      	ldr	r3, [pc, #476]	; (800a238 <UART_SetConfig+0x6f4>)
 800a05c:	fba3 1302 	umull	r1, r3, r3, r2
 800a060:	095b      	lsrs	r3, r3, #5
 800a062:	2164      	movs	r1, #100	; 0x64
 800a064:	fb01 f303 	mul.w	r3, r1, r3
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	011b      	lsls	r3, r3, #4
 800a06c:	3332      	adds	r3, #50	; 0x32
 800a06e:	4a72      	ldr	r2, [pc, #456]	; (800a238 <UART_SetConfig+0x6f4>)
 800a070:	fba2 2303 	umull	r2, r3, r2, r3
 800a074:	095b      	lsrs	r3, r3, #5
 800a076:	f003 020f 	and.w	r2, r3, #15
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4442      	add	r2, r8
 800a080:	609a      	str	r2, [r3, #8]
 800a082:	e0d0      	b.n	800a226 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a084:	f7fe fd08 	bl	8008a98 <HAL_RCC_GetPCLK1Freq>
 800a088:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	469a      	mov	sl, r3
 800a08e:	f04f 0b00 	mov.w	fp, #0
 800a092:	46d0      	mov	r8, sl
 800a094:	46d9      	mov	r9, fp
 800a096:	eb18 0308 	adds.w	r3, r8, r8
 800a09a:	eb49 0409 	adc.w	r4, r9, r9
 800a09e:	4698      	mov	r8, r3
 800a0a0:	46a1      	mov	r9, r4
 800a0a2:	eb18 080a 	adds.w	r8, r8, sl
 800a0a6:	eb49 090b 	adc.w	r9, r9, fp
 800a0aa:	f04f 0100 	mov.w	r1, #0
 800a0ae:	f04f 0200 	mov.w	r2, #0
 800a0b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a0b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a0ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a0be:	4688      	mov	r8, r1
 800a0c0:	4691      	mov	r9, r2
 800a0c2:	eb1a 0508 	adds.w	r5, sl, r8
 800a0c6:	eb4b 0609 	adc.w	r6, fp, r9
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	f04f 0200 	mov.w	r2, #0
 800a0d4:	f04f 0300 	mov.w	r3, #0
 800a0d8:	f04f 0400 	mov.w	r4, #0
 800a0dc:	0094      	lsls	r4, r2, #2
 800a0de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a0e2:	008b      	lsls	r3, r1, #2
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	4623      	mov	r3, r4
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	f7f6 fdb4 	bl	8000c58 <__aeabi_uldivmod>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4b50      	ldr	r3, [pc, #320]	; (800a238 <UART_SetConfig+0x6f4>)
 800a0f8:	fba3 2302 	umull	r2, r3, r3, r2
 800a0fc:	095b      	lsrs	r3, r3, #5
 800a0fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	469b      	mov	fp, r3
 800a106:	f04f 0c00 	mov.w	ip, #0
 800a10a:	46d9      	mov	r9, fp
 800a10c:	46e2      	mov	sl, ip
 800a10e:	eb19 0309 	adds.w	r3, r9, r9
 800a112:	eb4a 040a 	adc.w	r4, sl, sl
 800a116:	4699      	mov	r9, r3
 800a118:	46a2      	mov	sl, r4
 800a11a:	eb19 090b 	adds.w	r9, r9, fp
 800a11e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a122:	f04f 0100 	mov.w	r1, #0
 800a126:	f04f 0200 	mov.w	r2, #0
 800a12a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a12e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a132:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a136:	4689      	mov	r9, r1
 800a138:	4692      	mov	sl, r2
 800a13a:	eb1b 0509 	adds.w	r5, fp, r9
 800a13e:	eb4c 060a 	adc.w	r6, ip, sl
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	4619      	mov	r1, r3
 800a148:	f04f 0200 	mov.w	r2, #0
 800a14c:	f04f 0300 	mov.w	r3, #0
 800a150:	f04f 0400 	mov.w	r4, #0
 800a154:	0094      	lsls	r4, r2, #2
 800a156:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a15a:	008b      	lsls	r3, r1, #2
 800a15c:	461a      	mov	r2, r3
 800a15e:	4623      	mov	r3, r4
 800a160:	4628      	mov	r0, r5
 800a162:	4631      	mov	r1, r6
 800a164:	f7f6 fd78 	bl	8000c58 <__aeabi_uldivmod>
 800a168:	4603      	mov	r3, r0
 800a16a:	460c      	mov	r4, r1
 800a16c:	461a      	mov	r2, r3
 800a16e:	4b32      	ldr	r3, [pc, #200]	; (800a238 <UART_SetConfig+0x6f4>)
 800a170:	fba3 1302 	umull	r1, r3, r3, r2
 800a174:	095b      	lsrs	r3, r3, #5
 800a176:	2164      	movs	r1, #100	; 0x64
 800a178:	fb01 f303 	mul.w	r3, r1, r3
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	011b      	lsls	r3, r3, #4
 800a180:	3332      	adds	r3, #50	; 0x32
 800a182:	4a2d      	ldr	r2, [pc, #180]	; (800a238 <UART_SetConfig+0x6f4>)
 800a184:	fba2 2303 	umull	r2, r3, r2, r3
 800a188:	095b      	lsrs	r3, r3, #5
 800a18a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a18e:	4498      	add	r8, r3
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	469b      	mov	fp, r3
 800a194:	f04f 0c00 	mov.w	ip, #0
 800a198:	46d9      	mov	r9, fp
 800a19a:	46e2      	mov	sl, ip
 800a19c:	eb19 0309 	adds.w	r3, r9, r9
 800a1a0:	eb4a 040a 	adc.w	r4, sl, sl
 800a1a4:	4699      	mov	r9, r3
 800a1a6:	46a2      	mov	sl, r4
 800a1a8:	eb19 090b 	adds.w	r9, r9, fp
 800a1ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a1b0:	f04f 0100 	mov.w	r1, #0
 800a1b4:	f04f 0200 	mov.w	r2, #0
 800a1b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a1bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a1c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a1c4:	4689      	mov	r9, r1
 800a1c6:	4692      	mov	sl, r2
 800a1c8:	eb1b 0509 	adds.w	r5, fp, r9
 800a1cc:	eb4c 060a 	adc.w	r6, ip, sl
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	f04f 0200 	mov.w	r2, #0
 800a1da:	f04f 0300 	mov.w	r3, #0
 800a1de:	f04f 0400 	mov.w	r4, #0
 800a1e2:	0094      	lsls	r4, r2, #2
 800a1e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a1e8:	008b      	lsls	r3, r1, #2
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	4623      	mov	r3, r4
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	f7f6 fd31 	bl	8000c58 <__aeabi_uldivmod>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	4b0e      	ldr	r3, [pc, #56]	; (800a238 <UART_SetConfig+0x6f4>)
 800a1fe:	fba3 1302 	umull	r1, r3, r3, r2
 800a202:	095b      	lsrs	r3, r3, #5
 800a204:	2164      	movs	r1, #100	; 0x64
 800a206:	fb01 f303 	mul.w	r3, r1, r3
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	011b      	lsls	r3, r3, #4
 800a20e:	3332      	adds	r3, #50	; 0x32
 800a210:	4a09      	ldr	r2, [pc, #36]	; (800a238 <UART_SetConfig+0x6f4>)
 800a212:	fba2 2303 	umull	r2, r3, r2, r3
 800a216:	095b      	lsrs	r3, r3, #5
 800a218:	f003 020f 	and.w	r2, r3, #15
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4442      	add	r2, r8
 800a222:	609a      	str	r2, [r3, #8]
}
 800a224:	e7ff      	b.n	800a226 <UART_SetConfig+0x6e2>
 800a226:	bf00      	nop
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a230:	40011000 	.word	0x40011000
 800a234:	40011400 	.word	0x40011400
 800a238:	51eb851f 	.word	0x51eb851f

0800a23c <gcvt>:
 800a23c:	b530      	push	{r4, r5, lr}
 800a23e:	ed2d 8b02 	vpush	{d8}
 800a242:	eeb0 8a40 	vmov.f32	s16, s0
 800a246:	eef0 8a60 	vmov.f32	s17, s1
 800a24a:	460c      	mov	r4, r1
 800a24c:	2200      	movs	r2, #0
 800a24e:	b083      	sub	sp, #12
 800a250:	4605      	mov	r5, r0
 800a252:	2300      	movs	r3, #0
 800a254:	ec51 0b10 	vmov	r0, r1, d0
 800a258:	f7f6 fc48 	bl	8000aec <__aeabi_dcmplt>
 800a25c:	4622      	mov	r2, r4
 800a25e:	b118      	cbz	r0, 800a268 <gcvt+0x2c>
 800a260:	232d      	movs	r3, #45	; 0x2d
 800a262:	f802 3b01 	strb.w	r3, [r2], #1
 800a266:	3d01      	subs	r5, #1
 800a268:	2300      	movs	r3, #0
 800a26a:	4809      	ldr	r0, [pc, #36]	; (800a290 <gcvt+0x54>)
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	4629      	mov	r1, r5
 800a270:	2367      	movs	r3, #103	; 0x67
 800a272:	eeb0 0a48 	vmov.f32	s0, s16
 800a276:	eef0 0a68 	vmov.f32	s1, s17
 800a27a:	6800      	ldr	r0, [r0, #0]
 800a27c:	f001 fb84 	bl	800b988 <_gcvt>
 800a280:	2800      	cmp	r0, #0
 800a282:	bf14      	ite	ne
 800a284:	4620      	movne	r0, r4
 800a286:	2000      	moveq	r0, #0
 800a288:	b003      	add	sp, #12
 800a28a:	ecbd 8b02 	vpop	{d8}
 800a28e:	bd30      	pop	{r4, r5, pc}
 800a290:	20000094 	.word	0x20000094

0800a294 <__errno>:
 800a294:	4b01      	ldr	r3, [pc, #4]	; (800a29c <__errno+0x8>)
 800a296:	6818      	ldr	r0, [r3, #0]
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	20000094 	.word	0x20000094

0800a2a0 <__libc_init_array>:
 800a2a0:	b570      	push	{r4, r5, r6, lr}
 800a2a2:	4e0d      	ldr	r6, [pc, #52]	; (800a2d8 <__libc_init_array+0x38>)
 800a2a4:	4c0d      	ldr	r4, [pc, #52]	; (800a2dc <__libc_init_array+0x3c>)
 800a2a6:	1ba4      	subs	r4, r4, r6
 800a2a8:	10a4      	asrs	r4, r4, #2
 800a2aa:	2500      	movs	r5, #0
 800a2ac:	42a5      	cmp	r5, r4
 800a2ae:	d109      	bne.n	800a2c4 <__libc_init_array+0x24>
 800a2b0:	4e0b      	ldr	r6, [pc, #44]	; (800a2e0 <__libc_init_array+0x40>)
 800a2b2:	4c0c      	ldr	r4, [pc, #48]	; (800a2e4 <__libc_init_array+0x44>)
 800a2b4:	f002 feda 	bl	800d06c <_init>
 800a2b8:	1ba4      	subs	r4, r4, r6
 800a2ba:	10a4      	asrs	r4, r4, #2
 800a2bc:	2500      	movs	r5, #0
 800a2be:	42a5      	cmp	r5, r4
 800a2c0:	d105      	bne.n	800a2ce <__libc_init_array+0x2e>
 800a2c2:	bd70      	pop	{r4, r5, r6, pc}
 800a2c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2c8:	4798      	blx	r3
 800a2ca:	3501      	adds	r5, #1
 800a2cc:	e7ee      	b.n	800a2ac <__libc_init_array+0xc>
 800a2ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2d2:	4798      	blx	r3
 800a2d4:	3501      	adds	r5, #1
 800a2d6:	e7f2      	b.n	800a2be <__libc_init_array+0x1e>
 800a2d8:	0800d530 	.word	0x0800d530
 800a2dc:	0800d530 	.word	0x0800d530
 800a2e0:	0800d530 	.word	0x0800d530
 800a2e4:	0800d534 	.word	0x0800d534

0800a2e8 <memset>:
 800a2e8:	4402      	add	r2, r0
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d100      	bne.n	800a2f2 <memset+0xa>
 800a2f0:	4770      	bx	lr
 800a2f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a2f6:	e7f9      	b.n	800a2ec <memset+0x4>

0800a2f8 <__cvt>:
 800a2f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2fc:	ec55 4b10 	vmov	r4, r5, d0
 800a300:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a302:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a306:	2d00      	cmp	r5, #0
 800a308:	460e      	mov	r6, r1
 800a30a:	4691      	mov	r9, r2
 800a30c:	4619      	mov	r1, r3
 800a30e:	bfb8      	it	lt
 800a310:	4622      	movlt	r2, r4
 800a312:	462b      	mov	r3, r5
 800a314:	f027 0720 	bic.w	r7, r7, #32
 800a318:	bfbb      	ittet	lt
 800a31a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a31e:	461d      	movlt	r5, r3
 800a320:	2300      	movge	r3, #0
 800a322:	232d      	movlt	r3, #45	; 0x2d
 800a324:	bfb8      	it	lt
 800a326:	4614      	movlt	r4, r2
 800a328:	2f46      	cmp	r7, #70	; 0x46
 800a32a:	700b      	strb	r3, [r1, #0]
 800a32c:	d004      	beq.n	800a338 <__cvt+0x40>
 800a32e:	2f45      	cmp	r7, #69	; 0x45
 800a330:	d100      	bne.n	800a334 <__cvt+0x3c>
 800a332:	3601      	adds	r6, #1
 800a334:	2102      	movs	r1, #2
 800a336:	e000      	b.n	800a33a <__cvt+0x42>
 800a338:	2103      	movs	r1, #3
 800a33a:	ab03      	add	r3, sp, #12
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	ab02      	add	r3, sp, #8
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	4632      	mov	r2, r6
 800a344:	4653      	mov	r3, sl
 800a346:	ec45 4b10 	vmov	d0, r4, r5
 800a34a:	f000 fcf1 	bl	800ad30 <_dtoa_r>
 800a34e:	2f47      	cmp	r7, #71	; 0x47
 800a350:	4680      	mov	r8, r0
 800a352:	d102      	bne.n	800a35a <__cvt+0x62>
 800a354:	f019 0f01 	tst.w	r9, #1
 800a358:	d026      	beq.n	800a3a8 <__cvt+0xb0>
 800a35a:	2f46      	cmp	r7, #70	; 0x46
 800a35c:	eb08 0906 	add.w	r9, r8, r6
 800a360:	d111      	bne.n	800a386 <__cvt+0x8e>
 800a362:	f898 3000 	ldrb.w	r3, [r8]
 800a366:	2b30      	cmp	r3, #48	; 0x30
 800a368:	d10a      	bne.n	800a380 <__cvt+0x88>
 800a36a:	2200      	movs	r2, #0
 800a36c:	2300      	movs	r3, #0
 800a36e:	4620      	mov	r0, r4
 800a370:	4629      	mov	r1, r5
 800a372:	f7f6 fbb1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a376:	b918      	cbnz	r0, 800a380 <__cvt+0x88>
 800a378:	f1c6 0601 	rsb	r6, r6, #1
 800a37c:	f8ca 6000 	str.w	r6, [sl]
 800a380:	f8da 3000 	ldr.w	r3, [sl]
 800a384:	4499      	add	r9, r3
 800a386:	2200      	movs	r2, #0
 800a388:	2300      	movs	r3, #0
 800a38a:	4620      	mov	r0, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7f6 fba3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a392:	b938      	cbnz	r0, 800a3a4 <__cvt+0xac>
 800a394:	2230      	movs	r2, #48	; 0x30
 800a396:	9b03      	ldr	r3, [sp, #12]
 800a398:	454b      	cmp	r3, r9
 800a39a:	d205      	bcs.n	800a3a8 <__cvt+0xb0>
 800a39c:	1c59      	adds	r1, r3, #1
 800a39e:	9103      	str	r1, [sp, #12]
 800a3a0:	701a      	strb	r2, [r3, #0]
 800a3a2:	e7f8      	b.n	800a396 <__cvt+0x9e>
 800a3a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a3a8:	9b03      	ldr	r3, [sp, #12]
 800a3aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3ac:	eba3 0308 	sub.w	r3, r3, r8
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	6013      	str	r3, [r2, #0]
 800a3b4:	b004      	add	sp, #16
 800a3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a3ba <__exponent>:
 800a3ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3bc:	2900      	cmp	r1, #0
 800a3be:	4604      	mov	r4, r0
 800a3c0:	bfba      	itte	lt
 800a3c2:	4249      	neglt	r1, r1
 800a3c4:	232d      	movlt	r3, #45	; 0x2d
 800a3c6:	232b      	movge	r3, #43	; 0x2b
 800a3c8:	2909      	cmp	r1, #9
 800a3ca:	f804 2b02 	strb.w	r2, [r4], #2
 800a3ce:	7043      	strb	r3, [r0, #1]
 800a3d0:	dd20      	ble.n	800a414 <__exponent+0x5a>
 800a3d2:	f10d 0307 	add.w	r3, sp, #7
 800a3d6:	461f      	mov	r7, r3
 800a3d8:	260a      	movs	r6, #10
 800a3da:	fb91 f5f6 	sdiv	r5, r1, r6
 800a3de:	fb06 1115 	mls	r1, r6, r5, r1
 800a3e2:	3130      	adds	r1, #48	; 0x30
 800a3e4:	2d09      	cmp	r5, #9
 800a3e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a3ea:	f103 32ff 	add.w	r2, r3, #4294967295
 800a3ee:	4629      	mov	r1, r5
 800a3f0:	dc09      	bgt.n	800a406 <__exponent+0x4c>
 800a3f2:	3130      	adds	r1, #48	; 0x30
 800a3f4:	3b02      	subs	r3, #2
 800a3f6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a3fa:	42bb      	cmp	r3, r7
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	d304      	bcc.n	800a40a <__exponent+0x50>
 800a400:	1a10      	subs	r0, r2, r0
 800a402:	b003      	add	sp, #12
 800a404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a406:	4613      	mov	r3, r2
 800a408:	e7e7      	b.n	800a3da <__exponent+0x20>
 800a40a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a40e:	f804 2b01 	strb.w	r2, [r4], #1
 800a412:	e7f2      	b.n	800a3fa <__exponent+0x40>
 800a414:	2330      	movs	r3, #48	; 0x30
 800a416:	4419      	add	r1, r3
 800a418:	7083      	strb	r3, [r0, #2]
 800a41a:	1d02      	adds	r2, r0, #4
 800a41c:	70c1      	strb	r1, [r0, #3]
 800a41e:	e7ef      	b.n	800a400 <__exponent+0x46>

0800a420 <_printf_float>:
 800a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a424:	b08d      	sub	sp, #52	; 0x34
 800a426:	460c      	mov	r4, r1
 800a428:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a42c:	4616      	mov	r6, r2
 800a42e:	461f      	mov	r7, r3
 800a430:	4605      	mov	r5, r0
 800a432:	f001 fb73 	bl	800bb1c <_localeconv_r>
 800a436:	6803      	ldr	r3, [r0, #0]
 800a438:	9304      	str	r3, [sp, #16]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7f5 fed0 	bl	80001e0 <strlen>
 800a440:	2300      	movs	r3, #0
 800a442:	930a      	str	r3, [sp, #40]	; 0x28
 800a444:	f8d8 3000 	ldr.w	r3, [r8]
 800a448:	9005      	str	r0, [sp, #20]
 800a44a:	3307      	adds	r3, #7
 800a44c:	f023 0307 	bic.w	r3, r3, #7
 800a450:	f103 0208 	add.w	r2, r3, #8
 800a454:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a458:	f8d4 b000 	ldr.w	fp, [r4]
 800a45c:	f8c8 2000 	str.w	r2, [r8]
 800a460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a464:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a468:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a46c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a470:	9307      	str	r3, [sp, #28]
 800a472:	f8cd 8018 	str.w	r8, [sp, #24]
 800a476:	f04f 32ff 	mov.w	r2, #4294967295
 800a47a:	4ba7      	ldr	r3, [pc, #668]	; (800a718 <_printf_float+0x2f8>)
 800a47c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a480:	f7f6 fb5c 	bl	8000b3c <__aeabi_dcmpun>
 800a484:	bb70      	cbnz	r0, 800a4e4 <_printf_float+0xc4>
 800a486:	f04f 32ff 	mov.w	r2, #4294967295
 800a48a:	4ba3      	ldr	r3, [pc, #652]	; (800a718 <_printf_float+0x2f8>)
 800a48c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a490:	f7f6 fb36 	bl	8000b00 <__aeabi_dcmple>
 800a494:	bb30      	cbnz	r0, 800a4e4 <_printf_float+0xc4>
 800a496:	2200      	movs	r2, #0
 800a498:	2300      	movs	r3, #0
 800a49a:	4640      	mov	r0, r8
 800a49c:	4649      	mov	r1, r9
 800a49e:	f7f6 fb25 	bl	8000aec <__aeabi_dcmplt>
 800a4a2:	b110      	cbz	r0, 800a4aa <_printf_float+0x8a>
 800a4a4:	232d      	movs	r3, #45	; 0x2d
 800a4a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4aa:	4a9c      	ldr	r2, [pc, #624]	; (800a71c <_printf_float+0x2fc>)
 800a4ac:	4b9c      	ldr	r3, [pc, #624]	; (800a720 <_printf_float+0x300>)
 800a4ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a4b2:	bf8c      	ite	hi
 800a4b4:	4690      	movhi	r8, r2
 800a4b6:	4698      	movls	r8, r3
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	f02b 0204 	bic.w	r2, fp, #4
 800a4be:	6123      	str	r3, [r4, #16]
 800a4c0:	6022      	str	r2, [r4, #0]
 800a4c2:	f04f 0900 	mov.w	r9, #0
 800a4c6:	9700      	str	r7, [sp, #0]
 800a4c8:	4633      	mov	r3, r6
 800a4ca:	aa0b      	add	r2, sp, #44	; 0x2c
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	f000 f9e6 	bl	800a8a0 <_printf_common>
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	f040 808d 	bne.w	800a5f4 <_printf_float+0x1d4>
 800a4da:	f04f 30ff 	mov.w	r0, #4294967295
 800a4de:	b00d      	add	sp, #52	; 0x34
 800a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e4:	4642      	mov	r2, r8
 800a4e6:	464b      	mov	r3, r9
 800a4e8:	4640      	mov	r0, r8
 800a4ea:	4649      	mov	r1, r9
 800a4ec:	f7f6 fb26 	bl	8000b3c <__aeabi_dcmpun>
 800a4f0:	b110      	cbz	r0, 800a4f8 <_printf_float+0xd8>
 800a4f2:	4a8c      	ldr	r2, [pc, #560]	; (800a724 <_printf_float+0x304>)
 800a4f4:	4b8c      	ldr	r3, [pc, #560]	; (800a728 <_printf_float+0x308>)
 800a4f6:	e7da      	b.n	800a4ae <_printf_float+0x8e>
 800a4f8:	6861      	ldr	r1, [r4, #4]
 800a4fa:	1c4b      	adds	r3, r1, #1
 800a4fc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a500:	a80a      	add	r0, sp, #40	; 0x28
 800a502:	d13e      	bne.n	800a582 <_printf_float+0x162>
 800a504:	2306      	movs	r3, #6
 800a506:	6063      	str	r3, [r4, #4]
 800a508:	2300      	movs	r3, #0
 800a50a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a50e:	ab09      	add	r3, sp, #36	; 0x24
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	ec49 8b10 	vmov	d0, r8, r9
 800a516:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a51a:	6022      	str	r2, [r4, #0]
 800a51c:	f8cd a004 	str.w	sl, [sp, #4]
 800a520:	6861      	ldr	r1, [r4, #4]
 800a522:	4628      	mov	r0, r5
 800a524:	f7ff fee8 	bl	800a2f8 <__cvt>
 800a528:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a52c:	2b47      	cmp	r3, #71	; 0x47
 800a52e:	4680      	mov	r8, r0
 800a530:	d109      	bne.n	800a546 <_printf_float+0x126>
 800a532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a534:	1cd8      	adds	r0, r3, #3
 800a536:	db02      	blt.n	800a53e <_printf_float+0x11e>
 800a538:	6862      	ldr	r2, [r4, #4]
 800a53a:	4293      	cmp	r3, r2
 800a53c:	dd47      	ble.n	800a5ce <_printf_float+0x1ae>
 800a53e:	f1aa 0a02 	sub.w	sl, sl, #2
 800a542:	fa5f fa8a 	uxtb.w	sl, sl
 800a546:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a54a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a54c:	d824      	bhi.n	800a598 <_printf_float+0x178>
 800a54e:	3901      	subs	r1, #1
 800a550:	4652      	mov	r2, sl
 800a552:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a556:	9109      	str	r1, [sp, #36]	; 0x24
 800a558:	f7ff ff2f 	bl	800a3ba <__exponent>
 800a55c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a55e:	1813      	adds	r3, r2, r0
 800a560:	2a01      	cmp	r2, #1
 800a562:	4681      	mov	r9, r0
 800a564:	6123      	str	r3, [r4, #16]
 800a566:	dc02      	bgt.n	800a56e <_printf_float+0x14e>
 800a568:	6822      	ldr	r2, [r4, #0]
 800a56a:	07d1      	lsls	r1, r2, #31
 800a56c:	d501      	bpl.n	800a572 <_printf_float+0x152>
 800a56e:	3301      	adds	r3, #1
 800a570:	6123      	str	r3, [r4, #16]
 800a572:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a576:	2b00      	cmp	r3, #0
 800a578:	d0a5      	beq.n	800a4c6 <_printf_float+0xa6>
 800a57a:	232d      	movs	r3, #45	; 0x2d
 800a57c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a580:	e7a1      	b.n	800a4c6 <_printf_float+0xa6>
 800a582:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a586:	f000 8177 	beq.w	800a878 <_printf_float+0x458>
 800a58a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a58e:	d1bb      	bne.n	800a508 <_printf_float+0xe8>
 800a590:	2900      	cmp	r1, #0
 800a592:	d1b9      	bne.n	800a508 <_printf_float+0xe8>
 800a594:	2301      	movs	r3, #1
 800a596:	e7b6      	b.n	800a506 <_printf_float+0xe6>
 800a598:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a59c:	d119      	bne.n	800a5d2 <_printf_float+0x1b2>
 800a59e:	2900      	cmp	r1, #0
 800a5a0:	6863      	ldr	r3, [r4, #4]
 800a5a2:	dd0c      	ble.n	800a5be <_printf_float+0x19e>
 800a5a4:	6121      	str	r1, [r4, #16]
 800a5a6:	b913      	cbnz	r3, 800a5ae <_printf_float+0x18e>
 800a5a8:	6822      	ldr	r2, [r4, #0]
 800a5aa:	07d2      	lsls	r2, r2, #31
 800a5ac:	d502      	bpl.n	800a5b4 <_printf_float+0x194>
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	440b      	add	r3, r1
 800a5b2:	6123      	str	r3, [r4, #16]
 800a5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b6:	65a3      	str	r3, [r4, #88]	; 0x58
 800a5b8:	f04f 0900 	mov.w	r9, #0
 800a5bc:	e7d9      	b.n	800a572 <_printf_float+0x152>
 800a5be:	b913      	cbnz	r3, 800a5c6 <_printf_float+0x1a6>
 800a5c0:	6822      	ldr	r2, [r4, #0]
 800a5c2:	07d0      	lsls	r0, r2, #31
 800a5c4:	d501      	bpl.n	800a5ca <_printf_float+0x1aa>
 800a5c6:	3302      	adds	r3, #2
 800a5c8:	e7f3      	b.n	800a5b2 <_printf_float+0x192>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e7f1      	b.n	800a5b2 <_printf_float+0x192>
 800a5ce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a5d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	db05      	blt.n	800a5e6 <_printf_float+0x1c6>
 800a5da:	6822      	ldr	r2, [r4, #0]
 800a5dc:	6123      	str	r3, [r4, #16]
 800a5de:	07d1      	lsls	r1, r2, #31
 800a5e0:	d5e8      	bpl.n	800a5b4 <_printf_float+0x194>
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	e7e5      	b.n	800a5b2 <_printf_float+0x192>
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	bfd4      	ite	le
 800a5ea:	f1c3 0302 	rsble	r3, r3, #2
 800a5ee:	2301      	movgt	r3, #1
 800a5f0:	4413      	add	r3, r2
 800a5f2:	e7de      	b.n	800a5b2 <_printf_float+0x192>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	055a      	lsls	r2, r3, #21
 800a5f8:	d407      	bmi.n	800a60a <_printf_float+0x1ea>
 800a5fa:	6923      	ldr	r3, [r4, #16]
 800a5fc:	4642      	mov	r2, r8
 800a5fe:	4631      	mov	r1, r6
 800a600:	4628      	mov	r0, r5
 800a602:	47b8      	blx	r7
 800a604:	3001      	adds	r0, #1
 800a606:	d12b      	bne.n	800a660 <_printf_float+0x240>
 800a608:	e767      	b.n	800a4da <_printf_float+0xba>
 800a60a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a60e:	f240 80dc 	bls.w	800a7ca <_printf_float+0x3aa>
 800a612:	2200      	movs	r2, #0
 800a614:	2300      	movs	r3, #0
 800a616:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a61a:	f7f6 fa5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a61e:	2800      	cmp	r0, #0
 800a620:	d033      	beq.n	800a68a <_printf_float+0x26a>
 800a622:	2301      	movs	r3, #1
 800a624:	4a41      	ldr	r2, [pc, #260]	; (800a72c <_printf_float+0x30c>)
 800a626:	4631      	mov	r1, r6
 800a628:	4628      	mov	r0, r5
 800a62a:	47b8      	blx	r7
 800a62c:	3001      	adds	r0, #1
 800a62e:	f43f af54 	beq.w	800a4da <_printf_float+0xba>
 800a632:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a636:	429a      	cmp	r2, r3
 800a638:	db02      	blt.n	800a640 <_printf_float+0x220>
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	07d8      	lsls	r0, r3, #31
 800a63e:	d50f      	bpl.n	800a660 <_printf_float+0x240>
 800a640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a644:	4631      	mov	r1, r6
 800a646:	4628      	mov	r0, r5
 800a648:	47b8      	blx	r7
 800a64a:	3001      	adds	r0, #1
 800a64c:	f43f af45 	beq.w	800a4da <_printf_float+0xba>
 800a650:	f04f 0800 	mov.w	r8, #0
 800a654:	f104 091a 	add.w	r9, r4, #26
 800a658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a65a:	3b01      	subs	r3, #1
 800a65c:	4543      	cmp	r3, r8
 800a65e:	dc09      	bgt.n	800a674 <_printf_float+0x254>
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	079b      	lsls	r3, r3, #30
 800a664:	f100 8103 	bmi.w	800a86e <_printf_float+0x44e>
 800a668:	68e0      	ldr	r0, [r4, #12]
 800a66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a66c:	4298      	cmp	r0, r3
 800a66e:	bfb8      	it	lt
 800a670:	4618      	movlt	r0, r3
 800a672:	e734      	b.n	800a4de <_printf_float+0xbe>
 800a674:	2301      	movs	r3, #1
 800a676:	464a      	mov	r2, r9
 800a678:	4631      	mov	r1, r6
 800a67a:	4628      	mov	r0, r5
 800a67c:	47b8      	blx	r7
 800a67e:	3001      	adds	r0, #1
 800a680:	f43f af2b 	beq.w	800a4da <_printf_float+0xba>
 800a684:	f108 0801 	add.w	r8, r8, #1
 800a688:	e7e6      	b.n	800a658 <_printf_float+0x238>
 800a68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	dc2b      	bgt.n	800a6e8 <_printf_float+0x2c8>
 800a690:	2301      	movs	r3, #1
 800a692:	4a26      	ldr	r2, [pc, #152]	; (800a72c <_printf_float+0x30c>)
 800a694:	4631      	mov	r1, r6
 800a696:	4628      	mov	r0, r5
 800a698:	47b8      	blx	r7
 800a69a:	3001      	adds	r0, #1
 800a69c:	f43f af1d 	beq.w	800a4da <_printf_float+0xba>
 800a6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a2:	b923      	cbnz	r3, 800a6ae <_printf_float+0x28e>
 800a6a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a6:	b913      	cbnz	r3, 800a6ae <_printf_float+0x28e>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	07d9      	lsls	r1, r3, #31
 800a6ac:	d5d8      	bpl.n	800a660 <_printf_float+0x240>
 800a6ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	47b8      	blx	r7
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	f43f af0e 	beq.w	800a4da <_printf_float+0xba>
 800a6be:	f04f 0900 	mov.w	r9, #0
 800a6c2:	f104 0a1a 	add.w	sl, r4, #26
 800a6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c8:	425b      	negs	r3, r3
 800a6ca:	454b      	cmp	r3, r9
 800a6cc:	dc01      	bgt.n	800a6d2 <_printf_float+0x2b2>
 800a6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6d0:	e794      	b.n	800a5fc <_printf_float+0x1dc>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	4652      	mov	r2, sl
 800a6d6:	4631      	mov	r1, r6
 800a6d8:	4628      	mov	r0, r5
 800a6da:	47b8      	blx	r7
 800a6dc:	3001      	adds	r0, #1
 800a6de:	f43f aefc 	beq.w	800a4da <_printf_float+0xba>
 800a6e2:	f109 0901 	add.w	r9, r9, #1
 800a6e6:	e7ee      	b.n	800a6c6 <_printf_float+0x2a6>
 800a6e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	bfa8      	it	ge
 800a6f0:	461a      	movge	r2, r3
 800a6f2:	2a00      	cmp	r2, #0
 800a6f4:	4691      	mov	r9, r2
 800a6f6:	dd07      	ble.n	800a708 <_printf_float+0x2e8>
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	4631      	mov	r1, r6
 800a6fc:	4642      	mov	r2, r8
 800a6fe:	4628      	mov	r0, r5
 800a700:	47b8      	blx	r7
 800a702:	3001      	adds	r0, #1
 800a704:	f43f aee9 	beq.w	800a4da <_printf_float+0xba>
 800a708:	f104 031a 	add.w	r3, r4, #26
 800a70c:	f04f 0b00 	mov.w	fp, #0
 800a710:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a714:	9306      	str	r3, [sp, #24]
 800a716:	e015      	b.n	800a744 <_printf_float+0x324>
 800a718:	7fefffff 	.word	0x7fefffff
 800a71c:	0800d2a8 	.word	0x0800d2a8
 800a720:	0800d2a4 	.word	0x0800d2a4
 800a724:	0800d2b0 	.word	0x0800d2b0
 800a728:	0800d2ac 	.word	0x0800d2ac
 800a72c:	0800d2b4 	.word	0x0800d2b4
 800a730:	2301      	movs	r3, #1
 800a732:	9a06      	ldr	r2, [sp, #24]
 800a734:	4631      	mov	r1, r6
 800a736:	4628      	mov	r0, r5
 800a738:	47b8      	blx	r7
 800a73a:	3001      	adds	r0, #1
 800a73c:	f43f aecd 	beq.w	800a4da <_printf_float+0xba>
 800a740:	f10b 0b01 	add.w	fp, fp, #1
 800a744:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a748:	ebaa 0309 	sub.w	r3, sl, r9
 800a74c:	455b      	cmp	r3, fp
 800a74e:	dcef      	bgt.n	800a730 <_printf_float+0x310>
 800a750:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a754:	429a      	cmp	r2, r3
 800a756:	44d0      	add	r8, sl
 800a758:	db15      	blt.n	800a786 <_printf_float+0x366>
 800a75a:	6823      	ldr	r3, [r4, #0]
 800a75c:	07da      	lsls	r2, r3, #31
 800a75e:	d412      	bmi.n	800a786 <_printf_float+0x366>
 800a760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a762:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a764:	eba3 020a 	sub.w	r2, r3, sl
 800a768:	eba3 0a01 	sub.w	sl, r3, r1
 800a76c:	4592      	cmp	sl, r2
 800a76e:	bfa8      	it	ge
 800a770:	4692      	movge	sl, r2
 800a772:	f1ba 0f00 	cmp.w	sl, #0
 800a776:	dc0e      	bgt.n	800a796 <_printf_float+0x376>
 800a778:	f04f 0800 	mov.w	r8, #0
 800a77c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a780:	f104 091a 	add.w	r9, r4, #26
 800a784:	e019      	b.n	800a7ba <_printf_float+0x39a>
 800a786:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a78a:	4631      	mov	r1, r6
 800a78c:	4628      	mov	r0, r5
 800a78e:	47b8      	blx	r7
 800a790:	3001      	adds	r0, #1
 800a792:	d1e5      	bne.n	800a760 <_printf_float+0x340>
 800a794:	e6a1      	b.n	800a4da <_printf_float+0xba>
 800a796:	4653      	mov	r3, sl
 800a798:	4642      	mov	r2, r8
 800a79a:	4631      	mov	r1, r6
 800a79c:	4628      	mov	r0, r5
 800a79e:	47b8      	blx	r7
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	d1e9      	bne.n	800a778 <_printf_float+0x358>
 800a7a4:	e699      	b.n	800a4da <_printf_float+0xba>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	464a      	mov	r2, r9
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	47b8      	blx	r7
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	f43f ae92 	beq.w	800a4da <_printf_float+0xba>
 800a7b6:	f108 0801 	add.w	r8, r8, #1
 800a7ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7be:	1a9b      	subs	r3, r3, r2
 800a7c0:	eba3 030a 	sub.w	r3, r3, sl
 800a7c4:	4543      	cmp	r3, r8
 800a7c6:	dcee      	bgt.n	800a7a6 <_printf_float+0x386>
 800a7c8:	e74a      	b.n	800a660 <_printf_float+0x240>
 800a7ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7cc:	2a01      	cmp	r2, #1
 800a7ce:	dc01      	bgt.n	800a7d4 <_printf_float+0x3b4>
 800a7d0:	07db      	lsls	r3, r3, #31
 800a7d2:	d53a      	bpl.n	800a84a <_printf_float+0x42a>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	4642      	mov	r2, r8
 800a7d8:	4631      	mov	r1, r6
 800a7da:	4628      	mov	r0, r5
 800a7dc:	47b8      	blx	r7
 800a7de:	3001      	adds	r0, #1
 800a7e0:	f43f ae7b 	beq.w	800a4da <_printf_float+0xba>
 800a7e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7e8:	4631      	mov	r1, r6
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	47b8      	blx	r7
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	f108 0801 	add.w	r8, r8, #1
 800a7f4:	f43f ae71 	beq.w	800a4da <_printf_float+0xba>
 800a7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f103 3aff 	add.w	sl, r3, #4294967295
 800a800:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a804:	2300      	movs	r3, #0
 800a806:	f7f6 f967 	bl	8000ad8 <__aeabi_dcmpeq>
 800a80a:	b9c8      	cbnz	r0, 800a840 <_printf_float+0x420>
 800a80c:	4653      	mov	r3, sl
 800a80e:	4642      	mov	r2, r8
 800a810:	4631      	mov	r1, r6
 800a812:	4628      	mov	r0, r5
 800a814:	47b8      	blx	r7
 800a816:	3001      	adds	r0, #1
 800a818:	d10e      	bne.n	800a838 <_printf_float+0x418>
 800a81a:	e65e      	b.n	800a4da <_printf_float+0xba>
 800a81c:	2301      	movs	r3, #1
 800a81e:	4652      	mov	r2, sl
 800a820:	4631      	mov	r1, r6
 800a822:	4628      	mov	r0, r5
 800a824:	47b8      	blx	r7
 800a826:	3001      	adds	r0, #1
 800a828:	f43f ae57 	beq.w	800a4da <_printf_float+0xba>
 800a82c:	f108 0801 	add.w	r8, r8, #1
 800a830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a832:	3b01      	subs	r3, #1
 800a834:	4543      	cmp	r3, r8
 800a836:	dcf1      	bgt.n	800a81c <_printf_float+0x3fc>
 800a838:	464b      	mov	r3, r9
 800a83a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a83e:	e6de      	b.n	800a5fe <_printf_float+0x1de>
 800a840:	f04f 0800 	mov.w	r8, #0
 800a844:	f104 0a1a 	add.w	sl, r4, #26
 800a848:	e7f2      	b.n	800a830 <_printf_float+0x410>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e7df      	b.n	800a80e <_printf_float+0x3ee>
 800a84e:	2301      	movs	r3, #1
 800a850:	464a      	mov	r2, r9
 800a852:	4631      	mov	r1, r6
 800a854:	4628      	mov	r0, r5
 800a856:	47b8      	blx	r7
 800a858:	3001      	adds	r0, #1
 800a85a:	f43f ae3e 	beq.w	800a4da <_printf_float+0xba>
 800a85e:	f108 0801 	add.w	r8, r8, #1
 800a862:	68e3      	ldr	r3, [r4, #12]
 800a864:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a866:	1a9b      	subs	r3, r3, r2
 800a868:	4543      	cmp	r3, r8
 800a86a:	dcf0      	bgt.n	800a84e <_printf_float+0x42e>
 800a86c:	e6fc      	b.n	800a668 <_printf_float+0x248>
 800a86e:	f04f 0800 	mov.w	r8, #0
 800a872:	f104 0919 	add.w	r9, r4, #25
 800a876:	e7f4      	b.n	800a862 <_printf_float+0x442>
 800a878:	2900      	cmp	r1, #0
 800a87a:	f43f ae8b 	beq.w	800a594 <_printf_float+0x174>
 800a87e:	2300      	movs	r3, #0
 800a880:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a884:	ab09      	add	r3, sp, #36	; 0x24
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	ec49 8b10 	vmov	d0, r8, r9
 800a88c:	6022      	str	r2, [r4, #0]
 800a88e:	f8cd a004 	str.w	sl, [sp, #4]
 800a892:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a896:	4628      	mov	r0, r5
 800a898:	f7ff fd2e 	bl	800a2f8 <__cvt>
 800a89c:	4680      	mov	r8, r0
 800a89e:	e648      	b.n	800a532 <_printf_float+0x112>

0800a8a0 <_printf_common>:
 800a8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a4:	4691      	mov	r9, r2
 800a8a6:	461f      	mov	r7, r3
 800a8a8:	688a      	ldr	r2, [r1, #8]
 800a8aa:	690b      	ldr	r3, [r1, #16]
 800a8ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	bfb8      	it	lt
 800a8b4:	4613      	movlt	r3, r2
 800a8b6:	f8c9 3000 	str.w	r3, [r9]
 800a8ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8be:	4606      	mov	r6, r0
 800a8c0:	460c      	mov	r4, r1
 800a8c2:	b112      	cbz	r2, 800a8ca <_printf_common+0x2a>
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	f8c9 3000 	str.w	r3, [r9]
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	0699      	lsls	r1, r3, #26
 800a8ce:	bf42      	ittt	mi
 800a8d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a8d4:	3302      	addmi	r3, #2
 800a8d6:	f8c9 3000 	strmi.w	r3, [r9]
 800a8da:	6825      	ldr	r5, [r4, #0]
 800a8dc:	f015 0506 	ands.w	r5, r5, #6
 800a8e0:	d107      	bne.n	800a8f2 <_printf_common+0x52>
 800a8e2:	f104 0a19 	add.w	sl, r4, #25
 800a8e6:	68e3      	ldr	r3, [r4, #12]
 800a8e8:	f8d9 2000 	ldr.w	r2, [r9]
 800a8ec:	1a9b      	subs	r3, r3, r2
 800a8ee:	42ab      	cmp	r3, r5
 800a8f0:	dc28      	bgt.n	800a944 <_printf_common+0xa4>
 800a8f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a8f6:	6822      	ldr	r2, [r4, #0]
 800a8f8:	3300      	adds	r3, #0
 800a8fa:	bf18      	it	ne
 800a8fc:	2301      	movne	r3, #1
 800a8fe:	0692      	lsls	r2, r2, #26
 800a900:	d42d      	bmi.n	800a95e <_printf_common+0xbe>
 800a902:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a906:	4639      	mov	r1, r7
 800a908:	4630      	mov	r0, r6
 800a90a:	47c0      	blx	r8
 800a90c:	3001      	adds	r0, #1
 800a90e:	d020      	beq.n	800a952 <_printf_common+0xb2>
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	68e5      	ldr	r5, [r4, #12]
 800a914:	f8d9 2000 	ldr.w	r2, [r9]
 800a918:	f003 0306 	and.w	r3, r3, #6
 800a91c:	2b04      	cmp	r3, #4
 800a91e:	bf08      	it	eq
 800a920:	1aad      	subeq	r5, r5, r2
 800a922:	68a3      	ldr	r3, [r4, #8]
 800a924:	6922      	ldr	r2, [r4, #16]
 800a926:	bf0c      	ite	eq
 800a928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a92c:	2500      	movne	r5, #0
 800a92e:	4293      	cmp	r3, r2
 800a930:	bfc4      	itt	gt
 800a932:	1a9b      	subgt	r3, r3, r2
 800a934:	18ed      	addgt	r5, r5, r3
 800a936:	f04f 0900 	mov.w	r9, #0
 800a93a:	341a      	adds	r4, #26
 800a93c:	454d      	cmp	r5, r9
 800a93e:	d11a      	bne.n	800a976 <_printf_common+0xd6>
 800a940:	2000      	movs	r0, #0
 800a942:	e008      	b.n	800a956 <_printf_common+0xb6>
 800a944:	2301      	movs	r3, #1
 800a946:	4652      	mov	r2, sl
 800a948:	4639      	mov	r1, r7
 800a94a:	4630      	mov	r0, r6
 800a94c:	47c0      	blx	r8
 800a94e:	3001      	adds	r0, #1
 800a950:	d103      	bne.n	800a95a <_printf_common+0xba>
 800a952:	f04f 30ff 	mov.w	r0, #4294967295
 800a956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95a:	3501      	adds	r5, #1
 800a95c:	e7c3      	b.n	800a8e6 <_printf_common+0x46>
 800a95e:	18e1      	adds	r1, r4, r3
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	2030      	movs	r0, #48	; 0x30
 800a964:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a968:	4422      	add	r2, r4
 800a96a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a96e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a972:	3302      	adds	r3, #2
 800a974:	e7c5      	b.n	800a902 <_printf_common+0x62>
 800a976:	2301      	movs	r3, #1
 800a978:	4622      	mov	r2, r4
 800a97a:	4639      	mov	r1, r7
 800a97c:	4630      	mov	r0, r6
 800a97e:	47c0      	blx	r8
 800a980:	3001      	adds	r0, #1
 800a982:	d0e6      	beq.n	800a952 <_printf_common+0xb2>
 800a984:	f109 0901 	add.w	r9, r9, #1
 800a988:	e7d8      	b.n	800a93c <_printf_common+0x9c>
	...

0800a98c <_printf_i>:
 800a98c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a990:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a994:	460c      	mov	r4, r1
 800a996:	7e09      	ldrb	r1, [r1, #24]
 800a998:	b085      	sub	sp, #20
 800a99a:	296e      	cmp	r1, #110	; 0x6e
 800a99c:	4617      	mov	r7, r2
 800a99e:	4606      	mov	r6, r0
 800a9a0:	4698      	mov	r8, r3
 800a9a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9a4:	f000 80b3 	beq.w	800ab0e <_printf_i+0x182>
 800a9a8:	d822      	bhi.n	800a9f0 <_printf_i+0x64>
 800a9aa:	2963      	cmp	r1, #99	; 0x63
 800a9ac:	d036      	beq.n	800aa1c <_printf_i+0x90>
 800a9ae:	d80a      	bhi.n	800a9c6 <_printf_i+0x3a>
 800a9b0:	2900      	cmp	r1, #0
 800a9b2:	f000 80b9 	beq.w	800ab28 <_printf_i+0x19c>
 800a9b6:	2958      	cmp	r1, #88	; 0x58
 800a9b8:	f000 8083 	beq.w	800aac2 <_printf_i+0x136>
 800a9bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a9c4:	e032      	b.n	800aa2c <_printf_i+0xa0>
 800a9c6:	2964      	cmp	r1, #100	; 0x64
 800a9c8:	d001      	beq.n	800a9ce <_printf_i+0x42>
 800a9ca:	2969      	cmp	r1, #105	; 0x69
 800a9cc:	d1f6      	bne.n	800a9bc <_printf_i+0x30>
 800a9ce:	6820      	ldr	r0, [r4, #0]
 800a9d0:	6813      	ldr	r3, [r2, #0]
 800a9d2:	0605      	lsls	r5, r0, #24
 800a9d4:	f103 0104 	add.w	r1, r3, #4
 800a9d8:	d52a      	bpl.n	800aa30 <_printf_i+0xa4>
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	6011      	str	r1, [r2, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	da03      	bge.n	800a9ea <_printf_i+0x5e>
 800a9e2:	222d      	movs	r2, #45	; 0x2d
 800a9e4:	425b      	negs	r3, r3
 800a9e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a9ea:	486f      	ldr	r0, [pc, #444]	; (800aba8 <_printf_i+0x21c>)
 800a9ec:	220a      	movs	r2, #10
 800a9ee:	e039      	b.n	800aa64 <_printf_i+0xd8>
 800a9f0:	2973      	cmp	r1, #115	; 0x73
 800a9f2:	f000 809d 	beq.w	800ab30 <_printf_i+0x1a4>
 800a9f6:	d808      	bhi.n	800aa0a <_printf_i+0x7e>
 800a9f8:	296f      	cmp	r1, #111	; 0x6f
 800a9fa:	d020      	beq.n	800aa3e <_printf_i+0xb2>
 800a9fc:	2970      	cmp	r1, #112	; 0x70
 800a9fe:	d1dd      	bne.n	800a9bc <_printf_i+0x30>
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	f043 0320 	orr.w	r3, r3, #32
 800aa06:	6023      	str	r3, [r4, #0]
 800aa08:	e003      	b.n	800aa12 <_printf_i+0x86>
 800aa0a:	2975      	cmp	r1, #117	; 0x75
 800aa0c:	d017      	beq.n	800aa3e <_printf_i+0xb2>
 800aa0e:	2978      	cmp	r1, #120	; 0x78
 800aa10:	d1d4      	bne.n	800a9bc <_printf_i+0x30>
 800aa12:	2378      	movs	r3, #120	; 0x78
 800aa14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa18:	4864      	ldr	r0, [pc, #400]	; (800abac <_printf_i+0x220>)
 800aa1a:	e055      	b.n	800aac8 <_printf_i+0x13c>
 800aa1c:	6813      	ldr	r3, [r2, #0]
 800aa1e:	1d19      	adds	r1, r3, #4
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	6011      	str	r1, [r2, #0]
 800aa24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e08c      	b.n	800ab4a <_printf_i+0x1be>
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	6011      	str	r1, [r2, #0]
 800aa34:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa38:	bf18      	it	ne
 800aa3a:	b21b      	sxthne	r3, r3
 800aa3c:	e7cf      	b.n	800a9de <_printf_i+0x52>
 800aa3e:	6813      	ldr	r3, [r2, #0]
 800aa40:	6825      	ldr	r5, [r4, #0]
 800aa42:	1d18      	adds	r0, r3, #4
 800aa44:	6010      	str	r0, [r2, #0]
 800aa46:	0628      	lsls	r0, r5, #24
 800aa48:	d501      	bpl.n	800aa4e <_printf_i+0xc2>
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	e002      	b.n	800aa54 <_printf_i+0xc8>
 800aa4e:	0668      	lsls	r0, r5, #25
 800aa50:	d5fb      	bpl.n	800aa4a <_printf_i+0xbe>
 800aa52:	881b      	ldrh	r3, [r3, #0]
 800aa54:	4854      	ldr	r0, [pc, #336]	; (800aba8 <_printf_i+0x21c>)
 800aa56:	296f      	cmp	r1, #111	; 0x6f
 800aa58:	bf14      	ite	ne
 800aa5a:	220a      	movne	r2, #10
 800aa5c:	2208      	moveq	r2, #8
 800aa5e:	2100      	movs	r1, #0
 800aa60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa64:	6865      	ldr	r5, [r4, #4]
 800aa66:	60a5      	str	r5, [r4, #8]
 800aa68:	2d00      	cmp	r5, #0
 800aa6a:	f2c0 8095 	blt.w	800ab98 <_printf_i+0x20c>
 800aa6e:	6821      	ldr	r1, [r4, #0]
 800aa70:	f021 0104 	bic.w	r1, r1, #4
 800aa74:	6021      	str	r1, [r4, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d13d      	bne.n	800aaf6 <_printf_i+0x16a>
 800aa7a:	2d00      	cmp	r5, #0
 800aa7c:	f040 808e 	bne.w	800ab9c <_printf_i+0x210>
 800aa80:	4665      	mov	r5, ip
 800aa82:	2a08      	cmp	r2, #8
 800aa84:	d10b      	bne.n	800aa9e <_printf_i+0x112>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	07db      	lsls	r3, r3, #31
 800aa8a:	d508      	bpl.n	800aa9e <_printf_i+0x112>
 800aa8c:	6923      	ldr	r3, [r4, #16]
 800aa8e:	6862      	ldr	r2, [r4, #4]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	bfde      	ittt	le
 800aa94:	2330      	movle	r3, #48	; 0x30
 800aa96:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa9e:	ebac 0305 	sub.w	r3, ip, r5
 800aaa2:	6123      	str	r3, [r4, #16]
 800aaa4:	f8cd 8000 	str.w	r8, [sp]
 800aaa8:	463b      	mov	r3, r7
 800aaaa:	aa03      	add	r2, sp, #12
 800aaac:	4621      	mov	r1, r4
 800aaae:	4630      	mov	r0, r6
 800aab0:	f7ff fef6 	bl	800a8a0 <_printf_common>
 800aab4:	3001      	adds	r0, #1
 800aab6:	d14d      	bne.n	800ab54 <_printf_i+0x1c8>
 800aab8:	f04f 30ff 	mov.w	r0, #4294967295
 800aabc:	b005      	add	sp, #20
 800aabe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aac2:	4839      	ldr	r0, [pc, #228]	; (800aba8 <_printf_i+0x21c>)
 800aac4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aac8:	6813      	ldr	r3, [r2, #0]
 800aaca:	6821      	ldr	r1, [r4, #0]
 800aacc:	1d1d      	adds	r5, r3, #4
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6015      	str	r5, [r2, #0]
 800aad2:	060a      	lsls	r2, r1, #24
 800aad4:	d50b      	bpl.n	800aaee <_printf_i+0x162>
 800aad6:	07ca      	lsls	r2, r1, #31
 800aad8:	bf44      	itt	mi
 800aada:	f041 0120 	orrmi.w	r1, r1, #32
 800aade:	6021      	strmi	r1, [r4, #0]
 800aae0:	b91b      	cbnz	r3, 800aaea <_printf_i+0x15e>
 800aae2:	6822      	ldr	r2, [r4, #0]
 800aae4:	f022 0220 	bic.w	r2, r2, #32
 800aae8:	6022      	str	r2, [r4, #0]
 800aaea:	2210      	movs	r2, #16
 800aaec:	e7b7      	b.n	800aa5e <_printf_i+0xd2>
 800aaee:	064d      	lsls	r5, r1, #25
 800aaf0:	bf48      	it	mi
 800aaf2:	b29b      	uxthmi	r3, r3
 800aaf4:	e7ef      	b.n	800aad6 <_printf_i+0x14a>
 800aaf6:	4665      	mov	r5, ip
 800aaf8:	fbb3 f1f2 	udiv	r1, r3, r2
 800aafc:	fb02 3311 	mls	r3, r2, r1, r3
 800ab00:	5cc3      	ldrb	r3, [r0, r3]
 800ab02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ab06:	460b      	mov	r3, r1
 800ab08:	2900      	cmp	r1, #0
 800ab0a:	d1f5      	bne.n	800aaf8 <_printf_i+0x16c>
 800ab0c:	e7b9      	b.n	800aa82 <_printf_i+0xf6>
 800ab0e:	6813      	ldr	r3, [r2, #0]
 800ab10:	6825      	ldr	r5, [r4, #0]
 800ab12:	6961      	ldr	r1, [r4, #20]
 800ab14:	1d18      	adds	r0, r3, #4
 800ab16:	6010      	str	r0, [r2, #0]
 800ab18:	0628      	lsls	r0, r5, #24
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	d501      	bpl.n	800ab22 <_printf_i+0x196>
 800ab1e:	6019      	str	r1, [r3, #0]
 800ab20:	e002      	b.n	800ab28 <_printf_i+0x19c>
 800ab22:	066a      	lsls	r2, r5, #25
 800ab24:	d5fb      	bpl.n	800ab1e <_printf_i+0x192>
 800ab26:	8019      	strh	r1, [r3, #0]
 800ab28:	2300      	movs	r3, #0
 800ab2a:	6123      	str	r3, [r4, #16]
 800ab2c:	4665      	mov	r5, ip
 800ab2e:	e7b9      	b.n	800aaa4 <_printf_i+0x118>
 800ab30:	6813      	ldr	r3, [r2, #0]
 800ab32:	1d19      	adds	r1, r3, #4
 800ab34:	6011      	str	r1, [r2, #0]
 800ab36:	681d      	ldr	r5, [r3, #0]
 800ab38:	6862      	ldr	r2, [r4, #4]
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	f7f5 fb57 	bl	80001f0 <memchr>
 800ab42:	b108      	cbz	r0, 800ab48 <_printf_i+0x1bc>
 800ab44:	1b40      	subs	r0, r0, r5
 800ab46:	6060      	str	r0, [r4, #4]
 800ab48:	6863      	ldr	r3, [r4, #4]
 800ab4a:	6123      	str	r3, [r4, #16]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab52:	e7a7      	b.n	800aaa4 <_printf_i+0x118>
 800ab54:	6923      	ldr	r3, [r4, #16]
 800ab56:	462a      	mov	r2, r5
 800ab58:	4639      	mov	r1, r7
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	47c0      	blx	r8
 800ab5e:	3001      	adds	r0, #1
 800ab60:	d0aa      	beq.n	800aab8 <_printf_i+0x12c>
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	079b      	lsls	r3, r3, #30
 800ab66:	d413      	bmi.n	800ab90 <_printf_i+0x204>
 800ab68:	68e0      	ldr	r0, [r4, #12]
 800ab6a:	9b03      	ldr	r3, [sp, #12]
 800ab6c:	4298      	cmp	r0, r3
 800ab6e:	bfb8      	it	lt
 800ab70:	4618      	movlt	r0, r3
 800ab72:	e7a3      	b.n	800aabc <_printf_i+0x130>
 800ab74:	2301      	movs	r3, #1
 800ab76:	464a      	mov	r2, r9
 800ab78:	4639      	mov	r1, r7
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	47c0      	blx	r8
 800ab7e:	3001      	adds	r0, #1
 800ab80:	d09a      	beq.n	800aab8 <_printf_i+0x12c>
 800ab82:	3501      	adds	r5, #1
 800ab84:	68e3      	ldr	r3, [r4, #12]
 800ab86:	9a03      	ldr	r2, [sp, #12]
 800ab88:	1a9b      	subs	r3, r3, r2
 800ab8a:	42ab      	cmp	r3, r5
 800ab8c:	dcf2      	bgt.n	800ab74 <_printf_i+0x1e8>
 800ab8e:	e7eb      	b.n	800ab68 <_printf_i+0x1dc>
 800ab90:	2500      	movs	r5, #0
 800ab92:	f104 0919 	add.w	r9, r4, #25
 800ab96:	e7f5      	b.n	800ab84 <_printf_i+0x1f8>
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1ac      	bne.n	800aaf6 <_printf_i+0x16a>
 800ab9c:	7803      	ldrb	r3, [r0, #0]
 800ab9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aba2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aba6:	e76c      	b.n	800aa82 <_printf_i+0xf6>
 800aba8:	0800d2b6 	.word	0x0800d2b6
 800abac:	0800d2c7 	.word	0x0800d2c7

0800abb0 <siprintf>:
 800abb0:	b40e      	push	{r1, r2, r3}
 800abb2:	b500      	push	{lr}
 800abb4:	b09c      	sub	sp, #112	; 0x70
 800abb6:	ab1d      	add	r3, sp, #116	; 0x74
 800abb8:	9002      	str	r0, [sp, #8]
 800abba:	9006      	str	r0, [sp, #24]
 800abbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abc0:	4809      	ldr	r0, [pc, #36]	; (800abe8 <siprintf+0x38>)
 800abc2:	9107      	str	r1, [sp, #28]
 800abc4:	9104      	str	r1, [sp, #16]
 800abc6:	4909      	ldr	r1, [pc, #36]	; (800abec <siprintf+0x3c>)
 800abc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abcc:	9105      	str	r1, [sp, #20]
 800abce:	6800      	ldr	r0, [r0, #0]
 800abd0:	9301      	str	r3, [sp, #4]
 800abd2:	a902      	add	r1, sp, #8
 800abd4:	f001 fbf2 	bl	800c3bc <_svfiprintf_r>
 800abd8:	9b02      	ldr	r3, [sp, #8]
 800abda:	2200      	movs	r2, #0
 800abdc:	701a      	strb	r2, [r3, #0]
 800abde:	b01c      	add	sp, #112	; 0x70
 800abe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abe4:	b003      	add	sp, #12
 800abe6:	4770      	bx	lr
 800abe8:	20000094 	.word	0x20000094
 800abec:	ffff0208 	.word	0xffff0208

0800abf0 <strncat>:
 800abf0:	b530      	push	{r4, r5, lr}
 800abf2:	4603      	mov	r3, r0
 800abf4:	781c      	ldrb	r4, [r3, #0]
 800abf6:	1c5d      	adds	r5, r3, #1
 800abf8:	b944      	cbnz	r4, 800ac0c <strncat+0x1c>
 800abfa:	f112 32ff 	adds.w	r2, r2, #4294967295
 800abfe:	d304      	bcc.n	800ac0a <strncat+0x1a>
 800ac00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac04:	f803 4b01 	strb.w	r4, [r3], #1
 800ac08:	b914      	cbnz	r4, 800ac10 <strncat+0x20>
 800ac0a:	bd30      	pop	{r4, r5, pc}
 800ac0c:	462b      	mov	r3, r5
 800ac0e:	e7f1      	b.n	800abf4 <strncat+0x4>
 800ac10:	2a00      	cmp	r2, #0
 800ac12:	d1f2      	bne.n	800abfa <strncat+0xa>
 800ac14:	701a      	strb	r2, [r3, #0]
 800ac16:	e7f0      	b.n	800abfa <strncat+0xa>

0800ac18 <quorem>:
 800ac18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	6903      	ldr	r3, [r0, #16]
 800ac1e:	690c      	ldr	r4, [r1, #16]
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	4680      	mov	r8, r0
 800ac24:	f2c0 8082 	blt.w	800ad2c <quorem+0x114>
 800ac28:	3c01      	subs	r4, #1
 800ac2a:	f101 0714 	add.w	r7, r1, #20
 800ac2e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ac32:	f100 0614 	add.w	r6, r0, #20
 800ac36:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ac3a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ac3e:	eb06 030c 	add.w	r3, r6, ip
 800ac42:	3501      	adds	r5, #1
 800ac44:	eb07 090c 	add.w	r9, r7, ip
 800ac48:	9301      	str	r3, [sp, #4]
 800ac4a:	fbb0 f5f5 	udiv	r5, r0, r5
 800ac4e:	b395      	cbz	r5, 800acb6 <quorem+0x9e>
 800ac50:	f04f 0a00 	mov.w	sl, #0
 800ac54:	4638      	mov	r0, r7
 800ac56:	46b6      	mov	lr, r6
 800ac58:	46d3      	mov	fp, sl
 800ac5a:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac5e:	b293      	uxth	r3, r2
 800ac60:	fb05 a303 	mla	r3, r5, r3, sl
 800ac64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	ebab 0303 	sub.w	r3, fp, r3
 800ac6e:	0c12      	lsrs	r2, r2, #16
 800ac70:	f8de b000 	ldr.w	fp, [lr]
 800ac74:	fb05 a202 	mla	r2, r5, r2, sl
 800ac78:	fa13 f38b 	uxtah	r3, r3, fp
 800ac7c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ac80:	fa1f fb82 	uxth.w	fp, r2
 800ac84:	f8de 2000 	ldr.w	r2, [lr]
 800ac88:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ac8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac96:	4581      	cmp	r9, r0
 800ac98:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ac9c:	f84e 3b04 	str.w	r3, [lr], #4
 800aca0:	d2db      	bcs.n	800ac5a <quorem+0x42>
 800aca2:	f856 300c 	ldr.w	r3, [r6, ip]
 800aca6:	b933      	cbnz	r3, 800acb6 <quorem+0x9e>
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	3b04      	subs	r3, #4
 800acac:	429e      	cmp	r6, r3
 800acae:	461a      	mov	r2, r3
 800acb0:	d330      	bcc.n	800ad14 <quorem+0xfc>
 800acb2:	f8c8 4010 	str.w	r4, [r8, #16]
 800acb6:	4640      	mov	r0, r8
 800acb8:	f001 f966 	bl	800bf88 <__mcmp>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	db25      	blt.n	800ad0c <quorem+0xf4>
 800acc0:	3501      	adds	r5, #1
 800acc2:	4630      	mov	r0, r6
 800acc4:	f04f 0c00 	mov.w	ip, #0
 800acc8:	f857 2b04 	ldr.w	r2, [r7], #4
 800accc:	f8d0 e000 	ldr.w	lr, [r0]
 800acd0:	b293      	uxth	r3, r2
 800acd2:	ebac 0303 	sub.w	r3, ip, r3
 800acd6:	0c12      	lsrs	r2, r2, #16
 800acd8:	fa13 f38e 	uxtah	r3, r3, lr
 800acdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ace0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acea:	45b9      	cmp	r9, r7
 800acec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800acf0:	f840 3b04 	str.w	r3, [r0], #4
 800acf4:	d2e8      	bcs.n	800acc8 <quorem+0xb0>
 800acf6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800acfa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800acfe:	b92a      	cbnz	r2, 800ad0c <quorem+0xf4>
 800ad00:	3b04      	subs	r3, #4
 800ad02:	429e      	cmp	r6, r3
 800ad04:	461a      	mov	r2, r3
 800ad06:	d30b      	bcc.n	800ad20 <quorem+0x108>
 800ad08:	f8c8 4010 	str.w	r4, [r8, #16]
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	b003      	add	sp, #12
 800ad10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad14:	6812      	ldr	r2, [r2, #0]
 800ad16:	3b04      	subs	r3, #4
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	d1ca      	bne.n	800acb2 <quorem+0x9a>
 800ad1c:	3c01      	subs	r4, #1
 800ad1e:	e7c5      	b.n	800acac <quorem+0x94>
 800ad20:	6812      	ldr	r2, [r2, #0]
 800ad22:	3b04      	subs	r3, #4
 800ad24:	2a00      	cmp	r2, #0
 800ad26:	d1ef      	bne.n	800ad08 <quorem+0xf0>
 800ad28:	3c01      	subs	r4, #1
 800ad2a:	e7ea      	b.n	800ad02 <quorem+0xea>
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	e7ee      	b.n	800ad0e <quorem+0xf6>

0800ad30 <_dtoa_r>:
 800ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	ec57 6b10 	vmov	r6, r7, d0
 800ad38:	b097      	sub	sp, #92	; 0x5c
 800ad3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ad3c:	9106      	str	r1, [sp, #24]
 800ad3e:	4604      	mov	r4, r0
 800ad40:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad42:	9312      	str	r3, [sp, #72]	; 0x48
 800ad44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ad48:	e9cd 6700 	strd	r6, r7, [sp]
 800ad4c:	b93d      	cbnz	r5, 800ad5e <_dtoa_r+0x2e>
 800ad4e:	2010      	movs	r0, #16
 800ad50:	f000 fef2 	bl	800bb38 <malloc>
 800ad54:	6260      	str	r0, [r4, #36]	; 0x24
 800ad56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad5a:	6005      	str	r5, [r0, #0]
 800ad5c:	60c5      	str	r5, [r0, #12]
 800ad5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad60:	6819      	ldr	r1, [r3, #0]
 800ad62:	b151      	cbz	r1, 800ad7a <_dtoa_r+0x4a>
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	604a      	str	r2, [r1, #4]
 800ad68:	2301      	movs	r3, #1
 800ad6a:	4093      	lsls	r3, r2
 800ad6c:	608b      	str	r3, [r1, #8]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 ff29 	bl	800bbc6 <_Bfree>
 800ad74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad76:	2200      	movs	r2, #0
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	1e3b      	subs	r3, r7, #0
 800ad7c:	bfbb      	ittet	lt
 800ad7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad82:	9301      	strlt	r3, [sp, #4]
 800ad84:	2300      	movge	r3, #0
 800ad86:	2201      	movlt	r2, #1
 800ad88:	bfac      	ite	ge
 800ad8a:	f8c8 3000 	strge.w	r3, [r8]
 800ad8e:	f8c8 2000 	strlt.w	r2, [r8]
 800ad92:	4baf      	ldr	r3, [pc, #700]	; (800b050 <_dtoa_r+0x320>)
 800ad94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad98:	ea33 0308 	bics.w	r3, r3, r8
 800ad9c:	d114      	bne.n	800adc8 <_dtoa_r+0x98>
 800ad9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ada0:	f242 730f 	movw	r3, #9999	; 0x270f
 800ada4:	6013      	str	r3, [r2, #0]
 800ada6:	9b00      	ldr	r3, [sp, #0]
 800ada8:	b923      	cbnz	r3, 800adb4 <_dtoa_r+0x84>
 800adaa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800adae:	2800      	cmp	r0, #0
 800adb0:	f000 8542 	beq.w	800b838 <_dtoa_r+0xb08>
 800adb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adb6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b064 <_dtoa_r+0x334>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f000 8544 	beq.w	800b848 <_dtoa_r+0xb18>
 800adc0:	f10b 0303 	add.w	r3, fp, #3
 800adc4:	f000 bd3e 	b.w	800b844 <_dtoa_r+0xb14>
 800adc8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800adcc:	2200      	movs	r2, #0
 800adce:	2300      	movs	r3, #0
 800add0:	4630      	mov	r0, r6
 800add2:	4639      	mov	r1, r7
 800add4:	f7f5 fe80 	bl	8000ad8 <__aeabi_dcmpeq>
 800add8:	4681      	mov	r9, r0
 800adda:	b168      	cbz	r0, 800adf8 <_dtoa_r+0xc8>
 800addc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adde:	2301      	movs	r3, #1
 800ade0:	6013      	str	r3, [r2, #0]
 800ade2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 8524 	beq.w	800b832 <_dtoa_r+0xb02>
 800adea:	4b9a      	ldr	r3, [pc, #616]	; (800b054 <_dtoa_r+0x324>)
 800adec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800adee:	f103 3bff 	add.w	fp, r3, #4294967295
 800adf2:	6013      	str	r3, [r2, #0]
 800adf4:	f000 bd28 	b.w	800b848 <_dtoa_r+0xb18>
 800adf8:	aa14      	add	r2, sp, #80	; 0x50
 800adfa:	a915      	add	r1, sp, #84	; 0x54
 800adfc:	ec47 6b10 	vmov	d0, r6, r7
 800ae00:	4620      	mov	r0, r4
 800ae02:	f001 f938 	bl	800c076 <__d2b>
 800ae06:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ae0a:	9004      	str	r0, [sp, #16]
 800ae0c:	2d00      	cmp	r5, #0
 800ae0e:	d07c      	beq.n	800af0a <_dtoa_r+0x1da>
 800ae10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae14:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ae18:	46b2      	mov	sl, r6
 800ae1a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ae1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ae22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ae26:	2200      	movs	r2, #0
 800ae28:	4b8b      	ldr	r3, [pc, #556]	; (800b058 <_dtoa_r+0x328>)
 800ae2a:	4650      	mov	r0, sl
 800ae2c:	4659      	mov	r1, fp
 800ae2e:	f7f5 fa33 	bl	8000298 <__aeabi_dsub>
 800ae32:	a381      	add	r3, pc, #516	; (adr r3, 800b038 <_dtoa_r+0x308>)
 800ae34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae38:	f7f5 fbe6 	bl	8000608 <__aeabi_dmul>
 800ae3c:	a380      	add	r3, pc, #512	; (adr r3, 800b040 <_dtoa_r+0x310>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	f7f5 fa2b 	bl	800029c <__adddf3>
 800ae46:	4606      	mov	r6, r0
 800ae48:	4628      	mov	r0, r5
 800ae4a:	460f      	mov	r7, r1
 800ae4c:	f7f5 fb72 	bl	8000534 <__aeabi_i2d>
 800ae50:	a37d      	add	r3, pc, #500	; (adr r3, 800b048 <_dtoa_r+0x318>)
 800ae52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae56:	f7f5 fbd7 	bl	8000608 <__aeabi_dmul>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	4630      	mov	r0, r6
 800ae60:	4639      	mov	r1, r7
 800ae62:	f7f5 fa1b 	bl	800029c <__adddf3>
 800ae66:	4606      	mov	r6, r0
 800ae68:	460f      	mov	r7, r1
 800ae6a:	f7f5 fe7d 	bl	8000b68 <__aeabi_d2iz>
 800ae6e:	2200      	movs	r2, #0
 800ae70:	4682      	mov	sl, r0
 800ae72:	2300      	movs	r3, #0
 800ae74:	4630      	mov	r0, r6
 800ae76:	4639      	mov	r1, r7
 800ae78:	f7f5 fe38 	bl	8000aec <__aeabi_dcmplt>
 800ae7c:	b148      	cbz	r0, 800ae92 <_dtoa_r+0x162>
 800ae7e:	4650      	mov	r0, sl
 800ae80:	f7f5 fb58 	bl	8000534 <__aeabi_i2d>
 800ae84:	4632      	mov	r2, r6
 800ae86:	463b      	mov	r3, r7
 800ae88:	f7f5 fe26 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae8c:	b908      	cbnz	r0, 800ae92 <_dtoa_r+0x162>
 800ae8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae92:	f1ba 0f16 	cmp.w	sl, #22
 800ae96:	d859      	bhi.n	800af4c <_dtoa_r+0x21c>
 800ae98:	4970      	ldr	r1, [pc, #448]	; (800b05c <_dtoa_r+0x32c>)
 800ae9a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ae9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea6:	f7f5 fe3f 	bl	8000b28 <__aeabi_dcmpgt>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d050      	beq.n	800af50 <_dtoa_r+0x220>
 800aeae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aeb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aeb8:	1b5d      	subs	r5, r3, r5
 800aeba:	f1b5 0801 	subs.w	r8, r5, #1
 800aebe:	bf49      	itett	mi
 800aec0:	f1c5 0301 	rsbmi	r3, r5, #1
 800aec4:	2300      	movpl	r3, #0
 800aec6:	9305      	strmi	r3, [sp, #20]
 800aec8:	f04f 0800 	movmi.w	r8, #0
 800aecc:	bf58      	it	pl
 800aece:	9305      	strpl	r3, [sp, #20]
 800aed0:	f1ba 0f00 	cmp.w	sl, #0
 800aed4:	db3e      	blt.n	800af54 <_dtoa_r+0x224>
 800aed6:	2300      	movs	r3, #0
 800aed8:	44d0      	add	r8, sl
 800aeda:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800aede:	9307      	str	r3, [sp, #28]
 800aee0:	9b06      	ldr	r3, [sp, #24]
 800aee2:	2b09      	cmp	r3, #9
 800aee4:	f200 8090 	bhi.w	800b008 <_dtoa_r+0x2d8>
 800aee8:	2b05      	cmp	r3, #5
 800aeea:	bfc4      	itt	gt
 800aeec:	3b04      	subgt	r3, #4
 800aeee:	9306      	strgt	r3, [sp, #24]
 800aef0:	9b06      	ldr	r3, [sp, #24]
 800aef2:	f1a3 0302 	sub.w	r3, r3, #2
 800aef6:	bfcc      	ite	gt
 800aef8:	2500      	movgt	r5, #0
 800aefa:	2501      	movle	r5, #1
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	f200 808f 	bhi.w	800b020 <_dtoa_r+0x2f0>
 800af02:	e8df f003 	tbb	[pc, r3]
 800af06:	7f7d      	.short	0x7f7d
 800af08:	7131      	.short	0x7131
 800af0a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800af0e:	441d      	add	r5, r3
 800af10:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800af14:	2820      	cmp	r0, #32
 800af16:	dd13      	ble.n	800af40 <_dtoa_r+0x210>
 800af18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800af1c:	9b00      	ldr	r3, [sp, #0]
 800af1e:	fa08 f800 	lsl.w	r8, r8, r0
 800af22:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800af26:	fa23 f000 	lsr.w	r0, r3, r0
 800af2a:	ea48 0000 	orr.w	r0, r8, r0
 800af2e:	f7f5 faf1 	bl	8000514 <__aeabi_ui2d>
 800af32:	2301      	movs	r3, #1
 800af34:	4682      	mov	sl, r0
 800af36:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800af3a:	3d01      	subs	r5, #1
 800af3c:	9313      	str	r3, [sp, #76]	; 0x4c
 800af3e:	e772      	b.n	800ae26 <_dtoa_r+0xf6>
 800af40:	9b00      	ldr	r3, [sp, #0]
 800af42:	f1c0 0020 	rsb	r0, r0, #32
 800af46:	fa03 f000 	lsl.w	r0, r3, r0
 800af4a:	e7f0      	b.n	800af2e <_dtoa_r+0x1fe>
 800af4c:	2301      	movs	r3, #1
 800af4e:	e7b1      	b.n	800aeb4 <_dtoa_r+0x184>
 800af50:	900f      	str	r0, [sp, #60]	; 0x3c
 800af52:	e7b0      	b.n	800aeb6 <_dtoa_r+0x186>
 800af54:	9b05      	ldr	r3, [sp, #20]
 800af56:	eba3 030a 	sub.w	r3, r3, sl
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	f1ca 0300 	rsb	r3, sl, #0
 800af60:	9307      	str	r3, [sp, #28]
 800af62:	2300      	movs	r3, #0
 800af64:	930e      	str	r3, [sp, #56]	; 0x38
 800af66:	e7bb      	b.n	800aee0 <_dtoa_r+0x1b0>
 800af68:	2301      	movs	r3, #1
 800af6a:	930a      	str	r3, [sp, #40]	; 0x28
 800af6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af6e:	2b00      	cmp	r3, #0
 800af70:	dd59      	ble.n	800b026 <_dtoa_r+0x2f6>
 800af72:	9302      	str	r3, [sp, #8]
 800af74:	4699      	mov	r9, r3
 800af76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af78:	2200      	movs	r2, #0
 800af7a:	6072      	str	r2, [r6, #4]
 800af7c:	2204      	movs	r2, #4
 800af7e:	f102 0014 	add.w	r0, r2, #20
 800af82:	4298      	cmp	r0, r3
 800af84:	6871      	ldr	r1, [r6, #4]
 800af86:	d953      	bls.n	800b030 <_dtoa_r+0x300>
 800af88:	4620      	mov	r0, r4
 800af8a:	f000 fde8 	bl	800bb5e <_Balloc>
 800af8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af90:	6030      	str	r0, [r6, #0]
 800af92:	f1b9 0f0e 	cmp.w	r9, #14
 800af96:	f8d3 b000 	ldr.w	fp, [r3]
 800af9a:	f200 80e6 	bhi.w	800b16a <_dtoa_r+0x43a>
 800af9e:	2d00      	cmp	r5, #0
 800afa0:	f000 80e3 	beq.w	800b16a <_dtoa_r+0x43a>
 800afa4:	ed9d 7b00 	vldr	d7, [sp]
 800afa8:	f1ba 0f00 	cmp.w	sl, #0
 800afac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800afb0:	dd74      	ble.n	800b09c <_dtoa_r+0x36c>
 800afb2:	4a2a      	ldr	r2, [pc, #168]	; (800b05c <_dtoa_r+0x32c>)
 800afb4:	f00a 030f 	and.w	r3, sl, #15
 800afb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800afbc:	ed93 7b00 	vldr	d7, [r3]
 800afc0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800afc4:	06f0      	lsls	r0, r6, #27
 800afc6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800afca:	d565      	bpl.n	800b098 <_dtoa_r+0x368>
 800afcc:	4b24      	ldr	r3, [pc, #144]	; (800b060 <_dtoa_r+0x330>)
 800afce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800afd2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afd6:	f7f5 fc41 	bl	800085c <__aeabi_ddiv>
 800afda:	e9cd 0100 	strd	r0, r1, [sp]
 800afde:	f006 060f 	and.w	r6, r6, #15
 800afe2:	2503      	movs	r5, #3
 800afe4:	4f1e      	ldr	r7, [pc, #120]	; (800b060 <_dtoa_r+0x330>)
 800afe6:	e04c      	b.n	800b082 <_dtoa_r+0x352>
 800afe8:	2301      	movs	r3, #1
 800afea:	930a      	str	r3, [sp, #40]	; 0x28
 800afec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afee:	4453      	add	r3, sl
 800aff0:	f103 0901 	add.w	r9, r3, #1
 800aff4:	9302      	str	r3, [sp, #8]
 800aff6:	464b      	mov	r3, r9
 800aff8:	2b01      	cmp	r3, #1
 800affa:	bfb8      	it	lt
 800affc:	2301      	movlt	r3, #1
 800affe:	e7ba      	b.n	800af76 <_dtoa_r+0x246>
 800b000:	2300      	movs	r3, #0
 800b002:	e7b2      	b.n	800af6a <_dtoa_r+0x23a>
 800b004:	2300      	movs	r3, #0
 800b006:	e7f0      	b.n	800afea <_dtoa_r+0x2ba>
 800b008:	2501      	movs	r5, #1
 800b00a:	2300      	movs	r3, #0
 800b00c:	9306      	str	r3, [sp, #24]
 800b00e:	950a      	str	r5, [sp, #40]	; 0x28
 800b010:	f04f 33ff 	mov.w	r3, #4294967295
 800b014:	9302      	str	r3, [sp, #8]
 800b016:	4699      	mov	r9, r3
 800b018:	2200      	movs	r2, #0
 800b01a:	2312      	movs	r3, #18
 800b01c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b01e:	e7aa      	b.n	800af76 <_dtoa_r+0x246>
 800b020:	2301      	movs	r3, #1
 800b022:	930a      	str	r3, [sp, #40]	; 0x28
 800b024:	e7f4      	b.n	800b010 <_dtoa_r+0x2e0>
 800b026:	2301      	movs	r3, #1
 800b028:	9302      	str	r3, [sp, #8]
 800b02a:	4699      	mov	r9, r3
 800b02c:	461a      	mov	r2, r3
 800b02e:	e7f5      	b.n	800b01c <_dtoa_r+0x2ec>
 800b030:	3101      	adds	r1, #1
 800b032:	6071      	str	r1, [r6, #4]
 800b034:	0052      	lsls	r2, r2, #1
 800b036:	e7a2      	b.n	800af7e <_dtoa_r+0x24e>
 800b038:	636f4361 	.word	0x636f4361
 800b03c:	3fd287a7 	.word	0x3fd287a7
 800b040:	8b60c8b3 	.word	0x8b60c8b3
 800b044:	3fc68a28 	.word	0x3fc68a28
 800b048:	509f79fb 	.word	0x509f79fb
 800b04c:	3fd34413 	.word	0x3fd34413
 800b050:	7ff00000 	.word	0x7ff00000
 800b054:	0800d2b5 	.word	0x0800d2b5
 800b058:	3ff80000 	.word	0x3ff80000
 800b05c:	0800d310 	.word	0x0800d310
 800b060:	0800d2e8 	.word	0x0800d2e8
 800b064:	0800d2e1 	.word	0x0800d2e1
 800b068:	07f1      	lsls	r1, r6, #31
 800b06a:	d508      	bpl.n	800b07e <_dtoa_r+0x34e>
 800b06c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b070:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b074:	f7f5 fac8 	bl	8000608 <__aeabi_dmul>
 800b078:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b07c:	3501      	adds	r5, #1
 800b07e:	1076      	asrs	r6, r6, #1
 800b080:	3708      	adds	r7, #8
 800b082:	2e00      	cmp	r6, #0
 800b084:	d1f0      	bne.n	800b068 <_dtoa_r+0x338>
 800b086:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b08a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b08e:	f7f5 fbe5 	bl	800085c <__aeabi_ddiv>
 800b092:	e9cd 0100 	strd	r0, r1, [sp]
 800b096:	e01a      	b.n	800b0ce <_dtoa_r+0x39e>
 800b098:	2502      	movs	r5, #2
 800b09a:	e7a3      	b.n	800afe4 <_dtoa_r+0x2b4>
 800b09c:	f000 80a0 	beq.w	800b1e0 <_dtoa_r+0x4b0>
 800b0a0:	f1ca 0600 	rsb	r6, sl, #0
 800b0a4:	4b9f      	ldr	r3, [pc, #636]	; (800b324 <_dtoa_r+0x5f4>)
 800b0a6:	4fa0      	ldr	r7, [pc, #640]	; (800b328 <_dtoa_r+0x5f8>)
 800b0a8:	f006 020f 	and.w	r2, r6, #15
 800b0ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b0b8:	f7f5 faa6 	bl	8000608 <__aeabi_dmul>
 800b0bc:	e9cd 0100 	strd	r0, r1, [sp]
 800b0c0:	1136      	asrs	r6, r6, #4
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	2502      	movs	r5, #2
 800b0c6:	2e00      	cmp	r6, #0
 800b0c8:	d17f      	bne.n	800b1ca <_dtoa_r+0x49a>
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e1      	bne.n	800b092 <_dtoa_r+0x362>
 800b0ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 8087 	beq.w	800b1e4 <_dtoa_r+0x4b4>
 800b0d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	4b93      	ldr	r3, [pc, #588]	; (800b32c <_dtoa_r+0x5fc>)
 800b0de:	4630      	mov	r0, r6
 800b0e0:	4639      	mov	r1, r7
 800b0e2:	f7f5 fd03 	bl	8000aec <__aeabi_dcmplt>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d07c      	beq.n	800b1e4 <_dtoa_r+0x4b4>
 800b0ea:	f1b9 0f00 	cmp.w	r9, #0
 800b0ee:	d079      	beq.n	800b1e4 <_dtoa_r+0x4b4>
 800b0f0:	9b02      	ldr	r3, [sp, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dd35      	ble.n	800b162 <_dtoa_r+0x432>
 800b0f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b0fa:	9308      	str	r3, [sp, #32]
 800b0fc:	4639      	mov	r1, r7
 800b0fe:	2200      	movs	r2, #0
 800b100:	4b8b      	ldr	r3, [pc, #556]	; (800b330 <_dtoa_r+0x600>)
 800b102:	4630      	mov	r0, r6
 800b104:	f7f5 fa80 	bl	8000608 <__aeabi_dmul>
 800b108:	e9cd 0100 	strd	r0, r1, [sp]
 800b10c:	9f02      	ldr	r7, [sp, #8]
 800b10e:	3501      	adds	r5, #1
 800b110:	4628      	mov	r0, r5
 800b112:	f7f5 fa0f 	bl	8000534 <__aeabi_i2d>
 800b116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b11a:	f7f5 fa75 	bl	8000608 <__aeabi_dmul>
 800b11e:	2200      	movs	r2, #0
 800b120:	4b84      	ldr	r3, [pc, #528]	; (800b334 <_dtoa_r+0x604>)
 800b122:	f7f5 f8bb 	bl	800029c <__adddf3>
 800b126:	4605      	mov	r5, r0
 800b128:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b12c:	2f00      	cmp	r7, #0
 800b12e:	d15d      	bne.n	800b1ec <_dtoa_r+0x4bc>
 800b130:	2200      	movs	r2, #0
 800b132:	4b81      	ldr	r3, [pc, #516]	; (800b338 <_dtoa_r+0x608>)
 800b134:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b138:	f7f5 f8ae 	bl	8000298 <__aeabi_dsub>
 800b13c:	462a      	mov	r2, r5
 800b13e:	4633      	mov	r3, r6
 800b140:	e9cd 0100 	strd	r0, r1, [sp]
 800b144:	f7f5 fcf0 	bl	8000b28 <__aeabi_dcmpgt>
 800b148:	2800      	cmp	r0, #0
 800b14a:	f040 8288 	bne.w	800b65e <_dtoa_r+0x92e>
 800b14e:	462a      	mov	r2, r5
 800b150:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b154:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b158:	f7f5 fcc8 	bl	8000aec <__aeabi_dcmplt>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	f040 827c 	bne.w	800b65a <_dtoa_r+0x92a>
 800b162:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b166:	e9cd 2300 	strd	r2, r3, [sp]
 800b16a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f2c0 8150 	blt.w	800b412 <_dtoa_r+0x6e2>
 800b172:	f1ba 0f0e 	cmp.w	sl, #14
 800b176:	f300 814c 	bgt.w	800b412 <_dtoa_r+0x6e2>
 800b17a:	4b6a      	ldr	r3, [pc, #424]	; (800b324 <_dtoa_r+0x5f4>)
 800b17c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b180:	ed93 7b00 	vldr	d7, [r3]
 800b184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b186:	2b00      	cmp	r3, #0
 800b188:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b18c:	f280 80d8 	bge.w	800b340 <_dtoa_r+0x610>
 800b190:	f1b9 0f00 	cmp.w	r9, #0
 800b194:	f300 80d4 	bgt.w	800b340 <_dtoa_r+0x610>
 800b198:	f040 825e 	bne.w	800b658 <_dtoa_r+0x928>
 800b19c:	2200      	movs	r2, #0
 800b19e:	4b66      	ldr	r3, [pc, #408]	; (800b338 <_dtoa_r+0x608>)
 800b1a0:	ec51 0b17 	vmov	r0, r1, d7
 800b1a4:	f7f5 fa30 	bl	8000608 <__aeabi_dmul>
 800b1a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1ac:	f7f5 fcb2 	bl	8000b14 <__aeabi_dcmpge>
 800b1b0:	464f      	mov	r7, r9
 800b1b2:	464e      	mov	r6, r9
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	f040 8234 	bne.w	800b622 <_dtoa_r+0x8f2>
 800b1ba:	2331      	movs	r3, #49	; 0x31
 800b1bc:	f10b 0501 	add.w	r5, fp, #1
 800b1c0:	f88b 3000 	strb.w	r3, [fp]
 800b1c4:	f10a 0a01 	add.w	sl, sl, #1
 800b1c8:	e22f      	b.n	800b62a <_dtoa_r+0x8fa>
 800b1ca:	07f2      	lsls	r2, r6, #31
 800b1cc:	d505      	bpl.n	800b1da <_dtoa_r+0x4aa>
 800b1ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1d2:	f7f5 fa19 	bl	8000608 <__aeabi_dmul>
 800b1d6:	3501      	adds	r5, #1
 800b1d8:	2301      	movs	r3, #1
 800b1da:	1076      	asrs	r6, r6, #1
 800b1dc:	3708      	adds	r7, #8
 800b1de:	e772      	b.n	800b0c6 <_dtoa_r+0x396>
 800b1e0:	2502      	movs	r5, #2
 800b1e2:	e774      	b.n	800b0ce <_dtoa_r+0x39e>
 800b1e4:	f8cd a020 	str.w	sl, [sp, #32]
 800b1e8:	464f      	mov	r7, r9
 800b1ea:	e791      	b.n	800b110 <_dtoa_r+0x3e0>
 800b1ec:	4b4d      	ldr	r3, [pc, #308]	; (800b324 <_dtoa_r+0x5f4>)
 800b1ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b1f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d047      	beq.n	800b28c <_dtoa_r+0x55c>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	2000      	movs	r0, #0
 800b202:	494e      	ldr	r1, [pc, #312]	; (800b33c <_dtoa_r+0x60c>)
 800b204:	f7f5 fb2a 	bl	800085c <__aeabi_ddiv>
 800b208:	462a      	mov	r2, r5
 800b20a:	4633      	mov	r3, r6
 800b20c:	f7f5 f844 	bl	8000298 <__aeabi_dsub>
 800b210:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b214:	465d      	mov	r5, fp
 800b216:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b21a:	f7f5 fca5 	bl	8000b68 <__aeabi_d2iz>
 800b21e:	4606      	mov	r6, r0
 800b220:	f7f5 f988 	bl	8000534 <__aeabi_i2d>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b22c:	f7f5 f834 	bl	8000298 <__aeabi_dsub>
 800b230:	3630      	adds	r6, #48	; 0x30
 800b232:	f805 6b01 	strb.w	r6, [r5], #1
 800b236:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b23a:	e9cd 0100 	strd	r0, r1, [sp]
 800b23e:	f7f5 fc55 	bl	8000aec <__aeabi_dcmplt>
 800b242:	2800      	cmp	r0, #0
 800b244:	d163      	bne.n	800b30e <_dtoa_r+0x5de>
 800b246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b24a:	2000      	movs	r0, #0
 800b24c:	4937      	ldr	r1, [pc, #220]	; (800b32c <_dtoa_r+0x5fc>)
 800b24e:	f7f5 f823 	bl	8000298 <__aeabi_dsub>
 800b252:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b256:	f7f5 fc49 	bl	8000aec <__aeabi_dcmplt>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	f040 80b7 	bne.w	800b3ce <_dtoa_r+0x69e>
 800b260:	eba5 030b 	sub.w	r3, r5, fp
 800b264:	429f      	cmp	r7, r3
 800b266:	f77f af7c 	ble.w	800b162 <_dtoa_r+0x432>
 800b26a:	2200      	movs	r2, #0
 800b26c:	4b30      	ldr	r3, [pc, #192]	; (800b330 <_dtoa_r+0x600>)
 800b26e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b272:	f7f5 f9c9 	bl	8000608 <__aeabi_dmul>
 800b276:	2200      	movs	r2, #0
 800b278:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b27c:	4b2c      	ldr	r3, [pc, #176]	; (800b330 <_dtoa_r+0x600>)
 800b27e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b282:	f7f5 f9c1 	bl	8000608 <__aeabi_dmul>
 800b286:	e9cd 0100 	strd	r0, r1, [sp]
 800b28a:	e7c4      	b.n	800b216 <_dtoa_r+0x4e6>
 800b28c:	462a      	mov	r2, r5
 800b28e:	4633      	mov	r3, r6
 800b290:	f7f5 f9ba 	bl	8000608 <__aeabi_dmul>
 800b294:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b298:	eb0b 0507 	add.w	r5, fp, r7
 800b29c:	465e      	mov	r6, fp
 800b29e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2a2:	f7f5 fc61 	bl	8000b68 <__aeabi_d2iz>
 800b2a6:	4607      	mov	r7, r0
 800b2a8:	f7f5 f944 	bl	8000534 <__aeabi_i2d>
 800b2ac:	3730      	adds	r7, #48	; 0x30
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2b6:	f7f4 ffef 	bl	8000298 <__aeabi_dsub>
 800b2ba:	f806 7b01 	strb.w	r7, [r6], #1
 800b2be:	42ae      	cmp	r6, r5
 800b2c0:	e9cd 0100 	strd	r0, r1, [sp]
 800b2c4:	f04f 0200 	mov.w	r2, #0
 800b2c8:	d126      	bne.n	800b318 <_dtoa_r+0x5e8>
 800b2ca:	4b1c      	ldr	r3, [pc, #112]	; (800b33c <_dtoa_r+0x60c>)
 800b2cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b2d0:	f7f4 ffe4 	bl	800029c <__adddf3>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2dc:	f7f5 fc24 	bl	8000b28 <__aeabi_dcmpgt>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d174      	bne.n	800b3ce <_dtoa_r+0x69e>
 800b2e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	4914      	ldr	r1, [pc, #80]	; (800b33c <_dtoa_r+0x60c>)
 800b2ec:	f7f4 ffd4 	bl	8000298 <__aeabi_dsub>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2f8:	f7f5 fbf8 	bl	8000aec <__aeabi_dcmplt>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	f43f af30 	beq.w	800b162 <_dtoa_r+0x432>
 800b302:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b306:	2b30      	cmp	r3, #48	; 0x30
 800b308:	f105 32ff 	add.w	r2, r5, #4294967295
 800b30c:	d002      	beq.n	800b314 <_dtoa_r+0x5e4>
 800b30e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b312:	e04a      	b.n	800b3aa <_dtoa_r+0x67a>
 800b314:	4615      	mov	r5, r2
 800b316:	e7f4      	b.n	800b302 <_dtoa_r+0x5d2>
 800b318:	4b05      	ldr	r3, [pc, #20]	; (800b330 <_dtoa_r+0x600>)
 800b31a:	f7f5 f975 	bl	8000608 <__aeabi_dmul>
 800b31e:	e9cd 0100 	strd	r0, r1, [sp]
 800b322:	e7bc      	b.n	800b29e <_dtoa_r+0x56e>
 800b324:	0800d310 	.word	0x0800d310
 800b328:	0800d2e8 	.word	0x0800d2e8
 800b32c:	3ff00000 	.word	0x3ff00000
 800b330:	40240000 	.word	0x40240000
 800b334:	401c0000 	.word	0x401c0000
 800b338:	40140000 	.word	0x40140000
 800b33c:	3fe00000 	.word	0x3fe00000
 800b340:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b344:	465d      	mov	r5, fp
 800b346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b34a:	4630      	mov	r0, r6
 800b34c:	4639      	mov	r1, r7
 800b34e:	f7f5 fa85 	bl	800085c <__aeabi_ddiv>
 800b352:	f7f5 fc09 	bl	8000b68 <__aeabi_d2iz>
 800b356:	4680      	mov	r8, r0
 800b358:	f7f5 f8ec 	bl	8000534 <__aeabi_i2d>
 800b35c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b360:	f7f5 f952 	bl	8000608 <__aeabi_dmul>
 800b364:	4602      	mov	r2, r0
 800b366:	460b      	mov	r3, r1
 800b368:	4630      	mov	r0, r6
 800b36a:	4639      	mov	r1, r7
 800b36c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b370:	f7f4 ff92 	bl	8000298 <__aeabi_dsub>
 800b374:	f805 6b01 	strb.w	r6, [r5], #1
 800b378:	eba5 060b 	sub.w	r6, r5, fp
 800b37c:	45b1      	cmp	r9, r6
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	d139      	bne.n	800b3f8 <_dtoa_r+0x6c8>
 800b384:	f7f4 ff8a 	bl	800029c <__adddf3>
 800b388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b38c:	4606      	mov	r6, r0
 800b38e:	460f      	mov	r7, r1
 800b390:	f7f5 fbca 	bl	8000b28 <__aeabi_dcmpgt>
 800b394:	b9c8      	cbnz	r0, 800b3ca <_dtoa_r+0x69a>
 800b396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b39a:	4630      	mov	r0, r6
 800b39c:	4639      	mov	r1, r7
 800b39e:	f7f5 fb9b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3a2:	b110      	cbz	r0, 800b3aa <_dtoa_r+0x67a>
 800b3a4:	f018 0f01 	tst.w	r8, #1
 800b3a8:	d10f      	bne.n	800b3ca <_dtoa_r+0x69a>
 800b3aa:	9904      	ldr	r1, [sp, #16]
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f000 fc0a 	bl	800bbc6 <_Bfree>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3b6:	702b      	strb	r3, [r5, #0]
 800b3b8:	f10a 0301 	add.w	r3, sl, #1
 800b3bc:	6013      	str	r3, [r2, #0]
 800b3be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 8241 	beq.w	800b848 <_dtoa_r+0xb18>
 800b3c6:	601d      	str	r5, [r3, #0]
 800b3c8:	e23e      	b.n	800b848 <_dtoa_r+0xb18>
 800b3ca:	f8cd a020 	str.w	sl, [sp, #32]
 800b3ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b3d2:	2a39      	cmp	r2, #57	; 0x39
 800b3d4:	f105 33ff 	add.w	r3, r5, #4294967295
 800b3d8:	d108      	bne.n	800b3ec <_dtoa_r+0x6bc>
 800b3da:	459b      	cmp	fp, r3
 800b3dc:	d10a      	bne.n	800b3f4 <_dtoa_r+0x6c4>
 800b3de:	9b08      	ldr	r3, [sp, #32]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	9308      	str	r3, [sp, #32]
 800b3e4:	2330      	movs	r3, #48	; 0x30
 800b3e6:	f88b 3000 	strb.w	r3, [fp]
 800b3ea:	465b      	mov	r3, fp
 800b3ec:	781a      	ldrb	r2, [r3, #0]
 800b3ee:	3201      	adds	r2, #1
 800b3f0:	701a      	strb	r2, [r3, #0]
 800b3f2:	e78c      	b.n	800b30e <_dtoa_r+0x5de>
 800b3f4:	461d      	mov	r5, r3
 800b3f6:	e7ea      	b.n	800b3ce <_dtoa_r+0x69e>
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	4b9b      	ldr	r3, [pc, #620]	; (800b668 <_dtoa_r+0x938>)
 800b3fc:	f7f5 f904 	bl	8000608 <__aeabi_dmul>
 800b400:	2200      	movs	r2, #0
 800b402:	2300      	movs	r3, #0
 800b404:	4606      	mov	r6, r0
 800b406:	460f      	mov	r7, r1
 800b408:	f7f5 fb66 	bl	8000ad8 <__aeabi_dcmpeq>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d09a      	beq.n	800b346 <_dtoa_r+0x616>
 800b410:	e7cb      	b.n	800b3aa <_dtoa_r+0x67a>
 800b412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b414:	2a00      	cmp	r2, #0
 800b416:	f000 808b 	beq.w	800b530 <_dtoa_r+0x800>
 800b41a:	9a06      	ldr	r2, [sp, #24]
 800b41c:	2a01      	cmp	r2, #1
 800b41e:	dc6e      	bgt.n	800b4fe <_dtoa_r+0x7ce>
 800b420:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b422:	2a00      	cmp	r2, #0
 800b424:	d067      	beq.n	800b4f6 <_dtoa_r+0x7c6>
 800b426:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b42a:	9f07      	ldr	r7, [sp, #28]
 800b42c:	9d05      	ldr	r5, [sp, #20]
 800b42e:	9a05      	ldr	r2, [sp, #20]
 800b430:	2101      	movs	r1, #1
 800b432:	441a      	add	r2, r3
 800b434:	4620      	mov	r0, r4
 800b436:	9205      	str	r2, [sp, #20]
 800b438:	4498      	add	r8, r3
 800b43a:	f000 fc64 	bl	800bd06 <__i2b>
 800b43e:	4606      	mov	r6, r0
 800b440:	2d00      	cmp	r5, #0
 800b442:	dd0c      	ble.n	800b45e <_dtoa_r+0x72e>
 800b444:	f1b8 0f00 	cmp.w	r8, #0
 800b448:	dd09      	ble.n	800b45e <_dtoa_r+0x72e>
 800b44a:	4545      	cmp	r5, r8
 800b44c:	9a05      	ldr	r2, [sp, #20]
 800b44e:	462b      	mov	r3, r5
 800b450:	bfa8      	it	ge
 800b452:	4643      	movge	r3, r8
 800b454:	1ad2      	subs	r2, r2, r3
 800b456:	9205      	str	r2, [sp, #20]
 800b458:	1aed      	subs	r5, r5, r3
 800b45a:	eba8 0803 	sub.w	r8, r8, r3
 800b45e:	9b07      	ldr	r3, [sp, #28]
 800b460:	b1eb      	cbz	r3, 800b49e <_dtoa_r+0x76e>
 800b462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b464:	2b00      	cmp	r3, #0
 800b466:	d067      	beq.n	800b538 <_dtoa_r+0x808>
 800b468:	b18f      	cbz	r7, 800b48e <_dtoa_r+0x75e>
 800b46a:	4631      	mov	r1, r6
 800b46c:	463a      	mov	r2, r7
 800b46e:	4620      	mov	r0, r4
 800b470:	f000 fce8 	bl	800be44 <__pow5mult>
 800b474:	9a04      	ldr	r2, [sp, #16]
 800b476:	4601      	mov	r1, r0
 800b478:	4606      	mov	r6, r0
 800b47a:	4620      	mov	r0, r4
 800b47c:	f000 fc4c 	bl	800bd18 <__multiply>
 800b480:	9904      	ldr	r1, [sp, #16]
 800b482:	9008      	str	r0, [sp, #32]
 800b484:	4620      	mov	r0, r4
 800b486:	f000 fb9e 	bl	800bbc6 <_Bfree>
 800b48a:	9b08      	ldr	r3, [sp, #32]
 800b48c:	9304      	str	r3, [sp, #16]
 800b48e:	9b07      	ldr	r3, [sp, #28]
 800b490:	1bda      	subs	r2, r3, r7
 800b492:	d004      	beq.n	800b49e <_dtoa_r+0x76e>
 800b494:	9904      	ldr	r1, [sp, #16]
 800b496:	4620      	mov	r0, r4
 800b498:	f000 fcd4 	bl	800be44 <__pow5mult>
 800b49c:	9004      	str	r0, [sp, #16]
 800b49e:	2101      	movs	r1, #1
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f000 fc30 	bl	800bd06 <__i2b>
 800b4a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4a8:	4607      	mov	r7, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f000 81d0 	beq.w	800b850 <_dtoa_r+0xb20>
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	4601      	mov	r1, r0
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 fcc5 	bl	800be44 <__pow5mult>
 800b4ba:	9b06      	ldr	r3, [sp, #24]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	4607      	mov	r7, r0
 800b4c0:	dc40      	bgt.n	800b544 <_dtoa_r+0x814>
 800b4c2:	9b00      	ldr	r3, [sp, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d139      	bne.n	800b53c <_dtoa_r+0x80c>
 800b4c8:	9b01      	ldr	r3, [sp, #4]
 800b4ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d136      	bne.n	800b540 <_dtoa_r+0x810>
 800b4d2:	9b01      	ldr	r3, [sp, #4]
 800b4d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4d8:	0d1b      	lsrs	r3, r3, #20
 800b4da:	051b      	lsls	r3, r3, #20
 800b4dc:	b12b      	cbz	r3, 800b4ea <_dtoa_r+0x7ba>
 800b4de:	9b05      	ldr	r3, [sp, #20]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	9305      	str	r3, [sp, #20]
 800b4e4:	f108 0801 	add.w	r8, r8, #1
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	9307      	str	r3, [sp, #28]
 800b4ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d12a      	bne.n	800b548 <_dtoa_r+0x818>
 800b4f2:	2001      	movs	r0, #1
 800b4f4:	e030      	b.n	800b558 <_dtoa_r+0x828>
 800b4f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b4fc:	e795      	b.n	800b42a <_dtoa_r+0x6fa>
 800b4fe:	9b07      	ldr	r3, [sp, #28]
 800b500:	f109 37ff 	add.w	r7, r9, #4294967295
 800b504:	42bb      	cmp	r3, r7
 800b506:	bfbf      	itttt	lt
 800b508:	9b07      	ldrlt	r3, [sp, #28]
 800b50a:	9707      	strlt	r7, [sp, #28]
 800b50c:	1afa      	sublt	r2, r7, r3
 800b50e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b510:	bfbb      	ittet	lt
 800b512:	189b      	addlt	r3, r3, r2
 800b514:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b516:	1bdf      	subge	r7, r3, r7
 800b518:	2700      	movlt	r7, #0
 800b51a:	f1b9 0f00 	cmp.w	r9, #0
 800b51e:	bfb5      	itete	lt
 800b520:	9b05      	ldrlt	r3, [sp, #20]
 800b522:	9d05      	ldrge	r5, [sp, #20]
 800b524:	eba3 0509 	sublt.w	r5, r3, r9
 800b528:	464b      	movge	r3, r9
 800b52a:	bfb8      	it	lt
 800b52c:	2300      	movlt	r3, #0
 800b52e:	e77e      	b.n	800b42e <_dtoa_r+0x6fe>
 800b530:	9f07      	ldr	r7, [sp, #28]
 800b532:	9d05      	ldr	r5, [sp, #20]
 800b534:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b536:	e783      	b.n	800b440 <_dtoa_r+0x710>
 800b538:	9a07      	ldr	r2, [sp, #28]
 800b53a:	e7ab      	b.n	800b494 <_dtoa_r+0x764>
 800b53c:	2300      	movs	r3, #0
 800b53e:	e7d4      	b.n	800b4ea <_dtoa_r+0x7ba>
 800b540:	9b00      	ldr	r3, [sp, #0]
 800b542:	e7d2      	b.n	800b4ea <_dtoa_r+0x7ba>
 800b544:	2300      	movs	r3, #0
 800b546:	9307      	str	r3, [sp, #28]
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b54e:	6918      	ldr	r0, [r3, #16]
 800b550:	f000 fb8b 	bl	800bc6a <__hi0bits>
 800b554:	f1c0 0020 	rsb	r0, r0, #32
 800b558:	4440      	add	r0, r8
 800b55a:	f010 001f 	ands.w	r0, r0, #31
 800b55e:	d047      	beq.n	800b5f0 <_dtoa_r+0x8c0>
 800b560:	f1c0 0320 	rsb	r3, r0, #32
 800b564:	2b04      	cmp	r3, #4
 800b566:	dd3b      	ble.n	800b5e0 <_dtoa_r+0x8b0>
 800b568:	9b05      	ldr	r3, [sp, #20]
 800b56a:	f1c0 001c 	rsb	r0, r0, #28
 800b56e:	4403      	add	r3, r0
 800b570:	9305      	str	r3, [sp, #20]
 800b572:	4405      	add	r5, r0
 800b574:	4480      	add	r8, r0
 800b576:	9b05      	ldr	r3, [sp, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	dd05      	ble.n	800b588 <_dtoa_r+0x858>
 800b57c:	461a      	mov	r2, r3
 800b57e:	9904      	ldr	r1, [sp, #16]
 800b580:	4620      	mov	r0, r4
 800b582:	f000 fcad 	bl	800bee0 <__lshift>
 800b586:	9004      	str	r0, [sp, #16]
 800b588:	f1b8 0f00 	cmp.w	r8, #0
 800b58c:	dd05      	ble.n	800b59a <_dtoa_r+0x86a>
 800b58e:	4639      	mov	r1, r7
 800b590:	4642      	mov	r2, r8
 800b592:	4620      	mov	r0, r4
 800b594:	f000 fca4 	bl	800bee0 <__lshift>
 800b598:	4607      	mov	r7, r0
 800b59a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b59c:	b353      	cbz	r3, 800b5f4 <_dtoa_r+0x8c4>
 800b59e:	4639      	mov	r1, r7
 800b5a0:	9804      	ldr	r0, [sp, #16]
 800b5a2:	f000 fcf1 	bl	800bf88 <__mcmp>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	da24      	bge.n	800b5f4 <_dtoa_r+0x8c4>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	220a      	movs	r2, #10
 800b5ae:	9904      	ldr	r1, [sp, #16]
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f000 fb1f 	bl	800bbf4 <__multadd>
 800b5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b8:	9004      	str	r0, [sp, #16]
 800b5ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 814d 	beq.w	800b85e <_dtoa_r+0xb2e>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	4631      	mov	r1, r6
 800b5c8:	220a      	movs	r2, #10
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f000 fb12 	bl	800bbf4 <__multadd>
 800b5d0:	9b02      	ldr	r3, [sp, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	dc4f      	bgt.n	800b678 <_dtoa_r+0x948>
 800b5d8:	9b06      	ldr	r3, [sp, #24]
 800b5da:	2b02      	cmp	r3, #2
 800b5dc:	dd4c      	ble.n	800b678 <_dtoa_r+0x948>
 800b5de:	e011      	b.n	800b604 <_dtoa_r+0x8d4>
 800b5e0:	d0c9      	beq.n	800b576 <_dtoa_r+0x846>
 800b5e2:	9a05      	ldr	r2, [sp, #20]
 800b5e4:	331c      	adds	r3, #28
 800b5e6:	441a      	add	r2, r3
 800b5e8:	9205      	str	r2, [sp, #20]
 800b5ea:	441d      	add	r5, r3
 800b5ec:	4498      	add	r8, r3
 800b5ee:	e7c2      	b.n	800b576 <_dtoa_r+0x846>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	e7f6      	b.n	800b5e2 <_dtoa_r+0x8b2>
 800b5f4:	f1b9 0f00 	cmp.w	r9, #0
 800b5f8:	dc38      	bgt.n	800b66c <_dtoa_r+0x93c>
 800b5fa:	9b06      	ldr	r3, [sp, #24]
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	dd35      	ble.n	800b66c <_dtoa_r+0x93c>
 800b600:	f8cd 9008 	str.w	r9, [sp, #8]
 800b604:	9b02      	ldr	r3, [sp, #8]
 800b606:	b963      	cbnz	r3, 800b622 <_dtoa_r+0x8f2>
 800b608:	4639      	mov	r1, r7
 800b60a:	2205      	movs	r2, #5
 800b60c:	4620      	mov	r0, r4
 800b60e:	f000 faf1 	bl	800bbf4 <__multadd>
 800b612:	4601      	mov	r1, r0
 800b614:	4607      	mov	r7, r0
 800b616:	9804      	ldr	r0, [sp, #16]
 800b618:	f000 fcb6 	bl	800bf88 <__mcmp>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	f73f adcc 	bgt.w	800b1ba <_dtoa_r+0x48a>
 800b622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b624:	465d      	mov	r5, fp
 800b626:	ea6f 0a03 	mvn.w	sl, r3
 800b62a:	f04f 0900 	mov.w	r9, #0
 800b62e:	4639      	mov	r1, r7
 800b630:	4620      	mov	r0, r4
 800b632:	f000 fac8 	bl	800bbc6 <_Bfree>
 800b636:	2e00      	cmp	r6, #0
 800b638:	f43f aeb7 	beq.w	800b3aa <_dtoa_r+0x67a>
 800b63c:	f1b9 0f00 	cmp.w	r9, #0
 800b640:	d005      	beq.n	800b64e <_dtoa_r+0x91e>
 800b642:	45b1      	cmp	r9, r6
 800b644:	d003      	beq.n	800b64e <_dtoa_r+0x91e>
 800b646:	4649      	mov	r1, r9
 800b648:	4620      	mov	r0, r4
 800b64a:	f000 fabc 	bl	800bbc6 <_Bfree>
 800b64e:	4631      	mov	r1, r6
 800b650:	4620      	mov	r0, r4
 800b652:	f000 fab8 	bl	800bbc6 <_Bfree>
 800b656:	e6a8      	b.n	800b3aa <_dtoa_r+0x67a>
 800b658:	2700      	movs	r7, #0
 800b65a:	463e      	mov	r6, r7
 800b65c:	e7e1      	b.n	800b622 <_dtoa_r+0x8f2>
 800b65e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b662:	463e      	mov	r6, r7
 800b664:	e5a9      	b.n	800b1ba <_dtoa_r+0x48a>
 800b666:	bf00      	nop
 800b668:	40240000 	.word	0x40240000
 800b66c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b66e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b672:	2b00      	cmp	r3, #0
 800b674:	f000 80fa 	beq.w	800b86c <_dtoa_r+0xb3c>
 800b678:	2d00      	cmp	r5, #0
 800b67a:	dd05      	ble.n	800b688 <_dtoa_r+0x958>
 800b67c:	4631      	mov	r1, r6
 800b67e:	462a      	mov	r2, r5
 800b680:	4620      	mov	r0, r4
 800b682:	f000 fc2d 	bl	800bee0 <__lshift>
 800b686:	4606      	mov	r6, r0
 800b688:	9b07      	ldr	r3, [sp, #28]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d04c      	beq.n	800b728 <_dtoa_r+0x9f8>
 800b68e:	6871      	ldr	r1, [r6, #4]
 800b690:	4620      	mov	r0, r4
 800b692:	f000 fa64 	bl	800bb5e <_Balloc>
 800b696:	6932      	ldr	r2, [r6, #16]
 800b698:	3202      	adds	r2, #2
 800b69a:	4605      	mov	r5, r0
 800b69c:	0092      	lsls	r2, r2, #2
 800b69e:	f106 010c 	add.w	r1, r6, #12
 800b6a2:	300c      	adds	r0, #12
 800b6a4:	f000 fa50 	bl	800bb48 <memcpy>
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f000 fc17 	bl	800bee0 <__lshift>
 800b6b2:	9b00      	ldr	r3, [sp, #0]
 800b6b4:	f8cd b014 	str.w	fp, [sp, #20]
 800b6b8:	f003 0301 	and.w	r3, r3, #1
 800b6bc:	46b1      	mov	r9, r6
 800b6be:	9307      	str	r3, [sp, #28]
 800b6c0:	4606      	mov	r6, r0
 800b6c2:	4639      	mov	r1, r7
 800b6c4:	9804      	ldr	r0, [sp, #16]
 800b6c6:	f7ff faa7 	bl	800ac18 <quorem>
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	4605      	mov	r5, r0
 800b6ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b6d2:	9804      	ldr	r0, [sp, #16]
 800b6d4:	f000 fc58 	bl	800bf88 <__mcmp>
 800b6d8:	4632      	mov	r2, r6
 800b6da:	9000      	str	r0, [sp, #0]
 800b6dc:	4639      	mov	r1, r7
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f000 fc6c 	bl	800bfbc <__mdiff>
 800b6e4:	68c3      	ldr	r3, [r0, #12]
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	bb03      	cbnz	r3, 800b72c <_dtoa_r+0x9fc>
 800b6ea:	4601      	mov	r1, r0
 800b6ec:	9008      	str	r0, [sp, #32]
 800b6ee:	9804      	ldr	r0, [sp, #16]
 800b6f0:	f000 fc4a 	bl	800bf88 <__mcmp>
 800b6f4:	9a08      	ldr	r2, [sp, #32]
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	9308      	str	r3, [sp, #32]
 800b6fe:	f000 fa62 	bl	800bbc6 <_Bfree>
 800b702:	9b08      	ldr	r3, [sp, #32]
 800b704:	b9a3      	cbnz	r3, 800b730 <_dtoa_r+0xa00>
 800b706:	9a06      	ldr	r2, [sp, #24]
 800b708:	b992      	cbnz	r2, 800b730 <_dtoa_r+0xa00>
 800b70a:	9a07      	ldr	r2, [sp, #28]
 800b70c:	b982      	cbnz	r2, 800b730 <_dtoa_r+0xa00>
 800b70e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b712:	d029      	beq.n	800b768 <_dtoa_r+0xa38>
 800b714:	9b00      	ldr	r3, [sp, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	dd01      	ble.n	800b71e <_dtoa_r+0x9ee>
 800b71a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b71e:	9b05      	ldr	r3, [sp, #20]
 800b720:	1c5d      	adds	r5, r3, #1
 800b722:	f883 8000 	strb.w	r8, [r3]
 800b726:	e782      	b.n	800b62e <_dtoa_r+0x8fe>
 800b728:	4630      	mov	r0, r6
 800b72a:	e7c2      	b.n	800b6b2 <_dtoa_r+0x982>
 800b72c:	2301      	movs	r3, #1
 800b72e:	e7e3      	b.n	800b6f8 <_dtoa_r+0x9c8>
 800b730:	9a00      	ldr	r2, [sp, #0]
 800b732:	2a00      	cmp	r2, #0
 800b734:	db04      	blt.n	800b740 <_dtoa_r+0xa10>
 800b736:	d125      	bne.n	800b784 <_dtoa_r+0xa54>
 800b738:	9a06      	ldr	r2, [sp, #24]
 800b73a:	bb1a      	cbnz	r2, 800b784 <_dtoa_r+0xa54>
 800b73c:	9a07      	ldr	r2, [sp, #28]
 800b73e:	bb0a      	cbnz	r2, 800b784 <_dtoa_r+0xa54>
 800b740:	2b00      	cmp	r3, #0
 800b742:	ddec      	ble.n	800b71e <_dtoa_r+0x9ee>
 800b744:	2201      	movs	r2, #1
 800b746:	9904      	ldr	r1, [sp, #16]
 800b748:	4620      	mov	r0, r4
 800b74a:	f000 fbc9 	bl	800bee0 <__lshift>
 800b74e:	4639      	mov	r1, r7
 800b750:	9004      	str	r0, [sp, #16]
 800b752:	f000 fc19 	bl	800bf88 <__mcmp>
 800b756:	2800      	cmp	r0, #0
 800b758:	dc03      	bgt.n	800b762 <_dtoa_r+0xa32>
 800b75a:	d1e0      	bne.n	800b71e <_dtoa_r+0x9ee>
 800b75c:	f018 0f01 	tst.w	r8, #1
 800b760:	d0dd      	beq.n	800b71e <_dtoa_r+0x9ee>
 800b762:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b766:	d1d8      	bne.n	800b71a <_dtoa_r+0x9ea>
 800b768:	9b05      	ldr	r3, [sp, #20]
 800b76a:	9a05      	ldr	r2, [sp, #20]
 800b76c:	1c5d      	adds	r5, r3, #1
 800b76e:	2339      	movs	r3, #57	; 0x39
 800b770:	7013      	strb	r3, [r2, #0]
 800b772:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b776:	2b39      	cmp	r3, #57	; 0x39
 800b778:	f105 32ff 	add.w	r2, r5, #4294967295
 800b77c:	d04f      	beq.n	800b81e <_dtoa_r+0xaee>
 800b77e:	3301      	adds	r3, #1
 800b780:	7013      	strb	r3, [r2, #0]
 800b782:	e754      	b.n	800b62e <_dtoa_r+0x8fe>
 800b784:	9a05      	ldr	r2, [sp, #20]
 800b786:	2b00      	cmp	r3, #0
 800b788:	f102 0501 	add.w	r5, r2, #1
 800b78c:	dd06      	ble.n	800b79c <_dtoa_r+0xa6c>
 800b78e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b792:	d0e9      	beq.n	800b768 <_dtoa_r+0xa38>
 800b794:	f108 0801 	add.w	r8, r8, #1
 800b798:	9b05      	ldr	r3, [sp, #20]
 800b79a:	e7c2      	b.n	800b722 <_dtoa_r+0x9f2>
 800b79c:	9a02      	ldr	r2, [sp, #8]
 800b79e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b7a2:	eba5 030b 	sub.w	r3, r5, fp
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d021      	beq.n	800b7ee <_dtoa_r+0xabe>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	220a      	movs	r2, #10
 800b7ae:	9904      	ldr	r1, [sp, #16]
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f000 fa1f 	bl	800bbf4 <__multadd>
 800b7b6:	45b1      	cmp	r9, r6
 800b7b8:	9004      	str	r0, [sp, #16]
 800b7ba:	f04f 0300 	mov.w	r3, #0
 800b7be:	f04f 020a 	mov.w	r2, #10
 800b7c2:	4649      	mov	r1, r9
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	d105      	bne.n	800b7d4 <_dtoa_r+0xaa4>
 800b7c8:	f000 fa14 	bl	800bbf4 <__multadd>
 800b7cc:	4681      	mov	r9, r0
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	9505      	str	r5, [sp, #20]
 800b7d2:	e776      	b.n	800b6c2 <_dtoa_r+0x992>
 800b7d4:	f000 fa0e 	bl	800bbf4 <__multadd>
 800b7d8:	4631      	mov	r1, r6
 800b7da:	4681      	mov	r9, r0
 800b7dc:	2300      	movs	r3, #0
 800b7de:	220a      	movs	r2, #10
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f000 fa07 	bl	800bbf4 <__multadd>
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	e7f2      	b.n	800b7d0 <_dtoa_r+0xaa0>
 800b7ea:	f04f 0900 	mov.w	r9, #0
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	9904      	ldr	r1, [sp, #16]
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	f000 fb74 	bl	800bee0 <__lshift>
 800b7f8:	4639      	mov	r1, r7
 800b7fa:	9004      	str	r0, [sp, #16]
 800b7fc:	f000 fbc4 	bl	800bf88 <__mcmp>
 800b800:	2800      	cmp	r0, #0
 800b802:	dcb6      	bgt.n	800b772 <_dtoa_r+0xa42>
 800b804:	d102      	bne.n	800b80c <_dtoa_r+0xadc>
 800b806:	f018 0f01 	tst.w	r8, #1
 800b80a:	d1b2      	bne.n	800b772 <_dtoa_r+0xa42>
 800b80c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b810:	2b30      	cmp	r3, #48	; 0x30
 800b812:	f105 32ff 	add.w	r2, r5, #4294967295
 800b816:	f47f af0a 	bne.w	800b62e <_dtoa_r+0x8fe>
 800b81a:	4615      	mov	r5, r2
 800b81c:	e7f6      	b.n	800b80c <_dtoa_r+0xadc>
 800b81e:	4593      	cmp	fp, r2
 800b820:	d105      	bne.n	800b82e <_dtoa_r+0xafe>
 800b822:	2331      	movs	r3, #49	; 0x31
 800b824:	f10a 0a01 	add.w	sl, sl, #1
 800b828:	f88b 3000 	strb.w	r3, [fp]
 800b82c:	e6ff      	b.n	800b62e <_dtoa_r+0x8fe>
 800b82e:	4615      	mov	r5, r2
 800b830:	e79f      	b.n	800b772 <_dtoa_r+0xa42>
 800b832:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b898 <_dtoa_r+0xb68>
 800b836:	e007      	b.n	800b848 <_dtoa_r+0xb18>
 800b838:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b83a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b89c <_dtoa_r+0xb6c>
 800b83e:	b11b      	cbz	r3, 800b848 <_dtoa_r+0xb18>
 800b840:	f10b 0308 	add.w	r3, fp, #8
 800b844:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b846:	6013      	str	r3, [r2, #0]
 800b848:	4658      	mov	r0, fp
 800b84a:	b017      	add	sp, #92	; 0x5c
 800b84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b850:	9b06      	ldr	r3, [sp, #24]
 800b852:	2b01      	cmp	r3, #1
 800b854:	f77f ae35 	ble.w	800b4c2 <_dtoa_r+0x792>
 800b858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b85a:	9307      	str	r3, [sp, #28]
 800b85c:	e649      	b.n	800b4f2 <_dtoa_r+0x7c2>
 800b85e:	9b02      	ldr	r3, [sp, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	dc03      	bgt.n	800b86c <_dtoa_r+0xb3c>
 800b864:	9b06      	ldr	r3, [sp, #24]
 800b866:	2b02      	cmp	r3, #2
 800b868:	f73f aecc 	bgt.w	800b604 <_dtoa_r+0x8d4>
 800b86c:	465d      	mov	r5, fp
 800b86e:	4639      	mov	r1, r7
 800b870:	9804      	ldr	r0, [sp, #16]
 800b872:	f7ff f9d1 	bl	800ac18 <quorem>
 800b876:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b87a:	f805 8b01 	strb.w	r8, [r5], #1
 800b87e:	9a02      	ldr	r2, [sp, #8]
 800b880:	eba5 030b 	sub.w	r3, r5, fp
 800b884:	429a      	cmp	r2, r3
 800b886:	ddb0      	ble.n	800b7ea <_dtoa_r+0xaba>
 800b888:	2300      	movs	r3, #0
 800b88a:	220a      	movs	r2, #10
 800b88c:	9904      	ldr	r1, [sp, #16]
 800b88e:	4620      	mov	r0, r4
 800b890:	f000 f9b0 	bl	800bbf4 <__multadd>
 800b894:	9004      	str	r0, [sp, #16]
 800b896:	e7ea      	b.n	800b86e <_dtoa_r+0xb3e>
 800b898:	0800d2b4 	.word	0x0800d2b4
 800b89c:	0800d2d8 	.word	0x0800d2d8

0800b8a0 <print_e>:
 800b8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	ec43 2b10 	vmov	d0, r2, r3
 800b8a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b8aa:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800b8ae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b8b0:	ab04      	add	r3, sp, #16
 800b8b2:	9301      	str	r3, [sp, #4]
 800b8b4:	ab03      	add	r3, sp, #12
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	460f      	mov	r7, r1
 800b8ba:	ab05      	add	r3, sp, #20
 800b8bc:	2102      	movs	r1, #2
 800b8be:	1c62      	adds	r2, r4, #1
 800b8c0:	f7ff fa36 	bl	800ad30 <_dtoa_r>
 800b8c4:	4601      	mov	r1, r0
 800b8c6:	9805      	ldr	r0, [sp, #20]
 800b8c8:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8cc:	4298      	cmp	r0, r3
 800b8ce:	d104      	bne.n	800b8da <print_e+0x3a>
 800b8d0:	4638      	mov	r0, r7
 800b8d2:	f000 fe7b 	bl	800c5cc <strcpy>
 800b8d6:	b007      	add	sp, #28
 800b8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8da:	780b      	ldrb	r3, [r1, #0]
 800b8dc:	703b      	strb	r3, [r7, #0]
 800b8de:	2d00      	cmp	r5, #0
 800b8e0:	d143      	bne.n	800b96a <print_e+0xca>
 800b8e2:	2c00      	cmp	r4, #0
 800b8e4:	d141      	bne.n	800b96a <print_e+0xca>
 800b8e6:	1c7b      	adds	r3, r7, #1
 800b8e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b8ec:	b10a      	cbz	r2, 800b8f2 <print_e+0x52>
 800b8ee:	2c00      	cmp	r4, #0
 800b8f0:	dc3f      	bgt.n	800b972 <print_e+0xd2>
 800b8f2:	2e67      	cmp	r6, #103	; 0x67
 800b8f4:	d044      	beq.n	800b980 <print_e+0xe0>
 800b8f6:	2e47      	cmp	r6, #71	; 0x47
 800b8f8:	d044      	beq.n	800b984 <print_e+0xe4>
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	191d      	adds	r5, r3, r4
 800b8fe:	2730      	movs	r7, #48	; 0x30
 800b900:	1aa9      	subs	r1, r5, r2
 800b902:	2900      	cmp	r1, #0
 800b904:	dc39      	bgt.n	800b97a <print_e+0xda>
 800b906:	2c00      	cmp	r4, #0
 800b908:	bfa8      	it	ge
 800b90a:	191b      	addge	r3, r3, r4
 800b90c:	1e41      	subs	r1, r0, #1
 800b90e:	2900      	cmp	r1, #0
 800b910:	bfb8      	it	lt
 800b912:	f1c0 0001 	rsblt	r0, r0, #1
 800b916:	9105      	str	r1, [sp, #20]
 800b918:	bfb8      	it	lt
 800b91a:	9005      	strlt	r0, [sp, #20]
 800b91c:	461a      	mov	r2, r3
 800b91e:	9805      	ldr	r0, [sp, #20]
 800b920:	f802 6b02 	strb.w	r6, [r2], #2
 800b924:	bfb5      	itete	lt
 800b926:	212d      	movlt	r1, #45	; 0x2d
 800b928:	212b      	movge	r1, #43	; 0x2b
 800b92a:	7059      	strblt	r1, [r3, #1]
 800b92c:	7059      	strbge	r1, [r3, #1]
 800b92e:	2863      	cmp	r0, #99	; 0x63
 800b930:	dd0b      	ble.n	800b94a <print_e+0xaa>
 800b932:	2164      	movs	r1, #100	; 0x64
 800b934:	fb90 f1f1 	sdiv	r1, r0, r1
 800b938:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800b93c:	1cda      	adds	r2, r3, #3
 800b93e:	709c      	strb	r4, [r3, #2]
 800b940:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b944:	fb03 0101 	mla	r1, r3, r1, r0
 800b948:	9105      	str	r1, [sp, #20]
 800b94a:	9905      	ldr	r1, [sp, #20]
 800b94c:	230a      	movs	r3, #10
 800b94e:	fb91 f3f3 	sdiv	r3, r1, r3
 800b952:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b956:	7010      	strb	r0, [r2, #0]
 800b958:	f06f 0009 	mvn.w	r0, #9
 800b95c:	fb00 1303 	mla	r3, r0, r3, r1
 800b960:	3330      	adds	r3, #48	; 0x30
 800b962:	7053      	strb	r3, [r2, #1]
 800b964:	2300      	movs	r3, #0
 800b966:	7093      	strb	r3, [r2, #2]
 800b968:	e7b5      	b.n	800b8d6 <print_e+0x36>
 800b96a:	222e      	movs	r2, #46	; 0x2e
 800b96c:	1cbb      	adds	r3, r7, #2
 800b96e:	707a      	strb	r2, [r7, #1]
 800b970:	e7ba      	b.n	800b8e8 <print_e+0x48>
 800b972:	f803 2b01 	strb.w	r2, [r3], #1
 800b976:	3c01      	subs	r4, #1
 800b978:	e7b6      	b.n	800b8e8 <print_e+0x48>
 800b97a:	f802 7b01 	strb.w	r7, [r2], #1
 800b97e:	e7bf      	b.n	800b900 <print_e+0x60>
 800b980:	2665      	movs	r6, #101	; 0x65
 800b982:	e7c3      	b.n	800b90c <print_e+0x6c>
 800b984:	2645      	movs	r6, #69	; 0x45
 800b986:	e7c1      	b.n	800b90c <print_e+0x6c>

0800b988 <_gcvt>:
 800b988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b98c:	ec55 4b10 	vmov	r4, r5, d0
 800b990:	b088      	sub	sp, #32
 800b992:	4681      	mov	r9, r0
 800b994:	460f      	mov	r7, r1
 800b996:	4616      	mov	r6, r2
 800b998:	469a      	mov	sl, r3
 800b99a:	2200      	movs	r2, #0
 800b99c:	2300      	movs	r3, #0
 800b99e:	ee10 0a10 	vmov	r0, s0
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800b9a8:	f7f5 f8a0 	bl	8000aec <__aeabi_dcmplt>
 800b9ac:	b110      	cbz	r0, 800b9b4 <_gcvt+0x2c>
 800b9ae:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b9b2:	461d      	mov	r5, r3
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	f7f5 f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9c0:	b138      	cbz	r0, 800b9d2 <_gcvt+0x4a>
 800b9c2:	2330      	movs	r3, #48	; 0x30
 800b9c4:	7033      	strb	r3, [r6, #0]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	7073      	strb	r3, [r6, #1]
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	b008      	add	sp, #32
 800b9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d2:	a350      	add	r3, pc, #320	; (adr r3, 800bb14 <_gcvt+0x18c>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	4620      	mov	r0, r4
 800b9da:	4629      	mov	r1, r5
 800b9dc:	f7f5 f890 	bl	8000b00 <__aeabi_dcmple>
 800b9e0:	b150      	cbz	r0, 800b9f8 <_gcvt+0x70>
 800b9e2:	3f01      	subs	r7, #1
 800b9e4:	e9cd a801 	strd	sl, r8, [sp, #4]
 800b9e8:	9700      	str	r7, [sp, #0]
 800b9ea:	4622      	mov	r2, r4
 800b9ec:	462b      	mov	r3, r5
 800b9ee:	4631      	mov	r1, r6
 800b9f0:	4648      	mov	r0, r9
 800b9f2:	f7ff ff55 	bl	800b8a0 <print_e>
 800b9f6:	e7e8      	b.n	800b9ca <_gcvt+0x42>
 800b9f8:	4638      	mov	r0, r7
 800b9fa:	f000 fb8b 	bl	800c114 <_mprec_log10>
 800b9fe:	4622      	mov	r2, r4
 800ba00:	462b      	mov	r3, r5
 800ba02:	ec51 0b10 	vmov	r0, r1, d0
 800ba06:	f7f5 f87b 	bl	8000b00 <__aeabi_dcmple>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d1e9      	bne.n	800b9e2 <_gcvt+0x5a>
 800ba0e:	2200      	movs	r2, #0
 800ba10:	4b3f      	ldr	r3, [pc, #252]	; (800bb10 <_gcvt+0x188>)
 800ba12:	4620      	mov	r0, r4
 800ba14:	4629      	mov	r1, r5
 800ba16:	f7f5 f869 	bl	8000aec <__aeabi_dcmplt>
 800ba1a:	aa07      	add	r2, sp, #28
 800ba1c:	ab06      	add	r3, sp, #24
 800ba1e:	e9cd 3200 	strd	r3, r2, [sp]
 800ba22:	ab05      	add	r3, sp, #20
 800ba24:	463a      	mov	r2, r7
 800ba26:	b360      	cbz	r0, 800ba82 <_gcvt+0xfa>
 800ba28:	2103      	movs	r1, #3
 800ba2a:	ec45 4b10 	vmov	d0, r4, r5
 800ba2e:	4648      	mov	r0, r9
 800ba30:	f7ff f97e 	bl	800ad30 <_dtoa_r>
 800ba34:	9a05      	ldr	r2, [sp, #20]
 800ba36:	f242 730f 	movw	r3, #9999	; 0x270f
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d023      	beq.n	800ba86 <_gcvt+0xfe>
 800ba3e:	4633      	mov	r3, r6
 800ba40:	4437      	add	r7, r6
 800ba42:	4601      	mov	r1, r0
 800ba44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba48:	9d05      	ldr	r5, [sp, #20]
 800ba4a:	1afc      	subs	r4, r7, r3
 800ba4c:	b32a      	cbz	r2, 800ba9a <_gcvt+0x112>
 800ba4e:	2d00      	cmp	r5, #0
 800ba50:	dc1e      	bgt.n	800ba90 <_gcvt+0x108>
 800ba52:	f1b8 0f00 	cmp.w	r8, #0
 800ba56:	d102      	bne.n	800ba5e <_gcvt+0xd6>
 800ba58:	780a      	ldrb	r2, [r1, #0]
 800ba5a:	2a00      	cmp	r2, #0
 800ba5c:	d045      	beq.n	800baea <_gcvt+0x162>
 800ba5e:	429e      	cmp	r6, r3
 800ba60:	bf02      	ittt	eq
 800ba62:	1c73      	addeq	r3, r6, #1
 800ba64:	2230      	moveq	r2, #48	; 0x30
 800ba66:	7032      	strbeq	r2, [r6, #0]
 800ba68:	222e      	movs	r2, #46	; 0x2e
 800ba6a:	701a      	strb	r2, [r3, #0]
 800ba6c:	9a05      	ldr	r2, [sp, #20]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	2000      	movs	r0, #0
 800ba72:	2730      	movs	r7, #48	; 0x30
 800ba74:	2a00      	cmp	r2, #0
 800ba76:	4615      	mov	r5, r2
 800ba78:	db24      	blt.n	800bac4 <_gcvt+0x13c>
 800ba7a:	b100      	cbz	r0, 800ba7e <_gcvt+0xf6>
 800ba7c:	9205      	str	r2, [sp, #20]
 800ba7e:	1e4a      	subs	r2, r1, #1
 800ba80:	e02b      	b.n	800bada <_gcvt+0x152>
 800ba82:	2102      	movs	r1, #2
 800ba84:	e7d1      	b.n	800ba2a <_gcvt+0xa2>
 800ba86:	4601      	mov	r1, r0
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f000 fd9f 	bl	800c5cc <strcpy>
 800ba8e:	e79c      	b.n	800b9ca <_gcvt+0x42>
 800ba90:	3d01      	subs	r5, #1
 800ba92:	f803 2b01 	strb.w	r2, [r3], #1
 800ba96:	9505      	str	r5, [sp, #20]
 800ba98:	e7d3      	b.n	800ba42 <_gcvt+0xba>
 800ba9a:	1b2d      	subs	r5, r5, r4
 800ba9c:	2730      	movs	r7, #48	; 0x30
 800ba9e:	e005      	b.n	800baac <_gcvt+0x124>
 800baa0:	2c00      	cmp	r4, #0
 800baa2:	dd06      	ble.n	800bab2 <_gcvt+0x12a>
 800baa4:	f803 7b01 	strb.w	r7, [r3], #1
 800baa8:	3c01      	subs	r4, #1
 800baaa:	2201      	movs	r2, #1
 800baac:	1928      	adds	r0, r5, r4
 800baae:	2800      	cmp	r0, #0
 800bab0:	dcf6      	bgt.n	800baa0 <_gcvt+0x118>
 800bab2:	2a00      	cmp	r2, #0
 800bab4:	d0cd      	beq.n	800ba52 <_gcvt+0xca>
 800bab6:	9005      	str	r0, [sp, #20]
 800bab8:	e7cb      	b.n	800ba52 <_gcvt+0xca>
 800baba:	f803 7b01 	strb.w	r7, [r3], #1
 800babe:	3c01      	subs	r4, #1
 800bac0:	2001      	movs	r0, #1
 800bac2:	e7d7      	b.n	800ba74 <_gcvt+0xec>
 800bac4:	2c00      	cmp	r4, #0
 800bac6:	f102 0201 	add.w	r2, r2, #1
 800baca:	dcf6      	bgt.n	800baba <_gcvt+0x132>
 800bacc:	2800      	cmp	r0, #0
 800bace:	d0d6      	beq.n	800ba7e <_gcvt+0xf6>
 800bad0:	9505      	str	r5, [sp, #20]
 800bad2:	e7d4      	b.n	800ba7e <_gcvt+0xf6>
 800bad4:	f803 1b01 	strb.w	r1, [r3], #1
 800bad8:	3c01      	subs	r4, #1
 800bada:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800bade:	b109      	cbz	r1, 800bae4 <_gcvt+0x15c>
 800bae0:	2c00      	cmp	r4, #0
 800bae2:	dcf7      	bgt.n	800bad4 <_gcvt+0x14c>
 800bae4:	f1b8 0f00 	cmp.w	r8, #0
 800bae8:	d10b      	bne.n	800bb02 <_gcvt+0x17a>
 800baea:	2200      	movs	r2, #0
 800baec:	701a      	strb	r2, [r3, #0]
 800baee:	e76c      	b.n	800b9ca <_gcvt+0x42>
 800baf0:	f802 5b01 	strb.w	r5, [r2], #1
 800baf4:	1a81      	subs	r1, r0, r2
 800baf6:	2900      	cmp	r1, #0
 800baf8:	dcfa      	bgt.n	800baf0 <_gcvt+0x168>
 800bafa:	2c00      	cmp	r4, #0
 800bafc:	bfa8      	it	ge
 800bafe:	191b      	addge	r3, r3, r4
 800bb00:	e7f3      	b.n	800baea <_gcvt+0x162>
 800bb02:	461a      	mov	r2, r3
 800bb04:	1918      	adds	r0, r3, r4
 800bb06:	2530      	movs	r5, #48	; 0x30
 800bb08:	e7f4      	b.n	800baf4 <_gcvt+0x16c>
 800bb0a:	bf00      	nop
 800bb0c:	f3af 8000 	nop.w
 800bb10:	3ff00000 	.word	0x3ff00000
 800bb14:	eb1c432d 	.word	0xeb1c432d
 800bb18:	3f1a36e2 	.word	0x3f1a36e2

0800bb1c <_localeconv_r>:
 800bb1c:	4b04      	ldr	r3, [pc, #16]	; (800bb30 <_localeconv_r+0x14>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6a18      	ldr	r0, [r3, #32]
 800bb22:	4b04      	ldr	r3, [pc, #16]	; (800bb34 <_localeconv_r+0x18>)
 800bb24:	2800      	cmp	r0, #0
 800bb26:	bf08      	it	eq
 800bb28:	4618      	moveq	r0, r3
 800bb2a:	30f0      	adds	r0, #240	; 0xf0
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	20000094 	.word	0x20000094
 800bb34:	200000f8 	.word	0x200000f8

0800bb38 <malloc>:
 800bb38:	4b02      	ldr	r3, [pc, #8]	; (800bb44 <malloc+0xc>)
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	6818      	ldr	r0, [r3, #0]
 800bb3e:	f000 bb63 	b.w	800c208 <_malloc_r>
 800bb42:	bf00      	nop
 800bb44:	20000094 	.word	0x20000094

0800bb48 <memcpy>:
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	1e43      	subs	r3, r0, #1
 800bb4c:	440a      	add	r2, r1
 800bb4e:	4291      	cmp	r1, r2
 800bb50:	d100      	bne.n	800bb54 <memcpy+0xc>
 800bb52:	bd10      	pop	{r4, pc}
 800bb54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb5c:	e7f7      	b.n	800bb4e <memcpy+0x6>

0800bb5e <_Balloc>:
 800bb5e:	b570      	push	{r4, r5, r6, lr}
 800bb60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bb62:	4604      	mov	r4, r0
 800bb64:	460e      	mov	r6, r1
 800bb66:	b93d      	cbnz	r5, 800bb78 <_Balloc+0x1a>
 800bb68:	2010      	movs	r0, #16
 800bb6a:	f7ff ffe5 	bl	800bb38 <malloc>
 800bb6e:	6260      	str	r0, [r4, #36]	; 0x24
 800bb70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bb74:	6005      	str	r5, [r0, #0]
 800bb76:	60c5      	str	r5, [r0, #12]
 800bb78:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bb7a:	68eb      	ldr	r3, [r5, #12]
 800bb7c:	b183      	cbz	r3, 800bba0 <_Balloc+0x42>
 800bb7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bb86:	b9b8      	cbnz	r0, 800bbb8 <_Balloc+0x5a>
 800bb88:	2101      	movs	r1, #1
 800bb8a:	fa01 f506 	lsl.w	r5, r1, r6
 800bb8e:	1d6a      	adds	r2, r5, #5
 800bb90:	0092      	lsls	r2, r2, #2
 800bb92:	4620      	mov	r0, r4
 800bb94:	f000 fadc 	bl	800c150 <_calloc_r>
 800bb98:	b160      	cbz	r0, 800bbb4 <_Balloc+0x56>
 800bb9a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bb9e:	e00e      	b.n	800bbbe <_Balloc+0x60>
 800bba0:	2221      	movs	r2, #33	; 0x21
 800bba2:	2104      	movs	r1, #4
 800bba4:	4620      	mov	r0, r4
 800bba6:	f000 fad3 	bl	800c150 <_calloc_r>
 800bbaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbac:	60e8      	str	r0, [r5, #12]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d1e4      	bne.n	800bb7e <_Balloc+0x20>
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	bd70      	pop	{r4, r5, r6, pc}
 800bbb8:	6802      	ldr	r2, [r0, #0]
 800bbba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbc4:	e7f7      	b.n	800bbb6 <_Balloc+0x58>

0800bbc6 <_Bfree>:
 800bbc6:	b570      	push	{r4, r5, r6, lr}
 800bbc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bbca:	4606      	mov	r6, r0
 800bbcc:	460d      	mov	r5, r1
 800bbce:	b93c      	cbnz	r4, 800bbe0 <_Bfree+0x1a>
 800bbd0:	2010      	movs	r0, #16
 800bbd2:	f7ff ffb1 	bl	800bb38 <malloc>
 800bbd6:	6270      	str	r0, [r6, #36]	; 0x24
 800bbd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbdc:	6004      	str	r4, [r0, #0]
 800bbde:	60c4      	str	r4, [r0, #12]
 800bbe0:	b13d      	cbz	r5, 800bbf2 <_Bfree+0x2c>
 800bbe2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bbe4:	686a      	ldr	r2, [r5, #4]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbec:	6029      	str	r1, [r5, #0]
 800bbee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bbf2:	bd70      	pop	{r4, r5, r6, pc}

0800bbf4 <__multadd>:
 800bbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf8:	690d      	ldr	r5, [r1, #16]
 800bbfa:	461f      	mov	r7, r3
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	460c      	mov	r4, r1
 800bc00:	f101 0c14 	add.w	ip, r1, #20
 800bc04:	2300      	movs	r3, #0
 800bc06:	f8dc 0000 	ldr.w	r0, [ip]
 800bc0a:	b281      	uxth	r1, r0
 800bc0c:	fb02 7101 	mla	r1, r2, r1, r7
 800bc10:	0c0f      	lsrs	r7, r1, #16
 800bc12:	0c00      	lsrs	r0, r0, #16
 800bc14:	fb02 7000 	mla	r0, r2, r0, r7
 800bc18:	b289      	uxth	r1, r1
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bc20:	429d      	cmp	r5, r3
 800bc22:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bc26:	f84c 1b04 	str.w	r1, [ip], #4
 800bc2a:	dcec      	bgt.n	800bc06 <__multadd+0x12>
 800bc2c:	b1d7      	cbz	r7, 800bc64 <__multadd+0x70>
 800bc2e:	68a3      	ldr	r3, [r4, #8]
 800bc30:	42ab      	cmp	r3, r5
 800bc32:	dc12      	bgt.n	800bc5a <__multadd+0x66>
 800bc34:	6861      	ldr	r1, [r4, #4]
 800bc36:	4630      	mov	r0, r6
 800bc38:	3101      	adds	r1, #1
 800bc3a:	f7ff ff90 	bl	800bb5e <_Balloc>
 800bc3e:	6922      	ldr	r2, [r4, #16]
 800bc40:	3202      	adds	r2, #2
 800bc42:	f104 010c 	add.w	r1, r4, #12
 800bc46:	4680      	mov	r8, r0
 800bc48:	0092      	lsls	r2, r2, #2
 800bc4a:	300c      	adds	r0, #12
 800bc4c:	f7ff ff7c 	bl	800bb48 <memcpy>
 800bc50:	4621      	mov	r1, r4
 800bc52:	4630      	mov	r0, r6
 800bc54:	f7ff ffb7 	bl	800bbc6 <_Bfree>
 800bc58:	4644      	mov	r4, r8
 800bc5a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc5e:	3501      	adds	r5, #1
 800bc60:	615f      	str	r7, [r3, #20]
 800bc62:	6125      	str	r5, [r4, #16]
 800bc64:	4620      	mov	r0, r4
 800bc66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bc6a <__hi0bits>:
 800bc6a:	0c02      	lsrs	r2, r0, #16
 800bc6c:	0412      	lsls	r2, r2, #16
 800bc6e:	4603      	mov	r3, r0
 800bc70:	b9b2      	cbnz	r2, 800bca0 <__hi0bits+0x36>
 800bc72:	0403      	lsls	r3, r0, #16
 800bc74:	2010      	movs	r0, #16
 800bc76:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bc7a:	bf04      	itt	eq
 800bc7c:	021b      	lsleq	r3, r3, #8
 800bc7e:	3008      	addeq	r0, #8
 800bc80:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bc84:	bf04      	itt	eq
 800bc86:	011b      	lsleq	r3, r3, #4
 800bc88:	3004      	addeq	r0, #4
 800bc8a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bc8e:	bf04      	itt	eq
 800bc90:	009b      	lsleq	r3, r3, #2
 800bc92:	3002      	addeq	r0, #2
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	db06      	blt.n	800bca6 <__hi0bits+0x3c>
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	d503      	bpl.n	800bca4 <__hi0bits+0x3a>
 800bc9c:	3001      	adds	r0, #1
 800bc9e:	4770      	bx	lr
 800bca0:	2000      	movs	r0, #0
 800bca2:	e7e8      	b.n	800bc76 <__hi0bits+0xc>
 800bca4:	2020      	movs	r0, #32
 800bca6:	4770      	bx	lr

0800bca8 <__lo0bits>:
 800bca8:	6803      	ldr	r3, [r0, #0]
 800bcaa:	f013 0207 	ands.w	r2, r3, #7
 800bcae:	4601      	mov	r1, r0
 800bcb0:	d00b      	beq.n	800bcca <__lo0bits+0x22>
 800bcb2:	07da      	lsls	r2, r3, #31
 800bcb4:	d423      	bmi.n	800bcfe <__lo0bits+0x56>
 800bcb6:	0798      	lsls	r0, r3, #30
 800bcb8:	bf49      	itett	mi
 800bcba:	085b      	lsrmi	r3, r3, #1
 800bcbc:	089b      	lsrpl	r3, r3, #2
 800bcbe:	2001      	movmi	r0, #1
 800bcc0:	600b      	strmi	r3, [r1, #0]
 800bcc2:	bf5c      	itt	pl
 800bcc4:	600b      	strpl	r3, [r1, #0]
 800bcc6:	2002      	movpl	r0, #2
 800bcc8:	4770      	bx	lr
 800bcca:	b298      	uxth	r0, r3
 800bccc:	b9a8      	cbnz	r0, 800bcfa <__lo0bits+0x52>
 800bcce:	0c1b      	lsrs	r3, r3, #16
 800bcd0:	2010      	movs	r0, #16
 800bcd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bcd6:	bf04      	itt	eq
 800bcd8:	0a1b      	lsreq	r3, r3, #8
 800bcda:	3008      	addeq	r0, #8
 800bcdc:	071a      	lsls	r2, r3, #28
 800bcde:	bf04      	itt	eq
 800bce0:	091b      	lsreq	r3, r3, #4
 800bce2:	3004      	addeq	r0, #4
 800bce4:	079a      	lsls	r2, r3, #30
 800bce6:	bf04      	itt	eq
 800bce8:	089b      	lsreq	r3, r3, #2
 800bcea:	3002      	addeq	r0, #2
 800bcec:	07da      	lsls	r2, r3, #31
 800bcee:	d402      	bmi.n	800bcf6 <__lo0bits+0x4e>
 800bcf0:	085b      	lsrs	r3, r3, #1
 800bcf2:	d006      	beq.n	800bd02 <__lo0bits+0x5a>
 800bcf4:	3001      	adds	r0, #1
 800bcf6:	600b      	str	r3, [r1, #0]
 800bcf8:	4770      	bx	lr
 800bcfa:	4610      	mov	r0, r2
 800bcfc:	e7e9      	b.n	800bcd2 <__lo0bits+0x2a>
 800bcfe:	2000      	movs	r0, #0
 800bd00:	4770      	bx	lr
 800bd02:	2020      	movs	r0, #32
 800bd04:	4770      	bx	lr

0800bd06 <__i2b>:
 800bd06:	b510      	push	{r4, lr}
 800bd08:	460c      	mov	r4, r1
 800bd0a:	2101      	movs	r1, #1
 800bd0c:	f7ff ff27 	bl	800bb5e <_Balloc>
 800bd10:	2201      	movs	r2, #1
 800bd12:	6144      	str	r4, [r0, #20]
 800bd14:	6102      	str	r2, [r0, #16]
 800bd16:	bd10      	pop	{r4, pc}

0800bd18 <__multiply>:
 800bd18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	4614      	mov	r4, r2
 800bd1e:	690a      	ldr	r2, [r1, #16]
 800bd20:	6923      	ldr	r3, [r4, #16]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	bfb8      	it	lt
 800bd26:	460b      	movlt	r3, r1
 800bd28:	4688      	mov	r8, r1
 800bd2a:	bfbc      	itt	lt
 800bd2c:	46a0      	movlt	r8, r4
 800bd2e:	461c      	movlt	r4, r3
 800bd30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bd38:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd40:	eb07 0609 	add.w	r6, r7, r9
 800bd44:	42b3      	cmp	r3, r6
 800bd46:	bfb8      	it	lt
 800bd48:	3101      	addlt	r1, #1
 800bd4a:	f7ff ff08 	bl	800bb5e <_Balloc>
 800bd4e:	f100 0514 	add.w	r5, r0, #20
 800bd52:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bd56:	462b      	mov	r3, r5
 800bd58:	2200      	movs	r2, #0
 800bd5a:	4573      	cmp	r3, lr
 800bd5c:	d316      	bcc.n	800bd8c <__multiply+0x74>
 800bd5e:	f104 0214 	add.w	r2, r4, #20
 800bd62:	f108 0114 	add.w	r1, r8, #20
 800bd66:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bd6a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	9b00      	ldr	r3, [sp, #0]
 800bd72:	9201      	str	r2, [sp, #4]
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d80c      	bhi.n	800bd92 <__multiply+0x7a>
 800bd78:	2e00      	cmp	r6, #0
 800bd7a:	dd03      	ble.n	800bd84 <__multiply+0x6c>
 800bd7c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d05d      	beq.n	800be40 <__multiply+0x128>
 800bd84:	6106      	str	r6, [r0, #16]
 800bd86:	b003      	add	sp, #12
 800bd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8c:	f843 2b04 	str.w	r2, [r3], #4
 800bd90:	e7e3      	b.n	800bd5a <__multiply+0x42>
 800bd92:	f8b2 b000 	ldrh.w	fp, [r2]
 800bd96:	f1bb 0f00 	cmp.w	fp, #0
 800bd9a:	d023      	beq.n	800bde4 <__multiply+0xcc>
 800bd9c:	4689      	mov	r9, r1
 800bd9e:	46ac      	mov	ip, r5
 800bda0:	f04f 0800 	mov.w	r8, #0
 800bda4:	f859 4b04 	ldr.w	r4, [r9], #4
 800bda8:	f8dc a000 	ldr.w	sl, [ip]
 800bdac:	b2a3      	uxth	r3, r4
 800bdae:	fa1f fa8a 	uxth.w	sl, sl
 800bdb2:	fb0b a303 	mla	r3, fp, r3, sl
 800bdb6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bdba:	f8dc 4000 	ldr.w	r4, [ip]
 800bdbe:	4443      	add	r3, r8
 800bdc0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bdc4:	fb0b 840a 	mla	r4, fp, sl, r8
 800bdc8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bdcc:	46e2      	mov	sl, ip
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bdd4:	454f      	cmp	r7, r9
 800bdd6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bdda:	f84a 3b04 	str.w	r3, [sl], #4
 800bdde:	d82b      	bhi.n	800be38 <__multiply+0x120>
 800bde0:	f8cc 8004 	str.w	r8, [ip, #4]
 800bde4:	9b01      	ldr	r3, [sp, #4]
 800bde6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bdea:	3204      	adds	r2, #4
 800bdec:	f1ba 0f00 	cmp.w	sl, #0
 800bdf0:	d020      	beq.n	800be34 <__multiply+0x11c>
 800bdf2:	682b      	ldr	r3, [r5, #0]
 800bdf4:	4689      	mov	r9, r1
 800bdf6:	46a8      	mov	r8, r5
 800bdf8:	f04f 0b00 	mov.w	fp, #0
 800bdfc:	f8b9 c000 	ldrh.w	ip, [r9]
 800be00:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800be04:	fb0a 440c 	mla	r4, sl, ip, r4
 800be08:	445c      	add	r4, fp
 800be0a:	46c4      	mov	ip, r8
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800be12:	f84c 3b04 	str.w	r3, [ip], #4
 800be16:	f859 3b04 	ldr.w	r3, [r9], #4
 800be1a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800be1e:	0c1b      	lsrs	r3, r3, #16
 800be20:	fb0a b303 	mla	r3, sl, r3, fp
 800be24:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800be28:	454f      	cmp	r7, r9
 800be2a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800be2e:	d805      	bhi.n	800be3c <__multiply+0x124>
 800be30:	f8c8 3004 	str.w	r3, [r8, #4]
 800be34:	3504      	adds	r5, #4
 800be36:	e79b      	b.n	800bd70 <__multiply+0x58>
 800be38:	46d4      	mov	ip, sl
 800be3a:	e7b3      	b.n	800bda4 <__multiply+0x8c>
 800be3c:	46e0      	mov	r8, ip
 800be3e:	e7dd      	b.n	800bdfc <__multiply+0xe4>
 800be40:	3e01      	subs	r6, #1
 800be42:	e799      	b.n	800bd78 <__multiply+0x60>

0800be44 <__pow5mult>:
 800be44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be48:	4615      	mov	r5, r2
 800be4a:	f012 0203 	ands.w	r2, r2, #3
 800be4e:	4606      	mov	r6, r0
 800be50:	460f      	mov	r7, r1
 800be52:	d007      	beq.n	800be64 <__pow5mult+0x20>
 800be54:	3a01      	subs	r2, #1
 800be56:	4c21      	ldr	r4, [pc, #132]	; (800bedc <__pow5mult+0x98>)
 800be58:	2300      	movs	r3, #0
 800be5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be5e:	f7ff fec9 	bl	800bbf4 <__multadd>
 800be62:	4607      	mov	r7, r0
 800be64:	10ad      	asrs	r5, r5, #2
 800be66:	d035      	beq.n	800bed4 <__pow5mult+0x90>
 800be68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be6a:	b93c      	cbnz	r4, 800be7c <__pow5mult+0x38>
 800be6c:	2010      	movs	r0, #16
 800be6e:	f7ff fe63 	bl	800bb38 <malloc>
 800be72:	6270      	str	r0, [r6, #36]	; 0x24
 800be74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be78:	6004      	str	r4, [r0, #0]
 800be7a:	60c4      	str	r4, [r0, #12]
 800be7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be84:	b94c      	cbnz	r4, 800be9a <__pow5mult+0x56>
 800be86:	f240 2171 	movw	r1, #625	; 0x271
 800be8a:	4630      	mov	r0, r6
 800be8c:	f7ff ff3b 	bl	800bd06 <__i2b>
 800be90:	2300      	movs	r3, #0
 800be92:	f8c8 0008 	str.w	r0, [r8, #8]
 800be96:	4604      	mov	r4, r0
 800be98:	6003      	str	r3, [r0, #0]
 800be9a:	f04f 0800 	mov.w	r8, #0
 800be9e:	07eb      	lsls	r3, r5, #31
 800bea0:	d50a      	bpl.n	800beb8 <__pow5mult+0x74>
 800bea2:	4639      	mov	r1, r7
 800bea4:	4622      	mov	r2, r4
 800bea6:	4630      	mov	r0, r6
 800bea8:	f7ff ff36 	bl	800bd18 <__multiply>
 800beac:	4639      	mov	r1, r7
 800beae:	4681      	mov	r9, r0
 800beb0:	4630      	mov	r0, r6
 800beb2:	f7ff fe88 	bl	800bbc6 <_Bfree>
 800beb6:	464f      	mov	r7, r9
 800beb8:	106d      	asrs	r5, r5, #1
 800beba:	d00b      	beq.n	800bed4 <__pow5mult+0x90>
 800bebc:	6820      	ldr	r0, [r4, #0]
 800bebe:	b938      	cbnz	r0, 800bed0 <__pow5mult+0x8c>
 800bec0:	4622      	mov	r2, r4
 800bec2:	4621      	mov	r1, r4
 800bec4:	4630      	mov	r0, r6
 800bec6:	f7ff ff27 	bl	800bd18 <__multiply>
 800beca:	6020      	str	r0, [r4, #0]
 800becc:	f8c0 8000 	str.w	r8, [r0]
 800bed0:	4604      	mov	r4, r0
 800bed2:	e7e4      	b.n	800be9e <__pow5mult+0x5a>
 800bed4:	4638      	mov	r0, r7
 800bed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beda:	bf00      	nop
 800bedc:	0800d3d8 	.word	0x0800d3d8

0800bee0 <__lshift>:
 800bee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bee4:	460c      	mov	r4, r1
 800bee6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800beea:	6923      	ldr	r3, [r4, #16]
 800beec:	6849      	ldr	r1, [r1, #4]
 800beee:	eb0a 0903 	add.w	r9, sl, r3
 800bef2:	68a3      	ldr	r3, [r4, #8]
 800bef4:	4607      	mov	r7, r0
 800bef6:	4616      	mov	r6, r2
 800bef8:	f109 0501 	add.w	r5, r9, #1
 800befc:	42ab      	cmp	r3, r5
 800befe:	db32      	blt.n	800bf66 <__lshift+0x86>
 800bf00:	4638      	mov	r0, r7
 800bf02:	f7ff fe2c 	bl	800bb5e <_Balloc>
 800bf06:	2300      	movs	r3, #0
 800bf08:	4680      	mov	r8, r0
 800bf0a:	f100 0114 	add.w	r1, r0, #20
 800bf0e:	461a      	mov	r2, r3
 800bf10:	4553      	cmp	r3, sl
 800bf12:	db2b      	blt.n	800bf6c <__lshift+0x8c>
 800bf14:	6920      	ldr	r0, [r4, #16]
 800bf16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf1a:	f104 0314 	add.w	r3, r4, #20
 800bf1e:	f016 021f 	ands.w	r2, r6, #31
 800bf22:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf26:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf2a:	d025      	beq.n	800bf78 <__lshift+0x98>
 800bf2c:	f1c2 0e20 	rsb	lr, r2, #32
 800bf30:	2000      	movs	r0, #0
 800bf32:	681e      	ldr	r6, [r3, #0]
 800bf34:	468a      	mov	sl, r1
 800bf36:	4096      	lsls	r6, r2
 800bf38:	4330      	orrs	r0, r6
 800bf3a:	f84a 0b04 	str.w	r0, [sl], #4
 800bf3e:	f853 0b04 	ldr.w	r0, [r3], #4
 800bf42:	459c      	cmp	ip, r3
 800bf44:	fa20 f00e 	lsr.w	r0, r0, lr
 800bf48:	d814      	bhi.n	800bf74 <__lshift+0x94>
 800bf4a:	6048      	str	r0, [r1, #4]
 800bf4c:	b108      	cbz	r0, 800bf52 <__lshift+0x72>
 800bf4e:	f109 0502 	add.w	r5, r9, #2
 800bf52:	3d01      	subs	r5, #1
 800bf54:	4638      	mov	r0, r7
 800bf56:	f8c8 5010 	str.w	r5, [r8, #16]
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	f7ff fe33 	bl	800bbc6 <_Bfree>
 800bf60:	4640      	mov	r0, r8
 800bf62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf66:	3101      	adds	r1, #1
 800bf68:	005b      	lsls	r3, r3, #1
 800bf6a:	e7c7      	b.n	800befc <__lshift+0x1c>
 800bf6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bf70:	3301      	adds	r3, #1
 800bf72:	e7cd      	b.n	800bf10 <__lshift+0x30>
 800bf74:	4651      	mov	r1, sl
 800bf76:	e7dc      	b.n	800bf32 <__lshift+0x52>
 800bf78:	3904      	subs	r1, #4
 800bf7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf7e:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf82:	459c      	cmp	ip, r3
 800bf84:	d8f9      	bhi.n	800bf7a <__lshift+0x9a>
 800bf86:	e7e4      	b.n	800bf52 <__lshift+0x72>

0800bf88 <__mcmp>:
 800bf88:	6903      	ldr	r3, [r0, #16]
 800bf8a:	690a      	ldr	r2, [r1, #16]
 800bf8c:	1a9b      	subs	r3, r3, r2
 800bf8e:	b530      	push	{r4, r5, lr}
 800bf90:	d10c      	bne.n	800bfac <__mcmp+0x24>
 800bf92:	0092      	lsls	r2, r2, #2
 800bf94:	3014      	adds	r0, #20
 800bf96:	3114      	adds	r1, #20
 800bf98:	1884      	adds	r4, r0, r2
 800bf9a:	4411      	add	r1, r2
 800bf9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bfa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bfa4:	4295      	cmp	r5, r2
 800bfa6:	d003      	beq.n	800bfb0 <__mcmp+0x28>
 800bfa8:	d305      	bcc.n	800bfb6 <__mcmp+0x2e>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	4618      	mov	r0, r3
 800bfae:	bd30      	pop	{r4, r5, pc}
 800bfb0:	42a0      	cmp	r0, r4
 800bfb2:	d3f3      	bcc.n	800bf9c <__mcmp+0x14>
 800bfb4:	e7fa      	b.n	800bfac <__mcmp+0x24>
 800bfb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfba:	e7f7      	b.n	800bfac <__mcmp+0x24>

0800bfbc <__mdiff>:
 800bfbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc0:	460d      	mov	r5, r1
 800bfc2:	4607      	mov	r7, r0
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	4614      	mov	r4, r2
 800bfca:	f7ff ffdd 	bl	800bf88 <__mcmp>
 800bfce:	1e06      	subs	r6, r0, #0
 800bfd0:	d108      	bne.n	800bfe4 <__mdiff+0x28>
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	f7ff fdc2 	bl	800bb5e <_Balloc>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bfe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe4:	bfa4      	itt	ge
 800bfe6:	4623      	movge	r3, r4
 800bfe8:	462c      	movge	r4, r5
 800bfea:	4638      	mov	r0, r7
 800bfec:	6861      	ldr	r1, [r4, #4]
 800bfee:	bfa6      	itte	ge
 800bff0:	461d      	movge	r5, r3
 800bff2:	2600      	movge	r6, #0
 800bff4:	2601      	movlt	r6, #1
 800bff6:	f7ff fdb2 	bl	800bb5e <_Balloc>
 800bffa:	692b      	ldr	r3, [r5, #16]
 800bffc:	60c6      	str	r6, [r0, #12]
 800bffe:	6926      	ldr	r6, [r4, #16]
 800c000:	f105 0914 	add.w	r9, r5, #20
 800c004:	f104 0214 	add.w	r2, r4, #20
 800c008:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c00c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c010:	f100 0514 	add.w	r5, r0, #20
 800c014:	f04f 0e00 	mov.w	lr, #0
 800c018:	f852 ab04 	ldr.w	sl, [r2], #4
 800c01c:	f859 4b04 	ldr.w	r4, [r9], #4
 800c020:	fa1e f18a 	uxtah	r1, lr, sl
 800c024:	b2a3      	uxth	r3, r4
 800c026:	1ac9      	subs	r1, r1, r3
 800c028:	0c23      	lsrs	r3, r4, #16
 800c02a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c02e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c032:	b289      	uxth	r1, r1
 800c034:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c038:	45c8      	cmp	r8, r9
 800c03a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c03e:	4694      	mov	ip, r2
 800c040:	f845 3b04 	str.w	r3, [r5], #4
 800c044:	d8e8      	bhi.n	800c018 <__mdiff+0x5c>
 800c046:	45bc      	cmp	ip, r7
 800c048:	d304      	bcc.n	800c054 <__mdiff+0x98>
 800c04a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c04e:	b183      	cbz	r3, 800c072 <__mdiff+0xb6>
 800c050:	6106      	str	r6, [r0, #16]
 800c052:	e7c5      	b.n	800bfe0 <__mdiff+0x24>
 800c054:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c058:	fa1e f381 	uxtah	r3, lr, r1
 800c05c:	141a      	asrs	r2, r3, #16
 800c05e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c062:	b29b      	uxth	r3, r3
 800c064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c068:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c06c:	f845 3b04 	str.w	r3, [r5], #4
 800c070:	e7e9      	b.n	800c046 <__mdiff+0x8a>
 800c072:	3e01      	subs	r6, #1
 800c074:	e7e9      	b.n	800c04a <__mdiff+0x8e>

0800c076 <__d2b>:
 800c076:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c07a:	460e      	mov	r6, r1
 800c07c:	2101      	movs	r1, #1
 800c07e:	ec59 8b10 	vmov	r8, r9, d0
 800c082:	4615      	mov	r5, r2
 800c084:	f7ff fd6b 	bl	800bb5e <_Balloc>
 800c088:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c08c:	4607      	mov	r7, r0
 800c08e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c092:	bb34      	cbnz	r4, 800c0e2 <__d2b+0x6c>
 800c094:	9301      	str	r3, [sp, #4]
 800c096:	f1b8 0300 	subs.w	r3, r8, #0
 800c09a:	d027      	beq.n	800c0ec <__d2b+0x76>
 800c09c:	a802      	add	r0, sp, #8
 800c09e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c0a2:	f7ff fe01 	bl	800bca8 <__lo0bits>
 800c0a6:	9900      	ldr	r1, [sp, #0]
 800c0a8:	b1f0      	cbz	r0, 800c0e8 <__d2b+0x72>
 800c0aa:	9a01      	ldr	r2, [sp, #4]
 800c0ac:	f1c0 0320 	rsb	r3, r0, #32
 800c0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b4:	430b      	orrs	r3, r1
 800c0b6:	40c2      	lsrs	r2, r0
 800c0b8:	617b      	str	r3, [r7, #20]
 800c0ba:	9201      	str	r2, [sp, #4]
 800c0bc:	9b01      	ldr	r3, [sp, #4]
 800c0be:	61bb      	str	r3, [r7, #24]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	bf14      	ite	ne
 800c0c4:	2102      	movne	r1, #2
 800c0c6:	2101      	moveq	r1, #1
 800c0c8:	6139      	str	r1, [r7, #16]
 800c0ca:	b1c4      	cbz	r4, 800c0fe <__d2b+0x88>
 800c0cc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c0d0:	4404      	add	r4, r0
 800c0d2:	6034      	str	r4, [r6, #0]
 800c0d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0d8:	6028      	str	r0, [r5, #0]
 800c0da:	4638      	mov	r0, r7
 800c0dc:	b003      	add	sp, #12
 800c0de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0e6:	e7d5      	b.n	800c094 <__d2b+0x1e>
 800c0e8:	6179      	str	r1, [r7, #20]
 800c0ea:	e7e7      	b.n	800c0bc <__d2b+0x46>
 800c0ec:	a801      	add	r0, sp, #4
 800c0ee:	f7ff fddb 	bl	800bca8 <__lo0bits>
 800c0f2:	9b01      	ldr	r3, [sp, #4]
 800c0f4:	617b      	str	r3, [r7, #20]
 800c0f6:	2101      	movs	r1, #1
 800c0f8:	6139      	str	r1, [r7, #16]
 800c0fa:	3020      	adds	r0, #32
 800c0fc:	e7e5      	b.n	800c0ca <__d2b+0x54>
 800c0fe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c102:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c106:	6030      	str	r0, [r6, #0]
 800c108:	6918      	ldr	r0, [r3, #16]
 800c10a:	f7ff fdae 	bl	800bc6a <__hi0bits>
 800c10e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c112:	e7e1      	b.n	800c0d8 <__d2b+0x62>

0800c114 <_mprec_log10>:
 800c114:	2817      	cmp	r0, #23
 800c116:	b5d0      	push	{r4, r6, r7, lr}
 800c118:	4604      	mov	r4, r0
 800c11a:	dc07      	bgt.n	800c12c <_mprec_log10+0x18>
 800c11c:	4b09      	ldr	r3, [pc, #36]	; (800c144 <_mprec_log10+0x30>)
 800c11e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800c122:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c126:	ec41 0b10 	vmov	d0, r0, r1
 800c12a:	bdd0      	pop	{r4, r6, r7, pc}
 800c12c:	4906      	ldr	r1, [pc, #24]	; (800c148 <_mprec_log10+0x34>)
 800c12e:	4f07      	ldr	r7, [pc, #28]	; (800c14c <_mprec_log10+0x38>)
 800c130:	2000      	movs	r0, #0
 800c132:	2600      	movs	r6, #0
 800c134:	4632      	mov	r2, r6
 800c136:	463b      	mov	r3, r7
 800c138:	f7f4 fa66 	bl	8000608 <__aeabi_dmul>
 800c13c:	3c01      	subs	r4, #1
 800c13e:	d1f9      	bne.n	800c134 <_mprec_log10+0x20>
 800c140:	e7f1      	b.n	800c126 <_mprec_log10+0x12>
 800c142:	bf00      	nop
 800c144:	0800d310 	.word	0x0800d310
 800c148:	3ff00000 	.word	0x3ff00000
 800c14c:	40240000 	.word	0x40240000

0800c150 <_calloc_r>:
 800c150:	b538      	push	{r3, r4, r5, lr}
 800c152:	fb02 f401 	mul.w	r4, r2, r1
 800c156:	4621      	mov	r1, r4
 800c158:	f000 f856 	bl	800c208 <_malloc_r>
 800c15c:	4605      	mov	r5, r0
 800c15e:	b118      	cbz	r0, 800c168 <_calloc_r+0x18>
 800c160:	4622      	mov	r2, r4
 800c162:	2100      	movs	r1, #0
 800c164:	f7fe f8c0 	bl	800a2e8 <memset>
 800c168:	4628      	mov	r0, r5
 800c16a:	bd38      	pop	{r3, r4, r5, pc}

0800c16c <_free_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4605      	mov	r5, r0
 800c170:	2900      	cmp	r1, #0
 800c172:	d045      	beq.n	800c200 <_free_r+0x94>
 800c174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c178:	1f0c      	subs	r4, r1, #4
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	bfb8      	it	lt
 800c17e:	18e4      	addlt	r4, r4, r3
 800c180:	f000 fa57 	bl	800c632 <__malloc_lock>
 800c184:	4a1f      	ldr	r2, [pc, #124]	; (800c204 <_free_r+0x98>)
 800c186:	6813      	ldr	r3, [r2, #0]
 800c188:	4610      	mov	r0, r2
 800c18a:	b933      	cbnz	r3, 800c19a <_free_r+0x2e>
 800c18c:	6063      	str	r3, [r4, #4]
 800c18e:	6014      	str	r4, [r2, #0]
 800c190:	4628      	mov	r0, r5
 800c192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c196:	f000 ba4d 	b.w	800c634 <__malloc_unlock>
 800c19a:	42a3      	cmp	r3, r4
 800c19c:	d90c      	bls.n	800c1b8 <_free_r+0x4c>
 800c19e:	6821      	ldr	r1, [r4, #0]
 800c1a0:	1862      	adds	r2, r4, r1
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	bf04      	itt	eq
 800c1a6:	681a      	ldreq	r2, [r3, #0]
 800c1a8:	685b      	ldreq	r3, [r3, #4]
 800c1aa:	6063      	str	r3, [r4, #4]
 800c1ac:	bf04      	itt	eq
 800c1ae:	1852      	addeq	r2, r2, r1
 800c1b0:	6022      	streq	r2, [r4, #0]
 800c1b2:	6004      	str	r4, [r0, #0]
 800c1b4:	e7ec      	b.n	800c190 <_free_r+0x24>
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	685a      	ldr	r2, [r3, #4]
 800c1ba:	b10a      	cbz	r2, 800c1c0 <_free_r+0x54>
 800c1bc:	42a2      	cmp	r2, r4
 800c1be:	d9fa      	bls.n	800c1b6 <_free_r+0x4a>
 800c1c0:	6819      	ldr	r1, [r3, #0]
 800c1c2:	1858      	adds	r0, r3, r1
 800c1c4:	42a0      	cmp	r0, r4
 800c1c6:	d10b      	bne.n	800c1e0 <_free_r+0x74>
 800c1c8:	6820      	ldr	r0, [r4, #0]
 800c1ca:	4401      	add	r1, r0
 800c1cc:	1858      	adds	r0, r3, r1
 800c1ce:	4282      	cmp	r2, r0
 800c1d0:	6019      	str	r1, [r3, #0]
 800c1d2:	d1dd      	bne.n	800c190 <_free_r+0x24>
 800c1d4:	6810      	ldr	r0, [r2, #0]
 800c1d6:	6852      	ldr	r2, [r2, #4]
 800c1d8:	605a      	str	r2, [r3, #4]
 800c1da:	4401      	add	r1, r0
 800c1dc:	6019      	str	r1, [r3, #0]
 800c1de:	e7d7      	b.n	800c190 <_free_r+0x24>
 800c1e0:	d902      	bls.n	800c1e8 <_free_r+0x7c>
 800c1e2:	230c      	movs	r3, #12
 800c1e4:	602b      	str	r3, [r5, #0]
 800c1e6:	e7d3      	b.n	800c190 <_free_r+0x24>
 800c1e8:	6820      	ldr	r0, [r4, #0]
 800c1ea:	1821      	adds	r1, r4, r0
 800c1ec:	428a      	cmp	r2, r1
 800c1ee:	bf04      	itt	eq
 800c1f0:	6811      	ldreq	r1, [r2, #0]
 800c1f2:	6852      	ldreq	r2, [r2, #4]
 800c1f4:	6062      	str	r2, [r4, #4]
 800c1f6:	bf04      	itt	eq
 800c1f8:	1809      	addeq	r1, r1, r0
 800c1fa:	6021      	streq	r1, [r4, #0]
 800c1fc:	605c      	str	r4, [r3, #4]
 800c1fe:	e7c7      	b.n	800c190 <_free_r+0x24>
 800c200:	bd38      	pop	{r3, r4, r5, pc}
 800c202:	bf00      	nop
 800c204:	20000318 	.word	0x20000318

0800c208 <_malloc_r>:
 800c208:	b570      	push	{r4, r5, r6, lr}
 800c20a:	1ccd      	adds	r5, r1, #3
 800c20c:	f025 0503 	bic.w	r5, r5, #3
 800c210:	3508      	adds	r5, #8
 800c212:	2d0c      	cmp	r5, #12
 800c214:	bf38      	it	cc
 800c216:	250c      	movcc	r5, #12
 800c218:	2d00      	cmp	r5, #0
 800c21a:	4606      	mov	r6, r0
 800c21c:	db01      	blt.n	800c222 <_malloc_r+0x1a>
 800c21e:	42a9      	cmp	r1, r5
 800c220:	d903      	bls.n	800c22a <_malloc_r+0x22>
 800c222:	230c      	movs	r3, #12
 800c224:	6033      	str	r3, [r6, #0]
 800c226:	2000      	movs	r0, #0
 800c228:	bd70      	pop	{r4, r5, r6, pc}
 800c22a:	f000 fa02 	bl	800c632 <__malloc_lock>
 800c22e:	4a21      	ldr	r2, [pc, #132]	; (800c2b4 <_malloc_r+0xac>)
 800c230:	6814      	ldr	r4, [r2, #0]
 800c232:	4621      	mov	r1, r4
 800c234:	b991      	cbnz	r1, 800c25c <_malloc_r+0x54>
 800c236:	4c20      	ldr	r4, [pc, #128]	; (800c2b8 <_malloc_r+0xb0>)
 800c238:	6823      	ldr	r3, [r4, #0]
 800c23a:	b91b      	cbnz	r3, 800c244 <_malloc_r+0x3c>
 800c23c:	4630      	mov	r0, r6
 800c23e:	f000 f9b5 	bl	800c5ac <_sbrk_r>
 800c242:	6020      	str	r0, [r4, #0]
 800c244:	4629      	mov	r1, r5
 800c246:	4630      	mov	r0, r6
 800c248:	f000 f9b0 	bl	800c5ac <_sbrk_r>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	d124      	bne.n	800c29a <_malloc_r+0x92>
 800c250:	230c      	movs	r3, #12
 800c252:	6033      	str	r3, [r6, #0]
 800c254:	4630      	mov	r0, r6
 800c256:	f000 f9ed 	bl	800c634 <__malloc_unlock>
 800c25a:	e7e4      	b.n	800c226 <_malloc_r+0x1e>
 800c25c:	680b      	ldr	r3, [r1, #0]
 800c25e:	1b5b      	subs	r3, r3, r5
 800c260:	d418      	bmi.n	800c294 <_malloc_r+0x8c>
 800c262:	2b0b      	cmp	r3, #11
 800c264:	d90f      	bls.n	800c286 <_malloc_r+0x7e>
 800c266:	600b      	str	r3, [r1, #0]
 800c268:	50cd      	str	r5, [r1, r3]
 800c26a:	18cc      	adds	r4, r1, r3
 800c26c:	4630      	mov	r0, r6
 800c26e:	f000 f9e1 	bl	800c634 <__malloc_unlock>
 800c272:	f104 000b 	add.w	r0, r4, #11
 800c276:	1d23      	adds	r3, r4, #4
 800c278:	f020 0007 	bic.w	r0, r0, #7
 800c27c:	1ac3      	subs	r3, r0, r3
 800c27e:	d0d3      	beq.n	800c228 <_malloc_r+0x20>
 800c280:	425a      	negs	r2, r3
 800c282:	50e2      	str	r2, [r4, r3]
 800c284:	e7d0      	b.n	800c228 <_malloc_r+0x20>
 800c286:	428c      	cmp	r4, r1
 800c288:	684b      	ldr	r3, [r1, #4]
 800c28a:	bf16      	itet	ne
 800c28c:	6063      	strne	r3, [r4, #4]
 800c28e:	6013      	streq	r3, [r2, #0]
 800c290:	460c      	movne	r4, r1
 800c292:	e7eb      	b.n	800c26c <_malloc_r+0x64>
 800c294:	460c      	mov	r4, r1
 800c296:	6849      	ldr	r1, [r1, #4]
 800c298:	e7cc      	b.n	800c234 <_malloc_r+0x2c>
 800c29a:	1cc4      	adds	r4, r0, #3
 800c29c:	f024 0403 	bic.w	r4, r4, #3
 800c2a0:	42a0      	cmp	r0, r4
 800c2a2:	d005      	beq.n	800c2b0 <_malloc_r+0xa8>
 800c2a4:	1a21      	subs	r1, r4, r0
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f000 f980 	bl	800c5ac <_sbrk_r>
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	d0cf      	beq.n	800c250 <_malloc_r+0x48>
 800c2b0:	6025      	str	r5, [r4, #0]
 800c2b2:	e7db      	b.n	800c26c <_malloc_r+0x64>
 800c2b4:	20000318 	.word	0x20000318
 800c2b8:	2000031c 	.word	0x2000031c

0800c2bc <_realloc_r>:
 800c2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2be:	4607      	mov	r7, r0
 800c2c0:	4614      	mov	r4, r2
 800c2c2:	460e      	mov	r6, r1
 800c2c4:	b921      	cbnz	r1, 800c2d0 <_realloc_r+0x14>
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c2cc:	f7ff bf9c 	b.w	800c208 <_malloc_r>
 800c2d0:	b922      	cbnz	r2, 800c2dc <_realloc_r+0x20>
 800c2d2:	f7ff ff4b 	bl	800c16c <_free_r>
 800c2d6:	4625      	mov	r5, r4
 800c2d8:	4628      	mov	r0, r5
 800c2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2dc:	f000 f9ab 	bl	800c636 <_malloc_usable_size_r>
 800c2e0:	42a0      	cmp	r0, r4
 800c2e2:	d20f      	bcs.n	800c304 <_realloc_r+0x48>
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	4638      	mov	r0, r7
 800c2e8:	f7ff ff8e 	bl	800c208 <_malloc_r>
 800c2ec:	4605      	mov	r5, r0
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d0f2      	beq.n	800c2d8 <_realloc_r+0x1c>
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4622      	mov	r2, r4
 800c2f6:	f7ff fc27 	bl	800bb48 <memcpy>
 800c2fa:	4631      	mov	r1, r6
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	f7ff ff35 	bl	800c16c <_free_r>
 800c302:	e7e9      	b.n	800c2d8 <_realloc_r+0x1c>
 800c304:	4635      	mov	r5, r6
 800c306:	e7e7      	b.n	800c2d8 <_realloc_r+0x1c>

0800c308 <__ssputs_r>:
 800c308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c30c:	688e      	ldr	r6, [r1, #8]
 800c30e:	429e      	cmp	r6, r3
 800c310:	4682      	mov	sl, r0
 800c312:	460c      	mov	r4, r1
 800c314:	4690      	mov	r8, r2
 800c316:	4699      	mov	r9, r3
 800c318:	d837      	bhi.n	800c38a <__ssputs_r+0x82>
 800c31a:	898a      	ldrh	r2, [r1, #12]
 800c31c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c320:	d031      	beq.n	800c386 <__ssputs_r+0x7e>
 800c322:	6825      	ldr	r5, [r4, #0]
 800c324:	6909      	ldr	r1, [r1, #16]
 800c326:	1a6f      	subs	r7, r5, r1
 800c328:	6965      	ldr	r5, [r4, #20]
 800c32a:	2302      	movs	r3, #2
 800c32c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c330:	fb95 f5f3 	sdiv	r5, r5, r3
 800c334:	f109 0301 	add.w	r3, r9, #1
 800c338:	443b      	add	r3, r7
 800c33a:	429d      	cmp	r5, r3
 800c33c:	bf38      	it	cc
 800c33e:	461d      	movcc	r5, r3
 800c340:	0553      	lsls	r3, r2, #21
 800c342:	d530      	bpl.n	800c3a6 <__ssputs_r+0x9e>
 800c344:	4629      	mov	r1, r5
 800c346:	f7ff ff5f 	bl	800c208 <_malloc_r>
 800c34a:	4606      	mov	r6, r0
 800c34c:	b950      	cbnz	r0, 800c364 <__ssputs_r+0x5c>
 800c34e:	230c      	movs	r3, #12
 800c350:	f8ca 3000 	str.w	r3, [sl]
 800c354:	89a3      	ldrh	r3, [r4, #12]
 800c356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c35a:	81a3      	strh	r3, [r4, #12]
 800c35c:	f04f 30ff 	mov.w	r0, #4294967295
 800c360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c364:	463a      	mov	r2, r7
 800c366:	6921      	ldr	r1, [r4, #16]
 800c368:	f7ff fbee 	bl	800bb48 <memcpy>
 800c36c:	89a3      	ldrh	r3, [r4, #12]
 800c36e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c376:	81a3      	strh	r3, [r4, #12]
 800c378:	6126      	str	r6, [r4, #16]
 800c37a:	6165      	str	r5, [r4, #20]
 800c37c:	443e      	add	r6, r7
 800c37e:	1bed      	subs	r5, r5, r7
 800c380:	6026      	str	r6, [r4, #0]
 800c382:	60a5      	str	r5, [r4, #8]
 800c384:	464e      	mov	r6, r9
 800c386:	454e      	cmp	r6, r9
 800c388:	d900      	bls.n	800c38c <__ssputs_r+0x84>
 800c38a:	464e      	mov	r6, r9
 800c38c:	4632      	mov	r2, r6
 800c38e:	4641      	mov	r1, r8
 800c390:	6820      	ldr	r0, [r4, #0]
 800c392:	f000 f935 	bl	800c600 <memmove>
 800c396:	68a3      	ldr	r3, [r4, #8]
 800c398:	1b9b      	subs	r3, r3, r6
 800c39a:	60a3      	str	r3, [r4, #8]
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	441e      	add	r6, r3
 800c3a0:	6026      	str	r6, [r4, #0]
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	e7dc      	b.n	800c360 <__ssputs_r+0x58>
 800c3a6:	462a      	mov	r2, r5
 800c3a8:	f7ff ff88 	bl	800c2bc <_realloc_r>
 800c3ac:	4606      	mov	r6, r0
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d1e2      	bne.n	800c378 <__ssputs_r+0x70>
 800c3b2:	6921      	ldr	r1, [r4, #16]
 800c3b4:	4650      	mov	r0, sl
 800c3b6:	f7ff fed9 	bl	800c16c <_free_r>
 800c3ba:	e7c8      	b.n	800c34e <__ssputs_r+0x46>

0800c3bc <_svfiprintf_r>:
 800c3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c0:	461d      	mov	r5, r3
 800c3c2:	898b      	ldrh	r3, [r1, #12]
 800c3c4:	061f      	lsls	r7, r3, #24
 800c3c6:	b09d      	sub	sp, #116	; 0x74
 800c3c8:	4680      	mov	r8, r0
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	4616      	mov	r6, r2
 800c3ce:	d50f      	bpl.n	800c3f0 <_svfiprintf_r+0x34>
 800c3d0:	690b      	ldr	r3, [r1, #16]
 800c3d2:	b96b      	cbnz	r3, 800c3f0 <_svfiprintf_r+0x34>
 800c3d4:	2140      	movs	r1, #64	; 0x40
 800c3d6:	f7ff ff17 	bl	800c208 <_malloc_r>
 800c3da:	6020      	str	r0, [r4, #0]
 800c3dc:	6120      	str	r0, [r4, #16]
 800c3de:	b928      	cbnz	r0, 800c3ec <_svfiprintf_r+0x30>
 800c3e0:	230c      	movs	r3, #12
 800c3e2:	f8c8 3000 	str.w	r3, [r8]
 800c3e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ea:	e0c8      	b.n	800c57e <_svfiprintf_r+0x1c2>
 800c3ec:	2340      	movs	r3, #64	; 0x40
 800c3ee:	6163      	str	r3, [r4, #20]
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3f4:	2320      	movs	r3, #32
 800c3f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3fa:	2330      	movs	r3, #48	; 0x30
 800c3fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c400:	9503      	str	r5, [sp, #12]
 800c402:	f04f 0b01 	mov.w	fp, #1
 800c406:	4637      	mov	r7, r6
 800c408:	463d      	mov	r5, r7
 800c40a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c40e:	b10b      	cbz	r3, 800c414 <_svfiprintf_r+0x58>
 800c410:	2b25      	cmp	r3, #37	; 0x25
 800c412:	d13e      	bne.n	800c492 <_svfiprintf_r+0xd6>
 800c414:	ebb7 0a06 	subs.w	sl, r7, r6
 800c418:	d00b      	beq.n	800c432 <_svfiprintf_r+0x76>
 800c41a:	4653      	mov	r3, sl
 800c41c:	4632      	mov	r2, r6
 800c41e:	4621      	mov	r1, r4
 800c420:	4640      	mov	r0, r8
 800c422:	f7ff ff71 	bl	800c308 <__ssputs_r>
 800c426:	3001      	adds	r0, #1
 800c428:	f000 80a4 	beq.w	800c574 <_svfiprintf_r+0x1b8>
 800c42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c42e:	4453      	add	r3, sl
 800c430:	9309      	str	r3, [sp, #36]	; 0x24
 800c432:	783b      	ldrb	r3, [r7, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	f000 809d 	beq.w	800c574 <_svfiprintf_r+0x1b8>
 800c43a:	2300      	movs	r3, #0
 800c43c:	f04f 32ff 	mov.w	r2, #4294967295
 800c440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c444:	9304      	str	r3, [sp, #16]
 800c446:	9307      	str	r3, [sp, #28]
 800c448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c44c:	931a      	str	r3, [sp, #104]	; 0x68
 800c44e:	462f      	mov	r7, r5
 800c450:	2205      	movs	r2, #5
 800c452:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c456:	4850      	ldr	r0, [pc, #320]	; (800c598 <_svfiprintf_r+0x1dc>)
 800c458:	f7f3 feca 	bl	80001f0 <memchr>
 800c45c:	9b04      	ldr	r3, [sp, #16]
 800c45e:	b9d0      	cbnz	r0, 800c496 <_svfiprintf_r+0xda>
 800c460:	06d9      	lsls	r1, r3, #27
 800c462:	bf44      	itt	mi
 800c464:	2220      	movmi	r2, #32
 800c466:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c46a:	071a      	lsls	r2, r3, #28
 800c46c:	bf44      	itt	mi
 800c46e:	222b      	movmi	r2, #43	; 0x2b
 800c470:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c474:	782a      	ldrb	r2, [r5, #0]
 800c476:	2a2a      	cmp	r2, #42	; 0x2a
 800c478:	d015      	beq.n	800c4a6 <_svfiprintf_r+0xea>
 800c47a:	9a07      	ldr	r2, [sp, #28]
 800c47c:	462f      	mov	r7, r5
 800c47e:	2000      	movs	r0, #0
 800c480:	250a      	movs	r5, #10
 800c482:	4639      	mov	r1, r7
 800c484:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c488:	3b30      	subs	r3, #48	; 0x30
 800c48a:	2b09      	cmp	r3, #9
 800c48c:	d94d      	bls.n	800c52a <_svfiprintf_r+0x16e>
 800c48e:	b1b8      	cbz	r0, 800c4c0 <_svfiprintf_r+0x104>
 800c490:	e00f      	b.n	800c4b2 <_svfiprintf_r+0xf6>
 800c492:	462f      	mov	r7, r5
 800c494:	e7b8      	b.n	800c408 <_svfiprintf_r+0x4c>
 800c496:	4a40      	ldr	r2, [pc, #256]	; (800c598 <_svfiprintf_r+0x1dc>)
 800c498:	1a80      	subs	r0, r0, r2
 800c49a:	fa0b f000 	lsl.w	r0, fp, r0
 800c49e:	4318      	orrs	r0, r3
 800c4a0:	9004      	str	r0, [sp, #16]
 800c4a2:	463d      	mov	r5, r7
 800c4a4:	e7d3      	b.n	800c44e <_svfiprintf_r+0x92>
 800c4a6:	9a03      	ldr	r2, [sp, #12]
 800c4a8:	1d11      	adds	r1, r2, #4
 800c4aa:	6812      	ldr	r2, [r2, #0]
 800c4ac:	9103      	str	r1, [sp, #12]
 800c4ae:	2a00      	cmp	r2, #0
 800c4b0:	db01      	blt.n	800c4b6 <_svfiprintf_r+0xfa>
 800c4b2:	9207      	str	r2, [sp, #28]
 800c4b4:	e004      	b.n	800c4c0 <_svfiprintf_r+0x104>
 800c4b6:	4252      	negs	r2, r2
 800c4b8:	f043 0302 	orr.w	r3, r3, #2
 800c4bc:	9207      	str	r2, [sp, #28]
 800c4be:	9304      	str	r3, [sp, #16]
 800c4c0:	783b      	ldrb	r3, [r7, #0]
 800c4c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c4c4:	d10c      	bne.n	800c4e0 <_svfiprintf_r+0x124>
 800c4c6:	787b      	ldrb	r3, [r7, #1]
 800c4c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ca:	d133      	bne.n	800c534 <_svfiprintf_r+0x178>
 800c4cc:	9b03      	ldr	r3, [sp, #12]
 800c4ce:	1d1a      	adds	r2, r3, #4
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	9203      	str	r2, [sp, #12]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	bfb8      	it	lt
 800c4d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4dc:	3702      	adds	r7, #2
 800c4de:	9305      	str	r3, [sp, #20]
 800c4e0:	4d2e      	ldr	r5, [pc, #184]	; (800c59c <_svfiprintf_r+0x1e0>)
 800c4e2:	7839      	ldrb	r1, [r7, #0]
 800c4e4:	2203      	movs	r2, #3
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	f7f3 fe82 	bl	80001f0 <memchr>
 800c4ec:	b138      	cbz	r0, 800c4fe <_svfiprintf_r+0x142>
 800c4ee:	2340      	movs	r3, #64	; 0x40
 800c4f0:	1b40      	subs	r0, r0, r5
 800c4f2:	fa03 f000 	lsl.w	r0, r3, r0
 800c4f6:	9b04      	ldr	r3, [sp, #16]
 800c4f8:	4303      	orrs	r3, r0
 800c4fa:	3701      	adds	r7, #1
 800c4fc:	9304      	str	r3, [sp, #16]
 800c4fe:	7839      	ldrb	r1, [r7, #0]
 800c500:	4827      	ldr	r0, [pc, #156]	; (800c5a0 <_svfiprintf_r+0x1e4>)
 800c502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c506:	2206      	movs	r2, #6
 800c508:	1c7e      	adds	r6, r7, #1
 800c50a:	f7f3 fe71 	bl	80001f0 <memchr>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d038      	beq.n	800c584 <_svfiprintf_r+0x1c8>
 800c512:	4b24      	ldr	r3, [pc, #144]	; (800c5a4 <_svfiprintf_r+0x1e8>)
 800c514:	bb13      	cbnz	r3, 800c55c <_svfiprintf_r+0x1a0>
 800c516:	9b03      	ldr	r3, [sp, #12]
 800c518:	3307      	adds	r3, #7
 800c51a:	f023 0307 	bic.w	r3, r3, #7
 800c51e:	3308      	adds	r3, #8
 800c520:	9303      	str	r3, [sp, #12]
 800c522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c524:	444b      	add	r3, r9
 800c526:	9309      	str	r3, [sp, #36]	; 0x24
 800c528:	e76d      	b.n	800c406 <_svfiprintf_r+0x4a>
 800c52a:	fb05 3202 	mla	r2, r5, r2, r3
 800c52e:	2001      	movs	r0, #1
 800c530:	460f      	mov	r7, r1
 800c532:	e7a6      	b.n	800c482 <_svfiprintf_r+0xc6>
 800c534:	2300      	movs	r3, #0
 800c536:	3701      	adds	r7, #1
 800c538:	9305      	str	r3, [sp, #20]
 800c53a:	4619      	mov	r1, r3
 800c53c:	250a      	movs	r5, #10
 800c53e:	4638      	mov	r0, r7
 800c540:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c544:	3a30      	subs	r2, #48	; 0x30
 800c546:	2a09      	cmp	r2, #9
 800c548:	d903      	bls.n	800c552 <_svfiprintf_r+0x196>
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d0c8      	beq.n	800c4e0 <_svfiprintf_r+0x124>
 800c54e:	9105      	str	r1, [sp, #20]
 800c550:	e7c6      	b.n	800c4e0 <_svfiprintf_r+0x124>
 800c552:	fb05 2101 	mla	r1, r5, r1, r2
 800c556:	2301      	movs	r3, #1
 800c558:	4607      	mov	r7, r0
 800c55a:	e7f0      	b.n	800c53e <_svfiprintf_r+0x182>
 800c55c:	ab03      	add	r3, sp, #12
 800c55e:	9300      	str	r3, [sp, #0]
 800c560:	4622      	mov	r2, r4
 800c562:	4b11      	ldr	r3, [pc, #68]	; (800c5a8 <_svfiprintf_r+0x1ec>)
 800c564:	a904      	add	r1, sp, #16
 800c566:	4640      	mov	r0, r8
 800c568:	f7fd ff5a 	bl	800a420 <_printf_float>
 800c56c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c570:	4681      	mov	r9, r0
 800c572:	d1d6      	bne.n	800c522 <_svfiprintf_r+0x166>
 800c574:	89a3      	ldrh	r3, [r4, #12]
 800c576:	065b      	lsls	r3, r3, #25
 800c578:	f53f af35 	bmi.w	800c3e6 <_svfiprintf_r+0x2a>
 800c57c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c57e:	b01d      	add	sp, #116	; 0x74
 800c580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c584:	ab03      	add	r3, sp, #12
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	4622      	mov	r2, r4
 800c58a:	4b07      	ldr	r3, [pc, #28]	; (800c5a8 <_svfiprintf_r+0x1ec>)
 800c58c:	a904      	add	r1, sp, #16
 800c58e:	4640      	mov	r0, r8
 800c590:	f7fe f9fc 	bl	800a98c <_printf_i>
 800c594:	e7ea      	b.n	800c56c <_svfiprintf_r+0x1b0>
 800c596:	bf00      	nop
 800c598:	0800d3e4 	.word	0x0800d3e4
 800c59c:	0800d3ea 	.word	0x0800d3ea
 800c5a0:	0800d3ee 	.word	0x0800d3ee
 800c5a4:	0800a421 	.word	0x0800a421
 800c5a8:	0800c309 	.word	0x0800c309

0800c5ac <_sbrk_r>:
 800c5ac:	b538      	push	{r3, r4, r5, lr}
 800c5ae:	4c06      	ldr	r4, [pc, #24]	; (800c5c8 <_sbrk_r+0x1c>)
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	4608      	mov	r0, r1
 800c5b6:	6023      	str	r3, [r4, #0]
 800c5b8:	f7f6 fdea 	bl	8003190 <_sbrk>
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	d102      	bne.n	800c5c6 <_sbrk_r+0x1a>
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	b103      	cbz	r3, 800c5c6 <_sbrk_r+0x1a>
 800c5c4:	602b      	str	r3, [r5, #0]
 800c5c6:	bd38      	pop	{r3, r4, r5, pc}
 800c5c8:	200005fc 	.word	0x200005fc

0800c5cc <strcpy>:
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5d2:	f803 2b01 	strb.w	r2, [r3], #1
 800c5d6:	2a00      	cmp	r2, #0
 800c5d8:	d1f9      	bne.n	800c5ce <strcpy+0x2>
 800c5da:	4770      	bx	lr

0800c5dc <__ascii_mbtowc>:
 800c5dc:	b082      	sub	sp, #8
 800c5de:	b901      	cbnz	r1, 800c5e2 <__ascii_mbtowc+0x6>
 800c5e0:	a901      	add	r1, sp, #4
 800c5e2:	b142      	cbz	r2, 800c5f6 <__ascii_mbtowc+0x1a>
 800c5e4:	b14b      	cbz	r3, 800c5fa <__ascii_mbtowc+0x1e>
 800c5e6:	7813      	ldrb	r3, [r2, #0]
 800c5e8:	600b      	str	r3, [r1, #0]
 800c5ea:	7812      	ldrb	r2, [r2, #0]
 800c5ec:	1c10      	adds	r0, r2, #0
 800c5ee:	bf18      	it	ne
 800c5f0:	2001      	movne	r0, #1
 800c5f2:	b002      	add	sp, #8
 800c5f4:	4770      	bx	lr
 800c5f6:	4610      	mov	r0, r2
 800c5f8:	e7fb      	b.n	800c5f2 <__ascii_mbtowc+0x16>
 800c5fa:	f06f 0001 	mvn.w	r0, #1
 800c5fe:	e7f8      	b.n	800c5f2 <__ascii_mbtowc+0x16>

0800c600 <memmove>:
 800c600:	4288      	cmp	r0, r1
 800c602:	b510      	push	{r4, lr}
 800c604:	eb01 0302 	add.w	r3, r1, r2
 800c608:	d807      	bhi.n	800c61a <memmove+0x1a>
 800c60a:	1e42      	subs	r2, r0, #1
 800c60c:	4299      	cmp	r1, r3
 800c60e:	d00a      	beq.n	800c626 <memmove+0x26>
 800c610:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c614:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c618:	e7f8      	b.n	800c60c <memmove+0xc>
 800c61a:	4283      	cmp	r3, r0
 800c61c:	d9f5      	bls.n	800c60a <memmove+0xa>
 800c61e:	1881      	adds	r1, r0, r2
 800c620:	1ad2      	subs	r2, r2, r3
 800c622:	42d3      	cmn	r3, r2
 800c624:	d100      	bne.n	800c628 <memmove+0x28>
 800c626:	bd10      	pop	{r4, pc}
 800c628:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c62c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c630:	e7f7      	b.n	800c622 <memmove+0x22>

0800c632 <__malloc_lock>:
 800c632:	4770      	bx	lr

0800c634 <__malloc_unlock>:
 800c634:	4770      	bx	lr

0800c636 <_malloc_usable_size_r>:
 800c636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c63a:	1f18      	subs	r0, r3, #4
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	bfbc      	itt	lt
 800c640:	580b      	ldrlt	r3, [r1, r0]
 800c642:	18c0      	addlt	r0, r0, r3
 800c644:	4770      	bx	lr

0800c646 <__ascii_wctomb>:
 800c646:	b149      	cbz	r1, 800c65c <__ascii_wctomb+0x16>
 800c648:	2aff      	cmp	r2, #255	; 0xff
 800c64a:	bf85      	ittet	hi
 800c64c:	238a      	movhi	r3, #138	; 0x8a
 800c64e:	6003      	strhi	r3, [r0, #0]
 800c650:	700a      	strbls	r2, [r1, #0]
 800c652:	f04f 30ff 	movhi.w	r0, #4294967295
 800c656:	bf98      	it	ls
 800c658:	2001      	movls	r0, #1
 800c65a:	4770      	bx	lr
 800c65c:	4608      	mov	r0, r1
 800c65e:	4770      	bx	lr

0800c660 <powf>:
 800c660:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c664:	ed2d 8b04 	vpush	{d8-d9}
 800c668:	4ca7      	ldr	r4, [pc, #668]	; (800c908 <powf+0x2a8>)
 800c66a:	b08a      	sub	sp, #40	; 0x28
 800c66c:	eef0 8a40 	vmov.f32	s17, s0
 800c670:	eeb0 8a60 	vmov.f32	s16, s1
 800c674:	f000 f958 	bl	800c928 <__ieee754_powf>
 800c678:	f994 5000 	ldrsb.w	r5, [r4]
 800c67c:	1c6b      	adds	r3, r5, #1
 800c67e:	eeb0 9a40 	vmov.f32	s18, s0
 800c682:	4626      	mov	r6, r4
 800c684:	d05f      	beq.n	800c746 <powf+0xe6>
 800c686:	eeb4 8a48 	vcmp.f32	s16, s16
 800c68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c68e:	d65a      	bvs.n	800c746 <powf+0xe6>
 800c690:	eef4 8a68 	vcmp.f32	s17, s17
 800c694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c698:	d721      	bvc.n	800c6de <powf+0x7e>
 800c69a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6a2:	d150      	bne.n	800c746 <powf+0xe6>
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	4b98      	ldr	r3, [pc, #608]	; (800c90c <powf+0x2ac>)
 800c6aa:	9301      	str	r3, [sp, #4]
 800c6ac:	ee18 0a90 	vmov	r0, s17
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	9308      	str	r3, [sp, #32]
 800c6b4:	f7f3 ff50 	bl	8000558 <__aeabi_f2d>
 800c6b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6bc:	ee18 0a10 	vmov	r0, s16
 800c6c0:	f7f3 ff4a 	bl	8000558 <__aeabi_f2d>
 800c6c4:	4b92      	ldr	r3, [pc, #584]	; (800c910 <powf+0x2b0>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	2d02      	cmp	r5, #2
 800c6ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c6d2:	d032      	beq.n	800c73a <powf+0xda>
 800c6d4:	4668      	mov	r0, sp
 800c6d6:	f000 fbea 	bl	800ceae <matherr>
 800c6da:	bb40      	cbnz	r0, 800c72e <powf+0xce>
 800c6dc:	e065      	b.n	800c7aa <powf+0x14a>
 800c6de:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800c914 <powf+0x2b4>
 800c6e2:	eef4 8a69 	vcmp.f32	s17, s19
 800c6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ea:	d163      	bne.n	800c7b4 <powf+0x154>
 800c6ec:	eeb4 8a69 	vcmp.f32	s16, s19
 800c6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f4:	d12e      	bne.n	800c754 <powf+0xf4>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	4b84      	ldr	r3, [pc, #528]	; (800c90c <powf+0x2ac>)
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	ee18 0a90 	vmov	r0, s17
 800c702:	2300      	movs	r3, #0
 800c704:	9308      	str	r3, [sp, #32]
 800c706:	f7f3 ff27 	bl	8000558 <__aeabi_f2d>
 800c70a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c70e:	ee18 0a10 	vmov	r0, s16
 800c712:	f7f3 ff21 	bl	8000558 <__aeabi_f2d>
 800c716:	2200      	movs	r2, #0
 800c718:	2300      	movs	r3, #0
 800c71a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c71e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c722:	2d00      	cmp	r5, #0
 800c724:	d0d6      	beq.n	800c6d4 <powf+0x74>
 800c726:	4b7a      	ldr	r3, [pc, #488]	; (800c910 <powf+0x2b0>)
 800c728:	2200      	movs	r2, #0
 800c72a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c72e:	9b08      	ldr	r3, [sp, #32]
 800c730:	b11b      	cbz	r3, 800c73a <powf+0xda>
 800c732:	f7fd fdaf 	bl	800a294 <__errno>
 800c736:	9b08      	ldr	r3, [sp, #32]
 800c738:	6003      	str	r3, [r0, #0]
 800c73a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c73e:	f7f4 fa3b 	bl	8000bb8 <__aeabi_d2f>
 800c742:	ee09 0a10 	vmov	s18, r0
 800c746:	eeb0 0a49 	vmov.f32	s0, s18
 800c74a:	b00a      	add	sp, #40	; 0x28
 800c74c:	ecbd 8b04 	vpop	{d8-d9}
 800c750:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c754:	eeb0 0a48 	vmov.f32	s0, s16
 800c758:	f000 fbb2 	bl	800cec0 <finitef>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	d0f2      	beq.n	800c746 <powf+0xe6>
 800c760:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c768:	d5ed      	bpl.n	800c746 <powf+0xe6>
 800c76a:	2301      	movs	r3, #1
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	4b67      	ldr	r3, [pc, #412]	; (800c90c <powf+0x2ac>)
 800c770:	9301      	str	r3, [sp, #4]
 800c772:	ee18 0a90 	vmov	r0, s17
 800c776:	2300      	movs	r3, #0
 800c778:	9308      	str	r3, [sp, #32]
 800c77a:	f7f3 feed 	bl	8000558 <__aeabi_f2d>
 800c77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c782:	ee18 0a10 	vmov	r0, s16
 800c786:	f7f3 fee7 	bl	8000558 <__aeabi_f2d>
 800c78a:	f994 3000 	ldrsb.w	r3, [r4]
 800c78e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c792:	b923      	cbnz	r3, 800c79e <powf+0x13e>
 800c794:	2200      	movs	r2, #0
 800c796:	2300      	movs	r3, #0
 800c798:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c79c:	e79a      	b.n	800c6d4 <powf+0x74>
 800c79e:	495e      	ldr	r1, [pc, #376]	; (800c918 <powf+0x2b8>)
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c7a6:	2b02      	cmp	r3, #2
 800c7a8:	d194      	bne.n	800c6d4 <powf+0x74>
 800c7aa:	f7fd fd73 	bl	800a294 <__errno>
 800c7ae:	2321      	movs	r3, #33	; 0x21
 800c7b0:	6003      	str	r3, [r0, #0]
 800c7b2:	e7bc      	b.n	800c72e <powf+0xce>
 800c7b4:	f000 fb84 	bl	800cec0 <finitef>
 800c7b8:	4605      	mov	r5, r0
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d173      	bne.n	800c8a6 <powf+0x246>
 800c7be:	eeb0 0a68 	vmov.f32	s0, s17
 800c7c2:	f000 fb7d 	bl	800cec0 <finitef>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d06d      	beq.n	800c8a6 <powf+0x246>
 800c7ca:	eeb0 0a48 	vmov.f32	s0, s16
 800c7ce:	f000 fb77 	bl	800cec0 <finitef>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d067      	beq.n	800c8a6 <powf+0x246>
 800c7d6:	ee18 0a90 	vmov	r0, s17
 800c7da:	f7f3 febd 	bl	8000558 <__aeabi_f2d>
 800c7de:	4680      	mov	r8, r0
 800c7e0:	ee18 0a10 	vmov	r0, s16
 800c7e4:	4689      	mov	r9, r1
 800c7e6:	f7f3 feb7 	bl	8000558 <__aeabi_f2d>
 800c7ea:	eeb4 9a49 	vcmp.f32	s18, s18
 800c7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f2:	f994 4000 	ldrsb.w	r4, [r4]
 800c7f6:	4b45      	ldr	r3, [pc, #276]	; (800c90c <powf+0x2ac>)
 800c7f8:	d713      	bvc.n	800c822 <powf+0x1c2>
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	e9cd 2300 	strd	r2, r3, [sp]
 800c800:	9508      	str	r5, [sp, #32]
 800c802:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c806:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c80a:	2c00      	cmp	r4, #0
 800c80c:	d0c2      	beq.n	800c794 <powf+0x134>
 800c80e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800c812:	ee17 0a90 	vmov	r0, s15
 800c816:	f7f3 fe9f 	bl	8000558 <__aeabi_f2d>
 800c81a:	2c02      	cmp	r4, #2
 800c81c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c820:	e7c2      	b.n	800c7a8 <powf+0x148>
 800c822:	2203      	movs	r2, #3
 800c824:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c828:	e9cd 2300 	strd	r2, r3, [sp]
 800c82c:	9508      	str	r5, [sp, #32]
 800c82e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c832:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c836:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c83a:	b9fc      	cbnz	r4, 800c87c <powf+0x21c>
 800c83c:	4b37      	ldr	r3, [pc, #220]	; (800c91c <powf+0x2bc>)
 800c83e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c842:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c84a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c84e:	d553      	bpl.n	800c8f8 <powf+0x298>
 800c850:	eeb0 0a48 	vmov.f32	s0, s16
 800c854:	f000 fb44 	bl	800cee0 <rintf>
 800c858:	eeb4 0a48 	vcmp.f32	s0, s16
 800c85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c860:	d004      	beq.n	800c86c <powf+0x20c>
 800c862:	4b2f      	ldr	r3, [pc, #188]	; (800c920 <powf+0x2c0>)
 800c864:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c868:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c86c:	f996 3000 	ldrsb.w	r3, [r6]
 800c870:	2b02      	cmp	r3, #2
 800c872:	d141      	bne.n	800c8f8 <powf+0x298>
 800c874:	f7fd fd0e 	bl	800a294 <__errno>
 800c878:	2322      	movs	r3, #34	; 0x22
 800c87a:	e799      	b.n	800c7b0 <powf+0x150>
 800c87c:	4b29      	ldr	r3, [pc, #164]	; (800c924 <powf+0x2c4>)
 800c87e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c882:	2200      	movs	r2, #0
 800c884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c888:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c88c:	d5ee      	bpl.n	800c86c <powf+0x20c>
 800c88e:	eeb0 0a48 	vmov.f32	s0, s16
 800c892:	f000 fb25 	bl	800cee0 <rintf>
 800c896:	eeb4 0a48 	vcmp.f32	s0, s16
 800c89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c89e:	d0e5      	beq.n	800c86c <powf+0x20c>
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	4b1d      	ldr	r3, [pc, #116]	; (800c918 <powf+0x2b8>)
 800c8a4:	e7e0      	b.n	800c868 <powf+0x208>
 800c8a6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ae:	f47f af4a 	bne.w	800c746 <powf+0xe6>
 800c8b2:	eeb0 0a68 	vmov.f32	s0, s17
 800c8b6:	f000 fb03 	bl	800cec0 <finitef>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	f43f af43 	beq.w	800c746 <powf+0xe6>
 800c8c0:	eeb0 0a48 	vmov.f32	s0, s16
 800c8c4:	f000 fafc 	bl	800cec0 <finitef>
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	f43f af3c 	beq.w	800c746 <powf+0xe6>
 800c8ce:	2304      	movs	r3, #4
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	4b0e      	ldr	r3, [pc, #56]	; (800c90c <powf+0x2ac>)
 800c8d4:	9301      	str	r3, [sp, #4]
 800c8d6:	ee18 0a90 	vmov	r0, s17
 800c8da:	2300      	movs	r3, #0
 800c8dc:	9308      	str	r3, [sp, #32]
 800c8de:	f7f3 fe3b 	bl	8000558 <__aeabi_f2d>
 800c8e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8e6:	ee18 0a10 	vmov	r0, s16
 800c8ea:	f7f3 fe35 	bl	8000558 <__aeabi_f2d>
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	e7b7      	b.n	800c868 <powf+0x208>
 800c8f8:	4668      	mov	r0, sp
 800c8fa:	f000 fad8 	bl	800ceae <matherr>
 800c8fe:	2800      	cmp	r0, #0
 800c900:	f47f af15 	bne.w	800c72e <powf+0xce>
 800c904:	e7b6      	b.n	800c874 <powf+0x214>
 800c906:	bf00      	nop
 800c908:	20000264 	.word	0x20000264
 800c90c:	0800d500 	.word	0x0800d500
 800c910:	3ff00000 	.word	0x3ff00000
 800c914:	00000000 	.word	0x00000000
 800c918:	fff00000 	.word	0xfff00000
 800c91c:	47efffff 	.word	0x47efffff
 800c920:	c7efffff 	.word	0xc7efffff
 800c924:	7ff00000 	.word	0x7ff00000

0800c928 <__ieee754_powf>:
 800c928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c92c:	ee10 5a90 	vmov	r5, s1
 800c930:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800c934:	ed2d 8b02 	vpush	{d8}
 800c938:	eeb0 8a40 	vmov.f32	s16, s0
 800c93c:	eef0 8a60 	vmov.f32	s17, s1
 800c940:	f000 8293 	beq.w	800ce6a <__ieee754_powf+0x542>
 800c944:	ee10 8a10 	vmov	r8, s0
 800c948:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800c94c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c950:	dc06      	bgt.n	800c960 <__ieee754_powf+0x38>
 800c952:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800c956:	dd0a      	ble.n	800c96e <__ieee754_powf+0x46>
 800c958:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c95c:	f000 8285 	beq.w	800ce6a <__ieee754_powf+0x542>
 800c960:	ecbd 8b02 	vpop	{d8}
 800c964:	48d9      	ldr	r0, [pc, #868]	; (800cccc <__ieee754_powf+0x3a4>)
 800c966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c96a:	f000 bab3 	b.w	800ced4 <nanf>
 800c96e:	f1b8 0f00 	cmp.w	r8, #0
 800c972:	da1d      	bge.n	800c9b0 <__ieee754_powf+0x88>
 800c974:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800c978:	da2c      	bge.n	800c9d4 <__ieee754_powf+0xac>
 800c97a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c97e:	db30      	blt.n	800c9e2 <__ieee754_powf+0xba>
 800c980:	15fb      	asrs	r3, r7, #23
 800c982:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c986:	fa47 f603 	asr.w	r6, r7, r3
 800c98a:	fa06 f303 	lsl.w	r3, r6, r3
 800c98e:	42bb      	cmp	r3, r7
 800c990:	d127      	bne.n	800c9e2 <__ieee754_powf+0xba>
 800c992:	f006 0601 	and.w	r6, r6, #1
 800c996:	f1c6 0602 	rsb	r6, r6, #2
 800c99a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c99e:	d122      	bne.n	800c9e6 <__ieee754_powf+0xbe>
 800c9a0:	2d00      	cmp	r5, #0
 800c9a2:	f280 8268 	bge.w	800ce76 <__ieee754_powf+0x54e>
 800c9a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c9aa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c9ae:	e00d      	b.n	800c9cc <__ieee754_powf+0xa4>
 800c9b0:	2600      	movs	r6, #0
 800c9b2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800c9b6:	d1f0      	bne.n	800c99a <__ieee754_powf+0x72>
 800c9b8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c9bc:	f000 8255 	beq.w	800ce6a <__ieee754_powf+0x542>
 800c9c0:	dd0a      	ble.n	800c9d8 <__ieee754_powf+0xb0>
 800c9c2:	2d00      	cmp	r5, #0
 800c9c4:	f280 8254 	bge.w	800ce70 <__ieee754_powf+0x548>
 800c9c8:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800ccd0 <__ieee754_powf+0x3a8>
 800c9cc:	ecbd 8b02 	vpop	{d8}
 800c9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9d4:	2602      	movs	r6, #2
 800c9d6:	e7ec      	b.n	800c9b2 <__ieee754_powf+0x8a>
 800c9d8:	2d00      	cmp	r5, #0
 800c9da:	daf5      	bge.n	800c9c8 <__ieee754_powf+0xa0>
 800c9dc:	eeb1 0a68 	vneg.f32	s0, s17
 800c9e0:	e7f4      	b.n	800c9cc <__ieee754_powf+0xa4>
 800c9e2:	2600      	movs	r6, #0
 800c9e4:	e7d9      	b.n	800c99a <__ieee754_powf+0x72>
 800c9e6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800c9ea:	d102      	bne.n	800c9f2 <__ieee754_powf+0xca>
 800c9ec:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c9f0:	e7ec      	b.n	800c9cc <__ieee754_powf+0xa4>
 800c9f2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800c9f6:	eeb0 0a48 	vmov.f32	s0, s16
 800c9fa:	d108      	bne.n	800ca0e <__ieee754_powf+0xe6>
 800c9fc:	f1b8 0f00 	cmp.w	r8, #0
 800ca00:	db05      	blt.n	800ca0e <__ieee754_powf+0xe6>
 800ca02:	ecbd 8b02 	vpop	{d8}
 800ca06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca0a:	f000 ba4d 	b.w	800cea8 <__ieee754_sqrtf>
 800ca0e:	f000 fa50 	bl	800ceb2 <fabsf>
 800ca12:	b124      	cbz	r4, 800ca1e <__ieee754_powf+0xf6>
 800ca14:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800ca18:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ca1c:	d117      	bne.n	800ca4e <__ieee754_powf+0x126>
 800ca1e:	2d00      	cmp	r5, #0
 800ca20:	bfbc      	itt	lt
 800ca22:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800ca26:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ca2a:	f1b8 0f00 	cmp.w	r8, #0
 800ca2e:	dacd      	bge.n	800c9cc <__ieee754_powf+0xa4>
 800ca30:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800ca34:	ea54 0306 	orrs.w	r3, r4, r6
 800ca38:	d104      	bne.n	800ca44 <__ieee754_powf+0x11c>
 800ca3a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ca3e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ca42:	e7c3      	b.n	800c9cc <__ieee754_powf+0xa4>
 800ca44:	2e01      	cmp	r6, #1
 800ca46:	d1c1      	bne.n	800c9cc <__ieee754_powf+0xa4>
 800ca48:	eeb1 0a40 	vneg.f32	s0, s0
 800ca4c:	e7be      	b.n	800c9cc <__ieee754_powf+0xa4>
 800ca4e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800ca52:	3801      	subs	r0, #1
 800ca54:	ea56 0300 	orrs.w	r3, r6, r0
 800ca58:	d104      	bne.n	800ca64 <__ieee754_powf+0x13c>
 800ca5a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ca5e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ca62:	e7b3      	b.n	800c9cc <__ieee754_powf+0xa4>
 800ca64:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800ca68:	dd6d      	ble.n	800cb46 <__ieee754_powf+0x21e>
 800ca6a:	4b9a      	ldr	r3, [pc, #616]	; (800ccd4 <__ieee754_powf+0x3ac>)
 800ca6c:	429c      	cmp	r4, r3
 800ca6e:	dc06      	bgt.n	800ca7e <__ieee754_powf+0x156>
 800ca70:	2d00      	cmp	r5, #0
 800ca72:	daa9      	bge.n	800c9c8 <__ieee754_powf+0xa0>
 800ca74:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800ccd8 <__ieee754_powf+0x3b0>
 800ca78:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ca7c:	e7a6      	b.n	800c9cc <__ieee754_powf+0xa4>
 800ca7e:	4b97      	ldr	r3, [pc, #604]	; (800ccdc <__ieee754_powf+0x3b4>)
 800ca80:	429c      	cmp	r4, r3
 800ca82:	dd02      	ble.n	800ca8a <__ieee754_powf+0x162>
 800ca84:	2d00      	cmp	r5, #0
 800ca86:	dcf5      	bgt.n	800ca74 <__ieee754_powf+0x14c>
 800ca88:	e79e      	b.n	800c9c8 <__ieee754_powf+0xa0>
 800ca8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ca8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca92:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800cce0 <__ieee754_powf+0x3b8>
 800ca96:	eef1 6a40 	vneg.f32	s13, s0
 800ca9a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ca9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800caa2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800caa6:	eee7 7a40 	vfms.f32	s15, s14, s0
 800caaa:	ee60 0a00 	vmul.f32	s1, s0, s0
 800caae:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800cce4 <__ieee754_powf+0x3bc>
 800cab2:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800cab6:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800cce8 <__ieee754_powf+0x3c0>
 800caba:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800cabe:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cac2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800ccec <__ieee754_powf+0x3c4>
 800cac6:	eeb0 6a67 	vmov.f32	s12, s15
 800caca:	eea0 6a07 	vfma.f32	s12, s0, s14
 800cace:	ee16 3a10 	vmov	r3, s12
 800cad2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cad6:	f023 030f 	bic.w	r3, r3, #15
 800cada:	ee00 3a90 	vmov	s1, r3
 800cade:	eee6 0a87 	vfma.f32	s1, s13, s14
 800cae2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cae6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800caea:	f025 050f 	bic.w	r5, r5, #15
 800caee:	ee07 5a10 	vmov	s14, r5
 800caf2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800caf6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800cafa:	ee07 3a90 	vmov	s15, r3
 800cafe:	eee7 0a27 	vfma.f32	s1, s14, s15
 800cb02:	3e01      	subs	r6, #1
 800cb04:	ea56 0200 	orrs.w	r2, r6, r0
 800cb08:	ee07 5a10 	vmov	s14, r5
 800cb0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb10:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800cb14:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800cb18:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800cb1c:	ee17 4a10 	vmov	r4, s14
 800cb20:	bf08      	it	eq
 800cb22:	eeb0 8a40 	vmoveq.f32	s16, s0
 800cb26:	2c00      	cmp	r4, #0
 800cb28:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cb2c:	f340 8184 	ble.w	800ce38 <__ieee754_powf+0x510>
 800cb30:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800cb34:	f340 80fc 	ble.w	800cd30 <__ieee754_powf+0x408>
 800cb38:	eddf 7a67 	vldr	s15, [pc, #412]	; 800ccd8 <__ieee754_powf+0x3b0>
 800cb3c:	ee28 0a27 	vmul.f32	s0, s16, s15
 800cb40:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cb44:	e742      	b.n	800c9cc <__ieee754_powf+0xa4>
 800cb46:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800cb4a:	bfbf      	itttt	lt
 800cb4c:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800ccf0 <__ieee754_powf+0x3c8>
 800cb50:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800cb54:	f06f 0217 	mvnlt.w	r2, #23
 800cb58:	ee17 4a90 	vmovlt	r4, s15
 800cb5c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800cb60:	bfa8      	it	ge
 800cb62:	2200      	movge	r2, #0
 800cb64:	3b7f      	subs	r3, #127	; 0x7f
 800cb66:	4413      	add	r3, r2
 800cb68:	4a62      	ldr	r2, [pc, #392]	; (800ccf4 <__ieee754_powf+0x3cc>)
 800cb6a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800cb6e:	4294      	cmp	r4, r2
 800cb70:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800cb74:	dd06      	ble.n	800cb84 <__ieee754_powf+0x25c>
 800cb76:	4a60      	ldr	r2, [pc, #384]	; (800ccf8 <__ieee754_powf+0x3d0>)
 800cb78:	4294      	cmp	r4, r2
 800cb7a:	f340 80a5 	ble.w	800ccc8 <__ieee754_powf+0x3a0>
 800cb7e:	3301      	adds	r3, #1
 800cb80:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800cb84:	2400      	movs	r4, #0
 800cb86:	4a5d      	ldr	r2, [pc, #372]	; (800ccfc <__ieee754_powf+0x3d4>)
 800cb88:	00a7      	lsls	r7, r4, #2
 800cb8a:	443a      	add	r2, r7
 800cb8c:	ee07 1a90 	vmov	s15, r1
 800cb90:	ed92 7a00 	vldr	s14, [r2]
 800cb94:	4a5a      	ldr	r2, [pc, #360]	; (800cd00 <__ieee754_powf+0x3d8>)
 800cb96:	ee37 6a27 	vadd.f32	s12, s14, s15
 800cb9a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800cb9e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800cba2:	1049      	asrs	r1, r1, #1
 800cba4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800cba8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800cbac:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800cbb0:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800cbb4:	ee06 1a10 	vmov	s12, r1
 800cbb8:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800cbbc:	ee14 ca90 	vmov	ip, s9
 800cbc0:	ea02 0c0c 	and.w	ip, r2, ip
 800cbc4:	ee05 ca10 	vmov	s10, ip
 800cbc8:	eeb1 4a45 	vneg.f32	s8, s10
 800cbcc:	eee4 5a06 	vfma.f32	s11, s8, s12
 800cbd0:	ee36 6a47 	vsub.f32	s12, s12, s14
 800cbd4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800cd04 <__ieee754_powf+0x3dc>
 800cbd8:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800cbdc:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800cbe0:	eee4 5a06 	vfma.f32	s11, s8, s12
 800cbe4:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800cbe8:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800cbec:	eddf 5a46 	vldr	s11, [pc, #280]	; 800cd08 <__ieee754_powf+0x3e0>
 800cbf0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800cbf4:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cd0c <__ieee754_powf+0x3e4>
 800cbf8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800cbfc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800cce0 <__ieee754_powf+0x3b8>
 800cc00:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cc04:	eddf 5a42 	vldr	s11, [pc, #264]	; 800cd10 <__ieee754_powf+0x3e8>
 800cc08:	eee7 5a27 	vfma.f32	s11, s14, s15
 800cc0c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800cd14 <__ieee754_powf+0x3ec>
 800cc10:	ee75 6a24 	vadd.f32	s13, s10, s9
 800cc14:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cc18:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cc1c:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800cc20:	eef0 7a65 	vmov.f32	s15, s11
 800cc24:	eee3 6a87 	vfma.f32	s13, s7, s14
 800cc28:	eee5 7a05 	vfma.f32	s15, s10, s10
 800cc2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc30:	ee17 1a90 	vmov	r1, s15
 800cc34:	4011      	ands	r1, r2
 800cc36:	ee07 1a90 	vmov	s15, r1
 800cc3a:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800cc3e:	eddf 5a36 	vldr	s11, [pc, #216]	; 800cd18 <__ieee754_powf+0x3f0>
 800cc42:	eea4 7a05 	vfma.f32	s14, s8, s10
 800cc46:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cc4a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800cc4e:	eea7 7a86 	vfma.f32	s14, s15, s12
 800cc52:	eeb0 6a47 	vmov.f32	s12, s14
 800cc56:	eea5 6a27 	vfma.f32	s12, s10, s15
 800cc5a:	ee16 1a10 	vmov	r1, s12
 800cc5e:	4011      	ands	r1, r2
 800cc60:	ee06 1a90 	vmov	s13, r1
 800cc64:	eee4 6a27 	vfma.f32	s13, s8, s15
 800cc68:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800cd1c <__ieee754_powf+0x3f4>
 800cc6c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cc70:	ee06 1a10 	vmov	s12, r1
 800cc74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc78:	eddf 7a29 	vldr	s15, [pc, #164]	; 800cd20 <__ieee754_powf+0x3f8>
 800cc7c:	4929      	ldr	r1, [pc, #164]	; (800cd24 <__ieee754_powf+0x3fc>)
 800cc7e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800cc82:	4439      	add	r1, r7
 800cc84:	edd1 7a00 	vldr	s15, [r1]
 800cc88:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cc8c:	ee07 3a90 	vmov	s15, r3
 800cc90:	eef0 0a47 	vmov.f32	s1, s14
 800cc94:	4b24      	ldr	r3, [pc, #144]	; (800cd28 <__ieee754_powf+0x400>)
 800cc96:	eee6 0a25 	vfma.f32	s1, s12, s11
 800cc9a:	443b      	add	r3, r7
 800cc9c:	ed93 5a00 	vldr	s10, [r3]
 800cca0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cca4:	ee70 0a85 	vadd.f32	s1, s1, s10
 800cca8:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800ccac:	ee17 3a90 	vmov	r3, s15
 800ccb0:	4013      	ands	r3, r2
 800ccb2:	ee07 3a90 	vmov	s15, r3
 800ccb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ccba:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ccbe:	eee6 7a65 	vfms.f32	s15, s12, s11
 800ccc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccc6:	e70e      	b.n	800cae6 <__ieee754_powf+0x1be>
 800ccc8:	2401      	movs	r4, #1
 800ccca:	e75c      	b.n	800cb86 <__ieee754_powf+0x25e>
 800cccc:	0800d3e9 	.word	0x0800d3e9
 800ccd0:	00000000 	.word	0x00000000
 800ccd4:	3f7ffff7 	.word	0x3f7ffff7
 800ccd8:	7149f2ca 	.word	0x7149f2ca
 800ccdc:	3f800007 	.word	0x3f800007
 800cce0:	3eaaaaab 	.word	0x3eaaaaab
 800cce4:	36eca570 	.word	0x36eca570
 800cce8:	3fb8aa3b 	.word	0x3fb8aa3b
 800ccec:	3fb8aa00 	.word	0x3fb8aa00
 800ccf0:	4b800000 	.word	0x4b800000
 800ccf4:	001cc471 	.word	0x001cc471
 800ccf8:	005db3d6 	.word	0x005db3d6
 800ccfc:	0800d508 	.word	0x0800d508
 800cd00:	fffff000 	.word	0xfffff000
 800cd04:	3e6c3255 	.word	0x3e6c3255
 800cd08:	3e53f142 	.word	0x3e53f142
 800cd0c:	3e8ba305 	.word	0x3e8ba305
 800cd10:	3edb6db7 	.word	0x3edb6db7
 800cd14:	3f19999a 	.word	0x3f19999a
 800cd18:	3f763800 	.word	0x3f763800
 800cd1c:	3f76384f 	.word	0x3f76384f
 800cd20:	369dc3a0 	.word	0x369dc3a0
 800cd24:	0800d518 	.word	0x0800d518
 800cd28:	0800d510 	.word	0x0800d510
 800cd2c:	3338aa3c 	.word	0x3338aa3c
 800cd30:	f040 8092 	bne.w	800ce58 <__ieee754_powf+0x530>
 800cd34:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800cd2c <__ieee754_powf+0x404>
 800cd38:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd3c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800cd40:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cd44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd48:	f73f aef6 	bgt.w	800cb38 <__ieee754_powf+0x210>
 800cd4c:	15db      	asrs	r3, r3, #23
 800cd4e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800cd52:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cd56:	4103      	asrs	r3, r0
 800cd58:	4423      	add	r3, r4
 800cd5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cd5e:	4947      	ldr	r1, [pc, #284]	; (800ce7c <__ieee754_powf+0x554>)
 800cd60:	3a7f      	subs	r2, #127	; 0x7f
 800cd62:	4111      	asrs	r1, r2
 800cd64:	ea23 0101 	bic.w	r1, r3, r1
 800cd68:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800cd6c:	ee07 1a10 	vmov	s14, r1
 800cd70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800cd74:	f1c2 0217 	rsb	r2, r2, #23
 800cd78:	4110      	asrs	r0, r2
 800cd7a:	2c00      	cmp	r4, #0
 800cd7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd80:	bfb8      	it	lt
 800cd82:	4240      	neglt	r0, r0
 800cd84:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800cd88:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ce80 <__ieee754_powf+0x558>
 800cd8c:	ee17 3a10 	vmov	r3, s14
 800cd90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cd94:	f023 030f 	bic.w	r3, r3, #15
 800cd98:	ee07 3a10 	vmov	s14, r3
 800cd9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cda0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800cda4:	eddf 7a37 	vldr	s15, [pc, #220]	; 800ce84 <__ieee754_powf+0x55c>
 800cda8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdac:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800cdb0:	eddf 6a35 	vldr	s13, [pc, #212]	; 800ce88 <__ieee754_powf+0x560>
 800cdb4:	eeb0 0a67 	vmov.f32	s0, s15
 800cdb8:	eea7 0a26 	vfma.f32	s0, s14, s13
 800cdbc:	eeb0 6a40 	vmov.f32	s12, s0
 800cdc0:	eea7 6a66 	vfms.f32	s12, s14, s13
 800cdc4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cdc8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cdcc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800ce8c <__ieee754_powf+0x564>
 800cdd0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800ce90 <__ieee754_powf+0x568>
 800cdd4:	eea7 6a26 	vfma.f32	s12, s14, s13
 800cdd8:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800ce94 <__ieee754_powf+0x56c>
 800cddc:	eee6 6a07 	vfma.f32	s13, s12, s14
 800cde0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ce98 <__ieee754_powf+0x570>
 800cde4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800cde8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800ce9c <__ieee754_powf+0x574>
 800cdec:	eee6 6a07 	vfma.f32	s13, s12, s14
 800cdf0:	eeb0 6a40 	vmov.f32	s12, s0
 800cdf4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800cdf8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cdfc:	eeb0 7a46 	vmov.f32	s14, s12
 800ce00:	ee77 6a66 	vsub.f32	s13, s14, s13
 800ce04:	ee20 6a06 	vmul.f32	s12, s0, s12
 800ce08:	eee0 7a27 	vfma.f32	s15, s0, s15
 800ce0c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ce10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce14:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ce18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ce1c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ce20:	ee10 3a10 	vmov	r3, s0
 800ce24:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ce28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce2c:	da1a      	bge.n	800ce64 <__ieee754_powf+0x53c>
 800ce2e:	f000 f8b1 	bl	800cf94 <scalbnf>
 800ce32:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ce36:	e5c9      	b.n	800c9cc <__ieee754_powf+0xa4>
 800ce38:	4a19      	ldr	r2, [pc, #100]	; (800cea0 <__ieee754_powf+0x578>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	dd02      	ble.n	800ce44 <__ieee754_powf+0x51c>
 800ce3e:	eddf 7a19 	vldr	s15, [pc, #100]	; 800cea4 <__ieee754_powf+0x57c>
 800ce42:	e67b      	b.n	800cb3c <__ieee754_powf+0x214>
 800ce44:	d108      	bne.n	800ce58 <__ieee754_powf+0x530>
 800ce46:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ce4a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ce4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce52:	f6ff af7b 	blt.w	800cd4c <__ieee754_powf+0x424>
 800ce56:	e7f2      	b.n	800ce3e <__ieee754_powf+0x516>
 800ce58:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ce5c:	f73f af76 	bgt.w	800cd4c <__ieee754_powf+0x424>
 800ce60:	2000      	movs	r0, #0
 800ce62:	e78f      	b.n	800cd84 <__ieee754_powf+0x45c>
 800ce64:	ee00 3a10 	vmov	s0, r3
 800ce68:	e7e3      	b.n	800ce32 <__ieee754_powf+0x50a>
 800ce6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ce6e:	e5ad      	b.n	800c9cc <__ieee754_powf+0xa4>
 800ce70:	eeb0 0a68 	vmov.f32	s0, s17
 800ce74:	e5aa      	b.n	800c9cc <__ieee754_powf+0xa4>
 800ce76:	eeb0 0a48 	vmov.f32	s0, s16
 800ce7a:	e5a7      	b.n	800c9cc <__ieee754_powf+0xa4>
 800ce7c:	007fffff 	.word	0x007fffff
 800ce80:	3f317218 	.word	0x3f317218
 800ce84:	35bfbe8c 	.word	0x35bfbe8c
 800ce88:	3f317200 	.word	0x3f317200
 800ce8c:	3331bb4c 	.word	0x3331bb4c
 800ce90:	b5ddea0e 	.word	0xb5ddea0e
 800ce94:	388ab355 	.word	0x388ab355
 800ce98:	bb360b61 	.word	0xbb360b61
 800ce9c:	3e2aaaab 	.word	0x3e2aaaab
 800cea0:	43160000 	.word	0x43160000
 800cea4:	0da24260 	.word	0x0da24260

0800cea8 <__ieee754_sqrtf>:
 800cea8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ceac:	4770      	bx	lr

0800ceae <matherr>:
 800ceae:	2000      	movs	r0, #0
 800ceb0:	4770      	bx	lr

0800ceb2 <fabsf>:
 800ceb2:	ee10 3a10 	vmov	r3, s0
 800ceb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ceba:	ee00 3a10 	vmov	s0, r3
 800cebe:	4770      	bx	lr

0800cec0 <finitef>:
 800cec0:	ee10 3a10 	vmov	r3, s0
 800cec4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800cec8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800cecc:	bfac      	ite	ge
 800cece:	2000      	movge	r0, #0
 800ced0:	2001      	movlt	r0, #1
 800ced2:	4770      	bx	lr

0800ced4 <nanf>:
 800ced4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cedc <nanf+0x8>
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	7fc00000 	.word	0x7fc00000

0800cee0 <rintf>:
 800cee0:	b513      	push	{r0, r1, r4, lr}
 800cee2:	ee10 1a10 	vmov	r1, s0
 800cee6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ceea:	0ddc      	lsrs	r4, r3, #23
 800ceec:	3c7f      	subs	r4, #127	; 0x7f
 800ceee:	2c16      	cmp	r4, #22
 800cef0:	dc46      	bgt.n	800cf80 <rintf+0xa0>
 800cef2:	b32b      	cbz	r3, 800cf40 <rintf+0x60>
 800cef4:	2c00      	cmp	r4, #0
 800cef6:	ee10 2a10 	vmov	r2, s0
 800cefa:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800cefe:	da21      	bge.n	800cf44 <rintf+0x64>
 800cf00:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800cf04:	425b      	negs	r3, r3
 800cf06:	4a21      	ldr	r2, [pc, #132]	; (800cf8c <rintf+0xac>)
 800cf08:	0a5b      	lsrs	r3, r3, #9
 800cf0a:	0d09      	lsrs	r1, r1, #20
 800cf0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf10:	0509      	lsls	r1, r1, #20
 800cf12:	430b      	orrs	r3, r1
 800cf14:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800cf18:	ee07 3a90 	vmov	s15, r3
 800cf1c:	edd2 6a00 	vldr	s13, [r2]
 800cf20:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800cf24:	ed8d 7a01 	vstr	s14, [sp, #4]
 800cf28:	eddd 7a01 	vldr	s15, [sp, #4]
 800cf2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cf30:	ee17 3a90 	vmov	r3, s15
 800cf34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf38:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800cf3c:	ee00 3a10 	vmov	s0, r3
 800cf40:	b002      	add	sp, #8
 800cf42:	bd10      	pop	{r4, pc}
 800cf44:	4b12      	ldr	r3, [pc, #72]	; (800cf90 <rintf+0xb0>)
 800cf46:	4123      	asrs	r3, r4
 800cf48:	4219      	tst	r1, r3
 800cf4a:	d0f9      	beq.n	800cf40 <rintf+0x60>
 800cf4c:	085b      	lsrs	r3, r3, #1
 800cf4e:	4219      	tst	r1, r3
 800cf50:	d006      	beq.n	800cf60 <rintf+0x80>
 800cf52:	ea21 0203 	bic.w	r2, r1, r3
 800cf56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cf5a:	fa43 f404 	asr.w	r4, r3, r4
 800cf5e:	4322      	orrs	r2, r4
 800cf60:	4b0a      	ldr	r3, [pc, #40]	; (800cf8c <rintf+0xac>)
 800cf62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cf66:	ed90 7a00 	vldr	s14, [r0]
 800cf6a:	ee07 2a90 	vmov	s15, r2
 800cf6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf72:	edcd 7a01 	vstr	s15, [sp, #4]
 800cf76:	ed9d 0a01 	vldr	s0, [sp, #4]
 800cf7a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cf7e:	e7df      	b.n	800cf40 <rintf+0x60>
 800cf80:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cf84:	d3dc      	bcc.n	800cf40 <rintf+0x60>
 800cf86:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cf8a:	e7d9      	b.n	800cf40 <rintf+0x60>
 800cf8c:	0800d520 	.word	0x0800d520
 800cf90:	007fffff 	.word	0x007fffff

0800cf94 <scalbnf>:
 800cf94:	b508      	push	{r3, lr}
 800cf96:	ee10 2a10 	vmov	r2, s0
 800cf9a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800cf9e:	ed2d 8b02 	vpush	{d8}
 800cfa2:	eef0 0a40 	vmov.f32	s1, s0
 800cfa6:	d004      	beq.n	800cfb2 <scalbnf+0x1e>
 800cfa8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cfac:	d306      	bcc.n	800cfbc <scalbnf+0x28>
 800cfae:	ee70 0a00 	vadd.f32	s1, s0, s0
 800cfb2:	ecbd 8b02 	vpop	{d8}
 800cfb6:	eeb0 0a60 	vmov.f32	s0, s1
 800cfba:	bd08      	pop	{r3, pc}
 800cfbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cfc0:	d21c      	bcs.n	800cffc <scalbnf+0x68>
 800cfc2:	4b1f      	ldr	r3, [pc, #124]	; (800d040 <scalbnf+0xac>)
 800cfc4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d044 <scalbnf+0xb0>
 800cfc8:	4298      	cmp	r0, r3
 800cfca:	ee60 0a27 	vmul.f32	s1, s0, s15
 800cfce:	db10      	blt.n	800cff2 <scalbnf+0x5e>
 800cfd0:	ee10 2a90 	vmov	r2, s1
 800cfd4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800cfd8:	3b19      	subs	r3, #25
 800cfda:	4403      	add	r3, r0
 800cfdc:	2bfe      	cmp	r3, #254	; 0xfe
 800cfde:	dd0f      	ble.n	800d000 <scalbnf+0x6c>
 800cfe0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800d048 <scalbnf+0xb4>
 800cfe4:	eeb0 0a48 	vmov.f32	s0, s16
 800cfe8:	f000 f834 	bl	800d054 <copysignf>
 800cfec:	ee60 0a08 	vmul.f32	s1, s0, s16
 800cff0:	e7df      	b.n	800cfb2 <scalbnf+0x1e>
 800cff2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800d04c <scalbnf+0xb8>
 800cff6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800cffa:	e7da      	b.n	800cfb2 <scalbnf+0x1e>
 800cffc:	0ddb      	lsrs	r3, r3, #23
 800cffe:	e7ec      	b.n	800cfda <scalbnf+0x46>
 800d000:	2b00      	cmp	r3, #0
 800d002:	dd06      	ble.n	800d012 <scalbnf+0x7e>
 800d004:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d008:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d00c:	ee00 3a90 	vmov	s1, r3
 800d010:	e7cf      	b.n	800cfb2 <scalbnf+0x1e>
 800d012:	f113 0f16 	cmn.w	r3, #22
 800d016:	da06      	bge.n	800d026 <scalbnf+0x92>
 800d018:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d01c:	4298      	cmp	r0, r3
 800d01e:	dcdf      	bgt.n	800cfe0 <scalbnf+0x4c>
 800d020:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800d04c <scalbnf+0xb8>
 800d024:	e7de      	b.n	800cfe4 <scalbnf+0x50>
 800d026:	3319      	adds	r3, #25
 800d028:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d02c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d030:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d050 <scalbnf+0xbc>
 800d034:	ee07 3a10 	vmov	s14, r3
 800d038:	ee67 0a27 	vmul.f32	s1, s14, s15
 800d03c:	e7b9      	b.n	800cfb2 <scalbnf+0x1e>
 800d03e:	bf00      	nop
 800d040:	ffff3cb0 	.word	0xffff3cb0
 800d044:	4c000000 	.word	0x4c000000
 800d048:	7149f2ca 	.word	0x7149f2ca
 800d04c:	0da24260 	.word	0x0da24260
 800d050:	33000000 	.word	0x33000000

0800d054 <copysignf>:
 800d054:	ee10 3a10 	vmov	r3, s0
 800d058:	ee10 2a90 	vmov	r2, s1
 800d05c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d060:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d064:	4313      	orrs	r3, r2
 800d066:	ee00 3a10 	vmov	s0, r3
 800d06a:	4770      	bx	lr

0800d06c <_init>:
 800d06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06e:	bf00      	nop
 800d070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d072:	bc08      	pop	{r3}
 800d074:	469e      	mov	lr, r3
 800d076:	4770      	bx	lr

0800d078 <_fini>:
 800d078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07a:	bf00      	nop
 800d07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d07e:	bc08      	pop	{r3}
 800d080:	469e      	mov	lr, r3
 800d082:	4770      	bx	lr
