
PMIK_microclimate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  0800cbf8  0800cbf8  0001cbf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d020  0800d020  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800d020  0800d020  0001d020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d028  0800d028  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d028  0800d028  0001d028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d02c  0800d02c  0001d02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800d030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000268  0800d298  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  0800d298  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002270c  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004713  00000000  00000000  000429a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a38  00000000  00000000  000470b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001828  00000000  00000000  00048af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b0c4  00000000  00000000  0004a318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000163d3  00000000  00000000  000653dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098055  00000000  00000000  0007b7af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00113804  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079dc  00000000  00000000  00113880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000268 	.word	0x20000268
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cbdc 	.word	0x0800cbdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	0800cbdc 	.word	0x0800cbdc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f6a:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f6c:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <MX_ADC1_Init+0xa0>)
 8000f6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f9c:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <MX_ADC1_Init+0xa4>)
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fba:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000fbc:	f003 ffa8 	bl	8004f10 <HAL_ADC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000fc6:	f001 f853 	bl	8002070 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fca:	230a      	movs	r3, #10
 8000fcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <MX_ADC1_Init+0x9c>)
 8000fdc:	f004 f8ce 	bl	800517c <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fe6:	f001 f843 	bl	8002070 <Error_Handler>
  }

}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000320 	.word	0x20000320
 8000ff8:	40012000 	.word	0x40012000
 8000ffc:	0f000001 	.word	0x0f000001

08001000 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a2f      	ldr	r2, [pc, #188]	; (80010dc <HAL_ADC_MspInit+0xdc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d157      	bne.n	80010d2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a2d      	ldr	r2, [pc, #180]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800105a:	2301      	movs	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105e:	2303      	movs	r3, #3
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	481d      	ldr	r0, [pc, #116]	; (80010e4 <HAL_ADC_MspInit+0xe4>)
 800106e:	f005 fa7b 	bl	8006568 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 8001074:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <HAL_ADC_MspInit+0xec>)
 8001076:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 800108c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001090:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 8001094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001098:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 800109c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010b6:	480c      	ldr	r0, [pc, #48]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010b8:	f004 fc12 	bl	80058e0 <HAL_DMA_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010c2:	f000 ffd5 	bl	8002070 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010ca:	639a      	str	r2, [r3, #56]	; 0x38
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	; 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40012000 	.word	0x40012000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020800 	.word	0x40020800
 80010e8:	20000368 	.word	0x20000368
 80010ec:	40026410 	.word	0x40026410

080010f0 <buzzer_alarm>:

#include "buzzer.h"



void buzzer_alarm(uint8_t time,uint8_t power){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	460a      	mov	r2, r1
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	4613      	mov	r3, r2
 80010fe:	71bb      	strb	r3, [r7, #6]
	htim3.Instance->CCR1 = power;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <buzzer_alarm+0x38>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	79ba      	ldrb	r2, [r7, #6]
 8001106:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001108:	2100      	movs	r1, #0
 800110a:	4807      	ldr	r0, [pc, #28]	; (8001128 <buzzer_alarm+0x38>)
 800110c:	f007 fb26 	bl	800875c <HAL_TIM_PWM_Start>
	delay_counter = time * 1000;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	461a      	mov	r2, r3
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <buzzer_alarm+0x3c>)
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200004cc 	.word	0x200004cc
 800112c:	2000028c 	.word	0x2000028c

08001130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_DMA_Init+0x3c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <MX_DMA_Init+0x3c>)
 8001140:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_DMA_Init+0x3c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2038      	movs	r0, #56	; 0x38
 8001158:	f004 fb8b 	bl	8005872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800115c:	2038      	movs	r0, #56	; 0x38
 800115e:	f004 fba4 	bl	80058aa <HAL_NVIC_EnableIRQ>

}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001176:	2306      	movs	r3, #6
 8001178:	847b      	strh	r3, [r7, #34]	; 0x22
 800117a:	2306      	movs	r3, #6
 800117c:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	83fb      	strh	r3, [r7, #30]
 8001186:	2300      	movs	r3, #0
 8001188:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 800118a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118e:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001194:	4b9f      	ldr	r3, [pc, #636]	; (8001414 <EE_Init+0x2a4>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800119a:	4b9f      	ldr	r3, [pc, #636]	; (8001418 <EE_Init+0x2a8>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80011a0:	2300      	movs	r3, #0
 80011a2:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 80011a4:	2306      	movs	r3, #6
 80011a6:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80011ac:	2302      	movs	r3, #2
 80011ae:	613b      	str	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80011b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011b2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d057      	beq.n	800126a <EE_Init+0xfa>
 80011ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011be:	4293      	cmp	r3, r2
 80011c0:	d003      	beq.n	80011ca <EE_Init+0x5a>
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80f4 	beq.w	80013b0 <EE_Init+0x240>
 80011c8:	e18d      	b.n	80014e6 <EE_Init+0x376>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80011ca:	8c3b      	ldrh	r3, [r7, #32]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d116      	bne.n	80011fe <EE_Init+0x8e>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80011d0:	4890      	ldr	r0, [pc, #576]	; (8001414 <EE_Init+0x2a4>)
 80011d2:	f000 f9a9 	bl	8001528 <EE_VerifyPageFullyErased>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f040 818e 	bne.w	80014fa <EE_Init+0x38a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011de:	f107 0214 	add.w	r2, r7, #20
 80011e2:	463b      	mov	r3, r7
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f005 f89c 	bl	8006324 <HAL_FLASHEx_Erase>
 80011ec:	4603      	mov	r3, r0
 80011ee:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80011f0:	7efb      	ldrb	r3, [r7, #27]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8181 	beq.w	80014fa <EE_Init+0x38a>
          {
            return FlashStatus;
 80011f8:	7efb      	ldrb	r3, [r7, #27]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	e185      	b.n	800150a <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001204:	4293      	cmp	r3, r2
 8001206:	d125      	bne.n	8001254 <EE_Init+0xe4>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001208:	4882      	ldr	r0, [pc, #520]	; (8001414 <EE_Init+0x2a4>)
 800120a:	f000 f98d 	bl	8001528 <EE_VerifyPageFullyErased>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10e      	bne.n	8001232 <EE_Init+0xc2>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001214:	f107 0214 	add.w	r2, r7, #20
 8001218:	463b      	mov	r3, r7
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f005 f881 	bl	8006324 <HAL_FLASHEx_Erase>
 8001222:	4603      	mov	r3, r0
 8001224:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001226:	7efb      	ldrb	r3, [r7, #27]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <EE_Init+0xc2>
          {
            return FlashStatus;
 800122c:	7efb      	ldrb	r3, [r7, #27]
 800122e:	b29b      	uxth	r3, r3
 8001230:	e16b      	b.n	800150a <EE_Init+0x39a>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	4977      	ldr	r1, [pc, #476]	; (8001418 <EE_Init+0x2a8>)
 800123c:	2001      	movs	r0, #1
 800123e:	f004 febd 	bl	8005fbc <HAL_FLASH_Program>
 8001242:	4603      	mov	r3, r0
 8001244:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001246:	7efb      	ldrb	r3, [r7, #27]
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 8156 	beq.w	80014fa <EE_Init+0x38a>
        {
          return FlashStatus;
 800124e:	7efb      	ldrb	r3, [r7, #27]
 8001250:	b29b      	uxth	r3, r3
 8001252:	e15a      	b.n	800150a <EE_Init+0x39a>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001254:	f000 f9dc 	bl	8001610 <EE_Format>
 8001258:	4603      	mov	r3, r0
 800125a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800125c:	7efb      	ldrb	r3, [r7, #27]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 814b 	beq.w	80014fa <EE_Init+0x38a>
        {
          return FlashStatus;
 8001264:	7efb      	ldrb	r3, [r7, #27]
 8001266:	b29b      	uxth	r3, r3
 8001268:	e14f      	b.n	800150a <EE_Init+0x39a>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800126a:	8c3b      	ldrh	r3, [r7, #32]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d163      	bne.n	8001338 <EE_Init+0x1c8>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001270:	2300      	movs	r3, #0
 8001272:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001274:	e030      	b.n	80012d8 <EE_Init+0x168>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001276:	4b69      	ldr	r3, [pc, #420]	; (800141c <EE_Init+0x2ac>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	b29a      	uxth	r2, r3
 800127c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800127e:	4968      	ldr	r1, [pc, #416]	; (8001420 <EE_Init+0x2b0>)
 8001280:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001284:	429a      	cmp	r2, r3
 8001286:	d101      	bne.n	800128c <EE_Init+0x11c>
          {
            x = VarIdx;
 8001288:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800128a:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 800128c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800128e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001292:	429a      	cmp	r2, r3
 8001294:	d01d      	beq.n	80012d2 <EE_Init+0x162>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001296:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001298:	4a61      	ldr	r2, [pc, #388]	; (8001420 <EE_Init+0x2b0>)
 800129a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800129e:	4961      	ldr	r1, [pc, #388]	; (8001424 <EE_Init+0x2b4>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f96b 	bl	800157c <EE_ReadVariable>
 80012a6:	4603      	mov	r3, r0
 80012a8:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80012aa:	8bbb      	ldrh	r3, [r7, #28]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d010      	beq.n	80012d2 <EE_Init+0x162>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80012b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012b2:	4a5b      	ldr	r2, [pc, #364]	; (8001420 <EE_Init+0x2b0>)
 80012b4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012b8:	4b5a      	ldr	r3, [pc, #360]	; (8001424 <EE_Init+0x2b4>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	4610      	mov	r0, r2
 80012c0:	f000 fa3e 	bl	8001740 <EE_VerifyPageFullWriteVariable>
 80012c4:	4603      	mov	r3, r0
 80012c6:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80012c8:	8bfb      	ldrh	r3, [r7, #30]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <EE_Init+0x162>
              {
                return EepromStatus;
 80012ce:	8bfb      	ldrh	r3, [r7, #30]
 80012d0:	e11b      	b.n	800150a <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80012d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012d4:	3301      	adds	r3, #1
 80012d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80012d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d9cb      	bls.n	8001276 <EE_Init+0x106>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	494b      	ldr	r1, [pc, #300]	; (8001414 <EE_Init+0x2a4>)
 80012e8:	2001      	movs	r0, #1
 80012ea:	f004 fe67 	bl	8005fbc <HAL_FLASH_Program>
 80012ee:	4603      	mov	r3, r0
 80012f0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80012f2:	7efb      	ldrb	r3, [r7, #27]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <EE_Init+0x18e>
        {
          return FlashStatus;
 80012f8:	7efb      	ldrb	r3, [r7, #27]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	e105      	b.n	800150a <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE1_ID;
 80012fe:	2307      	movs	r3, #7
 8001300:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001306:	2302      	movs	r3, #2
 8001308:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800130a:	4843      	ldr	r0, [pc, #268]	; (8001418 <EE_Init+0x2a8>)
 800130c:	f000 f90c 	bl	8001528 <EE_VerifyPageFullyErased>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 80f3 	bne.w	80014fe <EE_Init+0x38e>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001318:	f107 0214 	add.w	r2, r7, #20
 800131c:	463b      	mov	r3, r7
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f004 ffff 	bl	8006324 <HAL_FLASHEx_Erase>
 8001326:	4603      	mov	r3, r0
 8001328:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800132a:	7efb      	ldrb	r3, [r7, #27]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80e6 	beq.w	80014fe <EE_Init+0x38e>
          {
            return FlashStatus;
 8001332:	7efb      	ldrb	r3, [r7, #27]
 8001334:	b29b      	uxth	r3, r3
 8001336:	e0e8      	b.n	800150a <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8001338:	8c3b      	ldrh	r3, [r7, #32]
 800133a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133e:	4293      	cmp	r3, r2
 8001340:	d12b      	bne.n	800139a <EE_Init+0x22a>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001342:	2307      	movs	r3, #7
 8001344:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001346:	2301      	movs	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800134a:	2302      	movs	r3, #2
 800134c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800134e:	4832      	ldr	r0, [pc, #200]	; (8001418 <EE_Init+0x2a8>)
 8001350:	f000 f8ea 	bl	8001528 <EE_VerifyPageFullyErased>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10e      	bne.n	8001378 <EE_Init+0x208>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800135a:	f107 0214 	add.w	r2, r7, #20
 800135e:	463b      	mov	r3, r7
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f004 ffde 	bl	8006324 <HAL_FLASHEx_Erase>
 8001368:	4603      	mov	r3, r0
 800136a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800136c:	7efb      	ldrb	r3, [r7, #27]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <EE_Init+0x208>
          {
            return FlashStatus;
 8001372:	7efb      	ldrb	r3, [r7, #27]
 8001374:	b29b      	uxth	r3, r3
 8001376:	e0c8      	b.n	800150a <EE_Init+0x39a>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	4924      	ldr	r1, [pc, #144]	; (8001414 <EE_Init+0x2a4>)
 8001382:	2001      	movs	r0, #1
 8001384:	f004 fe1a 	bl	8005fbc <HAL_FLASH_Program>
 8001388:	4603      	mov	r3, r0
 800138a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800138c:	7efb      	ldrb	r3, [r7, #27]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 80b5 	beq.w	80014fe <EE_Init+0x38e>
        {
          return FlashStatus;
 8001394:	7efb      	ldrb	r3, [r7, #27]
 8001396:	b29b      	uxth	r3, r3
 8001398:	e0b7      	b.n	800150a <EE_Init+0x39a>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800139a:	f000 f939 	bl	8001610 <EE_Format>
 800139e:	4603      	mov	r3, r0
 80013a0:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013a2:	7efb      	ldrb	r3, [r7, #27]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80aa 	beq.w	80014fe <EE_Init+0x38e>
        {
          return FlashStatus;
 80013aa:	7efb      	ldrb	r3, [r7, #27]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	e0ac      	b.n	800150a <EE_Init+0x39a>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013b0:	8c3b      	ldrh	r3, [r7, #32]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10a      	bne.n	80013cc <EE_Init+0x25c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013b6:	f000 f92b 	bl	8001610 <EE_Format>
 80013ba:	4603      	mov	r3, r0
 80013bc:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013be:	7efb      	ldrb	r3, [r7, #27]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 809e 	beq.w	8001502 <EE_Init+0x392>
        {
          return FlashStatus;
 80013c6:	7efb      	ldrb	r3, [r7, #27]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	e09e      	b.n	800150a <EE_Init+0x39a>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013cc:	8c3b      	ldrh	r3, [r7, #32]
 80013ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d11b      	bne.n	800140e <EE_Init+0x29e>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013d6:	2307      	movs	r3, #7
 80013d8:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013de:	2302      	movs	r3, #2
 80013e0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <EE_Init+0x2a8>)
 80013e4:	f000 f8a0 	bl	8001528 <EE_VerifyPageFullyErased>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f040 8089 	bne.w	8001502 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80013f0:	f107 0214 	add.w	r2, r7, #20
 80013f4:	463b      	mov	r3, r7
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f004 ff93 	bl	8006324 <HAL_FLASHEx_Erase>
 80013fe:	4603      	mov	r3, r0
 8001400:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001402:	7efb      	ldrb	r3, [r7, #27]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d07c      	beq.n	8001502 <EE_Init+0x392>
          {
            return FlashStatus;
 8001408:	7efb      	ldrb	r3, [r7, #27]
 800140a:	b29b      	uxth	r3, r3
 800140c:	e07d      	b.n	800150a <EE_Init+0x39a>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800140e:	2300      	movs	r3, #0
 8001410:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001412:	e03a      	b.n	800148a <EE_Init+0x31a>
 8001414:	08008000 	.word	0x08008000
 8001418:	08028000 	.word	0x08028000
 800141c:	08008006 	.word	0x08008006
 8001420:	2000041c 	.word	0x2000041c
 8001424:	20000284 	.word	0x20000284
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001428:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <EE_Init+0x3a4>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	b29a      	uxth	r2, r3
 800142e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001430:	4939      	ldr	r1, [pc, #228]	; (8001518 <EE_Init+0x3a8>)
 8001432:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001436:	429a      	cmp	r2, r3
 8001438:	d101      	bne.n	800143e <EE_Init+0x2ce>
          {
            x = VarIdx;
 800143a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800143c:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 800143e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001440:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001444:	429a      	cmp	r2, r3
 8001446:	d01d      	beq.n	8001484 <EE_Init+0x314>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001448:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800144a:	4a33      	ldr	r2, [pc, #204]	; (8001518 <EE_Init+0x3a8>)
 800144c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001450:	4932      	ldr	r1, [pc, #200]	; (800151c <EE_Init+0x3ac>)
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f892 	bl	800157c <EE_ReadVariable>
 8001458:	4603      	mov	r3, r0
 800145a:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800145c:	8bbb      	ldrh	r3, [r7, #28]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d010      	beq.n	8001484 <EE_Init+0x314>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001462:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001464:	4a2c      	ldr	r2, [pc, #176]	; (8001518 <EE_Init+0x3a8>)
 8001466:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <EE_Init+0x3ac>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	4619      	mov	r1, r3
 8001470:	4610      	mov	r0, r2
 8001472:	f000 f965 	bl	8001740 <EE_VerifyPageFullWriteVariable>
 8001476:	4603      	mov	r3, r0
 8001478:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800147a:	8bfb      	ldrh	r3, [r7, #30]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <EE_Init+0x314>
              {
                return EepromStatus;
 8001480:	8bfb      	ldrh	r3, [r7, #30]
 8001482:	e042      	b.n	800150a <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001484:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001486:	3301      	adds	r3, #1
 8001488:	84fb      	strh	r3, [r7, #38]	; 0x26
 800148a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148c:	2b03      	cmp	r3, #3
 800148e:	d9cb      	bls.n	8001428 <EE_Init+0x2b8>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	4921      	ldr	r1, [pc, #132]	; (8001520 <EE_Init+0x3b0>)
 800149a:	2001      	movs	r0, #1
 800149c:	f004 fd8e 	bl	8005fbc <HAL_FLASH_Program>
 80014a0:	4603      	mov	r3, r0
 80014a2:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80014a4:	7efb      	ldrb	r3, [r7, #27]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <EE_Init+0x340>
        {
          return FlashStatus;
 80014aa:	7efb      	ldrb	r3, [r7, #27]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	e02c      	b.n	800150a <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE0_ID;
 80014b0:	2306      	movs	r3, #6
 80014b2:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80014b8:	2302      	movs	r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80014bc:	4819      	ldr	r0, [pc, #100]	; (8001524 <EE_Init+0x3b4>)
 80014be:	f000 f833 	bl	8001528 <EE_VerifyPageFullyErased>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d11c      	bne.n	8001502 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80014c8:	f107 0214 	add.w	r2, r7, #20
 80014cc:	463b      	mov	r3, r7
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 ff27 	bl	8006324 <HAL_FLASHEx_Erase>
 80014d6:	4603      	mov	r3, r0
 80014d8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80014da:	7efb      	ldrb	r3, [r7, #27]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d010      	beq.n	8001502 <EE_Init+0x392>
          {
            return FlashStatus;
 80014e0:	7efb      	ldrb	r3, [r7, #27]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	e011      	b.n	800150a <EE_Init+0x39a>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80014e6:	f000 f893 	bl	8001610 <EE_Format>
 80014ea:	4603      	mov	r3, r0
 80014ec:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80014ee:	7efb      	ldrb	r3, [r7, #27]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <EE_Init+0x396>
      {
        return FlashStatus;
 80014f4:	7efb      	ldrb	r3, [r7, #27]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	e007      	b.n	800150a <EE_Init+0x39a>
      break;
 80014fa:	bf00      	nop
 80014fc:	e004      	b.n	8001508 <EE_Init+0x398>
      break;
 80014fe:	bf00      	nop
 8001500:	e002      	b.n	8001508 <EE_Init+0x398>
      break;
 8001502:	bf00      	nop
 8001504:	e000      	b.n	8001508 <EE_Init+0x398>
      }
      break;
 8001506:	bf00      	nop
  }

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	08028006 	.word	0x08028006
 8001518:	2000041c 	.word	0x2000041c
 800151c:	20000284 	.word	0x20000284
 8001520:	08028000 	.word	0x08028000
 8001524:	08008000 	.word	0x08008000

08001528 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8001530:	2301      	movs	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
  uint32_t BeginAddress = Address;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	613b      	str	r3, [r7, #16]
  uint16_t AddressValue = 0x5555;
 8001538:	f245 5355 	movw	r3, #21845	; 0x5555
 800153c:	81fb      	strh	r3, [r7, #14]

  /* Check each active page address starting from end */
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800153e:	e00d      	b.n	800155c <EE_VerifyPageFullyErased+0x34>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8001546:	89fb      	ldrh	r3, [r7, #14]
 8001548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800154c:	4293      	cmp	r3, r2
 800154e:	d002      	beq.n	8001556 <EE_VerifyPageFullyErased+0x2e>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

      break;
 8001554:	e00a      	b.n	800156c <EE_VerifyPageFullyErased+0x44>
    }
    /* Next address location */
    Address = Address + 4;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3304      	adds	r3, #4
 800155a:	607b      	str	r3, [r7, #4]
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8001562:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	d9e9      	bls.n	8001540 <EE_VerifyPageFullyErased+0x18>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	b29b      	uxth	r3, r3
}
 8001570:	4618      	mov	r0, r3
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001588:	2300      	movs	r3, #0
 800158a:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800158c:	f245 5355 	movw	r3, #21845	; 0x5555
 8001590:	81bb      	strh	r3, [r7, #12]
 8001592:	2301      	movs	r3, #1
 8001594:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <EE_ReadVariable+0x8c>)
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <EE_ReadVariable+0x8c>)
 800159c:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f888 	bl	80016b4 <EE_FindValidPage>
 80015a4:	4603      	mov	r3, r0
 80015a6:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80015a8:	89fb      	ldrh	r3, [r7, #14]
 80015aa:	2bab      	cmp	r3, #171	; 0xab
 80015ac:	d101      	bne.n	80015b2 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80015ae:	23ab      	movs	r3, #171	; 0xab
 80015b0:	e026      	b.n	8001600 <EE_ReadVariable+0x84>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80015b2:	89fb      	ldrh	r3, [r7, #14]
 80015b4:	045b      	lsls	r3, r3, #17
 80015b6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80015ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015be:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	3301      	adds	r3, #1
 80015c4:	045a      	lsls	r2, r3, #17
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <EE_ReadVariable+0x90>)
 80015c8:	4413      	add	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80015cc:	e012      	b.n	80015f4 <EE_ReadVariable+0x78>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80015d4:	89ba      	ldrh	r2, [r7, #12]
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d108      	bne.n	80015ee <EE_ReadVariable+0x72>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	3b02      	subs	r3, #2
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	82fb      	strh	r3, [r7, #22]

      break;
 80015ec:	e007      	b.n	80015fe <EE_ReadVariable+0x82>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	3b04      	subs	r3, #4
 80015f2:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3302      	adds	r3, #2
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d8e7      	bhi.n	80015ce <EE_ReadVariable+0x52>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80015fe:	8afb      	ldrh	r3, [r7, #22]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	08008000 	.word	0x08008000
 800160c:	08007ffe 	.word	0x08007ffe

08001610 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8001622:	2306      	movs	r3, #6
 8001624:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800162a:	2302      	movs	r3, #2
 800162c:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800162e:	481f      	ldr	r0, [pc, #124]	; (80016ac <EE_Format+0x9c>)
 8001630:	f7ff ff7a 	bl	8001528 <EE_VerifyPageFullyErased>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10d      	bne.n	8001656 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800163a:	f107 0218 	add.w	r2, r7, #24
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f004 fe6e 	bl	8006324 <HAL_FLASHEx_Erase>
 8001648:	4603      	mov	r3, r0
 800164a:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800164c:	7ffb      	ldrb	r3, [r7, #31]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <EE_Format+0x46>
    {
      return FlashStatus;
 8001652:	7ffb      	ldrb	r3, [r7, #31]
 8001654:	e025      	b.n	80016a2 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	4913      	ldr	r1, [pc, #76]	; (80016ac <EE_Format+0x9c>)
 8001660:	2001      	movs	r0, #1
 8001662:	f004 fcab 	bl	8005fbc <HAL_FLASH_Program>
 8001666:	4603      	mov	r3, r0
 8001668:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800166a:	7ffb      	ldrb	r3, [r7, #31]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <EE_Format+0x64>
  {
    return FlashStatus;
 8001670:	7ffb      	ldrb	r3, [r7, #31]
 8001672:	e016      	b.n	80016a2 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001674:	2307      	movs	r3, #7
 8001676:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001678:	480d      	ldr	r0, [pc, #52]	; (80016b0 <EE_Format+0xa0>)
 800167a:	f7ff ff55 	bl	8001528 <EE_VerifyPageFullyErased>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10d      	bne.n	80016a0 <EE_Format+0x90>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001684:	f107 0218 	add.w	r2, r7, #24
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f004 fe49 	bl	8006324 <HAL_FLASHEx_Erase>
 8001692:	4603      	mov	r3, r0
 8001694:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8001696:	7ffb      	ldrb	r3, [r7, #31]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <EE_Format+0x90>
    {
      return FlashStatus;
 800169c:	7ffb      	ldrb	r3, [r7, #31]
 800169e:	e000      	b.n	80016a2 <EE_Format+0x92>
    }
  }

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	08008000 	.word	0x08008000
 80016b0:	08028000 	.word	0x08028000

080016b4 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80016be:	2306      	movs	r3, #6
 80016c0:	81fb      	strh	r3, [r7, #14]
 80016c2:	2306      	movs	r3, #6
 80016c4:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <EE_FindValidPage+0x84>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <EE_FindValidPage+0x88>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d01b      	beq.n	8001710 <EE_FindValidPage+0x5c>
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d125      	bne.n	8001728 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 80016dc:	89bb      	ldrh	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d108      	bne.n	80016f4 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 80016e2:	89fb      	ldrh	r3, [r7, #14]
 80016e4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d101      	bne.n	80016f0 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 80016ec:	2300      	movs	r3, #0
 80016ee:	e01c      	b.n	800172a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80016f0:	2301      	movs	r3, #1
 80016f2:	e01a      	b.n	800172a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 80016f4:	89fb      	ldrh	r3, [r7, #14]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d108      	bne.n	800170c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 80016fa:	89bb      	ldrh	r3, [r7, #12]
 80016fc:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001700:	4293      	cmp	r3, r2
 8001702:	d101      	bne.n	8001708 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001704:	2301      	movs	r3, #1
 8001706:	e010      	b.n	800172a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001708:	2300      	movs	r3, #0
 800170a:	e00e      	b.n	800172a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 800170c:	23ab      	movs	r3, #171	; 0xab
 800170e:	e00c      	b.n	800172a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001710:	89fb      	ldrh	r3, [r7, #14]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001716:	2300      	movs	r3, #0
 8001718:	e007      	b.n	800172a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800171a:	89bb      	ldrh	r3, [r7, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001720:	2301      	movs	r3, #1
 8001722:	e002      	b.n	800172a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001724:	23ab      	movs	r3, #171	; 0xab
 8001726:	e000      	b.n	800172a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001728:	2300      	movs	r3, #0
  }
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	08008000 	.word	0x08008000
 800173c:	08028000 	.word	0x08028000

08001740 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	80fb      	strh	r3, [r7, #6]
 800174c:	4613      	mov	r3, r2
 800174e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8001754:	2300      	movs	r3, #0
 8001756:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <EE_VerifyPageFullWriteVariable+0xb4>)
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <EE_VerifyPageFullWriteVariable+0xb8>)
 800175e:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff ffa7 	bl	80016b4 <EE_FindValidPage>
 8001766:	4603      	mov	r3, r0
 8001768:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800176a:	8a3b      	ldrh	r3, [r7, #16]
 800176c:	2bab      	cmp	r3, #171	; 0xab
 800176e:	d101      	bne.n	8001774 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8001770:	23ab      	movs	r3, #171	; 0xab
 8001772:	e03a      	b.n	80017ea <EE_VerifyPageFullWriteVariable+0xaa>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001774:	8a3b      	ldrh	r3, [r7, #16]
 8001776:	045b      	lsls	r3, r3, #17
 8001778:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800177c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001780:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001782:	8a3b      	ldrh	r3, [r7, #16]
 8001784:	3301      	adds	r3, #1
 8001786:	045a      	lsls	r2, r3, #17
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <EE_VerifyPageFullWriteVariable+0xbc>)
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 800178e:	e027      	b.n	80017e0 <EE_VerifyPageFullWriteVariable+0xa0>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d11f      	bne.n	80017da <EE_VerifyPageFullWriteVariable+0x9a>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);
 800179a:	88bb      	ldrh	r3, [r7, #4]
 800179c:	f04f 0400 	mov.w	r4, #0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4623      	mov	r3, r4
 80017a4:	6979      	ldr	r1, [r7, #20]
 80017a6:	2001      	movs	r0, #1
 80017a8:	f004 fc08 	bl	8005fbc <HAL_FLASH_Program>
 80017ac:	4603      	mov	r3, r0
 80017ae:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80017b0:	7cfb      	ldrb	r3, [r7, #19]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <EE_VerifyPageFullWriteVariable+0x7c>
      {
        return FlashStatus;
 80017b6:	7cfb      	ldrb	r3, [r7, #19]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	e016      	b.n	80017ea <EE_VerifyPageFullWriteVariable+0xaa>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	1c99      	adds	r1, r3, #2
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	f04f 0400 	mov.w	r4, #0
 80017c6:	461a      	mov	r2, r3
 80017c8:	4623      	mov	r3, r4
 80017ca:	2001      	movs	r0, #1
 80017cc:	f004 fbf6 	bl	8005fbc <HAL_FLASH_Program>
 80017d0:	4603      	mov	r3, r0
 80017d2:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 80017d4:	7cfb      	ldrb	r3, [r7, #19]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	e007      	b.n	80017ea <EE_VerifyPageFullWriteVariable+0xaa>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3304      	adds	r3, #4
 80017de:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d3d3      	bcc.n	8001790 <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80017e8:	2380      	movs	r3, #128	; 0x80
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	371c      	adds	r7, #28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	08008000 	.word	0x08008000
 80017f8:	08028000 	.word	0x08028000
 80017fc:	08007fff 	.word	0x08007fff

08001800 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <MX_GPIO_Init+0xd4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a2d      	ldr	r2, [pc, #180]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <MX_GPIO_Init+0xd4>)
 800183c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <MX_GPIO_Init+0xd4>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <MX_GPIO_Init+0xd4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KB_R3_Pin|KB_R4_Pin|KB_R2_Pin
 8001886:	2200      	movs	r2, #0
 8001888:	f44f 51c7 	mov.w	r1, #6368	; 0x18e0
 800188c:	4812      	ldr	r0, [pc, #72]	; (80018d8 <MX_GPIO_Init+0xd8>)
 800188e:	f005 f8e7 	bl	8006a60 <HAL_GPIO_WritePin>
                          |KB_R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KB_C2_Pin|KB_C3_Pin|KB_C1_Pin;
 8001892:	f240 2312 	movw	r3, #530	; 0x212
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189c:	2301      	movs	r3, #1
 800189e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	480c      	ldr	r0, [pc, #48]	; (80018d8 <MX_GPIO_Init+0xd8>)
 80018a8:	f004 fe5e 	bl	8006568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|KB_R3_Pin|KB_R4_Pin|KB_R2_Pin
 80018ac:	f44f 53c7 	mov.w	r3, #6368	; 0x18e0
 80018b0:	617b      	str	r3, [r7, #20]
                          |KB_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_GPIO_Init+0xd8>)
 80018c6:	f004 fe4f 	bl	8006568 <HAL_GPIO_Init>

}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	; 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020000 	.word	0x40020000

080018dc <hts221_init>:

#include "hts221_add.h"



int32_t hts221_init(){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
	int32_t status;
	status = IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 80018e2:	2105      	movs	r1, #5
 80018e4:	2000      	movs	r0, #0
 80018e6:	f003 f805 	bl	80048f4 <IKS01A2_ENV_SENSOR_Init>
 80018ea:	6078      	str	r0, [r7, #4]
	return status;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <hts221_read_temp>:

int32_t hts221_read_temp(float *temp){
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
	int32_t status;
	status = IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_TEMPERATURE, temp);
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	2101      	movs	r1, #1
 8001902:	2000      	movs	r0, #0
 8001904:	f003 f8b6 	bl	8004a74 <IKS01A2_ENV_SENSOR_GetValue>
 8001908:	60f8      	str	r0, [r7, #12]
	return status;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <hts221_read_humid>:
int32_t hts221_read_humid(float *hum){
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	int32_t status;
	status = IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_HUMIDITY, hum);
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	2104      	movs	r1, #4
 8001920:	2000      	movs	r0, #0
 8001922:	f003 f8a7 	bl	8004a74 <IKS01A2_ENV_SENSOR_GetValue>
 8001926:	60f8      	str	r0, [r7, #12]
	return status;
 8001928:	68fb      	ldr	r3, [r7, #12]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <MX_I2C3_Init+0x50>)
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <MX_I2C3_Init+0x54>)
 800193c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <MX_I2C3_Init+0x50>)
 8001940:	4a12      	ldr	r2, [pc, #72]	; (800198c <MX_I2C3_Init+0x58>)
 8001942:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <MX_I2C3_Init+0x50>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <MX_I2C3_Init+0x50>)
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_I2C3_Init+0x50>)
 8001952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001956:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <MX_I2C3_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_I2C3_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <MX_I2C3_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_I2C3_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_I2C3_Init+0x50>)
 8001972:	f005 f88f 	bl	8006a94 <HAL_I2C_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800197c:	f000 fb78 	bl	8002070 <Error_Handler>
  }

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200003c8 	.word	0x200003c8
 8001988:	40005c00 	.word	0x40005c00
 800198c:	000186a0 	.word	0x000186a0

08001990 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a29      	ldr	r2, [pc, #164]	; (8001a54 <HAL_I2C_MspInit+0xc4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d14b      	bne.n	8001a4a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_I2C_MspInit+0xc8>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <HAL_I2C_MspInit+0xc8>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <HAL_I2C_MspInit+0xc8>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_I2C_MspInit+0xc8>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a20      	ldr	r2, [pc, #128]	; (8001a58 <HAL_I2C_MspInit+0xc8>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_I2C_MspInit+0xc8>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f0:	2312      	movs	r3, #18
 80019f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019fc:	2304      	movs	r3, #4
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	4815      	ldr	r0, [pc, #84]	; (8001a5c <HAL_I2C_MspInit+0xcc>)
 8001a08:	f004 fdae 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a12:	2312      	movs	r3, #18
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	480d      	ldr	r0, [pc, #52]	; (8001a60 <HAL_I2C_MspInit+0xd0>)
 8001a2a:	f004 fd9d 	bl	8006568 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_I2C_MspInit+0xc8>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_I2C_MspInit+0xc8>)
 8001a38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_I2C_MspInit+0xc8>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40005c00 	.word	0x40005c00
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	40020000 	.word	0x40020000

08001a64 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <HAL_I2C_MspDeInit+0x3c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10f      	bne.n	8001a96 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_I2C_MspDeInit+0x40>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_I2C_MspDeInit+0x40>)
 8001a7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a86:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <HAL_I2C_MspDeInit+0x44>)
 8001a88:	f004 fef0 	bl	800686c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8001a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a90:	4806      	ldr	r0, [pc, #24]	; (8001aac <HAL_I2C_MspDeInit+0x48>)
 8001a92:	f004 feeb 	bl	800686c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40005c00 	.word	0x40005c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020000 	.word	0x40020000

08001ab0 <kb_read_key>:
{7, 8, 9},
{KB_STAR, 0 , KB_HASH}};
const uint16_t kbRows[4] = {KB_R1_Pin, KB_R2_Pin, KB_R3_Pin, KB_R4_Pin};
const uint16_t kbCols[3] = {KB_C1_Pin,KB_C2_Pin,KB_C3_Pin};

uint8_t kb_read_key(){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
	uint8_t r,c;
	for(r=0;r<4;r++){
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	71fb      	strb	r3, [r7, #7]
 8001aba:	e02f      	b.n	8001b1c <kb_read_key+0x6c>
		HAL_GPIO_WritePin(KB_PORT, KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin, GPIO_PIN_SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8001ac2:	481a      	ldr	r0, [pc, #104]	; (8001b2c <kb_read_key+0x7c>)
 8001ac4:	f004 ffcc 	bl	8006a60 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(KB_PORT, kbRows[r], GPIO_PIN_RESET);
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <kb_read_key+0x80>)
 8001acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4815      	ldr	r0, [pc, #84]	; (8001b2c <kb_read_key+0x7c>)
 8001ad6:	f004 ffc3 	bl	8006a60 <HAL_GPIO_WritePin>
		for(c=0;c<3;c++){
 8001ada:	2300      	movs	r3, #0
 8001adc:	71bb      	strb	r3, [r7, #6]
 8001ade:	e017      	b.n	8001b10 <kb_read_key+0x60>
			if((!HAL_GPIO_ReadPin(KB_PORT, kbCols[c]))){
 8001ae0:	79bb      	ldrb	r3, [r7, #6]
 8001ae2:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <kb_read_key+0x84>)
 8001ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4810      	ldr	r0, [pc, #64]	; (8001b2c <kb_read_key+0x7c>)
 8001aec:	f004 ffa0 	bl	8006a30 <HAL_GPIO_ReadPin>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <kb_read_key+0x5a>
				return kbMap[r][c];
 8001af6:	79fa      	ldrb	r2, [r7, #7]
 8001af8:	79b9      	ldrb	r1, [r7, #6]
 8001afa:	480f      	ldr	r0, [pc, #60]	; (8001b38 <kb_read_key+0x88>)
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	4403      	add	r3, r0
 8001b04:	440b      	add	r3, r1
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	e00c      	b.n	8001b24 <kb_read_key+0x74>
		for(c=0;c<3;c++){
 8001b0a:	79bb      	ldrb	r3, [r7, #6]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	71bb      	strb	r3, [r7, #6]
 8001b10:	79bb      	ldrb	r3, [r7, #6]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d9e4      	bls.n	8001ae0 <kb_read_key+0x30>
	for(r=0;r<4;r++){
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	71fb      	strb	r3, [r7, #7]
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d9cc      	bls.n	8001abc <kb_read_key+0xc>
			}
		}
	}
	return 0xFF; //nic nie wciśnięte
 8001b22:	23ff      	movs	r3, #255	; 0xff
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	0800cd6c 	.word	0x0800cd6c
 8001b34:	0800cd74 	.word	0x0800cd74
 8001b38:	0800cd60 	.word	0x0800cd60

08001b3c <kb_service>:

uint8_t kb_service(){
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
	while(KB_STATE==KB_STATE_IDLE || KB_STATE==KB_STATE_WAIT);
 8001b40:	bf00      	nop
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <kb_service+0x30>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0fb      	beq.n	8001b42 <kb_service+0x6>
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <kb_service+0x30>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d0f7      	beq.n	8001b42 <kb_service+0x6>
	if(KB_STATE==KB_STATE_PRESSED)
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <kb_service+0x30>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d102      	bne.n	8001b60 <kb_service+0x24>
		return KB_KEY;
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <kb_service+0x34>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	e7ff      	b.n	8001b60 <kb_service+0x24>
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000286 	.word	0x20000286
 8001b70:	20000000 	.word	0x20000000

08001b74 <lcd_init>:
 *      Author: Adam Siemasz
 */

#include "lcd.h"

void lcd_init(struct lcd_disp * lcd){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
	if(lcd->bl)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <lcd_init+0x1a>
		xpin = BL_PIN;
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(40);
 8001b8e:	2028      	movs	r0, #40	; 0x28
 8001b90:	f003 f99c 	bl	8004ecc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8BIT, xpin);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	2130      	movs	r1, #48	; 0x30
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 f853 	bl	8001c48 <lcd_write>
	HAL_Delay(5);
 8001ba2:	2005      	movs	r0, #5
 8001ba4:	f003 f992 	bl	8004ecc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8BIT, xpin);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	7bfa      	ldrb	r2, [r7, #15]
 8001bae:	2130      	movs	r1, #48	; 0x30
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 f849 	bl	8001c48 <lcd_write>
	HAL_Delay(1);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f003 f988 	bl	8004ecc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8BIT, xpin);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	7bfa      	ldrb	r2, [r7, #15]
 8001bc2:	2130      	movs	r1, #48	; 0x30
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f83f 	bl	8001c48 <lcd_write>
	HAL_Delay(10);
 8001bca:	200a      	movs	r0, #10
 8001bcc:	f003 f97e 	bl	8004ecc <HAL_Delay>
	lcd_write(lcd->addr, INIT_4BIT, xpin);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f835 	bl	8001c48 <lcd_write>
	HAL_Delay(10);
 8001bde:	200a      	movs	r0, #10
 8001be0:	f003 f974 	bl	8004ecc <HAL_Delay>

	lcd_write(lcd->addr,0x28,xpin); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	2128      	movs	r1, #40	; 0x28
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 f82b 	bl	8001c48 <lcd_write>
	HAL_Delay(1);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f003 f96a 	bl	8004ecc <HAL_Delay>
	lcd_write(lcd->addr,0x08,xpin); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	2108      	movs	r1, #8
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 f821 	bl	8001c48 <lcd_write>
	HAL_Delay(1);
 8001c06:	2001      	movs	r0, #1
 8001c08:	f003 f960 	bl	8004ecc <HAL_Delay>
	lcd_clear(&disp);
 8001c0c:	480d      	ldr	r0, [pc, #52]	; (8001c44 <lcd_init+0xd0>)
 8001c0e:	f000 f8b2 	bl	8001d76 <lcd_clear>
	HAL_Delay(1);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f003 f95a 	bl	8004ecc <HAL_Delay>
	lcd_write(lcd->addr,0x06,xpin); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	2106      	movs	r1, #6
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f811 	bl	8001c48 <lcd_write>
	HAL_Delay(1);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f003 f950 	bl	8004ecc <HAL_Delay>
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF,xpin);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	210c      	movs	r1, #12
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f807 	bl	8001c48 <lcd_write>

}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000428 	.word	0x20000428

08001c48 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
 8001c52:	460b      	mov	r3, r1
 8001c54:	71bb      	strb	r3, [r7, #6]
 8001c56:	4613      	mov	r3, r2
 8001c58:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8001c5a:	79bb      	ldrb	r3, [r7, #6]
 8001c5c:	f023 030f 	bic.w	r3, r3, #15
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	797b      	ldrb	r3, [r7, #5]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001c70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c74:	f023 030f 	bic.w	r3, r3, #15
 8001c78:	b25a      	sxtb	r2, r3
 8001c7a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8001c86:	79bb      	ldrb	r3, [r7, #6]
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	797b      	ldrb	r3, [r7, #5]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	b25a      	sxtb	r2, r3
 8001ca0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&HI2C, addr, tx_data, 4, 100);
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	b299      	uxth	r1, r3
 8001cb0:	f107 020c 	add.w	r2, r7, #12
 8001cb4:	2364      	movs	r3, #100	; 0x64
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2304      	movs	r3, #4
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <lcd_write+0x88>)
 8001cbc:	f005 f852 	bl	8006d64 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001cc0:	2005      	movs	r0, #5
 8001cc2:	f003 f903 	bl	8004ecc <HAL_Delay>
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200003c8 	.word	0x200003c8

08001cd4 <lcd_display>:

void lcd_display(struct lcd_disp * lcd){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0 , i = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73bb      	strb	r3, [r7, #14]
	if(lcd->bl){
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <lcd_display+0x1e>
		xpin = BL_PIN;
 8001cee:	2308      	movs	r3, #8
 8001cf0:	73fb      	strb	r3, [r7, #15]
	}

	lcd_write(lcd->addr, LINE_1, xpin);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ffa4 	bl	8001c48 <lcd_write>
	while(lcd->f_line[i])
 8001d00:	e00f      	b.n	8001d22 <lcd_display+0x4e>
	{
		lcd_write(lcd->addr,lcd->f_line[i], (xpin | RS_PIN));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7818      	ldrb	r0, [r3, #0]
 8001d06:	7bbb      	ldrb	r3, [r7, #14]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	7859      	ldrb	r1, [r3, #1]
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	f7ff ff96 	bl	8001c48 <lcd_write>
		i++;
 8001d1c:	7bbb      	ldrb	r3, [r7, #14]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001d22:	7bbb      	ldrb	r3, [r7, #14]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	785b      	ldrb	r3, [r3, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1e9      	bne.n	8001d02 <lcd_display+0x2e>
	}
	i = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, LINE_2, xpin);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	21c0      	movs	r1, #192	; 0xc0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff84 	bl	8001c48 <lcd_write>
	while(lcd->s_line[i])
 8001d40:	e00f      	b.n	8001d62 <lcd_display+0x8e>
		{
			lcd_write(lcd->addr,lcd->s_line[i], (xpin | RS_PIN));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	7818      	ldrb	r0, [r3, #0]
 8001d46:	7bbb      	ldrb	r3, [r7, #14]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	7c99      	ldrb	r1, [r3, #18]
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	f7ff ff76 	bl	8001c48 <lcd_write>
			i++;
 8001d5c:	7bbb      	ldrb	r3, [r7, #14]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001d62:	7bbb      	ldrb	r3, [r7, #14]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	7c9b      	ldrb	r3, [r3, #18]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1e9      	bne.n	8001d42 <lcd_display+0x6e>
		}
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd){
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
	if(lcd->bl)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	73fb      	strb	r3, [r7, #15]
	}
	lcd_write(lcd->addr,LCD_CLEAR,xpin);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	2101      	movs	r1, #1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff55 	bl	8001c48 <lcd_write>

}
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dac:	f003 f81c 	bl	8004de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001db0:	f000 f87c 	bl	8001eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db4:	f7ff fd24 	bl	8001800 <MX_GPIO_Init>
  MX_DMA_Init();
 8001db8:	f7ff f9ba 	bl	8001130 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001dbc:	f001 f966 	bl	800308c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001dc0:	f7ff f8ca 	bl	8000f58 <MX_ADC1_Init>
  MX_TIM11_Init();
 8001dc4:	f001 f8aa 	bl	8002f1c <MX_TIM11_Init>
  MX_I2C3_Init();
 8001dc8:	f7ff fdb4 	bl	8001934 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001dcc:	f000 ffe2 	bl	8002d94 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001dd0:	f001 f82e 	bl	8002e30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_SYSTICK_Config(72000);
 8001dd4:	4829      	ldr	r0, [pc, #164]	; (8001e7c <main+0xd4>)
 8001dd6:	f003 fd76 	bl	80058c6 <HAL_SYSTICK_Config>
  hts221_init();
 8001dda:	f7ff fd7f 	bl	80018dc <hts221_init>

  data_setting_init();
 8001dde:	f000 f94f 	bl	8002080 <data_setting_init>

  disp.addr = (0x27 << 1);
 8001de2:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <main+0xd8>)
 8001de4:	224e      	movs	r2, #78	; 0x4e
 8001de6:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <main+0xd8>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 8001df0:	4823      	ldr	r0, [pc, #140]	; (8001e80 <main+0xd8>)
 8001df2:	f7ff febf 	bl	8001b74 <lcd_init>
  sprintf((char *)disp.f_line, "Start ");
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <main+0xdc>)
 8001df8:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <main+0xe0>)
 8001dfa:	6810      	ldr	r0, [r2, #0]
 8001dfc:	6018      	str	r0, [r3, #0]
 8001dfe:	8891      	ldrh	r1, [r2, #4]
 8001e00:	7992      	ldrb	r2, [r2, #6]
 8001e02:	8099      	strh	r1, [r3, #4]
 8001e04:	719a      	strb	r2, [r3, #6]
  sprintf((char *) disp.s_line,"programu");
 8001e06:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <main+0xe4>)
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <main+0xe8>)
 8001e0a:	cb03      	ldmia	r3!, {r0, r1}
 8001e0c:	6010      	str	r0, [r2, #0]
 8001e0e:	6051      	str	r1, [r2, #4]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	7213      	strb	r3, [r2, #8]
  lcd_display(&disp);
 8001e14:	481a      	ldr	r0, [pc, #104]	; (8001e80 <main+0xd8>)
 8001e16:	f7ff ff5d 	bl	8001cd4 <lcd_display>
  HAL_Delay(500);
 8001e1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e1e:	f003 f855 	bl	8004ecc <HAL_Delay>
  lcd_clear(&disp);
 8001e22:	4817      	ldr	r0, [pc, #92]	; (8001e80 <main+0xd8>)
 8001e24:	f7ff ffa7 	bl	8001d76 <lcd_clear>
  sprintf((char *)disp.f_line, " ");
 8001e28:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <main+0xdc>)
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <main+0xec>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	8013      	strh	r3, [r2, #0]
  sprintf((char *)disp.s_line, " ");
 8001e30:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <main+0xe4>)
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <main+0xec>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	8013      	strh	r3, [r2, #0]

  HAL_FLASH_Unlock();
 8001e38:	f004 f914 	bl	8006064 <HAL_FLASH_Unlock>
  if(EE_Init() != HAL_OK){
 8001e3c:	f7ff f998 	bl	8001170 <EE_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <main+0xa2>
	  Error_Handler();
 8001e46:	f000 f913 	bl	8002070 <Error_Handler>
  }


  HAL_ADC_Start_DMA(&hadc1, &s, 1);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4912      	ldr	r1, [pc, #72]	; (8001e98 <main+0xf0>)
 8001e4e:	4813      	ldr	r0, [pc, #76]	; (8001e9c <main+0xf4>)
 8001e50:	f003 f8a2 	bl	8004f98 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim11);
 8001e54:	4812      	ldr	r0, [pc, #72]	; (8001ea0 <main+0xf8>)
 8001e56:	f006 fc28 	bl	80086aa <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001e5a:	4812      	ldr	r0, [pc, #72]	; (8001ea4 <main+0xfc>)
 8001e5c:	f006 fc25 	bl	80086aa <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(setting_mode == 0)
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <main+0x100>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d103      	bne.n	8001e70 <main+0xc8>
		lcd_display(&disp);
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <main+0xd8>)
 8001e6a:	f7ff ff33 	bl	8001cd4 <lcd_display>
 8001e6e:	e7f7      	b.n	8001e60 <main+0xb8>
	else{
		data_setting_enter();
 8001e70:	f000 f926 	bl	80020c0 <data_setting_enter>
		setting_mode = 0;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <main+0x100>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
	if(setting_mode == 0)
 8001e7a:	e7f1      	b.n	8001e60 <main+0xb8>
 8001e7c:	00011940 	.word	0x00011940
 8001e80:	20000428 	.word	0x20000428
 8001e84:	20000429 	.word	0x20000429
 8001e88:	0800cbf8 	.word	0x0800cbf8
 8001e8c:	2000043a 	.word	0x2000043a
 8001e90:	0800cc00 	.word	0x0800cc00
 8001e94:	0800cc0c 	.word	0x0800cc0c
 8001e98:	20000424 	.word	0x20000424
 8001e9c:	20000320 	.word	0x20000320
 8001ea0:	2000050c 	.word	0x2000050c
 8001ea4:	2000054c 	.word	0x2000054c
 8001ea8:	20000288 	.word	0x20000288

08001eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b094      	sub	sp, #80	; 0x50
 8001eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb2:	f107 0320 	add.w	r3, r7, #32
 8001eb6:	2230      	movs	r2, #48	; 0x30
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f007 ffca 	bl	8009e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec0:	f107 030c 	add.w	r3, r7, #12
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <SystemClock_Config+0xd0>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <SystemClock_Config+0xd0>)
 8001eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ede:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee0:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <SystemClock_Config+0xd0>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <SystemClock_Config+0xd4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ef8:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <SystemClock_Config+0xd4>)
 8001efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <SystemClock_Config+0xd4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f10:	2301      	movs	r3, #1
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f14:	2310      	movs	r3, #16
 8001f16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f20:	2310      	movs	r3, #16
 8001f22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 8001f24:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001f28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f2e:	2307      	movs	r3, #7
 8001f30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f32:	f107 0320 	add.w	r3, r7, #32
 8001f36:	4618      	mov	r0, r3
 8001f38:	f005 ff2a 	bl	8007d90 <HAL_RCC_OscConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f42:	f000 f895 	bl	8002070 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f46:	230f      	movs	r3, #15
 8001f48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	2102      	movs	r1, #2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f006 f984 	bl	8008270 <HAL_RCC_ClockConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f6e:	f000 f87f 	bl	8002070 <Error_Handler>
  }
}
 8001f72:	bf00      	nop
 8001f74:	3750      	adds	r7, #80	; 0x50
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40007000 	.word	0x40007000

08001f84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11 ){
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a30      	ldr	r2, [pc, #192]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d124      	bne.n	8001fe0 <HAL_TIM_PeriodElapsedCallback+0x5c>
		uint8_t temp_key = kb_read_key();
 8001f96:	f7ff fd8b 	bl	8001ab0 <kb_read_key>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	73fb      	strb	r3, [r7, #15]

		if(temp_key==0xFF)
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	2bff      	cmp	r3, #255	; 0xff
 8001fa2:	d103      	bne.n	8001fac <HAL_TIM_PeriodElapsedCallback+0x28>
		KB_STATE=KB_STATE_IDLE;
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
 8001faa:	e00e      	b.n	8001fca <HAL_TIM_PeriodElapsedCallback+0x46>
		else if(temp_key==KB_KEY)
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d103      	bne.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x3a>
		KB_STATE=KB_STATE_PRESSED;
 8001fb6:	4b28      	ldr	r3, [pc, #160]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	e005      	b.n	8001fca <HAL_TIM_PeriodElapsedCallback+0x46>
		else{
		KB_STATE=KB_STATE_WAIT;
 8001fbe:	4b26      	ldr	r3, [pc, #152]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	701a      	strb	r2, [r3, #0]
		KB_KEY=temp_key;
 8001fc4:	4a25      	ldr	r2, [pc, #148]	; (800205c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	7013      	strb	r3, [r2, #0]
		}
		if(KB_STATE == KB_STATE_PRESSED && KB_KEY==KB_HASH)
 8001fca:	4b23      	ldr	r3, [pc, #140]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d106      	bne.n	8001fe0 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b0b      	cmp	r3, #11
 8001fd8:	d102      	bne.n	8001fe0 <HAL_TIM_PeriodElapsedCallback+0x5c>
			setting_mode = 1;
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
	}


	if(htim->Instance == TIM2){
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe8:	d131      	bne.n	800204e <HAL_TIM_PeriodElapsedCallback+0xca>
		if(setting_mode)
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d12c      	bne.n	800204c <HAL_TIM_PeriodElapsedCallback+0xc8>
			return;
		get_data();
 8001ff2:	f000 fae1 	bl	80025b8 <get_data>
		data_status = check_data();
 8001ff6:	f000 fc57 	bl	80028a8 <check_data>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002000:	701a      	strb	r2, [r3, #0]
		if(data_status == S_OK){
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <HAL_TIM_PeriodElapsedCallback+0x8e>
			print_data(&disp);
 800200a:	4817      	ldr	r0, [pc, #92]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800200c:	f000 fb36 	bl	800267c <print_data>
 8002010:	e01d      	b.n	800204e <HAL_TIM_PeriodElapsedCallback+0xca>
		}
		else{
			if(alert_mode == 1){
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d10d      	bne.n	8002036 <HAL_TIM_PeriodElapsedCallback+0xb2>
				print_alert((int)data_status,&disp);
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4912      	ldr	r1, [pc, #72]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fbd3 	bl	80027cc <print_alert>
				buzzer_alarm(1, 200);
 8002026:	21c8      	movs	r1, #200	; 0xc8
 8002028:	2001      	movs	r0, #1
 800202a:	f7ff f861 	bl	80010f0 <buzzer_alarm>
				alert_mode = 0;
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	e00b      	b.n	800204e <HAL_TIM_PeriodElapsedCallback+0xca>
			}
			else if(alert_mode == 0 ){
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d107      	bne.n	800204e <HAL_TIM_PeriodElapsedCallback+0xca>
				print_data(&disp);
 800203e:	480a      	ldr	r0, [pc, #40]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002040:	f000 fb1c 	bl	800267c <print_data>
				alert_mode = 1;
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002046:	2201      	movs	r2, #1
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	e000      	b.n	800204e <HAL_TIM_PeriodElapsedCallback+0xca>
			return;
 800204c:	bf00      	nop
			}
		}

	}
}
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40014800 	.word	0x40014800
 8002058:	20000286 	.word	0x20000286
 800205c:	20000000 	.word	0x20000000
 8002060:	20000288 	.word	0x20000288
 8002064:	2000044c 	.word	0x2000044c
 8002068:	20000428 	.word	0x20000428
 800206c:	20000287 	.word	0x20000287

08002070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//lcd_display(0, 0, "Error occured!");
	HAL_Delay(5000);
 8002074:	f241 3088 	movw	r0, #5000	; 0x1388
 8002078:	f002 ff28 	bl	8004ecc <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <data_setting_init>:

data current_data;
data setting_min;
data setting_max;

void data_setting_init(){
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
	setting_min.humid = 55.00;
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <data_setting_init+0x28>)
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <data_setting_init+0x2c>)
 8002088:	605a      	str	r2, [r3, #4]
	setting_min.temp = 18.00;
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <data_setting_init+0x28>)
 800208c:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <data_setting_init+0x30>)
 800208e:	601a      	str	r2, [r3, #0]
	setting_max.humid = 70.00;
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <data_setting_init+0x34>)
 8002092:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <data_setting_init+0x38>)
 8002094:	605a      	str	r2, [r3, #4]
	setting_max.temp = 25.00;
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <data_setting_init+0x34>)
 8002098:	4a08      	ldr	r2, [pc, #32]	; (80020bc <data_setting_init+0x3c>)
 800209a:	601a      	str	r2, [r3, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	2000045c 	.word	0x2000045c
 80020ac:	425c0000 	.word	0x425c0000
 80020b0:	41900000 	.word	0x41900000
 80020b4:	2000046c 	.word	0x2000046c
 80020b8:	428c0000 	.word	0x428c0000
 80020bc:	41c80000 	.word	0x41c80000

080020c0 <data_setting_enter>:

void data_setting_enter(){
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
	float s=0;
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
	char buf[2];
	uint8_t key;
	sprintf((char *)disp.f_line,"Enter settings! ");
 80020cc:	4ba3      	ldr	r3, [pc, #652]	; (800235c <data_setting_enter+0x29c>)
 80020ce:	4aa4      	ldr	r2, [pc, #656]	; (8002360 <data_setting_enter+0x2a0>)
 80020d0:	1c5d      	adds	r5, r3, #1
 80020d2:	4614      	mov	r4, r2
 80020d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d6:	6028      	str	r0, [r5, #0]
 80020d8:	6069      	str	r1, [r5, #4]
 80020da:	60aa      	str	r2, [r5, #8]
 80020dc:	60eb      	str	r3, [r5, #12]
 80020de:	7823      	ldrb	r3, [r4, #0]
 80020e0:	742b      	strb	r3, [r5, #16]
	sprintf((char *)disp.s_line,"                ");
 80020e2:	4b9e      	ldr	r3, [pc, #632]	; (800235c <data_setting_enter+0x29c>)
 80020e4:	4a9f      	ldr	r2, [pc, #636]	; (8002364 <data_setting_enter+0x2a4>)
 80020e6:	f103 0512 	add.w	r5, r3, #18
 80020ea:	4614      	mov	r4, r2
 80020ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ee:	6028      	str	r0, [r5, #0]
 80020f0:	6069      	str	r1, [r5, #4]
 80020f2:	60aa      	str	r2, [r5, #8]
 80020f4:	60eb      	str	r3, [r5, #12]
 80020f6:	7823      	ldrb	r3, [r4, #0]
 80020f8:	742b      	strb	r3, [r5, #16]
	usart_send_string("Setting mode...");
 80020fa:	489b      	ldr	r0, [pc, #620]	; (8002368 <data_setting_enter+0x2a8>)
 80020fc:	f001 f838 	bl	8003170 <usart_send_string>
	lcd_display(&disp);
 8002100:	4896      	ldr	r0, [pc, #600]	; (800235c <data_setting_enter+0x29c>)
 8002102:	f7ff fde7 	bl	8001cd4 <lcd_display>
	HAL_Delay(2000);
 8002106:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800210a:	f002 fedf 	bl	8004ecc <HAL_Delay>
	int i;

	sprintf((char *)disp.f_line,"Min. humid.: ");
 800210e:	4a97      	ldr	r2, [pc, #604]	; (800236c <data_setting_enter+0x2ac>)
 8002110:	4b97      	ldr	r3, [pc, #604]	; (8002370 <data_setting_enter+0x2b0>)
 8002112:	4614      	mov	r4, r2
 8002114:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002116:	6020      	str	r0, [r4, #0]
 8002118:	6061      	str	r1, [r4, #4]
 800211a:	60a2      	str	r2, [r4, #8]
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	81a3      	strh	r3, [r4, #12]
	sprintf((char *)disp.s_line,"");
 8002120:	4b8e      	ldr	r3, [pc, #568]	; (800235c <data_setting_enter+0x29c>)
 8002122:	2200      	movs	r2, #0
 8002124:	749a      	strb	r2, [r3, #18]
	lcd_clear(&disp);
 8002126:	488d      	ldr	r0, [pc, #564]	; (800235c <data_setting_enter+0x29c>)
 8002128:	f7ff fe25 	bl	8001d76 <lcd_clear>
	lcd_display(&disp);
 800212c:	488b      	ldr	r0, [pc, #556]	; (800235c <data_setting_enter+0x29c>)
 800212e:	f7ff fdd1 	bl	8001cd4 <lcd_display>
	for(i=0 ; i<4 ; i++){
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	e068      	b.n	800220a <data_setting_enter+0x14a>
		key = kb_service();
 8002138:	f7ff fd00 	bl	8001b3c <kb_service>
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
		sprintf(buf,"%d",key);
 8002140:	79fa      	ldrb	r2, [r7, #7]
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	498b      	ldr	r1, [pc, #556]	; (8002374 <data_setting_enter+0x2b4>)
 8002146:	4618      	mov	r0, r3
 8002148:	f008 fae8 	bl	800a71c <siprintf>
		strncat(disp.s_line,buf,1);
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	2201      	movs	r2, #1
 8002150:	4619      	mov	r1, r3
 8002152:	4889      	ldr	r0, [pc, #548]	; (8002378 <data_setting_enter+0x2b8>)
 8002154:	f008 fb02 	bl	800a75c <strncat>
		if(i==1)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10b      	bne.n	8002176 <data_setting_enter+0xb6>
			strncat(disp.s_line,".",1);
 800215e:	4886      	ldr	r0, [pc, #536]	; (8002378 <data_setting_enter+0x2b8>)
 8002160:	f7fe f83e 	bl	80001e0 <strlen>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	4b83      	ldr	r3, [pc, #524]	; (8002378 <data_setting_enter+0x2b8>)
 800216a:	4413      	add	r3, r2
 800216c:	4983      	ldr	r1, [pc, #524]	; (800237c <data_setting_enter+0x2bc>)
 800216e:	461a      	mov	r2, r3
 8002170:	460b      	mov	r3, r1
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	8013      	strh	r3, [r2, #0]
		lcd_display(&disp);
 8002176:	4879      	ldr	r0, [pc, #484]	; (800235c <data_setting_enter+0x29c>)
 8002178:	f7ff fdac 	bl	8001cd4 <lcd_display>
		s += 10.0/powf(10.0,(float)i) * (float)key;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002186:	eef0 0a67 	vmov.f32	s1, s15
 800218a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800218e:	f00a f81f 	bl	800c1d0 <powf>
 8002192:	ee10 3a10 	vmov	r3, s0
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe f9de 	bl	8000558 <__aeabi_f2d>
 800219c:	4603      	mov	r3, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	461a      	mov	r2, r3
 80021a2:	4623      	mov	r3, r4
 80021a4:	f04f 0000 	mov.w	r0, #0
 80021a8:	4975      	ldr	r1, [pc, #468]	; (8002380 <data_setting_enter+0x2c0>)
 80021aa:	f7fe fb57 	bl	800085c <__aeabi_ddiv>
 80021ae:	4603      	mov	r3, r0
 80021b0:	460c      	mov	r4, r1
 80021b2:	4625      	mov	r5, r4
 80021b4:	461c      	mov	r4, r3
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c0:	ee17 0a90 	vmov	r0, s15
 80021c4:	f7fe f9c8 	bl	8000558 <__aeabi_f2d>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4620      	mov	r0, r4
 80021ce:	4629      	mov	r1, r5
 80021d0:	f7fe fa1a 	bl	8000608 <__aeabi_dmul>
 80021d4:	4603      	mov	r3, r0
 80021d6:	460c      	mov	r4, r1
 80021d8:	4625      	mov	r5, r4
 80021da:	461c      	mov	r4, r3
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7fe f9bb 	bl	8000558 <__aeabi_f2d>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4620      	mov	r0, r4
 80021e8:	4629      	mov	r1, r5
 80021ea:	f7fe f857 	bl	800029c <__adddf3>
 80021ee:	4603      	mov	r3, r0
 80021f0:	460c      	mov	r4, r1
 80021f2:	4618      	mov	r0, r3
 80021f4:	4621      	mov	r1, r4
 80021f6:	f7fe fcdf 	bl	8000bb8 <__aeabi_d2f>
 80021fa:	4603      	mov	r3, r0
 80021fc:	60fb      	str	r3, [r7, #12]
		HAL_Delay(100);
 80021fe:	2064      	movs	r0, #100	; 0x64
 8002200:	f002 fe64 	bl	8004ecc <HAL_Delay>
	for(i=0 ; i<4 ; i++){
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	3301      	adds	r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b03      	cmp	r3, #3
 800220e:	dd93      	ble.n	8002138 <data_setting_enter+0x78>
	}
	lcd_clear(&disp);
 8002210:	4852      	ldr	r0, [pc, #328]	; (800235c <data_setting_enter+0x29c>)
 8002212:	f7ff fdb0 	bl	8001d76 <lcd_clear>
	setting_min.humid = s;
 8002216:	4a5b      	ldr	r2, [pc, #364]	; (8002384 <data_setting_enter+0x2c4>)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6053      	str	r3, [r2, #4]
	s=0;
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]

	sprintf((char *)disp.f_line,"Max. humid.: ");
 8002222:	4a52      	ldr	r2, [pc, #328]	; (800236c <data_setting_enter+0x2ac>)
 8002224:	4b58      	ldr	r3, [pc, #352]	; (8002388 <data_setting_enter+0x2c8>)
 8002226:	4614      	mov	r4, r2
 8002228:	cb07      	ldmia	r3!, {r0, r1, r2}
 800222a:	6020      	str	r0, [r4, #0]
 800222c:	6061      	str	r1, [r4, #4]
 800222e:	60a2      	str	r2, [r4, #8]
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	81a3      	strh	r3, [r4, #12]
	sprintf((char *)disp.s_line,"");
 8002234:	4b49      	ldr	r3, [pc, #292]	; (800235c <data_setting_enter+0x29c>)
 8002236:	2200      	movs	r2, #0
 8002238:	749a      	strb	r2, [r3, #18]
	lcd_clear(&disp);
 800223a:	4848      	ldr	r0, [pc, #288]	; (800235c <data_setting_enter+0x29c>)
 800223c:	f7ff fd9b 	bl	8001d76 <lcd_clear>
	lcd_display(&disp);
 8002240:	4846      	ldr	r0, [pc, #280]	; (800235c <data_setting_enter+0x29c>)
 8002242:	f7ff fd47 	bl	8001cd4 <lcd_display>
	for(i=0 ; i<4 ; i++){
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	e068      	b.n	800231e <data_setting_enter+0x25e>
		key = kb_service();
 800224c:	f7ff fc76 	bl	8001b3c <kb_service>
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
		sprintf(buf,"%d",key);
 8002254:	79fa      	ldrb	r2, [r7, #7]
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	4946      	ldr	r1, [pc, #280]	; (8002374 <data_setting_enter+0x2b4>)
 800225a:	4618      	mov	r0, r3
 800225c:	f008 fa5e 	bl	800a71c <siprintf>
		strncat(disp.s_line,buf,1);
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2201      	movs	r2, #1
 8002264:	4619      	mov	r1, r3
 8002266:	4844      	ldr	r0, [pc, #272]	; (8002378 <data_setting_enter+0x2b8>)
 8002268:	f008 fa78 	bl	800a75c <strncat>
		if(i==1)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d10b      	bne.n	800228a <data_setting_enter+0x1ca>
			strncat(disp.s_line,".",1);
 8002272:	4841      	ldr	r0, [pc, #260]	; (8002378 <data_setting_enter+0x2b8>)
 8002274:	f7fd ffb4 	bl	80001e0 <strlen>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <data_setting_enter+0x2b8>)
 800227e:	4413      	add	r3, r2
 8002280:	493e      	ldr	r1, [pc, #248]	; (800237c <data_setting_enter+0x2bc>)
 8002282:	461a      	mov	r2, r3
 8002284:	460b      	mov	r3, r1
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	8013      	strh	r3, [r2, #0]
		lcd_display(&disp);
 800228a:	4834      	ldr	r0, [pc, #208]	; (800235c <data_setting_enter+0x29c>)
 800228c:	f7ff fd22 	bl	8001cd4 <lcd_display>
		s += 10.0/powf(10.0,(float)i) * (float)key;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800229a:	eef0 0a67 	vmov.f32	s1, s15
 800229e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80022a2:	f009 ff95 	bl	800c1d0 <powf>
 80022a6:	ee10 3a10 	vmov	r3, s0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f954 	bl	8000558 <__aeabi_f2d>
 80022b0:	4603      	mov	r3, r0
 80022b2:	460c      	mov	r4, r1
 80022b4:	461a      	mov	r2, r3
 80022b6:	4623      	mov	r3, r4
 80022b8:	f04f 0000 	mov.w	r0, #0
 80022bc:	4930      	ldr	r1, [pc, #192]	; (8002380 <data_setting_enter+0x2c0>)
 80022be:	f7fe facd 	bl	800085c <__aeabi_ddiv>
 80022c2:	4603      	mov	r3, r0
 80022c4:	460c      	mov	r4, r1
 80022c6:	4625      	mov	r5, r4
 80022c8:	461c      	mov	r4, r3
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d4:	ee17 0a90 	vmov	r0, s15
 80022d8:	f7fe f93e 	bl	8000558 <__aeabi_f2d>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4620      	mov	r0, r4
 80022e2:	4629      	mov	r1, r5
 80022e4:	f7fe f990 	bl	8000608 <__aeabi_dmul>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	4625      	mov	r5, r4
 80022ee:	461c      	mov	r4, r3
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7fe f931 	bl	8000558 <__aeabi_f2d>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4620      	mov	r0, r4
 80022fc:	4629      	mov	r1, r5
 80022fe:	f7fd ffcd 	bl	800029c <__adddf3>
 8002302:	4603      	mov	r3, r0
 8002304:	460c      	mov	r4, r1
 8002306:	4618      	mov	r0, r3
 8002308:	4621      	mov	r1, r4
 800230a:	f7fe fc55 	bl	8000bb8 <__aeabi_d2f>
 800230e:	4603      	mov	r3, r0
 8002310:	60fb      	str	r3, [r7, #12]
		HAL_Delay(100);
 8002312:	2064      	movs	r0, #100	; 0x64
 8002314:	f002 fdda 	bl	8004ecc <HAL_Delay>
	for(i=0 ; i<4 ; i++){
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	3301      	adds	r3, #1
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b03      	cmp	r3, #3
 8002322:	dd93      	ble.n	800224c <data_setting_enter+0x18c>
	}
	setting_max.humid = s;
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <data_setting_enter+0x2cc>)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6053      	str	r3, [r2, #4]
	s=0;
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]

	sprintf((char *)disp.f_line,"Min. temp.: ");
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <data_setting_enter+0x2ac>)
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <data_setting_enter+0x2d0>)
 8002334:	4614      	mov	r4, r2
 8002336:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002338:	6020      	str	r0, [r4, #0]
 800233a:	6061      	str	r1, [r4, #4]
 800233c:	60a2      	str	r2, [r4, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	7323      	strb	r3, [r4, #12]
	sprintf((char *)disp.s_line,"");
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <data_setting_enter+0x29c>)
 8002344:	2200      	movs	r2, #0
 8002346:	749a      	strb	r2, [r3, #18]
	lcd_clear(&disp);
 8002348:	4804      	ldr	r0, [pc, #16]	; (800235c <data_setting_enter+0x29c>)
 800234a:	f7ff fd14 	bl	8001d76 <lcd_clear>
	lcd_display(&disp);
 800234e:	4803      	ldr	r0, [pc, #12]	; (800235c <data_setting_enter+0x29c>)
 8002350:	f7ff fcc0 	bl	8001cd4 <lcd_display>
	for(i=0 ; i<4 ; i++){
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	e085      	b.n	8002466 <data_setting_enter+0x3a6>
 800235a:	bf00      	nop
 800235c:	20000428 	.word	0x20000428
 8002360:	0800cc10 	.word	0x0800cc10
 8002364:	0800cc24 	.word	0x0800cc24
 8002368:	0800cc38 	.word	0x0800cc38
 800236c:	20000429 	.word	0x20000429
 8002370:	0800cc48 	.word	0x0800cc48
 8002374:	0800cc58 	.word	0x0800cc58
 8002378:	2000043a 	.word	0x2000043a
 800237c:	0800cc5c 	.word	0x0800cc5c
 8002380:	40240000 	.word	0x40240000
 8002384:	2000045c 	.word	0x2000045c
 8002388:	0800cc60 	.word	0x0800cc60
 800238c:	2000046c 	.word	0x2000046c
 8002390:	0800cc70 	.word	0x0800cc70
		key = kb_service();
 8002394:	f7ff fbd2 	bl	8001b3c <kb_service>
 8002398:	4603      	mov	r3, r0
 800239a:	71fb      	strb	r3, [r7, #7]
		sprintf(buf,"%d",key);
 800239c:	79fa      	ldrb	r2, [r7, #7]
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	497b      	ldr	r1, [pc, #492]	; (8002590 <data_setting_enter+0x4d0>)
 80023a2:	4618      	mov	r0, r3
 80023a4:	f008 f9ba 	bl	800a71c <siprintf>
		strncat(disp.s_line,buf,1);
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	2201      	movs	r2, #1
 80023ac:	4619      	mov	r1, r3
 80023ae:	4879      	ldr	r0, [pc, #484]	; (8002594 <data_setting_enter+0x4d4>)
 80023b0:	f008 f9d4 	bl	800a75c <strncat>
		if(i==1)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d10b      	bne.n	80023d2 <data_setting_enter+0x312>
			strncat(disp.s_line,".",1);
 80023ba:	4876      	ldr	r0, [pc, #472]	; (8002594 <data_setting_enter+0x4d4>)
 80023bc:	f7fd ff10 	bl	80001e0 <strlen>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b73      	ldr	r3, [pc, #460]	; (8002594 <data_setting_enter+0x4d4>)
 80023c6:	4413      	add	r3, r2
 80023c8:	4973      	ldr	r1, [pc, #460]	; (8002598 <data_setting_enter+0x4d8>)
 80023ca:	461a      	mov	r2, r3
 80023cc:	460b      	mov	r3, r1
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	8013      	strh	r3, [r2, #0]
		lcd_display(&disp);
 80023d2:	4872      	ldr	r0, [pc, #456]	; (800259c <data_setting_enter+0x4dc>)
 80023d4:	f7ff fc7e 	bl	8001cd4 <lcd_display>
		s += 10.0/powf(10.0,(float)i) * (float)key;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e2:	eef0 0a67 	vmov.f32	s1, s15
 80023e6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80023ea:	f009 fef1 	bl	800c1d0 <powf>
 80023ee:	ee10 3a10 	vmov	r3, s0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f8b0 	bl	8000558 <__aeabi_f2d>
 80023f8:	4603      	mov	r3, r0
 80023fa:	460c      	mov	r4, r1
 80023fc:	461a      	mov	r2, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	f04f 0000 	mov.w	r0, #0
 8002404:	4966      	ldr	r1, [pc, #408]	; (80025a0 <data_setting_enter+0x4e0>)
 8002406:	f7fe fa29 	bl	800085c <__aeabi_ddiv>
 800240a:	4603      	mov	r3, r0
 800240c:	460c      	mov	r4, r1
 800240e:	4625      	mov	r5, r4
 8002410:	461c      	mov	r4, r3
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	ee07 3a90 	vmov	s15, r3
 8002418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241c:	ee17 0a90 	vmov	r0, s15
 8002420:	f7fe f89a 	bl	8000558 <__aeabi_f2d>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4620      	mov	r0, r4
 800242a:	4629      	mov	r1, r5
 800242c:	f7fe f8ec 	bl	8000608 <__aeabi_dmul>
 8002430:	4603      	mov	r3, r0
 8002432:	460c      	mov	r4, r1
 8002434:	4625      	mov	r5, r4
 8002436:	461c      	mov	r4, r3
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7fe f88d 	bl	8000558 <__aeabi_f2d>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fd ff29 	bl	800029c <__adddf3>
 800244a:	4603      	mov	r3, r0
 800244c:	460c      	mov	r4, r1
 800244e:	4618      	mov	r0, r3
 8002450:	4621      	mov	r1, r4
 8002452:	f7fe fbb1 	bl	8000bb8 <__aeabi_d2f>
 8002456:	4603      	mov	r3, r0
 8002458:	60fb      	str	r3, [r7, #12]
		HAL_Delay(100);
 800245a:	2064      	movs	r0, #100	; 0x64
 800245c:	f002 fd36 	bl	8004ecc <HAL_Delay>
	for(i=0 ; i<4 ; i++){
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	3301      	adds	r3, #1
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b03      	cmp	r3, #3
 800246a:	dd93      	ble.n	8002394 <data_setting_enter+0x2d4>
	}
	setting_min.temp = s;
 800246c:	4a4d      	ldr	r2, [pc, #308]	; (80025a4 <data_setting_enter+0x4e4>)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6013      	str	r3, [r2, #0]
	s=0;
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]

	sprintf((char *)disp.f_line,"Max. temp.: ");
 8002478:	4a4b      	ldr	r2, [pc, #300]	; (80025a8 <data_setting_enter+0x4e8>)
 800247a:	4b4c      	ldr	r3, [pc, #304]	; (80025ac <data_setting_enter+0x4ec>)
 800247c:	4614      	mov	r4, r2
 800247e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002480:	6020      	str	r0, [r4, #0]
 8002482:	6061      	str	r1, [r4, #4]
 8002484:	60a2      	str	r2, [r4, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	7323      	strb	r3, [r4, #12]
	sprintf((char *)disp.s_line,"");
 800248a:	4b44      	ldr	r3, [pc, #272]	; (800259c <data_setting_enter+0x4dc>)
 800248c:	2200      	movs	r2, #0
 800248e:	749a      	strb	r2, [r3, #18]
	lcd_clear(&disp);
 8002490:	4842      	ldr	r0, [pc, #264]	; (800259c <data_setting_enter+0x4dc>)
 8002492:	f7ff fc70 	bl	8001d76 <lcd_clear>
	lcd_display(&disp);
 8002496:	4841      	ldr	r0, [pc, #260]	; (800259c <data_setting_enter+0x4dc>)
 8002498:	f7ff fc1c 	bl	8001cd4 <lcd_display>
	for(i=0 ; i<4 ; i++){
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	e068      	b.n	8002574 <data_setting_enter+0x4b4>
		key = kb_service();
 80024a2:	f7ff fb4b 	bl	8001b3c <kb_service>
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
		sprintf(buf,"%d",key);
 80024aa:	79fa      	ldrb	r2, [r7, #7]
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	4938      	ldr	r1, [pc, #224]	; (8002590 <data_setting_enter+0x4d0>)
 80024b0:	4618      	mov	r0, r3
 80024b2:	f008 f933 	bl	800a71c <siprintf>
		strncat(disp.s_line,buf,1);
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	2201      	movs	r2, #1
 80024ba:	4619      	mov	r1, r3
 80024bc:	4835      	ldr	r0, [pc, #212]	; (8002594 <data_setting_enter+0x4d4>)
 80024be:	f008 f94d 	bl	800a75c <strncat>
		if(i==1)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10b      	bne.n	80024e0 <data_setting_enter+0x420>
			strncat(disp.s_line,".",1);
 80024c8:	4832      	ldr	r0, [pc, #200]	; (8002594 <data_setting_enter+0x4d4>)
 80024ca:	f7fd fe89 	bl	80001e0 <strlen>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <data_setting_enter+0x4d4>)
 80024d4:	4413      	add	r3, r2
 80024d6:	4930      	ldr	r1, [pc, #192]	; (8002598 <data_setting_enter+0x4d8>)
 80024d8:	461a      	mov	r2, r3
 80024da:	460b      	mov	r3, r1
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	8013      	strh	r3, [r2, #0]
		lcd_display(&disp);
 80024e0:	482e      	ldr	r0, [pc, #184]	; (800259c <data_setting_enter+0x4dc>)
 80024e2:	f7ff fbf7 	bl	8001cd4 <lcd_display>
		s += 10.0/powf(10.0,(float)i) * (float)key;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f0:	eef0 0a67 	vmov.f32	s1, s15
 80024f4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80024f8:	f009 fe6a 	bl	800c1d0 <powf>
 80024fc:	ee10 3a10 	vmov	r3, s0
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f829 	bl	8000558 <__aeabi_f2d>
 8002506:	4603      	mov	r3, r0
 8002508:	460c      	mov	r4, r1
 800250a:	461a      	mov	r2, r3
 800250c:	4623      	mov	r3, r4
 800250e:	f04f 0000 	mov.w	r0, #0
 8002512:	4923      	ldr	r1, [pc, #140]	; (80025a0 <data_setting_enter+0x4e0>)
 8002514:	f7fe f9a2 	bl	800085c <__aeabi_ddiv>
 8002518:	4603      	mov	r3, r0
 800251a:	460c      	mov	r4, r1
 800251c:	4625      	mov	r5, r4
 800251e:	461c      	mov	r4, r3
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252a:	ee17 0a90 	vmov	r0, s15
 800252e:	f7fe f813 	bl	8000558 <__aeabi_f2d>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4620      	mov	r0, r4
 8002538:	4629      	mov	r1, r5
 800253a:	f7fe f865 	bl	8000608 <__aeabi_dmul>
 800253e:	4603      	mov	r3, r0
 8002540:	460c      	mov	r4, r1
 8002542:	4625      	mov	r5, r4
 8002544:	461c      	mov	r4, r3
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f7fe f806 	bl	8000558 <__aeabi_f2d>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4620      	mov	r0, r4
 8002552:	4629      	mov	r1, r5
 8002554:	f7fd fea2 	bl	800029c <__adddf3>
 8002558:	4603      	mov	r3, r0
 800255a:	460c      	mov	r4, r1
 800255c:	4618      	mov	r0, r3
 800255e:	4621      	mov	r1, r4
 8002560:	f7fe fb2a 	bl	8000bb8 <__aeabi_d2f>
 8002564:	4603      	mov	r3, r0
 8002566:	60fb      	str	r3, [r7, #12]
		HAL_Delay(100);
 8002568:	2064      	movs	r0, #100	; 0x64
 800256a:	f002 fcaf 	bl	8004ecc <HAL_Delay>
	for(i=0 ; i<4 ; i++){
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3301      	adds	r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b03      	cmp	r3, #3
 8002578:	dd93      	ble.n	80024a2 <data_setting_enter+0x3e2>
	}
	setting_max.temp = s;
 800257a:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <data_setting_enter+0x4f0>)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6013      	str	r3, [r2, #0]
	usart_send_string("Settings saved.");
 8002580:	480c      	ldr	r0, [pc, #48]	; (80025b4 <data_setting_enter+0x4f4>)
 8002582:	f000 fdf5 	bl	8003170 <usart_send_string>
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bdb0      	pop	{r4, r5, r7, pc}
 800258e:	bf00      	nop
 8002590:	0800cc58 	.word	0x0800cc58
 8002594:	2000043a 	.word	0x2000043a
 8002598:	0800cc5c 	.word	0x0800cc5c
 800259c:	20000428 	.word	0x20000428
 80025a0:	40240000 	.word	0x40240000
 80025a4:	2000045c 	.word	0x2000045c
 80025a8:	20000429 	.word	0x20000429
 80025ac:	0800cc80 	.word	0x0800cc80
 80025b0:	2000046c 	.word	0x2000046c
 80025b4:	0800cc90 	.word	0x0800cc90

080025b8 <get_data>:


void get_data(){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	hts221_read_humid(&(current_data.humid));
 80025bc:	4807      	ldr	r0, [pc, #28]	; (80025dc <get_data+0x24>)
 80025be:	f7ff f9a9 	bl	8001914 <hts221_read_humid>
	hts221_read_temp(&(current_data.temp));
 80025c2:	4807      	ldr	r0, [pc, #28]	; (80025e0 <get_data+0x28>)
 80025c4:	f7ff f997 	bl	80018f6 <hts221_read_temp>
	current_data.soil = convert_moisture(s);
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <get_data+0x2c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f80b 	bl	80025e8 <convert_moisture>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <get_data+0x28>)
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000454 	.word	0x20000454
 80025e0:	20000450 	.word	0x20000450
 80025e4:	20000424 	.word	0x20000424

080025e8 <convert_moisture>:

char* convert_moisture(uint32_t adc_data){
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	intervals = (wet_val-dry_val)/4;
 80025f0:	23a0      	movs	r3, #160	; 0xa0
 80025f2:	461a      	mov	r2, r3
 80025f4:	2314      	movs	r3, #20
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	da00      	bge.n	80025fe <convert_moisture+0x16>
 80025fc:	3303      	adds	r3, #3
 80025fe:	109b      	asrs	r3, r3, #2
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <convert_moisture+0x80>)
 8002604:	701a      	strb	r2, [r3, #0]
	if(adc_data < intervals)
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <convert_moisture+0x80>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4293      	cmp	r3, r2
 8002610:	d201      	bcs.n	8002616 <convert_moisture+0x2e>
		return "dry";
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <convert_moisture+0x84>)
 8002614:	e022      	b.n	800265c <convert_moisture+0x74>
	else if(adc_data >= intervals && adc_data < 2*intervals)
 8002616:	4b14      	ldr	r3, [pc, #80]	; (8002668 <convert_moisture+0x80>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4293      	cmp	r3, r2
 8002620:	d308      	bcc.n	8002634 <convert_moisture+0x4c>
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <convert_moisture+0x80>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	461a      	mov	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4293      	cmp	r3, r2
 800262e:	d201      	bcs.n	8002634 <convert_moisture+0x4c>
		return "little wet";
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <convert_moisture+0x88>)
 8002632:	e013      	b.n	800265c <convert_moisture+0x74>
	else if(adc_data>= 2*intervals && adc_data < 3*intervals)
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <convert_moisture+0x80>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	461a      	mov	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4293      	cmp	r3, r2
 8002640:	d30b      	bcc.n	800265a <convert_moisture+0x72>
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <convert_moisture+0x80>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	461a      	mov	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4293      	cmp	r3, r2
 8002654:	d201      	bcs.n	800265a <convert_moisture+0x72>
		return "wet";
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <convert_moisture+0x8c>)
 8002658:	e000      	b.n	800265c <convert_moisture+0x74>
	else
		return "very wet";
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <convert_moisture+0x90>)
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	20000468 	.word	0x20000468
 800266c:	0800cca0 	.word	0x0800cca0
 8002670:	0800cca4 	.word	0x0800cca4
 8002674:	0800ccb0 	.word	0x0800ccb0
 8002678:	0800ccb4 	.word	0x0800ccb4

0800267c <print_data>:

void print_data(struct lcd_disp *disp){
 800267c:	b5b0      	push	{r4, r5, r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	char arr1[5];
	char arr2[5];
	char zeros[8] = "        ";
 8002684:	4a48      	ldr	r2, [pc, #288]	; (80027a8 <print_data+0x12c>)
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800268e:	e883 0003 	stmia.w	r3, {r0, r1}
	gcvt(current_data.humid,4,arr1);
 8002692:	4b46      	ldr	r3, [pc, #280]	; (80027ac <print_data+0x130>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd ff5e 	bl	8000558 <__aeabi_f2d>
 800269c:	4604      	mov	r4, r0
 800269e:	460d      	mov	r5, r1
 80026a0:	f107 0318 	add.w	r3, r7, #24
 80026a4:	4619      	mov	r1, r3
 80026a6:	2004      	movs	r0, #4
 80026a8:	ec45 4b10 	vmov	d0, r4, r5
 80026ac:	f007 fb7c 	bl	8009da8 <gcvt>
	gcvt(current_data.temp,4,arr2);
 80026b0:	4b3e      	ldr	r3, [pc, #248]	; (80027ac <print_data+0x130>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd ff4f 	bl	8000558 <__aeabi_f2d>
 80026ba:	4604      	mov	r4, r0
 80026bc:	460d      	mov	r5, r1
 80026be:	f107 0310 	add.w	r3, r7, #16
 80026c2:	4619      	mov	r1, r3
 80026c4:	2004      	movs	r0, #4
 80026c6:	ec45 4b10 	vmov	d0, r4, r5
 80026ca:	f007 fb6d 	bl	8009da8 <gcvt>

	sprintf((char *)disp->f_line, "H:");
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3301      	adds	r3, #1
 80026d2:	4a37      	ldr	r2, [pc, #220]	; (80027b0 <print_data+0x134>)
 80026d4:	8811      	ldrh	r1, [r2, #0]
 80026d6:	7892      	ldrb	r2, [r2, #2]
 80026d8:	8019      	strh	r1, [r3, #0]
 80026da:	709a      	strb	r2, [r3, #2]
	strncat(disp->f_line, arr1,5);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3301      	adds	r3, #1
 80026e0:	f107 0118 	add.w	r1, r7, #24
 80026e4:	2205      	movs	r2, #5
 80026e6:	4618      	mov	r0, r3
 80026e8:	f008 f838 	bl	800a75c <strncat>
	strncat(disp->f_line,"  T:",4);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	1c5c      	adds	r4, r3, #1
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7fd fd75 	bl	80001e0 <strlen>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4423      	add	r3, r4
 80026fa:	4a2e      	ldr	r2, [pc, #184]	; (80027b4 <print_data+0x138>)
 80026fc:	6810      	ldr	r0, [r2, #0]
 80026fe:	6018      	str	r0, [r3, #0]
 8002700:	7912      	ldrb	r2, [r2, #4]
 8002702:	711a      	strb	r2, [r3, #4]
	strncat(disp->f_line,arr2,5);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3301      	adds	r3, #1
 8002708:	f107 0110 	add.w	r1, r7, #16
 800270c:	2205      	movs	r2, #5
 800270e:	4618      	mov	r0, r3
 8002710:	f008 f824 	bl	800a75c <strncat>
	sprintf((char *)disp->s_line, "Soil: ");
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3312      	adds	r3, #18
 8002718:	4a27      	ldr	r2, [pc, #156]	; (80027b8 <print_data+0x13c>)
 800271a:	6810      	ldr	r0, [r2, #0]
 800271c:	6018      	str	r0, [r3, #0]
 800271e:	8891      	ldrh	r1, [r2, #4]
 8002720:	7992      	ldrb	r2, [r2, #6]
 8002722:	8099      	strh	r1, [r3, #4]
 8002724:	719a      	strb	r2, [r3, #6]
	strncat(disp->s_line,current_data.soil,strlen(current_data.soil));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f103 0412 	add.w	r4, r3, #18
 800272c:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <print_data+0x130>)
 800272e:	689d      	ldr	r5, [r3, #8]
 8002730:	4b1e      	ldr	r3, [pc, #120]	; (80027ac <print_data+0x130>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd fd53 	bl	80001e0 <strlen>
 800273a:	4603      	mov	r3, r0
 800273c:	461a      	mov	r2, r3
 800273e:	4629      	mov	r1, r5
 8002740:	4620      	mov	r0, r4
 8002742:	f008 f80b 	bl	800a75c <strncat>
	strncat(disp->s_line,zeros,16-6-strlen(current_data.soil));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f103 0412 	add.w	r4, r3, #18
 800274c:	4b17      	ldr	r3, [pc, #92]	; (80027ac <print_data+0x130>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd fd45 	bl	80001e0 <strlen>
 8002756:	4603      	mov	r3, r0
 8002758:	f1c3 020a 	rsb	r2, r3, #10
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	4619      	mov	r1, r3
 8002762:	4620      	mov	r0, r4
 8002764:	f007 fffa 	bl	800a75c <strncat>
	usart_send_string("Hum: ");
 8002768:	4814      	ldr	r0, [pc, #80]	; (80027bc <print_data+0x140>)
 800276a:	f000 fd01 	bl	8003170 <usart_send_string>
	usart_send_string(arr1);
 800276e:	f107 0318 	add.w	r3, r7, #24
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fcfc 	bl	8003170 <usart_send_string>
	usart_send_string("    Temp: ");
 8002778:	4811      	ldr	r0, [pc, #68]	; (80027c0 <print_data+0x144>)
 800277a:	f000 fcf9 	bl	8003170 <usart_send_string>
	usart_send_string(arr2);
 800277e:	f107 0310 	add.w	r3, r7, #16
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fcf4 	bl	8003170 <usart_send_string>
	usart_send_string("    Soil: ");
 8002788:	480e      	ldr	r0, [pc, #56]	; (80027c4 <print_data+0x148>)
 800278a:	f000 fcf1 	bl	8003170 <usart_send_string>
	usart_send_string(current_data.soil);
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <print_data+0x130>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fcec 	bl	8003170 <usart_send_string>
	usart_send_string("\n\r");
 8002798:	480b      	ldr	r0, [pc, #44]	; (80027c8 <print_data+0x14c>)
 800279a:	f000 fce9 	bl	8003170 <usart_send_string>
}
 800279e:	bf00      	nop
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bdb0      	pop	{r4, r5, r7, pc}
 80027a6:	bf00      	nop
 80027a8:	0800ccf8 	.word	0x0800ccf8
 80027ac:	20000450 	.word	0x20000450
 80027b0:	0800ccc0 	.word	0x0800ccc0
 80027b4:	0800ccc4 	.word	0x0800ccc4
 80027b8:	0800cccc 	.word	0x0800cccc
 80027bc:	0800ccd4 	.word	0x0800ccd4
 80027c0:	0800ccdc 	.word	0x0800ccdc
 80027c4:	0800cce8 	.word	0x0800cce8
 80027c8:	0800ccf4 	.word	0x0800ccf4

080027cc <print_alert>:

void print_alert(int e, struct lcd_disp *disp){
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
	sprintf((char *)disp->f_line, "ALERT!          ");
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <print_alert+0xc4>)
 80027dc:	461d      	mov	r5, r3
 80027de:	4614      	mov	r4, r2
 80027e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e2:	6028      	str	r0, [r5, #0]
 80027e4:	6069      	str	r1, [r5, #4]
 80027e6:	60aa      	str	r2, [r5, #8]
 80027e8:	60eb      	str	r3, [r5, #12]
 80027ea:	7823      	ldrb	r3, [r4, #0]
 80027ec:	742b      	strb	r3, [r5, #16]
	switch(e){
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d83a      	bhi.n	800286c <print_alert+0xa0>
 80027f6:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <print_alert+0x30>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	08002827 	.word	0x08002827
 8002800:	0800280d 	.word	0x0800280d
 8002804:	08002857 	.word	0x08002857
 8002808:	0800283d 	.word	0x0800283d
	case S_HIGHTEMP:
		sprintf((char *)disp->s_line,"Temp too high!  "); break;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	3312      	adds	r3, #18
 8002810:	4a20      	ldr	r2, [pc, #128]	; (8002894 <print_alert+0xc8>)
 8002812:	461d      	mov	r5, r3
 8002814:	4614      	mov	r4, r2
 8002816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002818:	6028      	str	r0, [r5, #0]
 800281a:	6069      	str	r1, [r5, #4]
 800281c:	60aa      	str	r2, [r5, #8]
 800281e:	60eb      	str	r3, [r5, #12]
 8002820:	7823      	ldrb	r3, [r4, #0]
 8002822:	742b      	strb	r3, [r5, #16]
 8002824:	e022      	b.n	800286c <print_alert+0xa0>
	case S_LOWTEMP:
		sprintf((char *)disp->s_line,"Temp too low!  "); break;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	3312      	adds	r3, #18
 800282a:	4a1b      	ldr	r2, [pc, #108]	; (8002898 <print_alert+0xcc>)
 800282c:	461c      	mov	r4, r3
 800282e:	4615      	mov	r5, r2
 8002830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002832:	6020      	str	r0, [r4, #0]
 8002834:	6061      	str	r1, [r4, #4]
 8002836:	60a2      	str	r2, [r4, #8]
 8002838:	60e3      	str	r3, [r4, #12]
 800283a:	e017      	b.n	800286c <print_alert+0xa0>
	case S_HIGHHUM:
		sprintf((char *)disp->s_line, "Hum too high!   "); break;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	3312      	adds	r3, #18
 8002840:	4a16      	ldr	r2, [pc, #88]	; (800289c <print_alert+0xd0>)
 8002842:	461d      	mov	r5, r3
 8002844:	4614      	mov	r4, r2
 8002846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002848:	6028      	str	r0, [r5, #0]
 800284a:	6069      	str	r1, [r5, #4]
 800284c:	60aa      	str	r2, [r5, #8]
 800284e:	60eb      	str	r3, [r5, #12]
 8002850:	7823      	ldrb	r3, [r4, #0]
 8002852:	742b      	strb	r3, [r5, #16]
 8002854:	e00a      	b.n	800286c <print_alert+0xa0>
	case S_LOWHUM:
		sprintf((char *)disp->s_line, "Hum too low!   "); break;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	3312      	adds	r3, #18
 800285a:	4a11      	ldr	r2, [pc, #68]	; (80028a0 <print_alert+0xd4>)
 800285c:	461c      	mov	r4, r3
 800285e:	4615      	mov	r5, r2
 8002860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002862:	6020      	str	r0, [r4, #0]
 8002864:	6061      	str	r1, [r4, #4]
 8002866:	60a2      	str	r2, [r4, #8]
 8002868:	60e3      	str	r3, [r4, #12]
 800286a:	bf00      	nop
	}
	usart_send_string(disp->f_line);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fc7d 	bl	8003170 <usart_send_string>
	usart_send_string(disp->s_line);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	3312      	adds	r3, #18
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fc78 	bl	8003170 <usart_send_string>
	usart_send_string("\n\r");
 8002880:	4808      	ldr	r0, [pc, #32]	; (80028a4 <print_alert+0xd8>)
 8002882:	f000 fc75 	bl	8003170 <usart_send_string>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bdb0      	pop	{r4, r5, r7, pc}
 800288e:	bf00      	nop
 8002890:	0800cd04 	.word	0x0800cd04
 8002894:	0800cd18 	.word	0x0800cd18
 8002898:	0800cd2c 	.word	0x0800cd2c
 800289c:	0800cd3c 	.word	0x0800cd3c
 80028a0:	0800cd50 	.word	0x0800cd50
 80028a4:	0800ccf4 	.word	0x0800ccf4

080028a8 <check_data>:

uint8_t check_data(){
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
	if(current_data.temp > setting_max.temp)
 80028ac:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <check_data+0x78>)
 80028ae:	ed93 7a00 	vldr	s14, [r3]
 80028b2:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <check_data+0x7c>)
 80028b4:	edd3 7a00 	vldr	s15, [r3]
 80028b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c0:	dd01      	ble.n	80028c6 <check_data+0x1e>
		return S_HIGHTEMP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	e027      	b.n	8002916 <check_data+0x6e>
	if(current_data.temp < setting_min.temp)
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <check_data+0x78>)
 80028c8:	ed93 7a00 	vldr	s14, [r3]
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <check_data+0x80>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028da:	d501      	bpl.n	80028e0 <check_data+0x38>
		return S_LOWTEMP;
 80028dc:	2301      	movs	r3, #1
 80028de:	e01a      	b.n	8002916 <check_data+0x6e>
	if(current_data.humid > setting_max.humid)
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <check_data+0x78>)
 80028e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80028e6:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <check_data+0x7c>)
 80028e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80028ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f4:	dd01      	ble.n	80028fa <check_data+0x52>
		return S_HIGHHUM;
 80028f6:	2304      	movs	r3, #4
 80028f8:	e00d      	b.n	8002916 <check_data+0x6e>
	if(current_data.humid < setting_min.humid)
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <check_data+0x78>)
 80028fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <check_data+0x80>)
 8002902:	edd3 7a01 	vldr	s15, [r3, #4]
 8002906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290e:	d501      	bpl.n	8002914 <check_data+0x6c>
		return S_LOWHUM;
 8002910:	2303      	movs	r3, #3
 8002912:	e000      	b.n	8002916 <check_data+0x6e>
	return S_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	20000450 	.word	0x20000450
 8002924:	2000046c 	.word	0x2000046c
 8002928:	2000045c 	.word	0x2000045c

0800292c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_MspInit+0x4c>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	4a0f      	ldr	r2, [pc, #60]	; (8002978 <HAL_MspInit+0x4c>)
 800293c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002940:	6453      	str	r3, [r2, #68]	; 0x44
 8002942:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_MspInit+0x4c>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294a:	607b      	str	r3, [r7, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_MspInit+0x4c>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <HAL_MspInit+0x4c>)
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_MspInit+0x4c>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800296a:	2007      	movs	r0, #7
 800296c:	f002 ff76 	bl	800585c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023800 	.word	0x40023800

0800297c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800298e:	e7fe      	b.n	800298e <HardFault_Handler+0x4>

08002990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002994:	e7fe      	b.n	8002994 <MemManage_Handler+0x4>

08002996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800299a:	e7fe      	b.n	800299a <BusFault_Handler+0x4>

0800299c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a0:	e7fe      	b.n	80029a0 <UsageFault_Handler+0x4>

080029a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(delay_counter){
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <SysTick_Handler+0x2c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <SysTick_Handler+0x22>
		if(--delay_counter == 0)
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <SysTick_Handler+0x2c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3b01      	subs	r3, #1
 80029de:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <SysTick_Handler+0x2c>)
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d103      	bne.n	80029ee <SysTick_Handler+0x22>
			HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 80029e6:	2100      	movs	r1, #0
 80029e8:	4804      	ldr	r0, [pc, #16]	; (80029fc <SysTick_Handler+0x30>)
 80029ea:	f005 fee9 	bl	80087c0 <HAL_TIM_PWM_Stop>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ee:	f002 fa4d 	bl	8004e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	2000028c 	.word	0x2000028c
 80029fc:	200004cc 	.word	0x200004cc

08002a00 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002a06:	f005 ff27 	bl	8008858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000050c 	.word	0x2000050c

08002a14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a18:	4802      	ldr	r0, [pc, #8]	; (8002a24 <TIM2_IRQHandler+0x10>)
 8002a1a:	f005 ff1d 	bl	8008858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	2000054c 	.word	0x2000054c

08002a28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a2c:	4802      	ldr	r0, [pc, #8]	; (8002a38 <DMA2_Stream0_IRQHandler+0x10>)
 8002a2e:	f003 f85d 	bl	8005aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000368 	.word	0x20000368

08002a3c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002a46:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <BSP_I2C1_Init+0x58>)
 8002a48:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <BSP_I2C1_Init+0x5c>)
 8002a4a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002a4c:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <BSP_I2C1_Init+0x60>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	4912      	ldr	r1, [pc, #72]	; (8002a9c <BSP_I2C1_Init+0x60>)
 8002a54:	600a      	str	r2, [r1, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d117      	bne.n	8002a8a <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002a5a:	480e      	ldr	r0, [pc, #56]	; (8002a94 <BSP_I2C1_Init+0x58>)
 8002a5c:	f004 fda0 	bl	80075a0 <HAL_I2C_GetState>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d111      	bne.n	8002a8a <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002a66:	480b      	ldr	r0, [pc, #44]	; (8002a94 <BSP_I2C1_Init+0x58>)
 8002a68:	f000 f8e2 	bl	8002c30 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10b      	bne.n	8002a8a <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002a72:	4808      	ldr	r0, [pc, #32]	; (8002a94 <BSP_I2C1_Init+0x58>)
 8002a74:	f000 f8a8 	bl	8002bc8 <MX_I2C1_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8002a7e:	f06f 0307 	mvn.w	r3, #7
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	e001      	b.n	8002a8a <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002a8a:	687b      	ldr	r3, [r7, #4]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000478 	.word	0x20000478
 8002a98:	40005400 	.word	0x40005400
 8002a9c:	20000290 	.word	0x20000290

08002aa0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002aaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <BSP_I2C1_DeInit+0x48>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d014      	beq.n	8002adc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <BSP_I2C1_DeInit+0x48>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <BSP_I2C1_DeInit+0x48>)
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <BSP_I2C1_DeInit+0x48>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002ac4:	4809      	ldr	r0, [pc, #36]	; (8002aec <BSP_I2C1_DeInit+0x4c>)
 8002ac6:	f000 f8fd 	bl	8002cc4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002aca:	4808      	ldr	r0, [pc, #32]	; (8002aec <BSP_I2C1_DeInit+0x4c>)
 8002acc:	f004 f91a 	bl	8006d04 <HAL_I2C_DeInit>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002ad6:	f06f 0307 	mvn.w	r3, #7
 8002ada:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002adc:	687b      	ldr	r3, [r7, #4]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000290 	.word	0x20000290
 8002aec:	20000478 	.word	0x20000478

08002af0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af04      	add	r7, sp, #16
 8002af6:	60ba      	str	r2, [r7, #8]
 8002af8:	461a      	mov	r2, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	81fb      	strh	r3, [r7, #14]
 8002afe:	460b      	mov	r3, r1
 8002b00:	81bb      	strh	r3, [r7, #12]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002b0a:	89ba      	ldrh	r2, [r7, #12]
 8002b0c:	89f9      	ldrh	r1, [r7, #14]
 8002b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b12:	9302      	str	r3, [sp, #8]
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	480c      	ldr	r0, [pc, #48]	; (8002b50 <BSP_I2C1_WriteReg+0x60>)
 8002b20:	f004 fa1e 	bl	8006f60 <HAL_I2C_Mem_Write>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00c      	beq.n	8002b44 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002b2a:	4809      	ldr	r0, [pc, #36]	; (8002b50 <BSP_I2C1_WriteReg+0x60>)
 8002b2c:	f004 fd46 	bl	80075bc <HAL_I2C_GetError>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d103      	bne.n	8002b3e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002b36:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	e002      	b.n	8002b44 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002b3e:	f06f 0303 	mvn.w	r3, #3
 8002b42:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002b44:	697b      	ldr	r3, [r7, #20]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000478 	.word	0x20000478

08002b54 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	; 0x28
 8002b58:	af04      	add	r7, sp, #16
 8002b5a:	60ba      	str	r2, [r7, #8]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	81fb      	strh	r3, [r7, #14]
 8002b62:	460b      	mov	r3, r1
 8002b64:	81bb      	strh	r3, [r7, #12]
 8002b66:	4613      	mov	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002b6e:	89ba      	ldrh	r2, [r7, #12]
 8002b70:	89f9      	ldrh	r1, [r7, #14]
 8002b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b76:	9302      	str	r3, [sp, #8]
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2301      	movs	r3, #1
 8002b82:	480c      	ldr	r0, [pc, #48]	; (8002bb4 <BSP_I2C1_ReadReg+0x60>)
 8002b84:	f004 fae6 	bl	8007154 <HAL_I2C_Mem_Read>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00c      	beq.n	8002ba8 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002b8e:	4809      	ldr	r0, [pc, #36]	; (8002bb4 <BSP_I2C1_ReadReg+0x60>)
 8002b90:	f004 fd14 	bl	80075bc <HAL_I2C_GetError>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d103      	bne.n	8002ba2 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002b9a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	e002      	b.n	8002ba8 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002ba2:	f06f 0303 	mvn.w	r3, #3
 8002ba6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002ba8:	697b      	ldr	r3, [r7, #20]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000478 	.word	0x20000478

08002bb8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002bbc:	f002 f97a 	bl	8004eb4 <HAL_GetTick>
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <MX_I2C1_Init+0x60>)
 8002bd8:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <MX_I2C1_Init+0x64>)
 8002bde:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bf2:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f003 ff41 	bl	8006a94 <HAL_I2C_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40005400 	.word	0x40005400
 8002c2c:	00061a80 	.word	0x00061a80

08002c30 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <I2C1_MspInit+0x8c>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4a1e      	ldr	r2, [pc, #120]	; (8002cbc <I2C1_MspInit+0x8c>)
 8002c42:	f043 0302 	orr.w	r3, r3, #2
 8002c46:	6313      	str	r3, [r2, #48]	; 0x30
 8002c48:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <I2C1_MspInit+0x8c>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c5a:	2312      	movs	r3, #18
 8002c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c62:	2303      	movs	r3, #3
 8002c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002c66:	2304      	movs	r3, #4
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4813      	ldr	r0, [pc, #76]	; (8002cc0 <I2C1_MspInit+0x90>)
 8002c72:	f003 fc79 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c7c:	2312      	movs	r3, #18
 8002c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c80:	2301      	movs	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c84:	2303      	movs	r3, #3
 8002c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002c88:	2304      	movs	r3, #4
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	4619      	mov	r1, r3
 8002c92:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <I2C1_MspInit+0x90>)
 8002c94:	f003 fc68 	bl	8006568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <I2C1_MspInit+0x8c>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	4a06      	ldr	r2, [pc, #24]	; (8002cbc <I2C1_MspInit+0x8c>)
 8002ca2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <I2C1_MspInit+0x8c>)
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	3728      	adds	r7, #40	; 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40020400 	.word	0x40020400

08002cc4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <I2C1_MspDeInit+0x30>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	4a08      	ldr	r2, [pc, #32]	; (8002cf4 <I2C1_MspDeInit+0x30>)
 8002cd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cd6:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cdc:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <I2C1_MspDeInit+0x34>)
 8002cde:	f003 fdc5 	bl	800686c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002ce2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ce6:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <I2C1_MspDeInit+0x34>)
 8002ce8:	f003 fdc0 	bl	800686c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40020400 	.word	0x40020400

08002cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <_sbrk+0x5c>)
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <_sbrk+0x60>)
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <_sbrk+0x64>)
 8002d1a:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <_sbrk+0x68>)
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d207      	bcs.n	8002d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d2c:	f007 f868 	bl	8009e00 <__errno>
 8002d30:	4602      	mov	r2, r0
 8002d32:	230c      	movs	r3, #12
 8002d34:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3a:	e009      	b.n	8002d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <_sbrk+0x64>)
 8002d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20018000 	.word	0x20018000
 8002d5c:	00000400 	.word	0x00000400
 8002d60:	20000294 	.word	0x20000294
 8002d64:	20000600 	.word	0x20000600

08002d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <SystemInit+0x28>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <SystemInit+0x28>)
 8002d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d7c:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <SystemInit+0x28>)
 8002d7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d82:	609a      	str	r2, [r3, #8]
#endif
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d9a:	f107 0308 	add.w	r3, r7, #8
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da8:	463b      	mov	r3, r7
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002db0:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <MX_TIM2_Init+0x98>)
 8002db2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002db6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 61999;
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <MX_TIM2_Init+0x98>)
 8002dba:	f24f 222f 	movw	r2, #61999	; 0xf22f
 8002dbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <MX_TIM2_Init+0x98>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8002dc6:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <MX_TIM2_Init+0x98>)
 8002dc8:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002dcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <MX_TIM2_Init+0x98>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <MX_TIM2_Init+0x98>)
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dda:	4814      	ldr	r0, [pc, #80]	; (8002e2c <MX_TIM2_Init+0x98>)
 8002ddc:	f005 fc3a 	bl	8008654 <HAL_TIM_Base_Init>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002de6:	f7ff f943 	bl	8002070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002df0:	f107 0308 	add.w	r3, r7, #8
 8002df4:	4619      	mov	r1, r3
 8002df6:	480d      	ldr	r0, [pc, #52]	; (8002e2c <MX_TIM2_Init+0x98>)
 8002df8:	f005 fefc 	bl	8008bf4 <HAL_TIM_ConfigClockSource>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e02:	f7ff f935 	bl	8002070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e0e:	463b      	mov	r3, r7
 8002e10:	4619      	mov	r1, r3
 8002e12:	4806      	ldr	r0, [pc, #24]	; (8002e2c <MX_TIM2_Init+0x98>)
 8002e14:	f006 fa9a 	bl	800934c <HAL_TIMEx_MasterConfigSynchronization>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002e1e:	f7ff f927 	bl	8002070 <Error_Handler>
  }

}
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	2000054c 	.word	0x2000054c

08002e30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08e      	sub	sp, #56	; 0x38
 8002e34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e44:	f107 0320 	add.w	r3, r7, #32
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
 8002e5c:	615a      	str	r2, [r3, #20]
 8002e5e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002e60:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <MX_TIM3_Init+0xe4>)
 8002e62:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <MX_TIM3_Init+0xe8>)
 8002e64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 691;
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <MX_TIM3_Init+0xe4>)
 8002e68:	f240 22b3 	movw	r2, #691	; 0x2b3
 8002e6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e6e:	4b29      	ldr	r3, [pc, #164]	; (8002f14 <MX_TIM3_Init+0xe4>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <MX_TIM3_Init+0xe4>)
 8002e76:	22fe      	movs	r2, #254	; 0xfe
 8002e78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e7a:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <MX_TIM3_Init+0xe4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <MX_TIM3_Init+0xe4>)
 8002e82:	2280      	movs	r2, #128	; 0x80
 8002e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e86:	4823      	ldr	r0, [pc, #140]	; (8002f14 <MX_TIM3_Init+0xe4>)
 8002e88:	f005 fbe4 	bl	8008654 <HAL_TIM_Base_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002e92:	f7ff f8ed 	bl	8002070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	481c      	ldr	r0, [pc, #112]	; (8002f14 <MX_TIM3_Init+0xe4>)
 8002ea4:	f005 fea6 	bl	8008bf4 <HAL_TIM_ConfigClockSource>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002eae:	f7ff f8df 	bl	8002070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002eb2:	4818      	ldr	r0, [pc, #96]	; (8002f14 <MX_TIM3_Init+0xe4>)
 8002eb4:	f005 fc1d 	bl	80086f2 <HAL_TIM_PWM_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002ebe:	f7ff f8d7 	bl	8002070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002eca:	f107 0320 	add.w	r3, r7, #32
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4810      	ldr	r0, [pc, #64]	; (8002f14 <MX_TIM3_Init+0xe4>)
 8002ed2:	f006 fa3b 	bl	800934c <HAL_TIMEx_MasterConfigSynchronization>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002edc:	f7ff f8c8 	bl	8002070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ee0:	2360      	movs	r3, #96	; 0x60
 8002ee2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4807      	ldr	r0, [pc, #28]	; (8002f14 <MX_TIM3_Init+0xe4>)
 8002ef8:	f005 fdb6 	bl	8008a68 <HAL_TIM_PWM_ConfigChannel>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002f02:	f7ff f8b5 	bl	8002070 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002f06:	4803      	ldr	r0, [pc, #12]	; (8002f14 <MX_TIM3_Init+0xe4>)
 8002f08:	f000 f886 	bl	8003018 <HAL_TIM_MspPostInit>

}
 8002f0c:	bf00      	nop
 8002f0e:	3738      	adds	r7, #56	; 0x38
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200004cc 	.word	0x200004cc
 8002f18:	40000400 	.word	0x40000400

08002f1c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <MX_TIM11_Init+0x40>)
 8002f22:	4a0f      	ldr	r2, [pc, #60]	; (8002f60 <MX_TIM11_Init+0x44>)
 8002f24:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 7199;
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <MX_TIM11_Init+0x40>)
 8002f28:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002f2c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <MX_TIM11_Init+0x40>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 199;
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <MX_TIM11_Init+0x40>)
 8002f36:	22c7      	movs	r2, #199	; 0xc7
 8002f38:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <MX_TIM11_Init+0x40>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <MX_TIM11_Init+0x40>)
 8002f42:	2280      	movs	r2, #128	; 0x80
 8002f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002f46:	4805      	ldr	r0, [pc, #20]	; (8002f5c <MX_TIM11_Init+0x40>)
 8002f48:	f005 fb84 	bl	8008654 <HAL_TIM_Base_Init>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002f52:	f7ff f88d 	bl	8002070 <Error_Handler>
  }

}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000050c 	.word	0x2000050c
 8002f60:	40014800 	.word	0x40014800

08002f64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f74:	d116      	bne.n	8002fa4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_TIM_Base_MspInit+0xa8>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	4a23      	ldr	r2, [pc, #140]	; (800300c <HAL_TIM_Base_MspInit+0xa8>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6413      	str	r3, [r2, #64]	; 0x40
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_TIM_Base_MspInit+0xa8>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2100      	movs	r1, #0
 8002f96:	201c      	movs	r0, #28
 8002f98:	f002 fc6b 	bl	8005872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f9c:	201c      	movs	r0, #28
 8002f9e:	f002 fc84 	bl	80058aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002fa2:	e02e      	b.n	8003002 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a19      	ldr	r2, [pc, #100]	; (8003010 <HAL_TIM_Base_MspInit+0xac>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <HAL_TIM_Base_MspInit+0xa8>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a15      	ldr	r2, [pc, #84]	; (800300c <HAL_TIM_Base_MspInit+0xa8>)
 8002fb8:	f043 0302 	orr.w	r3, r3, #2
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <HAL_TIM_Base_MspInit+0xa8>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693b      	ldr	r3, [r7, #16]
}
 8002fca:	e01a      	b.n	8003002 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM11)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a10      	ldr	r2, [pc, #64]	; (8003014 <HAL_TIM_Base_MspInit+0xb0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d115      	bne.n	8003002 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <HAL_TIM_Base_MspInit+0xa8>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	4a0b      	ldr	r2, [pc, #44]	; (800300c <HAL_TIM_Base_MspInit+0xa8>)
 8002fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_TIM_Base_MspInit+0xa8>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	201a      	movs	r0, #26
 8002ff8:	f002 fc3b 	bl	8005872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ffc:	201a      	movs	r0, #26
 8002ffe:	f002 fc54 	bl	80058aa <HAL_NVIC_EnableIRQ>
}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	40000400 	.word	0x40000400
 8003014:	40014800 	.word	0x40014800

08003018 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a12      	ldr	r2, [pc, #72]	; (8003080 <HAL_TIM_MspPostInit+0x68>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d11d      	bne.n	8003076 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_TIM_MspPostInit+0x6c>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a10      	ldr	r2, [pc, #64]	; (8003084 <HAL_TIM_MspPostInit+0x6c>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HAL_TIM_MspPostInit+0x6c>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003056:	2340      	movs	r3, #64	; 0x40
 8003058:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003066:	2302      	movs	r3, #2
 8003068:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800306a:	f107 030c 	add.w	r3, r7, #12
 800306e:	4619      	mov	r1, r3
 8003070:	4805      	ldr	r0, [pc, #20]	; (8003088 <HAL_TIM_MspPostInit+0x70>)
 8003072:	f003 fa79 	bl	8006568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003076:	bf00      	nop
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40000400 	.word	0x40000400
 8003084:	40023800 	.word	0x40023800
 8003088:	40020800 	.word	0x40020800

0800308c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 8003092:	4a12      	ldr	r2, [pc, #72]	; (80030dc <MX_USART2_UART_Init+0x50>)
 8003094:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 8003098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800309c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800309e:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030b2:	220c      	movs	r2, #12
 80030b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030be:	2200      	movs	r2, #0
 80030c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030c2:	4805      	ldr	r0, [pc, #20]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030c4:	f006 f9c4 	bl	8009450 <HAL_UART_Init>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030ce:	f7fe ffcf 	bl	8002070 <Error_Handler>
  }

}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	2000058c 	.word	0x2000058c
 80030dc:	40004400 	.word	0x40004400

080030e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a19      	ldr	r2, [pc, #100]	; (8003164 <HAL_UART_MspInit+0x84>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d12b      	bne.n	800315a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_UART_MspInit+0x88>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a17      	ldr	r2, [pc, #92]	; (8003168 <HAL_UART_MspInit+0x88>)
 800310c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <HAL_UART_MspInit+0x88>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_UART_MspInit+0x88>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <HAL_UART_MspInit+0x88>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <HAL_UART_MspInit+0x88>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800313a:	230c      	movs	r3, #12
 800313c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313e:	2302      	movs	r3, #2
 8003140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003146:	2303      	movs	r3, #3
 8003148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800314a:	2307      	movs	r3, #7
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	4619      	mov	r1, r3
 8003154:	4805      	ldr	r0, [pc, #20]	; (800316c <HAL_UART_MspInit+0x8c>)
 8003156:	f003 fa07 	bl	8006568 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800315a:	bf00      	nop
 800315c:	3728      	adds	r7, #40	; 0x28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40004400 	.word	0x40004400
 8003168:	40023800 	.word	0x40023800
 800316c:	40020000 	.word	0x40020000

08003170 <usart_send_string>:
HAL_StatusTypeDef usart_send_char(char ch){
	HAL_StatusTypeDef result = HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, USART_TIMEOUT);
	return result;
}

HAL_StatusTypeDef usart_send_string(char *s){
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result = HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), USART_TIMEOUT);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fd f831 	bl	80001e0 <strlen>
 800317e:	4603      	mov	r3, r0
 8003180:	b29a      	uxth	r2, r3
 8003182:	2364      	movs	r3, #100	; 0x64
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4805      	ldr	r0, [pc, #20]	; (800319c <usart_send_string+0x2c>)
 8003188:	f006 f9af 	bl	80094ea <HAL_UART_Transmit>
 800318c:	4603      	mov	r3, r0
 800318e:	73fb      	strb	r3, [r7, #15]
	return result;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2000058c 	.word	0x2000058c

080031a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031a6:	e003      	b.n	80031b0 <LoopCopyDataInit>

080031a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80031aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031ae:	3104      	adds	r1, #4

080031b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031b0:	480b      	ldr	r0, [pc, #44]	; (80031e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80031b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031b8:	d3f6      	bcc.n	80031a8 <CopyDataInit>
  ldr  r2, =_sbss
 80031ba:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80031bc:	e002      	b.n	80031c4 <LoopFillZerobss>

080031be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80031be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031c0:	f842 3b04 	str.w	r3, [r2], #4

080031c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80031c4:	4b09      	ldr	r3, [pc, #36]	; (80031ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80031c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031c8:	d3f9      	bcc.n	80031be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031ca:	f7ff fdcd 	bl	8002d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ce:	f006 fe1d 	bl	8009e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031d2:	f7fe fde9 	bl	8001da8 <main>
  bx  lr    
 80031d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031d8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80031dc:	0800d030 	.word	0x0800d030
  ldr  r0, =_sdata
 80031e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031e4:	20000268 	.word	0x20000268
  ldr  r2, =_sbss
 80031e8:	20000268 	.word	0x20000268
  ldr  r3, = _ebss
 80031ec:	200005fc 	.word	0x200005fc

080031f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f0:	e7fe      	b.n	80031f0 <ADC_IRQHandler>
	...

080031f4 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d103      	bne.n	800320c <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8003204:	f04f 33ff 	mov.w	r3, #4294967295
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	e030      	b.n	800326e <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	7b1a      	ldrb	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	699a      	ldr	r2, [r3, #24]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a0c      	ldr	r2, [pc, #48]	; (8003278 <HTS221_RegisterBusIO+0x84>)
 8003248:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a0b      	ldr	r2, [pc, #44]	; (800327c <HTS221_RegisterBusIO+0x88>)
 800324e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4798      	blx	r3
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	e002      	b.n	800326e <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8003268:	f04f 33ff 	mov.w	r3, #4294967295
 800326c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800326e:	68fb      	ldr	r3, [r7, #12]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	0800391f 	.word	0x0800391f
 800327c:	08003981 	.word	0x08003981

08003280 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800328e:	2b00      	cmp	r3, #0
 8003290:	d108      	bne.n	80032a4 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fade 	bl	8003854 <HTS221_Initialize>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 800329e:	f04f 33ff 	mov.w	r3, #4294967295
 80032a2:	e004      	b.n	80032ae <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d111      	bne.n	80032ec <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f878 	bl	80033be <HTS221_HUM_Disable>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80032d4:	f04f 33ff 	mov.w	r3, #4294967295
 80032d8:	e00d      	b.n	80032f6 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f97b 	bl	80035d6 <HTS221_TEMP_Disable>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ea:	e004      	b.n	80032f6 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	331c      	adds	r3, #28
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fc3e 	bl	8003b90 <hts221_device_id_get>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 800331a:	f04f 33ff 	mov.w	r3, #4294967295
 800331e:	e000      	b.n	8003322 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2201      	movs	r2, #1
 800333a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	4a07      	ldr	r2, [pc, #28]	; (8003370 <HTS221_GetCapabilities+0x44>)
 8003352:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4a06      	ldr	r2, [pc, #24]	; (8003370 <HTS221_GetCapabilities+0x44>)
 8003358:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	41480000 	.word	0x41480000

08003374 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e015      	b.n	80033b6 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10b      	bne.n	80033ac <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	331c      	adds	r3, #28
 8003398:	2101      	movs	r1, #1
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fc09 	bl	8003bb2 <hts221_power_on_set>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80033a6:	f04f 33ff 	mov.w	r3, #4294967295
 80033aa:	e004      	b.n	80033b6 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	e015      	b.n	8003400 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	331c      	adds	r3, #28
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fbe4 	bl	8003bb2 <hts221_power_on_set>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 80033f0:	f04f 33ff 	mov.w	r3, #4294967295
 80033f4:	e004      	b.n	8003400 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003412:	6839      	ldr	r1, [r7, #0]
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f9a9 	bl	800376c <HTS221_GetOutputDataRate>
 800341a:	4603      	mov	r3, r0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003430:	ed97 0a00 	vldr	s0, [r7]
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f9dd 	bl	80037f4 <HTS221_SetOutputDataRate>
 800343a:	4603      	mov	r3, r0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  hts221_axis1bit16_t coeff;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	331c      	adds	r3, #28
 8003452:	f107 0218 	add.w	r2, r7, #24
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fc52 	bl	8003d02 <hts221_hum_adc_point_0_get>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003464:	f04f 33ff 	mov.w	r3, #4294967295
 8003468:	e088      	b.n	800357c <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.x0 = (float)coeff.i16bit;
 800346a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003476:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	331c      	adds	r3, #28
 800347e:	f107 0218 	add.w	r2, r7, #24
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fbba 	bl	8003bfe <hts221_hum_rh_point_0_get>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HTS221_HUM_GetHumidity+0x52>
  {
    return HTS221_ERROR;
 8003490:	f04f 33ff 	mov.w	r3, #4294967295
 8003494:	e072      	b.n	800357c <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.y0 = (float)coeff.u8bit[0];
 8003496:	7e3b      	ldrb	r3, [r7, #24]
 8003498:	ee07 3a90 	vmov	s15, r3
 800349c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	331c      	adds	r3, #28
 80034a8:	f107 0218 	add.w	r2, r7, #24
 80034ac:	4611      	mov	r1, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fc38 	bl	8003d24 <hts221_hum_adc_point_1_get>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HTS221_HUM_GetHumidity+0x7c>
  {
    return HTS221_ERROR;
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	e05d      	b.n	800357c <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.x1 = (float)coeff.i16bit;
 80034c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80034c4:	ee07 3a90 	vmov	s15, r3
 80034c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034cc:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	331c      	adds	r3, #28
 80034d4:	f107 0218 	add.w	r2, r7, #24
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fba6 	bl	8003c2c <hts221_hum_rh_point_1_get>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HTS221_HUM_GetHumidity+0xa8>
  {
    return HTS221_ERROR;
 80034e6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ea:	e047      	b.n	800357c <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.y1 = (float)coeff.u8bit[0];
 80034ec:	7e3b      	ldrb	r3, [r7, #24]
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f6:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 80034fa:	f107 031c 	add.w	r3, r7, #28
 80034fe:	2202      	movs	r2, #2
 8003500:	2100      	movs	r1, #0
 8003502:	4618      	mov	r0, r3
 8003504:	f006 fca6 	bl	8009e54 <memset>
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	331c      	adds	r3, #28
 800350c:	f107 021c 	add.w	r2, r7, #28
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fb1a 	bl	8003b4c <hts221_humidity_raw_get>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HTS221_HUM_GetHumidity+0xe0>
  {
    return HTS221_ERROR;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295
 8003522:	e02b      	b.n	800357c <HTS221_HUM_GetHumidity+0x138>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8003524:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003530:	f107 0308 	add.w	r3, r7, #8
 8003534:	eeb0 0a67 	vmov.f32	s0, s15
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f9b7 	bl	80038ac <Linear_Interpolation>
 800353e:	eef0 7a40 	vmov.f32	s15, s0
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	edd3 7a00 	vldr	s15, [r3]
 800354e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003556:	d503      	bpl.n	8003560 <HTS221_HUM_GetHumidity+0x11c>
  {
    *Value = 0.0f;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	edd3 7a00 	vldr	s15, [r3]
 8003566:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003584 <HTS221_HUM_GetHumidity+0x140>
 800356a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800356e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003572:	dd02      	ble.n	800357a <HTS221_HUM_GetHumidity+0x136>
  {
    *Value = 100.0f;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4a04      	ldr	r2, [pc, #16]	; (8003588 <HTS221_HUM_GetHumidity+0x144>)
 8003578:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3720      	adds	r7, #32
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	42c80000 	.word	0x42c80000
 8003588:	42c80000 	.word	0x42c80000

0800358c <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e015      	b.n	80035ce <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	331c      	adds	r3, #28
 80035b0:	2101      	movs	r1, #1
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fafd 	bl	8003bb2 <hts221_power_on_set>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	e004      	b.n	80035ce <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	e015      	b.n	8003618 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	331c      	adds	r3, #28
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fad8 	bl	8003bb2 <hts221_power_on_set>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8003608:	f04f 33ff 	mov.w	r3, #4294967295
 800360c:	e004      	b.n	8003618 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800362a:	6839      	ldr	r1, [r7, #0]
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f89d 	bl	800376c <HTS221_GetOutputDataRate>
 8003632:	4603      	mov	r3, r0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003648:	ed97 0a00 	vldr	s0, [r7]
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f8d1 	bl	80037f4 <HTS221_SetOutputDataRate>
 8003652:	4603      	mov	r3, r0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  hts221_axis1bit16_t coeff;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	331c      	adds	r3, #28
 800366a:	f107 0218 	add.w	r2, r7, #24
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fb68 	bl	8003d46 <hts221_temp_adc_point_0_get>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 800367c:	f04f 33ff 	mov.w	r3, #4294967295
 8003680:	e06f      	b.n	8003762 <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.x0 = (float)coeff.i16bit;
 8003682:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800368e:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	331c      	adds	r3, #28
 8003696:	f107 0218 	add.w	r2, r7, #24
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fadc 	bl	8003c5a <hts221_temp_deg_point_0_get>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HTS221_TEMP_GetTemperature+0x52>
  {
    return HTS221_ERROR;
 80036a8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ac:	e059      	b.n	8003762 <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.y0 = (float)coeff.u8bit[0];
 80036ae:	7e3b      	ldrb	r3, [r7, #24]
 80036b0:	ee07 3a90 	vmov	s15, r3
 80036b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	331c      	adds	r3, #28
 80036c0:	f107 0218 	add.w	r2, r7, #24
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fb4e 	bl	8003d68 <hts221_temp_adc_point_1_get>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HTS221_TEMP_GetTemperature+0x7c>
  {
    return HTS221_ERROR;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	e044      	b.n	8003762 <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.x1 = (float)coeff.i16bit;
 80036d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e4:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	331c      	adds	r3, #28
 80036ec:	f107 0218 	add.w	r2, r7, #24
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fadb 	bl	8003cae <hts221_temp_deg_point_1_get>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HTS221_TEMP_GetTemperature+0xa8>
  {
    return HTS221_ERROR;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	e02e      	b.n	8003762 <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.y1 = (float)coeff.u8bit[0];
 8003704:	7e3b      	ldrb	r3, [r7, #24]
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370e:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8003712:	f107 031c 	add.w	r3, r7, #28
 8003716:	2202      	movs	r2, #2
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f006 fb9a 	bl	8009e54 <memset>
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	331c      	adds	r3, #28
 8003724:	f107 021c 	add.w	r2, r7, #28
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fa1f 	bl	8003b6e <hts221_temperature_raw_get>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HTS221_TEMP_GetTemperature+0xe0>
  {
    return HTS221_ERROR;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
 800373a:	e012      	b.n	8003762 <HTS221_TEMP_GetTemperature+0x106>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800373c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003740:	ee07 3a90 	vmov	s15, r3
 8003744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003748:	f107 0308 	add.w	r3, r7, #8
 800374c:	eeb0 0a67 	vmov.f32	s0, s15
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f8ab 	bl	80038ac <Linear_Interpolation>
 8003756:	eef0 7a40 	vmov.f32	s15, s0
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	331c      	adds	r3, #28
 800377e:	f107 020b 	add.w	r2, r7, #11
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f000 f983 	bl	8003a90 <hts221_data_rate_get>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003790:	f04f 33ff 	mov.w	r3, #4294967295
 8003794:	e025      	b.n	80037e2 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8003796:	7afb      	ldrb	r3, [r7, #11]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d81d      	bhi.n	80037d8 <HTS221_GetOutputDataRate+0x6c>
 800379c:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <HTS221_GetOutputDataRate+0x38>)
 800379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a2:	bf00      	nop
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037bf 	.word	0x080037bf
 80037ac:	080037c9 	.word	0x080037c9
 80037b0:	080037d1 	.word	0x080037d1
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
      break;
 80037bc:	e010      	b.n	80037e0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80037c4:	601a      	str	r2, [r3, #0]
      break;
 80037c6:	e00b      	b.n	80037e0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4a08      	ldr	r2, [pc, #32]	; (80037ec <HTS221_GetOutputDataRate+0x80>)
 80037cc:	601a      	str	r2, [r3, #0]
      break;
 80037ce:	e007      	b.n	80037e0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <HTS221_GetOutputDataRate+0x84>)
 80037d4:	601a      	str	r2, [r3, #0]
      break;
 80037d6:	e003      	b.n	80037e0 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
 80037dc:	60fb      	str	r3, [r7, #12]
      break;
 80037de:	bf00      	nop
  }

  return ret;
 80037e0:	68fb      	ldr	r3, [r7, #12]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40e00000 	.word	0x40e00000
 80037f0:	41480000 	.word	0x41480000

080037f4 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003800:	edd7 7a00 	vldr	s15, [r7]
 8003804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	d801      	bhi.n	8003816 <HTS221_SetOutputDataRate+0x22>
 8003812:	2301      	movs	r3, #1
 8003814:	e00b      	b.n	800382e <HTS221_SetOutputDataRate+0x3a>
 8003816:	edd7 7a00 	vldr	s15, [r7]
 800381a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800381e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003826:	d801      	bhi.n	800382c <HTS221_SetOutputDataRate+0x38>
 8003828:	2302      	movs	r3, #2
 800382a:	e000      	b.n	800382e <HTS221_SetOutputDataRate+0x3a>
 800382c:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800382e:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	331c      	adds	r3, #28
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f000 f902 	bl	8003a42 <hts221_data_rate_set>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8003844:	f04f 33ff 	mov.w	r3, #4294967295
 8003848:	e000      	b.n	800384c <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	331c      	adds	r3, #28
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f000 f9a5 	bl	8003bb2 <hts221_power_on_set>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 800386e:	f04f 33ff 	mov.w	r3, #4294967295
 8003872:	e017      	b.n	80038a4 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	331c      	adds	r3, #28
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f940 	bl	8003b00 <hts221_block_data_update_set>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
 800388a:	e00b      	b.n	80038a4 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800388c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ffaf 	bl	80037f4 <HTS221_SetOutputDataRate>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 800389c:	f04f 33ff 	mov.w	r3, #4294967295
 80038a0:	e000      	b.n	80038a4 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80038c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038c8:	edd7 7a00 	vldr	s15, [r7]
 80038cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80038dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	ed93 6a00 	vldr	s12, [r3]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80038ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 80038f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80038f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003908:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800390c:	eef0 7a66 	vmov.f32	s15, s13
}
 8003910:	eeb0 0a67 	vmov.f32	s0, s15
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800391e:	b590      	push	{r4, r7, lr}
 8003920:	b087      	sub	sp, #28
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	461a      	mov	r2, r3
 800392a:	460b      	mov	r3, r1
 800392c:	72fb      	strb	r3, [r7, #11]
 800392e:	4613      	mov	r3, r2
 8003930:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10e      	bne.n	800395c <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	695c      	ldr	r4, [r3, #20]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	7b1b      	ldrb	r3, [r3, #12]
 8003946:	b298      	uxth	r0, r3
 8003948:	7afb      	ldrb	r3, [r7, #11]
 800394a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800394e:	b2db      	uxtb	r3, r3
 8003950:	b299      	uxth	r1, r3
 8003952:	893b      	ldrh	r3, [r7, #8]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	47a0      	blx	r4
 8003958:	4603      	mov	r3, r0
 800395a:	e00d      	b.n	8003978 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	695c      	ldr	r4, [r3, #20]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	7b1b      	ldrb	r3, [r3, #12]
 8003964:	b298      	uxth	r0, r3
 8003966:	7afb      	ldrb	r3, [r7, #11]
 8003968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800396c:	b2db      	uxtb	r3, r3
 800396e:	b299      	uxth	r1, r3
 8003970:	893b      	ldrh	r3, [r7, #8]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	47a0      	blx	r4
 8003976:	4603      	mov	r3, r0
  }
}
 8003978:	4618      	mov	r0, r3
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}

08003980 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	461a      	mov	r2, r3
 800398c:	460b      	mov	r3, r1
 800398e:	72fb      	strb	r3, [r7, #11]
 8003990:	4613      	mov	r3, r2
 8003992:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10e      	bne.n	80039be <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	691c      	ldr	r4, [r3, #16]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	7b1b      	ldrb	r3, [r3, #12]
 80039a8:	b298      	uxth	r0, r3
 80039aa:	7afb      	ldrb	r3, [r7, #11]
 80039ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	b299      	uxth	r1, r3
 80039b4:	893b      	ldrh	r3, [r7, #8]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	47a0      	blx	r4
 80039ba:	4603      	mov	r3, r0
 80039bc:	e00d      	b.n	80039da <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	691c      	ldr	r4, [r3, #16]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	7b1b      	ldrb	r3, [r3, #12]
 80039c6:	b298      	uxth	r0, r3
 80039c8:	7afb      	ldrb	r3, [r7, #11]
 80039ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	b299      	uxth	r1, r3
 80039d2:	893b      	ldrh	r3, [r7, #8]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	47a0      	blx	r4
 80039d8:	4603      	mov	r3, r0
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd90      	pop	{r4, r7, pc}

080039e2 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 80039e2:	b590      	push	{r4, r7, lr}
 80039e4:	b087      	sub	sp, #28
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	461a      	mov	r2, r3
 80039ee:	460b      	mov	r3, r1
 80039f0:	72fb      	strb	r3, [r7, #11]
 80039f2:	4613      	mov	r3, r2
 80039f4:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	685c      	ldr	r4, [r3, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6898      	ldr	r0, [r3, #8]
 80039fe:	893b      	ldrh	r3, [r7, #8]
 8003a00:	7af9      	ldrb	r1, [r7, #11]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	47a0      	blx	r4
 8003a06:	6178      	str	r0, [r7, #20]
  return ret;
 8003a08:	697b      	ldr	r3, [r7, #20]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd90      	pop	{r4, r7, pc}

08003a12 <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8003a12:	b590      	push	{r4, r7, lr}
 8003a14:	b087      	sub	sp, #28
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	460b      	mov	r3, r1
 8003a20:	72fb      	strb	r3, [r7, #11]
 8003a22:	4613      	mov	r3, r2
 8003a24:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681c      	ldr	r4, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6898      	ldr	r0, [r3, #8]
 8003a2e:	893b      	ldrh	r3, [r7, #8]
 8003a30:	7af9      	ldrb	r1, [r7, #11]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	47a0      	blx	r4
 8003a36:	6178      	str	r0, [r7, #20]
  return ret;
 8003a38:	697b      	ldr	r3, [r7, #20]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd90      	pop	{r4, r7, pc}

08003a42 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003a4e:	f107 0208 	add.w	r2, r7, #8
 8003a52:	2301      	movs	r3, #1
 8003a54:	2120      	movs	r1, #32
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ffc3 	bl	80039e2 <hts221_read_reg>
 8003a5c:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10f      	bne.n	8003a84 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	7a3b      	ldrb	r3, [r7, #8]
 8003a6e:	f362 0301 	bfi	r3, r2, #0, #2
 8003a72:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003a74:	f107 0208 	add.w	r2, r7, #8
 8003a78:	2301      	movs	r3, #1
 8003a7a:	2120      	movs	r1, #32
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ffc8 	bl	8003a12 <hts221_write_reg>
 8003a82:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a84:	68fb      	ldr	r3, [r7, #12]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003a9a:	f107 0208 	add.w	r2, r7, #8
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	2120      	movs	r1, #32
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff ff9d 	bl	80039e2 <hts221_read_reg>
 8003aa8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8003aaa:	7a3b      	ldrb	r3, [r7, #8]
 8003aac:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d81a      	bhi.n	8003aec <hts221_data_rate_get+0x5c>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <hts221_data_rate_get+0x2c>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003ad5 	.word	0x08003ad5
 8003ac4:	08003add 	.word	0x08003add
 8003ac8:	08003ae5 	.word	0x08003ae5
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
      break;
 8003ad2:	e00f      	b.n	8003af4 <hts221_data_rate_get+0x64>
    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	701a      	strb	r2, [r3, #0]
      break;
 8003ada:	e00b      	b.n	8003af4 <hts221_data_rate_get+0x64>
    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	701a      	strb	r2, [r3, #0]
      break;
 8003ae2:	e007      	b.n	8003af4 <hts221_data_rate_get+0x64>
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	701a      	strb	r2, [r3, #0]
      break;
 8003aea:	e003      	b.n	8003af4 <hts221_data_rate_get+0x64>
    default:
      *val = HTS221_ODR_ND;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2204      	movs	r2, #4
 8003af0:	701a      	strb	r2, [r3, #0]
      break;
 8003af2:	bf00      	nop
  }

  return ret;
 8003af4:	68fb      	ldr	r3, [r7, #12]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop

08003b00 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003b0c:	f107 0208 	add.w	r2, r7, #8
 8003b10:	2301      	movs	r3, #1
 8003b12:	2120      	movs	r1, #32
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ff64 	bl	80039e2 <hts221_read_reg>
 8003b1a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	7a3b      	ldrb	r3, [r7, #8]
 8003b2c:	f362 0382 	bfi	r3, r2, #2, #1
 8003b30:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003b32:	f107 0208 	add.w	r2, r7, #8
 8003b36:	2301      	movs	r3, #1
 8003b38:	2120      	movs	r1, #32
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ff69 	bl	8003a12 <hts221_write_reg>
 8003b40:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b42:	68fb      	ldr	r3, [r7, #12]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003b56:	2302      	movs	r3, #2
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	2128      	movs	r1, #40	; 0x28
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff40 	bl	80039e2 <hts221_read_reg>
 8003b62:	60f8      	str	r0, [r7, #12]
  return ret;
 8003b64:	68fb      	ldr	r3, [r7, #12]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003b78:	2302      	movs	r3, #2
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	212a      	movs	r1, #42	; 0x2a
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff ff2f 	bl	80039e2 <hts221_read_reg>
 8003b84:	60f8      	str	r0, [r7, #12]
  return ret;
 8003b86:	68fb      	ldr	r3, [r7, #12]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	210f      	movs	r1, #15
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff ff1e 	bl	80039e2 <hts221_read_reg>
 8003ba6:	60f8      	str	r0, [r7, #12]
  return ret;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003bbe:	f107 0208 	add.w	r2, r7, #8
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	2120      	movs	r1, #32
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff ff0b 	bl	80039e2 <hts221_read_reg>
 8003bcc:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10f      	bne.n	8003bf4 <hts221_power_on_set+0x42>
    reg.pd = val;
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	7a3b      	ldrb	r3, [r7, #8]
 8003bde:	f362 13c7 	bfi	r3, r2, #7, #1
 8003be2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003be4:	f107 0208 	add.w	r2, r7, #8
 8003be8:	2301      	movs	r3, #1
 8003bea:	2120      	movs	r1, #32
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff10 	bl	8003a12 <hts221_write_reg>
 8003bf2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 8003c08:	2301      	movs	r3, #1
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	2130      	movs	r1, #48	; 0x30
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff fee7 	bl	80039e2 <hts221_read_reg>
 8003c14:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	701a      	strb	r2, [r3, #0]

  return ret;
 8003c22:	68fb      	ldr	r3, [r7, #12]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8003c36:	2301      	movs	r3, #1
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	2131      	movs	r1, #49	; 0x31
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff fed0 	bl	80039e2 <hts221_read_reg>
 8003c42:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	701a      	strb	r2, [r3, #0]

  return ret;
 8003c50:	68fb      	ldr	r3, [r7, #12]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003c64:	f107 020f 	add.w	r2, r7, #15
 8003c68:	2301      	movs	r3, #1
 8003c6a:	2132      	movs	r1, #50	; 0x32
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff feb8 	bl	80039e2 <hts221_read_reg>
 8003c72:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d114      	bne.n	8003ca4 <hts221_temp_deg_point_0_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8003c7a:	f107 0210 	add.w	r2, r7, #16
 8003c7e:	2301      	movs	r3, #1
 8003c80:	2135      	movs	r1, #53	; 0x35
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fead 	bl	80039e2 <hts221_read_reg>
 8003c88:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003c8a:	7c3b      	ldrb	r3, [r7, #16]
 8003c8c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	7bfa      	ldrb	r2, [r7, #15]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	10db      	asrs	r3, r3, #3
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003ca4:	697b      	ldr	r3, [r7, #20]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003cb8:	f107 020f 	add.w	r2, r7, #15
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	2133      	movs	r1, #51	; 0x33
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fe8e 	bl	80039e2 <hts221_read_reg>
 8003cc6:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d114      	bne.n	8003cf8 <hts221_temp_deg_point_1_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8003cce:	f107 0210 	add.w	r2, r7, #16
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	2135      	movs	r1, #53	; 0x35
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fe83 	bl	80039e2 <hts221_read_reg>
 8003cdc:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003cde:	7c3b      	ldrb	r3, [r7, #16]
 8003ce0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	7bfa      	ldrb	r2, [r7, #15]
 8003cee:	4413      	add	r3, r2
 8003cf0:	10db      	asrs	r3, r3, #3
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003cf8:	697b      	ldr	r3, [r7, #20]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	2136      	movs	r1, #54	; 0x36
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff fe65 	bl	80039e2 <hts221_read_reg>
 8003d18:	60f8      	str	r0, [r7, #12]
  return ret;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 8003d2e:	2302      	movs	r3, #2
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	213a      	movs	r1, #58	; 0x3a
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff fe54 	bl	80039e2 <hts221_read_reg>
 8003d3a:	60f8      	str	r0, [r7, #12]
  return ret;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 8003d50:	2302      	movs	r3, #2
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	213c      	movs	r1, #60	; 0x3c
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff fe43 	bl	80039e2 <hts221_read_reg>
 8003d5c:	60f8      	str	r0, [r7, #12]
  return ret;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 8003d72:	2302      	movs	r3, #2
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	213e      	movs	r1, #62	; 0x3e
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff fe32 	bl	80039e2 <hts221_read_reg>
 8003d7e:	60f8      	str	r0, [r7, #12]
  return ret;
 8003d80:	68fb      	ldr	r3, [r7, #12]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d103      	bne.n	8003da8 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8003da0:	f04f 33ff 	mov.w	r3, #4294967295
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	e04d      	b.n	8003e44 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	7b1a      	ldrb	r2, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695a      	ldr	r2, [r3, #20]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a1b      	ldr	r2, [pc, #108]	; (8003e50 <LPS22HB_RegisterBusIO+0xc4>)
 8003de4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a1a      	ldr	r2, [pc, #104]	; (8003e54 <LPS22HB_RegisterBusIO+0xc8>)
 8003dea:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d103      	bne.n	8003e02 <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e020      	b.n	8003e44 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4798      	blx	r3
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	e016      	b.n	8003e44 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d112      	bne.n	8003e44 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10d      	bne.n	8003e44 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8003e2c:	7afb      	ldrb	r3, [r7, #11]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2110      	movs	r1, #16
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9df 	bl	80041f6 <LPS22HB_Write_Reg>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8003e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e42:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003e44:	68fb      	ldr	r3, [r7, #12]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	080044b7 	.word	0x080044b7
 8003e54:	0800453d 	.word	0x0800453d

08003e58 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d108      	bne.n	8003e7c <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 faca 	bl	8004404 <LPS22HB_Initialize>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7a:	e004      	b.n	8003e86 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d111      	bne.n	8003ec4 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f877 	bl	8003f94 <LPS22HB_PRESS_Disable>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	e00d      	b.n	8003ece <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f918 	bl	80040e8 <LPS22HB_TEMP_Disable>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec2:	e004      	b.n	8003ece <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	331c      	adds	r3, #28
 8003ee4:	6839      	ldr	r1, [r7, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fca6 	bl	8004838 <lps22hb_device_id_get>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef6:	e000      	b.n	8003efa <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2200      	movs	r2, #0
 8003f12:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2200      	movs	r2, #0
 8003f24:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <LPS22HB_GetCapabilities+0x44>)
 8003f32:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <LPS22HB_GetCapabilities+0x44>)
 8003f38:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	42960000 	.word	0x42960000

08003f4c <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e014      	b.n	8003f8c <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f103 021c 	add.w	r2, r3, #28
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	f000 fbd5 	bl	8004720 <lps22hb_data_rate_set>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8003f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f80:	e004      	b.n	8003f8c <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e024      	b.n	8003ff4 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d11a      	bne.n	8003fea <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f103 021c 	add.w	r2, r3, #28
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	332b      	adds	r3, #43	; 0x2b
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	f000 fbd3 	bl	800476c <lps22hb_data_rate_get>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8003fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd0:	e010      	b.n	8003ff4 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	331c      	adds	r3, #28
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fba1 	bl	8004720 <lps22hb_data_rate_set>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8003fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe8:	e004      	b.n	8003ff4 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8004006:	6839      	ldr	r1, [r7, #0]
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f90f 	bl	800422c <LPS22HB_GetOutputDataRate>
 800400e:	4603      	mov	r3, r0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800402a:	2b01      	cmp	r3, #1
 800402c:	d106      	bne.n	800403c <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 800402e:	ed97 0a00 	vldr	s0, [r7]
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f94e 	bl	80042d4 <LPS22HB_SetOutputDataRate_When_Enabled>
 8004038:	4603      	mov	r3, r0
 800403a:	e005      	b.n	8004048 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 800403c:	ed97 0a00 	vldr	s0, [r7]
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f99f 	bl	8004384 <LPS22HB_SetOutputDataRate_When_Disabled>
 8004046:	4603      	mov	r3, r0
  }
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800405a:	f107 030c 	add.w	r3, r7, #12
 800405e:	2204      	movs	r2, #4
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f005 fef6 	bl	8009e54 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	331c      	adds	r3, #28
 800406c:	f107 020c 	add.w	r2, r7, #12
 8004070:	4611      	mov	r1, r2
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fbbe 	bl	80047f4 <lps22hb_pressure_raw_get>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 800407e:	f04f 33ff 	mov.w	r3, #4294967295
 8004082:	e009      	b.n	8004098 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 facc 	bl	8004624 <lps22hb_from_lsb_to_hpa>
 800408c:	eef0 7a40 	vmov.f32	s15, s0
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e014      	b.n	80040e0 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f103 021c 	add.w	r2, r3, #28
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f000 fb2b 	bl	8004720 <lps22hb_data_rate_set>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295
 80040d4:	e004      	b.n	80040e0 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e024      	b.n	8004148 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004104:	2b00      	cmp	r3, #0
 8004106:	d11a      	bne.n	800413e <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f103 021c 	add.w	r2, r3, #28
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	332b      	adds	r3, #43	; 0x2b
 8004112:	4619      	mov	r1, r3
 8004114:	4610      	mov	r0, r2
 8004116:	f000 fb29 	bl	800476c <lps22hb_data_rate_get>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8004120:	f04f 33ff 	mov.w	r3, #4294967295
 8004124:	e010      	b.n	8004148 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	331c      	adds	r3, #28
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f000 faf7 	bl	8004720 <lps22hb_data_rate_set>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
 800413c:	e004      	b.n	8004148 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f865 	bl	800422c <LPS22HB_GetOutputDataRate>
 8004162:	4603      	mov	r3, r0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800417e:	2b01      	cmp	r3, #1
 8004180:	d106      	bne.n	8004190 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004182:	ed97 0a00 	vldr	s0, [r7]
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f8a4 	bl	80042d4 <LPS22HB_SetOutputDataRate_When_Enabled>
 800418c:	4603      	mov	r3, r0
 800418e:	e005      	b.n	800419c <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004190:	ed97 0a00 	vldr	s0, [r7]
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f8f5 	bl	8004384 <LPS22HB_SetOutputDataRate_When_Disabled>
 800419a:	4603      	mov	r3, r0
  }
}
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80041ae:	f107 030c 	add.w	r3, r7, #12
 80041b2:	2202      	movs	r2, #2
 80041b4:	2100      	movs	r1, #0
 80041b6:	4618      	mov	r0, r3
 80041b8:	f005 fe4c 	bl	8009e54 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	331c      	adds	r3, #28
 80041c0:	f107 020c 	add.w	r2, r7, #12
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fb25 	bl	8004816 <lps22hb_temperature_raw_get>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 80041d2:	f04f 33ff 	mov.w	r3, #4294967295
 80041d6:	e00a      	b.n	80041ee <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 80041d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fa39 	bl	8004654 <lps22hb_from_lsb_to_degc>
 80041e2:	eef0 7a40 	vmov.f32	s15, s0
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	460b      	mov	r3, r1
 8004200:	70fb      	strb	r3, [r7, #3]
 8004202:	4613      	mov	r3, r2
 8004204:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f103 001c 	add.w	r0, r3, #28
 800420c:	1cba      	adds	r2, r7, #2
 800420e:	78f9      	ldrb	r1, [r7, #3]
 8004210:	2301      	movs	r3, #1
 8004212:	f000 f9ee 	bl	80045f2 <lps22hb_write_reg>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 800421c:	f04f 33ff 	mov.w	r3, #4294967295
 8004220:	e000      	b.n	8004224 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	331c      	adds	r3, #28
 800423e:	f107 020b 	add.w	r2, r7, #11
 8004242:	4611      	mov	r1, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fa91 	bl	800476c <lps22hb_data_rate_get>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	e031      	b.n	80042ba <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8004256:	7afb      	ldrb	r3, [r7, #11]
 8004258:	2b05      	cmp	r3, #5
 800425a:	d829      	bhi.n	80042b0 <LPS22HB_GetOutputDataRate+0x84>
 800425c:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <LPS22HB_GetOutputDataRate+0x38>)
 800425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004262:	bf00      	nop
 8004264:	0800427d 	.word	0x0800427d
 8004268:	08004287 	.word	0x08004287
 800426c:	08004291 	.word	0x08004291
 8004270:	08004299 	.word	0x08004299
 8004274:	080042a1 	.word	0x080042a1
 8004278:	080042a9 	.word	0x080042a9
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
      break;
 8004284:	e018      	b.n	80042b8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800428c:	601a      	str	r2, [r3, #0]
      break;
 800428e:	e013      	b.n	80042b8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	4a0c      	ldr	r2, [pc, #48]	; (80042c4 <LPS22HB_GetOutputDataRate+0x98>)
 8004294:	601a      	str	r2, [r3, #0]
      break;
 8004296:	e00f      	b.n	80042b8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <LPS22HB_GetOutputDataRate+0x9c>)
 800429c:	601a      	str	r2, [r3, #0]
      break;
 800429e:	e00b      	b.n	80042b8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <LPS22HB_GetOutputDataRate+0xa0>)
 80042a4:	601a      	str	r2, [r3, #0]
      break;
 80042a6:	e007      	b.n	80042b8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <LPS22HB_GetOutputDataRate+0xa4>)
 80042ac:	601a      	str	r2, [r3, #0]
      break;
 80042ae:	e003      	b.n	80042b8 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	60fb      	str	r3, [r7, #12]
      break;
 80042b6:	bf00      	nop
  }

  return ret;
 80042b8:	68fb      	ldr	r3, [r7, #12]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	41200000 	.word	0x41200000
 80042c8:	41c80000 	.word	0x41c80000
 80042cc:	42480000 	.word	0x42480000
 80042d0:	42960000 	.word	0x42960000

080042d4 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80042e0:	edd7 7a00 	vldr	s15, [r7]
 80042e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f0:	d801      	bhi.n	80042f6 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e021      	b.n	800433a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80042f6:	edd7 7a00 	vldr	s15, [r7]
 80042fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004306:	d801      	bhi.n	800430c <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8004308:	2302      	movs	r3, #2
 800430a:	e016      	b.n	800433a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800430c:	edd7 7a00 	vldr	s15, [r7]
 8004310:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431c:	d801      	bhi.n	8004322 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 800431e:	2303      	movs	r3, #3
 8004320:	e00b      	b.n	800433a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004322:	edd7 7a00 	vldr	s15, [r7]
 8004326:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004380 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 800432a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800432e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004332:	d801      	bhi.n	8004338 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8004334:	2304      	movs	r3, #4
 8004336:	e000      	b.n	800433a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004338:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800433a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	331c      	adds	r3, #28
 8004340:	7bfa      	ldrb	r2, [r7, #15]
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f000 f9eb 	bl	8004720 <lps22hb_data_rate_set>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8004350:	f04f 33ff 	mov.w	r3, #4294967295
 8004354:	e00f      	b.n	8004376 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f103 021c 	add.w	r2, r3, #28
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	332b      	adds	r3, #43	; 0x2b
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f000 fa02 	bl	800476c <lps22hb_data_rate_get>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295
 8004372:	e000      	b.n	8004376 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	42480000 	.word	0x42480000

08004384 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004390:	edd7 7a00 	vldr	s15, [r7]
 8004394:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a0:	d801      	bhi.n	80043a6 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e021      	b.n	80043ea <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80043a6:	edd7 7a00 	vldr	s15, [r7]
 80043aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b6:	d801      	bhi.n	80043bc <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e016      	b.n	80043ea <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80043bc:	edd7 7a00 	vldr	s15, [r7]
 80043c0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80043c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043cc:	d801      	bhi.n	80043d2 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 80043ce:	2303      	movs	r3, #3
 80043d0:	e00b      	b.n	80043ea <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80043d2:	edd7 7a00 	vldr	s15, [r7]
 80043d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004400 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 80043da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e2:	d801      	bhi.n	80043e8 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 80043e4:	2304      	movs	r3, #4
 80043e6:	e000      	b.n	80043ea <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80043e8:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	42480000 	.word	0x42480000

08004404 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	331c      	adds	r3, #28
 8004410:	2101      	movs	r1, #1
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fa21 	bl	800485a <lps22hb_low_power_set>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 800441e:	f04f 33ff 	mov.w	r3, #4294967295
 8004422:	e044      	b.n	80044ae <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	331c      	adds	r3, #28
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f978 	bl	8004720 <lps22hb_data_rate_set>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8004436:	f04f 33ff 	mov.w	r3, #4294967295
 800443a:	e038      	b.n	80044ae <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	331c      	adds	r3, #28
 8004440:	2102      	movs	r1, #2
 8004442:	4618      	mov	r0, r3
 8004444:	f000 f946 	bl	80046d4 <lps22hb_low_pass_filter_mode_set>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 800444e:	f04f 33ff 	mov.w	r3, #4294967295
 8004452:	e02c      	b.n	80044ae <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	331c      	adds	r3, #28
 8004458:	2101      	movs	r1, #1
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f914 	bl	8004688 <lps22hb_block_data_update_set>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	e020      	b.n	80044ae <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10b      	bne.n	800448c <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	331c      	adds	r3, #28
 8004478:	2100      	movs	r1, #0
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fa13 	bl	80048a6 <lps22hb_auto_add_inc_set>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00e      	beq.n	80044a4 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	e010      	b.n	80044ae <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	331c      	adds	r3, #28
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fa07 	bl	80048a6 <lps22hb_auto_add_inc_set>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800449e:	f04f 33ff 	mov.w	r3, #4294967295
 80044a2:	e004      	b.n	80044ae <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2203      	movs	r2, #3
 80044a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80044b6:	b590      	push	{r4, r7, lr}
 80044b8:	b089      	sub	sp, #36	; 0x24
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	461a      	mov	r2, r3
 80044c2:	460b      	mov	r3, r1
 80044c4:	72fb      	strb	r3, [r7, #11]
 80044c6:	4613      	mov	r3, r2
 80044c8:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d121      	bne.n	800451e <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80044da:	2300      	movs	r3, #0
 80044dc:	83fb      	strh	r3, [r7, #30]
 80044de:	e018      	b.n	8004512 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	695c      	ldr	r4, [r3, #20]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	7b1b      	ldrb	r3, [r3, #12]
 80044e8:	b298      	uxth	r0, r3
 80044ea:	7afb      	ldrb	r3, [r7, #11]
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	8bfb      	ldrh	r3, [r7, #30]
 80044f0:	4413      	add	r3, r2
 80044f2:	b299      	uxth	r1, r3
 80044f4:	8bfb      	ldrh	r3, [r7, #30]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	441a      	add	r2, r3
 80044fa:	2301      	movs	r3, #1
 80044fc:	47a0      	blx	r4
 80044fe:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004506:	f04f 33ff 	mov.w	r3, #4294967295
 800450a:	e013      	b.n	8004534 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 800450c:	8bfb      	ldrh	r3, [r7, #30]
 800450e:	3301      	adds	r3, #1
 8004510:	83fb      	strh	r3, [r7, #30]
 8004512:	8bfa      	ldrh	r2, [r7, #30]
 8004514:	893b      	ldrh	r3, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d3e2      	bcc.n	80044e0 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	e00a      	b.n	8004534 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	695c      	ldr	r4, [r3, #20]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	7b1b      	ldrb	r3, [r3, #12]
 8004526:	b298      	uxth	r0, r3
 8004528:	7afb      	ldrb	r3, [r7, #11]
 800452a:	b299      	uxth	r1, r3
 800452c:	893b      	ldrh	r3, [r7, #8]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	47a0      	blx	r4
 8004532:	4603      	mov	r3, r0
  }
}
 8004534:	4618      	mov	r0, r3
 8004536:	3724      	adds	r7, #36	; 0x24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd90      	pop	{r4, r7, pc}

0800453c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800453c:	b590      	push	{r4, r7, lr}
 800453e:	b089      	sub	sp, #36	; 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	461a      	mov	r2, r3
 8004548:	460b      	mov	r3, r1
 800454a:	72fb      	strb	r3, [r7, #11]
 800454c:	4613      	mov	r3, r2
 800454e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d121      	bne.n	80045a4 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004560:	2300      	movs	r3, #0
 8004562:	83fb      	strh	r3, [r7, #30]
 8004564:	e018      	b.n	8004598 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	691c      	ldr	r4, [r3, #16]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	7b1b      	ldrb	r3, [r3, #12]
 800456e:	b298      	uxth	r0, r3
 8004570:	7afb      	ldrb	r3, [r7, #11]
 8004572:	b29a      	uxth	r2, r3
 8004574:	8bfb      	ldrh	r3, [r7, #30]
 8004576:	4413      	add	r3, r2
 8004578:	b299      	uxth	r1, r3
 800457a:	8bfb      	ldrh	r3, [r7, #30]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	441a      	add	r2, r3
 8004580:	2301      	movs	r3, #1
 8004582:	47a0      	blx	r4
 8004584:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800458c:	f04f 33ff 	mov.w	r3, #4294967295
 8004590:	e013      	b.n	80045ba <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004592:	8bfb      	ldrh	r3, [r7, #30]
 8004594:	3301      	adds	r3, #1
 8004596:	83fb      	strh	r3, [r7, #30]
 8004598:	8bfa      	ldrh	r2, [r7, #30]
 800459a:	893b      	ldrh	r3, [r7, #8]
 800459c:	429a      	cmp	r2, r3
 800459e:	d3e2      	bcc.n	8004566 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	e00a      	b.n	80045ba <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	691c      	ldr	r4, [r3, #16]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	7b1b      	ldrb	r3, [r3, #12]
 80045ac:	b298      	uxth	r0, r3
 80045ae:	7afb      	ldrb	r3, [r7, #11]
 80045b0:	b299      	uxth	r1, r3
 80045b2:	893b      	ldrh	r3, [r7, #8]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	47a0      	blx	r4
 80045b8:	4603      	mov	r3, r0
  }
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3724      	adds	r7, #36	; 0x24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd90      	pop	{r4, r7, pc}

080045c2 <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80045c2:	b590      	push	{r4, r7, lr}
 80045c4:	b087      	sub	sp, #28
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	461a      	mov	r2, r3
 80045ce:	460b      	mov	r3, r1
 80045d0:	72fb      	strb	r3, [r7, #11]
 80045d2:	4613      	mov	r3, r2
 80045d4:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685c      	ldr	r4, [r3, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6898      	ldr	r0, [r3, #8]
 80045de:	893b      	ldrh	r3, [r7, #8]
 80045e0:	7af9      	ldrb	r1, [r7, #11]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	47a0      	blx	r4
 80045e6:	6178      	str	r0, [r7, #20]
  return ret;
 80045e8:	697b      	ldr	r3, [r7, #20]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd90      	pop	{r4, r7, pc}

080045f2 <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80045f2:	b590      	push	{r4, r7, lr}
 80045f4:	b087      	sub	sp, #28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	461a      	mov	r2, r3
 80045fe:	460b      	mov	r3, r1
 8004600:	72fb      	strb	r3, [r7, #11]
 8004602:	4613      	mov	r3, r2
 8004604:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681c      	ldr	r4, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6898      	ldr	r0, [r3, #8]
 800460e:	893b      	ldrh	r3, [r7, #8]
 8004610:	7af9      	ldrb	r1, [r7, #11]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	47a0      	blx	r4
 8004616:	6178      	str	r0, [r7, #20]
  return ret;
 8004618:	697b      	ldr	r3, [r7, #20]
}
 800461a:	4618      	mov	r0, r3
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	bd90      	pop	{r4, r7, pc}
	...

08004624 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 4096.0f );
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004636:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004650 <lps22hb_from_lsb_to_hpa+0x2c>
 800463a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800463e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004642:	eeb0 0a67 	vmov.f32	s0, s15
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	45800000 	.word	0x45800000

08004654 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 800465e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800466a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004684 <lps22hb_from_lsb_to_degc+0x30>
 800466e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004672:	eef0 7a66 	vmov.f32	s15, s13
}
 8004676:	eeb0 0a67 	vmov.f32	s0, s15
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	42c80000 	.word	0x42c80000

08004688 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004694:	f107 0208 	add.w	r2, r7, #8
 8004698:	2301      	movs	r3, #1
 800469a:	2110      	movs	r1, #16
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff90 	bl	80045c2 <lps22hb_read_reg>
 80046a2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10f      	bne.n	80046ca <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	7a3b      	ldrb	r3, [r7, #8]
 80046b4:	f362 0341 	bfi	r3, r2, #1, #1
 80046b8:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80046ba:	f107 0208 	add.w	r2, r7, #8
 80046be:	2301      	movs	r3, #1
 80046c0:	2110      	movs	r1, #16
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff ff95 	bl	80045f2 <lps22hb_write_reg>
 80046c8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80046ca:	68fb      	ldr	r3, [r7, #12]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80046e0:	f107 0208 	add.w	r2, r7, #8
 80046e4:	2301      	movs	r3, #1
 80046e6:	2110      	movs	r1, #16
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff ff6a 	bl	80045c2 <lps22hb_read_reg>
 80046ee:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10f      	bne.n	8004716 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	7a3b      	ldrb	r3, [r7, #8]
 8004700:	f362 0383 	bfi	r3, r2, #2, #2
 8004704:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004706:	f107 0208 	add.w	r2, r7, #8
 800470a:	2301      	movs	r3, #1
 800470c:	2110      	movs	r1, #16
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff ff6f 	bl	80045f2 <lps22hb_write_reg>
 8004714:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004716:	68fb      	ldr	r3, [r7, #12]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800472c:	f107 0208 	add.w	r2, r7, #8
 8004730:	2301      	movs	r3, #1
 8004732:	2110      	movs	r1, #16
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff ff44 	bl	80045c2 <lps22hb_read_reg>
 800473a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10f      	bne.n	8004762 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	b2da      	uxtb	r2, r3
 800474a:	7a3b      	ldrb	r3, [r7, #8]
 800474c:	f362 1306 	bfi	r3, r2, #4, #3
 8004750:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004752:	f107 0208 	add.w	r2, r7, #8
 8004756:	2301      	movs	r3, #1
 8004758:	2110      	movs	r1, #16
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ff49 	bl	80045f2 <lps22hb_write_reg>
 8004760:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004762:	68fb      	ldr	r3, [r7, #12]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004776:	f107 0208 	add.w	r2, r7, #8
 800477a:	2301      	movs	r3, #1
 800477c:	2110      	movs	r1, #16
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff ff1f 	bl	80045c2 <lps22hb_read_reg>
 8004784:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg1.odr){
 8004786:	7a3b      	ldrb	r3, [r7, #8]
 8004788:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b05      	cmp	r3, #5
 8004790:	d826      	bhi.n	80047e0 <lps22hb_data_rate_get+0x74>
 8004792:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <lps22hb_data_rate_get+0x2c>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	080047b1 	.word	0x080047b1
 800479c:	080047b9 	.word	0x080047b9
 80047a0:	080047c1 	.word	0x080047c1
 80047a4:	080047c9 	.word	0x080047c9
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047d9 	.word	0x080047d9
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
      break;
 80047b6:	e017      	b.n	80047e8 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2201      	movs	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]
      break;
 80047be:	e013      	b.n	80047e8 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2202      	movs	r2, #2
 80047c4:	701a      	strb	r2, [r3, #0]
      break;
 80047c6:	e00f      	b.n	80047e8 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2203      	movs	r2, #3
 80047cc:	701a      	strb	r2, [r3, #0]
      break;
 80047ce:	e00b      	b.n	80047e8 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2204      	movs	r2, #4
 80047d4:	701a      	strb	r2, [r3, #0]
      break;
 80047d6:	e007      	b.n	80047e8 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2205      	movs	r2, #5
 80047dc:	701a      	strb	r2, [r3, #0]
      break;
 80047de:	e003      	b.n	80047e8 <lps22hb_data_rate_get+0x7c>
    default:
      *val = LPS22HB_ODR_1_Hz;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]
      break;
 80047e6:	bf00      	nop
  }

  return ret;
 80047e8:	68fb      	ldr	r3, [r7, #12]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop

080047f4 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 80047fe:	2303      	movs	r3, #3
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	2128      	movs	r1, #40	; 0x28
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff fedc 	bl	80045c2 <lps22hb_read_reg>
 800480a:	60f8      	str	r0, [r7, #12]
  return ret;
 800480c:	68fb      	ldr	r3, [r7, #12]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
 8004820:	2302      	movs	r3, #2
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	212b      	movs	r1, #43	; 0x2b
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff fecb 	bl	80045c2 <lps22hb_read_reg>
 800482c:	60f8      	str	r0, [r7, #12]
  return ret;
 800482e:	68fb      	ldr	r3, [r7, #12]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 8004842:	2301      	movs	r3, #1
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	210f      	movs	r1, #15
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff feba 	bl	80045c2 <lps22hb_read_reg>
 800484e:	60f8      	str	r0, [r7, #12]
  return ret;
 8004850:	68fb      	ldr	r3, [r7, #12]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	460b      	mov	r3, r1
 8004864:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8004866:	f107 0208 	add.w	r2, r7, #8
 800486a:	2301      	movs	r3, #1
 800486c:	211a      	movs	r1, #26
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff fea7 	bl	80045c2 <lps22hb_read_reg>
 8004874:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10f      	bne.n	800489c <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	b2da      	uxtb	r2, r3
 8004884:	7a3b      	ldrb	r3, [r7, #8]
 8004886:	f362 0300 	bfi	r3, r2, #0, #1
 800488a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 800488c:	f107 0208 	add.w	r2, r7, #8
 8004890:	2301      	movs	r3, #1
 8004892:	211a      	movs	r1, #26
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff feac 	bl	80045f2 <lps22hb_write_reg>
 800489a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800489c:	68fb      	ldr	r3, [r7, #12]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	460b      	mov	r3, r1
 80048b0:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80048b2:	f107 0208 	add.w	r2, r7, #8
 80048b6:	2301      	movs	r3, #1
 80048b8:	2111      	movs	r1, #17
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff fe81 	bl	80045c2 <lps22hb_read_reg>
 80048c0:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10f      	bne.n	80048e8 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	7a3b      	ldrb	r3, [r7, #8]
 80048d2:	f362 1304 	bfi	r3, r2, #4, #1
 80048d6:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80048d8:	f107 0208 	add.w	r2, r7, #8
 80048dc:	2301      	movs	r3, #1
 80048de:	2111      	movs	r1, #17
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff fe86 	bl	80045f2 <lps22hb_write_reg>
 80048e6:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80048e8:	68fb      	ldr	r3, [r7, #12]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80048fe:	2300      	movs	r3, #0
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8004902:	2301      	movs	r3, #1
 8004904:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <IKS01A2_ENV_SENSOR_Init+0x22>
 8004910:	2b01      	cmp	r3, #1
 8004912:	d032      	beq.n	800497a <IKS01A2_ENV_SENSOR_Init+0x86>
 8004914:	e063      	b.n	80049de <IKS01A2_ENV_SENSOR_Init+0xea>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8004916:	6838      	ldr	r0, [r7, #0]
 8004918:	f000 f8f0 	bl	8004afc <HTS221_0_Probe>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <IKS01A2_ENV_SENSOR_Init+0x34>
      {
        return BSP_ERROR_NO_INIT;
 8004922:	f04f 33ff 	mov.w	r3, #4294967295
 8004926:	e098      	b.n	8004a5a <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004928:	4a4e      	ldr	r2, [pc, #312]	; (8004a64 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	494d      	ldr	r1, [pc, #308]	; (8004a68 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800493a:	f107 0108 	add.w	r1, r7, #8
 800493e:	4610      	mov	r0, r2
 8004940:	4798      	blx	r3
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <IKS01A2_ENV_SENSOR_Init+0x5a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004948:	f06f 0306 	mvn.w	r3, #6
 800494c:	e085      	b.n	8004a5a <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 800494e:	7a3b      	ldrb	r3, [r7, #8]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d103      	bne.n	800495c <IKS01A2_ENV_SENSOR_Init+0x68>
      {
        component_functions |= ENV_TEMPERATURE;
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800495c:	7abb      	ldrb	r3, [r7, #10]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d103      	bne.n	800496a <IKS01A2_ENV_SENSOR_Init+0x76>
      {
        component_functions |= ENV_HUMIDITY;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	f043 0304 	orr.w	r3, r3, #4
 8004968:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800496a:	7a7b      	ldrb	r3, [r7, #9]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d13a      	bne.n	80049e6 <IKS01A2_ENV_SENSOR_Init+0xf2>
      {
        component_functions |= ENV_PRESSURE;
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	f043 0302 	orr.w	r3, r3, #2
 8004976:	61bb      	str	r3, [r7, #24]
      }
      break;
 8004978:	e035      	b.n	80049e6 <IKS01A2_ENV_SENSOR_Init+0xf2>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 800497a:	6838      	ldr	r0, [r7, #0]
 800497c:	f000 f978 	bl	8004c70 <LPS22HB_0_Probe>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <IKS01A2_ENV_SENSOR_Init+0x98>
      {
        return BSP_ERROR_NO_INIT;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	e066      	b.n	8004a5a <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800498c:	4a35      	ldr	r2, [pc, #212]	; (8004a64 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	4934      	ldr	r1, [pc, #208]	; (8004a68 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800499e:	f107 0108 	add.w	r1, r7, #8
 80049a2:	4610      	mov	r0, r2
 80049a4:	4798      	blx	r3
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <IKS01A2_ENV_SENSOR_Init+0xbe>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80049ac:	f06f 0306 	mvn.w	r3, #6
 80049b0:	e053      	b.n	8004a5a <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 80049b2:	7a3b      	ldrb	r3, [r7, #8]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d103      	bne.n	80049c0 <IKS01A2_ENV_SENSOR_Init+0xcc>
      {
        component_functions |= ENV_TEMPERATURE;
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80049c0:	7abb      	ldrb	r3, [r7, #10]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d103      	bne.n	80049ce <IKS01A2_ENV_SENSOR_Init+0xda>
      {
        component_functions |= ENV_HUMIDITY;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	f043 0304 	orr.w	r3, r3, #4
 80049cc:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80049ce:	7a7b      	ldrb	r3, [r7, #9]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d10a      	bne.n	80049ea <IKS01A2_ENV_SENSOR_Init+0xf6>
      {
        component_functions |= ENV_PRESSURE;
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f043 0302 	orr.w	r3, r3, #2
 80049da:	61bb      	str	r3, [r7, #24]
      }
      break;
 80049dc:	e005      	b.n	80049ea <IKS01A2_ENV_SENSOR_Init+0xf6>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80049de:	f06f 0301 	mvn.w	r3, #1
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80049e4:	e002      	b.n	80049ec <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 80049e6:	bf00      	nop
 80049e8:	e000      	b.n	80049ec <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 80049ea:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <IKS01A2_ENV_SENSOR_Init+0x102>
  {
    return ret;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	e031      	b.n	8004a5a <IKS01A2_ENV_SENSOR_Init+0x166>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	e02a      	b.n	8004a52 <IKS01A2_ENV_SENSOR_Init+0x15e>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	4013      	ands	r3, r2
 8004a02:	6a3a      	ldr	r2, [r7, #32]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d11e      	bne.n	8004a46 <IKS01A2_ENV_SENSOR_Init+0x152>
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	6a3a      	ldr	r2, [r7, #32]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d118      	bne.n	8004a46 <IKS01A2_ENV_SENSOR_Init+0x152>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8004a14:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <IKS01A2_ENV_SENSOR_Init+0x178>)
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a1c:	4814      	ldr	r0, [pc, #80]	; (8004a70 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	4413      	add	r3, r2
 8004a26:	440b      	add	r3, r1
 8004a28:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	490e      	ldr	r1, [pc, #56]	; (8004a68 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004a36:	4610      	mov	r0, r2
 8004a38:	4798      	blx	r3
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <IKS01A2_ENV_SENSOR_Init+0x152>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8004a40:	f06f 0304 	mvn.w	r3, #4
 8004a44:	e009      	b.n	8004a5a <IKS01A2_ENV_SENSOR_Init+0x166>
      }
    }
    function = function << 1;
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d9d1      	bls.n	80049fc <IKS01A2_ENV_SENSOR_Init+0x108>
  }

  return ret;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3728      	adds	r7, #40	; 0x28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	200002b0 	.word	0x200002b0
 8004a68:	200005cc 	.word	0x200005cc
 8004a6c:	20000078 	.word	0x20000078
 8004a70:	20000298 	.word	0x20000298

08004a74 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d903      	bls.n	8004a8e <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004a86:	f06f 0301 	mvn.w	r3, #1
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e029      	b.n	8004ae2 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8004a8e:	4a17      	ldr	r2, [pc, #92]	; (8004aec <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d11d      	bne.n	8004adc <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8004aa0:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004aa8:	4812      	ldr	r0, [pc, #72]	; (8004af4 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4613      	mov	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	4413      	add	r3, r2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	490f      	ldr	r1, [pc, #60]	; (8004af8 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4798      	blx	r3
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ace:	f06f 0304 	mvn.w	r3, #4
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e005      	b.n	8004ae2 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	e002      	b.n	8004ae2 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004adc:	f06f 0301 	mvn.w	r3, #1
 8004ae0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004ae2:	697b      	ldr	r3, [r7, #20]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	200002b8 	.word	0x200002b8
 8004af0:	20000078 	.word	0x20000078
 8004af4:	20000298 	.word	0x20000298
 8004af8:	200005cc 	.word	0x200005cc

08004afc <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b090      	sub	sp, #64	; 0x40
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8004b08:	2300      	movs	r3, #0
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8004b0c:	23bf      	movs	r3, #191	; 0xbf
 8004b0e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004b12:	4b49      	ldr	r3, [pc, #292]	; (8004c38 <HTS221_0_Probe+0x13c>)
 8004b14:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004b16:	4b49      	ldr	r3, [pc, #292]	; (8004c3c <HTS221_0_Probe+0x140>)
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8004b1a:	4b49      	ldr	r3, [pc, #292]	; (8004c40 <HTS221_0_Probe+0x144>)
 8004b1c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004b1e:	4b49      	ldr	r3, [pc, #292]	; (8004c44 <HTS221_0_Probe+0x148>)
 8004b20:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004b22:	4b49      	ldr	r3, [pc, #292]	; (8004c48 <HTS221_0_Probe+0x14c>)
 8004b24:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8004b26:	f107 0320 	add.w	r3, r7, #32
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4847      	ldr	r0, [pc, #284]	; (8004c4c <HTS221_0_Probe+0x150>)
 8004b2e:	f7fe fb61 	bl	80031f4 <HTS221_RegisterBusIO>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004b38:	f06f 0306 	mvn.w	r3, #6
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b3e:	e076      	b.n	8004c2e <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8004b40:	f107 031f 	add.w	r3, r7, #31
 8004b44:	4619      	mov	r1, r3
 8004b46:	4841      	ldr	r0, [pc, #260]	; (8004c4c <HTS221_0_Probe+0x150>)
 8004b48:	f7fe fbd9 	bl	80032fe <HTS221_ReadID>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004b52:	f06f 0306 	mvn.w	r3, #6
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b58:	e069      	b.n	8004c2e <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8004b5a:	7ffb      	ldrb	r3, [r7, #31]
 8004b5c:	2bbc      	cmp	r3, #188	; 0xbc
 8004b5e:	d003      	beq.n	8004b68 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004b60:	f06f 0306 	mvn.w	r3, #6
 8004b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b66:	e062      	b.n	8004c2e <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8004b68:	f107 030c 	add.w	r3, r7, #12
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4837      	ldr	r0, [pc, #220]	; (8004c4c <HTS221_0_Probe+0x150>)
 8004b70:	f7fe fbdc 	bl	800332c <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8004b74:	7b3b      	ldrb	r3, [r7, #12]
 8004b76:	461a      	mov	r2, r3
 8004b78:	7b7b      	ldrb	r3, [r7, #13]
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8004b7e:	7bbb      	ldrb	r3, [r7, #14]
 8004b80:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8004b82:	4313      	orrs	r3, r2
 8004b84:	4a32      	ldr	r2, [pc, #200]	; (8004c50 <HTS221_0_Probe+0x154>)
 8004b86:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8004b88:	4b32      	ldr	r3, [pc, #200]	; (8004c54 <HTS221_0_Probe+0x158>)
 8004b8a:	4a30      	ldr	r2, [pc, #192]	; (8004c4c <HTS221_0_Probe+0x150>)
 8004b8c:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8004b8e:	4b32      	ldr	r3, [pc, #200]	; (8004c58 <HTS221_0_Probe+0x15c>)
 8004b90:	4a32      	ldr	r2, [pc, #200]	; (8004c5c <HTS221_0_Probe+0x160>)
 8004b92:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8004b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d11d      	bne.n	8004bd6 <HTS221_0_Probe+0xda>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d018      	beq.n	8004bd6 <HTS221_0_Probe+0xda>
 8004ba4:	7b3b      	ldrb	r3, [r7, #12]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d115      	bne.n	8004bd6 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8004baa:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <HTS221_0_Probe+0x164>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4a2d      	ldr	r2, [pc, #180]	; (8004c64 <HTS221_0_Probe+0x168>)
 8004bb0:	492d      	ldr	r1, [pc, #180]	; (8004c68 <HTS221_0_Probe+0x16c>)
 8004bb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8004bb6:	4b28      	ldr	r3, [pc, #160]	; (8004c58 <HTS221_0_Probe+0x15c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a25      	ldr	r2, [pc, #148]	; (8004c54 <HTS221_0_Probe+0x158>)
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4798      	blx	r3
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004bca:	f06f 0304 	mvn.w	r3, #4
 8004bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd0:	e001      	b.n	8004bd6 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8004bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d11d      	bne.n	8004c18 <HTS221_0_Probe+0x11c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d018      	beq.n	8004c18 <HTS221_0_Probe+0x11c>
 8004be6:	7bbb      	ldrb	r3, [r7, #14]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d115      	bne.n	8004c18 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8004bec:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <HTS221_0_Probe+0x164>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <HTS221_0_Probe+0x168>)
 8004bf2:	491e      	ldr	r1, [pc, #120]	; (8004c6c <HTS221_0_Probe+0x170>)
 8004bf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8004bf8:	4b17      	ldr	r3, [pc, #92]	; (8004c58 <HTS221_0_Probe+0x15c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <HTS221_0_Probe+0x158>)
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	4610      	mov	r0, r2
 8004c04:	4798      	blx	r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c0c:	f06f 0304 	mvn.w	r3, #4
 8004c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c12:	e001      	b.n	8004c18 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8004c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d107      	bne.n	8004c2e <HTS221_0_Probe+0x132>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c28:	f06f 0304 	mvn.w	r3, #4
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 8004c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3740      	adds	r7, #64	; 0x40
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	08002a3d 	.word	0x08002a3d
 8004c3c:	08002aa1 	.word	0x08002aa1
 8004c40:	08002b55 	.word	0x08002b55
 8004c44:	08002af1 	.word	0x08002af1
 8004c48:	08002bb9 	.word	0x08002bb9
 8004c4c:	200002c0 	.word	0x200002c0
 8004c50:	200002b8 	.word	0x200002b8
 8004c54:	200005cc 	.word	0x200005cc
 8004c58:	200002b0 	.word	0x200002b0
 8004c5c:	20000008 	.word	0x20000008
 8004c60:	20000078 	.word	0x20000078
 8004c64:	20000298 	.word	0x20000298
 8004c68:	2000002c 	.word	0x2000002c
 8004c6c:	20000018 	.word	0x20000018

08004c70 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b090      	sub	sp, #64	; 0x40
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 8004c80:	23bb      	movs	r3, #187	; 0xbb
 8004c82:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004c86:	4b4a      	ldr	r3, [pc, #296]	; (8004db0 <LPS22HB_0_Probe+0x140>)
 8004c88:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004c8a:	4b4a      	ldr	r3, [pc, #296]	; (8004db4 <LPS22HB_0_Probe+0x144>)
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8004c8e:	4b4a      	ldr	r3, [pc, #296]	; (8004db8 <LPS22HB_0_Probe+0x148>)
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004c92:	4b4a      	ldr	r3, [pc, #296]	; (8004dbc <LPS22HB_0_Probe+0x14c>)
 8004c94:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004c96:	4b4a      	ldr	r3, [pc, #296]	; (8004dc0 <LPS22HB_0_Probe+0x150>)
 8004c98:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8004c9a:	f107 0320 	add.w	r3, r7, #32
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4848      	ldr	r0, [pc, #288]	; (8004dc4 <LPS22HB_0_Probe+0x154>)
 8004ca2:	f7ff f873 	bl	8003d8c <LPS22HB_RegisterBusIO>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004cac:	f06f 0306 	mvn.w	r3, #6
 8004cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb2:	e078      	b.n	8004da6 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8004cb4:	f107 031f 	add.w	r3, r7, #31
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4842      	ldr	r0, [pc, #264]	; (8004dc4 <LPS22HB_0_Probe+0x154>)
 8004cbc:	f7ff f90b 	bl	8003ed6 <LPS22HB_ReadID>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004cc6:	f06f 0306 	mvn.w	r3, #6
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ccc:	e06b      	b.n	8004da6 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 8004cce:	7ffb      	ldrb	r3, [r7, #31]
 8004cd0:	2bb1      	cmp	r3, #177	; 0xb1
 8004cd2:	d003      	beq.n	8004cdc <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004cd4:	f06f 0306 	mvn.w	r3, #6
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cda:	e064      	b.n	8004da6 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8004cdc:	f107 030c 	add.w	r3, r7, #12
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4838      	ldr	r0, [pc, #224]	; (8004dc4 <LPS22HB_0_Probe+0x154>)
 8004ce4:	f7ff f90e 	bl	8003f04 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8004ce8:	7b3b      	ldrb	r3, [r7, #12]
 8004cea:	461a      	mov	r2, r3
 8004cec:	7b7b      	ldrb	r3, [r7, #13]
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8004cf2:	7bbb      	ldrb	r3, [r7, #14]
 8004cf4:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	4a33      	ldr	r2, [pc, #204]	; (8004dc8 <LPS22HB_0_Probe+0x158>)
 8004cfa:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 8004cfc:	4b33      	ldr	r3, [pc, #204]	; (8004dcc <LPS22HB_0_Probe+0x15c>)
 8004cfe:	4a31      	ldr	r2, [pc, #196]	; (8004dc4 <LPS22HB_0_Probe+0x154>)
 8004d00:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8004d02:	4b33      	ldr	r3, [pc, #204]	; (8004dd0 <LPS22HB_0_Probe+0x160>)
 8004d04:	4a33      	ldr	r2, [pc, #204]	; (8004dd4 <LPS22HB_0_Probe+0x164>)
 8004d06:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8004d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d11e      	bne.n	8004d4c <LPS22HB_0_Probe+0xdc>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d019      	beq.n	8004d4c <LPS22HB_0_Probe+0xdc>
 8004d18:	7b3b      	ldrb	r3, [r7, #12]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d116      	bne.n	8004d4c <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 8004d1e:	4b2e      	ldr	r3, [pc, #184]	; (8004dd8 <LPS22HB_0_Probe+0x168>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	4a2e      	ldr	r2, [pc, #184]	; (8004ddc <LPS22HB_0_Probe+0x16c>)
 8004d24:	3303      	adds	r3, #3
 8004d26:	492e      	ldr	r1, [pc, #184]	; (8004de0 <LPS22HB_0_Probe+0x170>)
 8004d28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8004d2c:	4b28      	ldr	r3, [pc, #160]	; (8004dd0 <LPS22HB_0_Probe+0x160>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a26      	ldr	r2, [pc, #152]	; (8004dcc <LPS22HB_0_Probe+0x15c>)
 8004d34:	6852      	ldr	r2, [r2, #4]
 8004d36:	4610      	mov	r0, r2
 8004d38:	4798      	blx	r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d40:	f06f 0304 	mvn.w	r3, #4
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d46:	e001      	b.n	8004d4c <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8004d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d11e      	bne.n	8004d90 <LPS22HB_0_Probe+0x120>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d019      	beq.n	8004d90 <LPS22HB_0_Probe+0x120>
 8004d5c:	7b7b      	ldrb	r3, [r7, #13]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d116      	bne.n	8004d90 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 8004d62:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <LPS22HB_0_Probe+0x168>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <LPS22HB_0_Probe+0x16c>)
 8004d68:	3303      	adds	r3, #3
 8004d6a:	491e      	ldr	r1, [pc, #120]	; (8004de4 <LPS22HB_0_Probe+0x174>)
 8004d6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8004d70:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <LPS22HB_0_Probe+0x160>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <LPS22HB_0_Probe+0x15c>)
 8004d78:	6852      	ldr	r2, [r2, #4]
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	4798      	blx	r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d84:	f06f 0304 	mvn.w	r3, #4
 8004d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d8a:	e001      	b.n	8004d90 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8004d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d107      	bne.n	8004da6 <LPS22HB_0_Probe+0x136>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004da0:	f06f 0304 	mvn.w	r3, #4
 8004da4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8004da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3740      	adds	r7, #64	; 0x40
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	08002a3d 	.word	0x08002a3d
 8004db4:	08002aa1 	.word	0x08002aa1
 8004db8:	08002b55 	.word	0x08002b55
 8004dbc:	08002af1 	.word	0x08002af1
 8004dc0:	08002bb9 	.word	0x08002bb9
 8004dc4:	200002ec 	.word	0x200002ec
 8004dc8:	200002b8 	.word	0x200002b8
 8004dcc:	200005cc 	.word	0x200005cc
 8004dd0:	200002b0 	.word	0x200002b0
 8004dd4:	20000040 	.word	0x20000040
 8004dd8:	20000078 	.word	0x20000078
 8004ddc:	20000298 	.word	0x20000298
 8004de0:	20000064 	.word	0x20000064
 8004de4:	20000050 	.word	0x20000050

08004de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004dec:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <HAL_Init+0x40>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a0d      	ldr	r2, [pc, #52]	; (8004e28 <HAL_Init+0x40>)
 8004df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <HAL_Init+0x40>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <HAL_Init+0x40>)
 8004dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e04:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <HAL_Init+0x40>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a07      	ldr	r2, [pc, #28]	; (8004e28 <HAL_Init+0x40>)
 8004e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e10:	2003      	movs	r0, #3
 8004e12:	f000 fd23 	bl	800585c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e16:	2000      	movs	r0, #0
 8004e18:	f000 f808 	bl	8004e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e1c:	f7fd fd86 	bl	800292c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023c00 	.word	0x40023c00

08004e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e34:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <HAL_InitTick+0x54>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <HAL_InitTick+0x58>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fd3b 	bl	80058c6 <HAL_SYSTICK_Config>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e00e      	b.n	8004e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b0f      	cmp	r3, #15
 8004e5e:	d80a      	bhi.n	8004e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e60:	2200      	movs	r2, #0
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	f04f 30ff 	mov.w	r0, #4294967295
 8004e68:	f000 fd03 	bl	8005872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e6c:	4a06      	ldr	r2, [pc, #24]	; (8004e88 <HAL_InitTick+0x5c>)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	e000      	b.n	8004e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20000004 	.word	0x20000004
 8004e84:	20000090 	.word	0x20000090
 8004e88:	2000008c 	.word	0x2000008c

08004e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <HAL_IncTick+0x20>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_IncTick+0x24>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	4a04      	ldr	r2, [pc, #16]	; (8004eb0 <HAL_IncTick+0x24>)
 8004e9e:	6013      	str	r3, [r2, #0]
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	20000090 	.word	0x20000090
 8004eb0:	200005d4 	.word	0x200005d4

08004eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <HAL_GetTick+0x14>)
 8004eba:	681b      	ldr	r3, [r3, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	200005d4 	.word	0x200005d4

08004ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ed4:	f7ff ffee 	bl	8004eb4 <HAL_GetTick>
 8004ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d005      	beq.n	8004ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <HAL_Delay+0x40>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ef2:	bf00      	nop
 8004ef4:	f7ff ffde 	bl	8004eb4 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d8f7      	bhi.n	8004ef4 <HAL_Delay+0x28>
  {
  }
}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20000090 	.word	0x20000090

08004f10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e033      	b.n	8004f8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fc f866 	bl	8001000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d118      	bne.n	8004f80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f56:	f023 0302 	bic.w	r3, r3, #2
 8004f5a:	f043 0202 	orr.w	r2, r3, #2
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fa2c 	bl	80053c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f023 0303 	bic.w	r3, r3, #3
 8004f76:	f043 0201 	orr.w	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40
 8004f7e:	e001      	b.n	8004f84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_ADC_Start_DMA+0x1e>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e0b1      	b.n	800511a <HAL_ADC_Start_DMA+0x182>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d018      	beq.n	8004ffe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004fdc:	4b51      	ldr	r3, [pc, #324]	; (8005124 <HAL_ADC_Start_DMA+0x18c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a51      	ldr	r2, [pc, #324]	; (8005128 <HAL_ADC_Start_DMA+0x190>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	0c9a      	lsrs	r2, r3, #18
 8004fe8:	4613      	mov	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4413      	add	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004ff0:	e002      	b.n	8004ff8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f9      	bne.n	8004ff2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	f040 8085 	bne.w	8005118 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005016:	f023 0301 	bic.w	r3, r3, #1
 800501a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502c:	2b00      	cmp	r3, #0
 800502e:	d007      	beq.n	8005040 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005038:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504c:	d106      	bne.n	800505c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	f023 0206 	bic.w	r2, r3, #6
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	645a      	str	r2, [r3, #68]	; 0x44
 800505a:	e002      	b.n	8005062 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800506a:	4b30      	ldr	r3, [pc, #192]	; (800512c <HAL_ADC_Start_DMA+0x194>)
 800506c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	4a2f      	ldr	r2, [pc, #188]	; (8005130 <HAL_ADC_Start_DMA+0x198>)
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	4a2e      	ldr	r2, [pc, #184]	; (8005134 <HAL_ADC_Start_DMA+0x19c>)
 800507c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	4a2d      	ldr	r2, [pc, #180]	; (8005138 <HAL_ADC_Start_DMA+0x1a0>)
 8005084:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800508e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800509e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	334c      	adds	r3, #76	; 0x4c
 80050ba:	4619      	mov	r1, r3
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f000 fcbc 	bl	8005a3c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10f      	bne.n	80050f0 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d11c      	bne.n	8005118 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80050ec:	609a      	str	r2, [r3, #8]
 80050ee:	e013      	b.n	8005118 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a11      	ldr	r2, [pc, #68]	; (800513c <HAL_ADC_Start_DMA+0x1a4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d10e      	bne.n	8005118 <HAL_ADC_Start_DMA+0x180>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d107      	bne.n	8005118 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005116:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000004 	.word	0x20000004
 8005128:	431bde83 	.word	0x431bde83
 800512c:	40012300 	.word	0x40012300
 8005130:	080055b9 	.word	0x080055b9
 8005134:	08005673 	.word	0x08005673
 8005138:	0800568f 	.word	0x0800568f
 800513c:	40012000 	.word	0x40012000

08005140 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x1c>
 8005194:	2302      	movs	r3, #2
 8005196:	e105      	b.n	80053a4 <HAL_ADC_ConfigChannel+0x228>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b09      	cmp	r3, #9
 80051a6:	d925      	bls.n	80051f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68d9      	ldr	r1, [r3, #12]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	4613      	mov	r3, r2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4413      	add	r3, r2
 80051bc:	3b1e      	subs	r3, #30
 80051be:	2207      	movs	r2, #7
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	43da      	mvns	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	400a      	ands	r2, r1
 80051cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68d9      	ldr	r1, [r3, #12]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	4618      	mov	r0, r3
 80051e0:	4603      	mov	r3, r0
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4403      	add	r3, r0
 80051e6:	3b1e      	subs	r3, #30
 80051e8:	409a      	lsls	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	60da      	str	r2, [r3, #12]
 80051f2:	e022      	b.n	800523a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6919      	ldr	r1, [r3, #16]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	461a      	mov	r2, r3
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	2207      	movs	r2, #7
 800520a:	fa02 f303 	lsl.w	r3, r2, r3
 800520e:	43da      	mvns	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	400a      	ands	r2, r1
 8005216:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6919      	ldr	r1, [r3, #16]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	4618      	mov	r0, r3
 800522a:	4603      	mov	r3, r0
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	4403      	add	r3, r0
 8005230:	409a      	lsls	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b06      	cmp	r3, #6
 8005240:	d824      	bhi.n	800528c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	3b05      	subs	r3, #5
 8005254:	221f      	movs	r2, #31
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	43da      	mvns	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	400a      	ands	r2, r1
 8005262:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	4618      	mov	r0, r3
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	3b05      	subs	r3, #5
 800527e:	fa00 f203 	lsl.w	r2, r0, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	635a      	str	r2, [r3, #52]	; 0x34
 800528a:	e04c      	b.n	8005326 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b0c      	cmp	r3, #12
 8005292:	d824      	bhi.n	80052de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	3b23      	subs	r3, #35	; 0x23
 80052a6:	221f      	movs	r2, #31
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	43da      	mvns	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	400a      	ands	r2, r1
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	4618      	mov	r0, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	3b23      	subs	r3, #35	; 0x23
 80052d0:	fa00 f203 	lsl.w	r2, r0, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
 80052dc:	e023      	b.n	8005326 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	3b41      	subs	r3, #65	; 0x41
 80052f0:	221f      	movs	r2, #31
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	43da      	mvns	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	400a      	ands	r2, r1
 80052fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	4618      	mov	r0, r3
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	3b41      	subs	r3, #65	; 0x41
 800531a:	fa00 f203 	lsl.w	r2, r0, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005326:	4b22      	ldr	r3, [pc, #136]	; (80053b0 <HAL_ADC_ConfigChannel+0x234>)
 8005328:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a21      	ldr	r2, [pc, #132]	; (80053b4 <HAL_ADC_ConfigChannel+0x238>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d109      	bne.n	8005348 <HAL_ADC_ConfigChannel+0x1cc>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b12      	cmp	r3, #18
 800533a:	d105      	bne.n	8005348 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <HAL_ADC_ConfigChannel+0x238>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d123      	bne.n	800539a <HAL_ADC_ConfigChannel+0x21e>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b10      	cmp	r3, #16
 8005358:	d003      	beq.n	8005362 <HAL_ADC_ConfigChannel+0x1e6>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b11      	cmp	r3, #17
 8005360:	d11b      	bne.n	800539a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b10      	cmp	r3, #16
 8005374:	d111      	bne.n	800539a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005376:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <HAL_ADC_ConfigChannel+0x23c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a10      	ldr	r2, [pc, #64]	; (80053bc <HAL_ADC_ConfigChannel+0x240>)
 800537c:	fba2 2303 	umull	r2, r3, r2, r3
 8005380:	0c9a      	lsrs	r2, r3, #18
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800538c:	e002      	b.n	8005394 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	3b01      	subs	r3, #1
 8005392:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f9      	bne.n	800538e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	40012300 	.word	0x40012300
 80053b4:	40012000 	.word	0x40012000
 80053b8:	20000004 	.word	0x20000004
 80053bc:	431bde83 	.word	0x431bde83

080053c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053c8:	4b79      	ldr	r3, [pc, #484]	; (80055b0 <ADC_Init+0x1f0>)
 80053ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	431a      	orrs	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6859      	ldr	r1, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	021a      	lsls	r2, r3, #8
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005418:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6859      	ldr	r1, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800543a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6899      	ldr	r1, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	4a58      	ldr	r2, [pc, #352]	; (80055b4 <ADC_Init+0x1f4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d022      	beq.n	800549e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005466:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6899      	ldr	r1, [r3, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6899      	ldr	r1, [r3, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	609a      	str	r2, [r3, #8]
 800549c:	e00f      	b.n	80054be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0202 	bic.w	r2, r2, #2
 80054cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6899      	ldr	r1, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	7e1b      	ldrb	r3, [r3, #24]
 80054d8:	005a      	lsls	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01b      	beq.n	8005524 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800550a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6859      	ldr	r1, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	3b01      	subs	r3, #1
 8005518:	035a      	lsls	r2, r3, #13
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	e007      	b.n	8005534 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005532:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005542:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	3b01      	subs	r3, #1
 8005550:	051a      	lsls	r2, r3, #20
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005568:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6899      	ldr	r1, [r3, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005576:	025a      	lsls	r2, r3, #9
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6899      	ldr	r1, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	029a      	lsls	r2, r3, #10
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	609a      	str	r2, [r3, #8]
}
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	40012300 	.word	0x40012300
 80055b4:	0f000001 	.word	0x0f000001

080055b8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d13c      	bne.n	800564c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d12b      	bne.n	8005644 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d127      	bne.n	8005644 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d006      	beq.n	8005610 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800560c:	2b00      	cmp	r3, #0
 800560e:	d119      	bne.n	8005644 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0220 	bic.w	r2, r2, #32
 800561e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d105      	bne.n	8005644 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	f043 0201 	orr.w	r2, r3, #1
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff fd7b 	bl	8005140 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800564a:	e00e      	b.n	800566a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f7ff fd85 	bl	8005168 <HAL_ADC_ErrorCallback>
}
 800565e:	e004      	b.n	800566a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	4798      	blx	r3
}
 800566a:	bf00      	nop
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f7ff fd67 	bl	8005154 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005686:	bf00      	nop
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2240      	movs	r2, #64	; 0x40
 80056a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a6:	f043 0204 	orr.w	r2, r3, #4
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f7ff fd5a 	bl	8005168 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056b4:	bf00      	nop
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056cc:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <__NVIC_SetPriorityGrouping+0x44>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056d8:	4013      	ands	r3, r2
 80056da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056ee:	4a04      	ldr	r2, [pc, #16]	; (8005700 <__NVIC_SetPriorityGrouping+0x44>)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	60d3      	str	r3, [r2, #12]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	e000ed00 	.word	0xe000ed00

08005704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005708:	4b04      	ldr	r3, [pc, #16]	; (800571c <__NVIC_GetPriorityGrouping+0x18>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	0a1b      	lsrs	r3, r3, #8
 800570e:	f003 0307 	and.w	r3, r3, #7
}
 8005712:	4618      	mov	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	e000ed00 	.word	0xe000ed00

08005720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800572a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572e:	2b00      	cmp	r3, #0
 8005730:	db0b      	blt.n	800574a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	f003 021f 	and.w	r2, r3, #31
 8005738:	4907      	ldr	r1, [pc, #28]	; (8005758 <__NVIC_EnableIRQ+0x38>)
 800573a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	2001      	movs	r0, #1
 8005742:	fa00 f202 	lsl.w	r2, r0, r2
 8005746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	e000e100 	.word	0xe000e100

0800575c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	6039      	str	r1, [r7, #0]
 8005766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576c:	2b00      	cmp	r3, #0
 800576e:	db0a      	blt.n	8005786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	b2da      	uxtb	r2, r3
 8005774:	490c      	ldr	r1, [pc, #48]	; (80057a8 <__NVIC_SetPriority+0x4c>)
 8005776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577a:	0112      	lsls	r2, r2, #4
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	440b      	add	r3, r1
 8005780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005784:	e00a      	b.n	800579c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	4908      	ldr	r1, [pc, #32]	; (80057ac <__NVIC_SetPriority+0x50>)
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	3b04      	subs	r3, #4
 8005794:	0112      	lsls	r2, r2, #4
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	440b      	add	r3, r1
 800579a:	761a      	strb	r2, [r3, #24]
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	e000e100 	.word	0xe000e100
 80057ac:	e000ed00 	.word	0xe000ed00

080057b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b089      	sub	sp, #36	; 0x24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f1c3 0307 	rsb	r3, r3, #7
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	bf28      	it	cs
 80057ce:	2304      	movcs	r3, #4
 80057d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	3304      	adds	r3, #4
 80057d6:	2b06      	cmp	r3, #6
 80057d8:	d902      	bls.n	80057e0 <NVIC_EncodePriority+0x30>
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	3b03      	subs	r3, #3
 80057de:	e000      	b.n	80057e2 <NVIC_EncodePriority+0x32>
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e4:	f04f 32ff 	mov.w	r2, #4294967295
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	43da      	mvns	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	401a      	ands	r2, r3
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057f8:	f04f 31ff 	mov.w	r1, #4294967295
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005802:	43d9      	mvns	r1, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005808:	4313      	orrs	r3, r2
         );
}
 800580a:	4618      	mov	r0, r3
 800580c:	3724      	adds	r7, #36	; 0x24
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3b01      	subs	r3, #1
 8005824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005828:	d301      	bcc.n	800582e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800582a:	2301      	movs	r3, #1
 800582c:	e00f      	b.n	800584e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800582e:	4a0a      	ldr	r2, [pc, #40]	; (8005858 <SysTick_Config+0x40>)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3b01      	subs	r3, #1
 8005834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005836:	210f      	movs	r1, #15
 8005838:	f04f 30ff 	mov.w	r0, #4294967295
 800583c:	f7ff ff8e 	bl	800575c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <SysTick_Config+0x40>)
 8005842:	2200      	movs	r2, #0
 8005844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005846:	4b04      	ldr	r3, [pc, #16]	; (8005858 <SysTick_Config+0x40>)
 8005848:	2207      	movs	r2, #7
 800584a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	e000e010 	.word	0xe000e010

0800585c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff ff29 	bl	80056bc <__NVIC_SetPriorityGrouping>
}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005872:	b580      	push	{r7, lr}
 8005874:	b086      	sub	sp, #24
 8005876:	af00      	add	r7, sp, #0
 8005878:	4603      	mov	r3, r0
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
 800587e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005884:	f7ff ff3e 	bl	8005704 <__NVIC_GetPriorityGrouping>
 8005888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	6978      	ldr	r0, [r7, #20]
 8005890:	f7ff ff8e 	bl	80057b0 <NVIC_EncodePriority>
 8005894:	4602      	mov	r2, r0
 8005896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800589a:	4611      	mov	r1, r2
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff ff5d 	bl	800575c <__NVIC_SetPriority>
}
 80058a2:	bf00      	nop
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	4603      	mov	r3, r0
 80058b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff ff31 	bl	8005720 <__NVIC_EnableIRQ>
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff ffa2 	bl	8005818 <SysTick_Config>
 80058d4:	4603      	mov	r3, r0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80058ec:	f7ff fae2 	bl	8004eb4 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e099      	b.n	8005a30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800591c:	e00f      	b.n	800593e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800591e:	f7ff fac9 	bl	8004eb4 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b05      	cmp	r3, #5
 800592a:	d908      	bls.n	800593e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2203      	movs	r2, #3
 8005936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e078      	b.n	8005a30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e8      	bne.n	800591e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	4b38      	ldr	r3, [pc, #224]	; (8005a38 <HAL_DMA_Init+0x158>)
 8005958:	4013      	ands	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800596a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	2b04      	cmp	r3, #4
 8005996:	d107      	bne.n	80059a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	4313      	orrs	r3, r2
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f023 0307 	bic.w	r3, r3, #7
 80059be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d117      	bne.n	8005a02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00e      	beq.n	8005a02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa6f 	bl	8005ec8 <DMA_CheckFifoParam>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2240      	movs	r2, #64	; 0x40
 80059f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80059fe:	2301      	movs	r3, #1
 8005a00:	e016      	b.n	8005a30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fa26 	bl	8005e5c <DMA_CalcBaseAndBitshift>
 8005a10:	4603      	mov	r3, r0
 8005a12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a18:	223f      	movs	r2, #63	; 0x3f
 8005a1a:	409a      	lsls	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	f010803f 	.word	0xf010803f

08005a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_DMA_Start_IT+0x26>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e040      	b.n	8005ae4 <HAL_DMA_Start_IT+0xa8>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d12f      	bne.n	8005ad6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 f9b8 	bl	8005e00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a94:	223f      	movs	r2, #63	; 0x3f
 8005a96:	409a      	lsls	r2, r3
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0216 	orr.w	r2, r2, #22
 8005aaa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d007      	beq.n	8005ac4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0208 	orr.w	r2, r2, #8
 8005ac2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e005      	b.n	8005ae2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005af8:	4b92      	ldr	r3, [pc, #584]	; (8005d44 <HAL_DMA_IRQHandler+0x258>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a92      	ldr	r2, [pc, #584]	; (8005d48 <HAL_DMA_IRQHandler+0x25c>)
 8005afe:	fba2 2303 	umull	r2, r3, r2, r3
 8005b02:	0a9b      	lsrs	r3, r3, #10
 8005b04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b16:	2208      	movs	r2, #8
 8005b18:	409a      	lsls	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01a      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d013      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0204 	bic.w	r2, r2, #4
 8005b3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b44:	2208      	movs	r2, #8
 8005b46:	409a      	lsls	r2, r3
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b50:	f043 0201 	orr.w	r2, r3, #1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	409a      	lsls	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d012      	beq.n	8005b8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00b      	beq.n	8005b8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	409a      	lsls	r2, r3
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	f043 0202 	orr.w	r2, r3, #2
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b92:	2204      	movs	r2, #4
 8005b94:	409a      	lsls	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d012      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00b      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	409a      	lsls	r2, r3
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbc:	f043 0204 	orr.w	r2, r3, #4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc8:	2210      	movs	r2, #16
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d043      	beq.n	8005c5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d03c      	beq.n	8005c5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be6:	2210      	movs	r2, #16
 8005be8:	409a      	lsls	r2, r3
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d018      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d108      	bne.n	8005c1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d024      	beq.n	8005c5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	4798      	blx	r3
 8005c1a:	e01f      	b.n	8005c5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01b      	beq.n	8005c5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	4798      	blx	r3
 8005c2c:	e016      	b.n	8005c5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d107      	bne.n	8005c4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0208 	bic.w	r2, r2, #8
 8005c4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c60:	2220      	movs	r2, #32
 8005c62:	409a      	lsls	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 808e 	beq.w	8005d8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 8086 	beq.w	8005d8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c82:	2220      	movs	r2, #32
 8005c84:	409a      	lsls	r2, r3
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b05      	cmp	r3, #5
 8005c94:	d136      	bne.n	8005d04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0216 	bic.w	r2, r2, #22
 8005ca4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695a      	ldr	r2, [r3, #20]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d103      	bne.n	8005cc6 <HAL_DMA_IRQHandler+0x1da>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0208 	bic.w	r2, r2, #8
 8005cd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cda:	223f      	movs	r2, #63	; 0x3f
 8005cdc:	409a      	lsls	r2, r3
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d07d      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	4798      	blx	r3
        }
        return;
 8005d02:	e078      	b.n	8005df6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d01c      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d108      	bne.n	8005d32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d030      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
 8005d30:	e02b      	b.n	8005d8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d027      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
 8005d42:	e022      	b.n	8005d8a <HAL_DMA_IRQHandler+0x29e>
 8005d44:	20000004 	.word	0x20000004
 8005d48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10f      	bne.n	8005d7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0210 	bic.w	r2, r2, #16
 8005d68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d032      	beq.n	8005df8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d022      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2205      	movs	r2, #5
 8005da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0201 	bic.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	3301      	adds	r3, #1
 8005dba:	60bb      	str	r3, [r7, #8]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d307      	bcc.n	8005dd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f2      	bne.n	8005db6 <HAL_DMA_IRQHandler+0x2ca>
 8005dd0:	e000      	b.n	8005dd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005dd2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
 8005df4:	e000      	b.n	8005df8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005df6:	bf00      	nop
    }
  }
}
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop

08005e00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d108      	bne.n	8005e40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e3e:	e007      	b.n	8005e50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	60da      	str	r2, [r3, #12]
}
 8005e50:	bf00      	nop
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	3b10      	subs	r3, #16
 8005e6c:	4a14      	ldr	r2, [pc, #80]	; (8005ec0 <DMA_CalcBaseAndBitshift+0x64>)
 8005e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e72:	091b      	lsrs	r3, r3, #4
 8005e74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e76:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <DMA_CalcBaseAndBitshift+0x68>)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d909      	bls.n	8005e9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	1d1a      	adds	r2, r3, #4
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	659a      	str	r2, [r3, #88]	; 0x58
 8005e9c:	e007      	b.n	8005eae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ea6:	f023 0303 	bic.w	r3, r3, #3
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	aaaaaaab 	.word	0xaaaaaaab
 8005ec4:	0800cd94 	.word	0x0800cd94

08005ec8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d11f      	bne.n	8005f22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d855      	bhi.n	8005f94 <DMA_CheckFifoParam+0xcc>
 8005ee8:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <DMA_CheckFifoParam+0x28>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005f13 	.word	0x08005f13
 8005ef8:	08005f01 	.word	0x08005f01
 8005efc:	08005f95 	.word	0x08005f95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d045      	beq.n	8005f98 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f10:	e042      	b.n	8005f98 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f1a:	d13f      	bne.n	8005f9c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f20:	e03c      	b.n	8005f9c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2a:	d121      	bne.n	8005f70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d836      	bhi.n	8005fa0 <DMA_CheckFifoParam+0xd8>
 8005f32:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <DMA_CheckFifoParam+0x70>)
 8005f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f38:	08005f49 	.word	0x08005f49
 8005f3c:	08005f4f 	.word	0x08005f4f
 8005f40:	08005f49 	.word	0x08005f49
 8005f44:	08005f61 	.word	0x08005f61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f4c:	e02f      	b.n	8005fae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d024      	beq.n	8005fa4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f5e:	e021      	b.n	8005fa4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f68:	d11e      	bne.n	8005fa8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f6e:	e01b      	b.n	8005fa8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d902      	bls.n	8005f7c <DMA_CheckFifoParam+0xb4>
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d003      	beq.n	8005f82 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f7a:	e018      	b.n	8005fae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f80:	e015      	b.n	8005fae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00e      	beq.n	8005fac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	73fb      	strb	r3, [r7, #15]
      break;
 8005f92:	e00b      	b.n	8005fac <DMA_CheckFifoParam+0xe4>
      break;
 8005f94:	bf00      	nop
 8005f96:	e00a      	b.n	8005fae <DMA_CheckFifoParam+0xe6>
      break;
 8005f98:	bf00      	nop
 8005f9a:	e008      	b.n	8005fae <DMA_CheckFifoParam+0xe6>
      break;
 8005f9c:	bf00      	nop
 8005f9e:	e006      	b.n	8005fae <DMA_CheckFifoParam+0xe6>
      break;
 8005fa0:	bf00      	nop
 8005fa2:	e004      	b.n	8005fae <DMA_CheckFifoParam+0xe6>
      break;
 8005fa4:	bf00      	nop
 8005fa6:	e002      	b.n	8005fae <DMA_CheckFifoParam+0xe6>
      break;   
 8005fa8:	bf00      	nop
 8005faa:	e000      	b.n	8005fae <DMA_CheckFifoParam+0xe6>
      break;
 8005fac:	bf00      	nop
    }
  } 
  
  return status; 
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005fce:	4b23      	ldr	r3, [pc, #140]	; (800605c <HAL_FLASH_Program+0xa0>)
 8005fd0:	7e1b      	ldrb	r3, [r3, #24]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_FLASH_Program+0x1e>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e03b      	b.n	8006052 <HAL_FLASH_Program+0x96>
 8005fda:	4b20      	ldr	r3, [pc, #128]	; (800605c <HAL_FLASH_Program+0xa0>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fe0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005fe4:	f000 f860 	bl	80060a8 <FLASH_WaitForLastOperation>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d12b      	bne.n	800604a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005ff8:	783b      	ldrb	r3, [r7, #0]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	68b8      	ldr	r0, [r7, #8]
 8005ffe:	f000 f909 	bl	8006214 <FLASH_Program_Byte>
 8006002:	e016      	b.n	8006032 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d105      	bne.n	8006016 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800600a:	883b      	ldrh	r3, [r7, #0]
 800600c:	4619      	mov	r1, r3
 800600e:	68b8      	ldr	r0, [r7, #8]
 8006010:	f000 f8dc 	bl	80061cc <FLASH_Program_HalfWord>
 8006014:	e00d      	b.n	8006032 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b02      	cmp	r3, #2
 800601a:	d105      	bne.n	8006028 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	4619      	mov	r1, r3
 8006020:	68b8      	ldr	r0, [r7, #8]
 8006022:	f000 f8b1 	bl	8006188 <FLASH_Program_Word>
 8006026:	e004      	b.n	8006032 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800602c:	68b8      	ldr	r0, [r7, #8]
 800602e:	f000 f87b 	bl	8006128 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006032:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006036:	f000 f837 	bl	80060a8 <FLASH_WaitForLastOperation>
 800603a:	4603      	mov	r3, r0
 800603c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800603e:	4b08      	ldr	r3, [pc, #32]	; (8006060 <HAL_FLASH_Program+0xa4>)
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	4a07      	ldr	r2, [pc, #28]	; (8006060 <HAL_FLASH_Program+0xa4>)
 8006044:	f023 0301 	bic.w	r3, r3, #1
 8006048:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800604a:	4b04      	ldr	r3, [pc, #16]	; (800605c <HAL_FLASH_Program+0xa0>)
 800604c:	2200      	movs	r2, #0
 800604e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006050:	7dfb      	ldrb	r3, [r7, #23]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	200005d8 	.word	0x200005d8
 8006060:	40023c00 	.word	0x40023c00

08006064 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800606e:	4b0b      	ldr	r3, [pc, #44]	; (800609c <HAL_FLASH_Unlock+0x38>)
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	da0b      	bge.n	800608e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006076:	4b09      	ldr	r3, [pc, #36]	; (800609c <HAL_FLASH_Unlock+0x38>)
 8006078:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <HAL_FLASH_Unlock+0x3c>)
 800607a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800607c:	4b07      	ldr	r3, [pc, #28]	; (800609c <HAL_FLASH_Unlock+0x38>)
 800607e:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <HAL_FLASH_Unlock+0x40>)
 8006080:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006082:	4b06      	ldr	r3, [pc, #24]	; (800609c <HAL_FLASH_Unlock+0x38>)
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	da01      	bge.n	800608e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800608e:	79fb      	ldrb	r3, [r7, #7]
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40023c00 	.word	0x40023c00
 80060a0:	45670123 	.word	0x45670123
 80060a4:	cdef89ab 	.word	0xcdef89ab

080060a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80060b4:	4b1a      	ldr	r3, [pc, #104]	; (8006120 <FLASH_WaitForLastOperation+0x78>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80060ba:	f7fe fefb 	bl	8004eb4 <HAL_GetTick>
 80060be:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80060c0:	e010      	b.n	80060e4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d00c      	beq.n	80060e4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <FLASH_WaitForLastOperation+0x38>
 80060d0:	f7fe fef0 	bl	8004eb4 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d201      	bcs.n	80060e4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e019      	b.n	8006118 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80060e4:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <FLASH_WaitForLastOperation+0x7c>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e8      	bne.n	80060c2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80060f0:	4b0c      	ldr	r3, [pc, #48]	; (8006124 <FLASH_WaitForLastOperation+0x7c>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80060fc:	4b09      	ldr	r3, [pc, #36]	; (8006124 <FLASH_WaitForLastOperation+0x7c>)
 80060fe:	2201      	movs	r2, #1
 8006100:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006102:	4b08      	ldr	r3, [pc, #32]	; (8006124 <FLASH_WaitForLastOperation+0x7c>)
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800610e:	f000 f8a3 	bl	8006258 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006116:	2300      	movs	r3, #0
  
}  
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	200005d8 	.word	0x200005d8
 8006124:	40023c00 	.word	0x40023c00

08006128 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006128:	b490      	push	{r4, r7}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006134:	4b13      	ldr	r3, [pc, #76]	; (8006184 <FLASH_Program_DoubleWord+0x5c>)
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	4a12      	ldr	r2, [pc, #72]	; (8006184 <FLASH_Program_DoubleWord+0x5c>)
 800613a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800613e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006140:	4b10      	ldr	r3, [pc, #64]	; (8006184 <FLASH_Program_DoubleWord+0x5c>)
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	4a0f      	ldr	r2, [pc, #60]	; (8006184 <FLASH_Program_DoubleWord+0x5c>)
 8006146:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800614a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800614c:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <FLASH_Program_DoubleWord+0x5c>)
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	4a0c      	ldr	r2, [pc, #48]	; (8006184 <FLASH_Program_DoubleWord+0x5c>)
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800615e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006162:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	f04f 0400 	mov.w	r4, #0
 800616e:	0013      	movs	r3, r2
 8006170:	2400      	movs	r4, #0
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	3204      	adds	r2, #4
 8006176:	6013      	str	r3, [r2, #0]
}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bc90      	pop	{r4, r7}
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40023c00 	.word	0x40023c00

08006188 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006192:	4b0d      	ldr	r3, [pc, #52]	; (80061c8 <FLASH_Program_Word+0x40>)
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	4a0c      	ldr	r2, [pc, #48]	; (80061c8 <FLASH_Program_Word+0x40>)
 8006198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800619e:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <FLASH_Program_Word+0x40>)
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	4a09      	ldr	r2, [pc, #36]	; (80061c8 <FLASH_Program_Word+0x40>)
 80061a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80061aa:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <FLASH_Program_Word+0x40>)
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	4a06      	ldr	r2, [pc, #24]	; (80061c8 <FLASH_Program_Word+0x40>)
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	601a      	str	r2, [r3, #0]
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	40023c00 	.word	0x40023c00

080061cc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061d8:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <FLASH_Program_HalfWord+0x44>)
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	4a0c      	ldr	r2, [pc, #48]	; (8006210 <FLASH_Program_HalfWord+0x44>)
 80061de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80061e4:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <FLASH_Program_HalfWord+0x44>)
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	4a09      	ldr	r2, [pc, #36]	; (8006210 <FLASH_Program_HalfWord+0x44>)
 80061ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80061f0:	4b07      	ldr	r3, [pc, #28]	; (8006210 <FLASH_Program_HalfWord+0x44>)
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	4a06      	ldr	r2, [pc, #24]	; (8006210 <FLASH_Program_HalfWord+0x44>)
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	887a      	ldrh	r2, [r7, #2]
 8006200:	801a      	strh	r2, [r3, #0]
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40023c00 	.word	0x40023c00

08006214 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006220:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <FLASH_Program_Byte+0x40>)
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	4a0b      	ldr	r2, [pc, #44]	; (8006254 <FLASH_Program_Byte+0x40>)
 8006226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800622a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800622c:	4b09      	ldr	r3, [pc, #36]	; (8006254 <FLASH_Program_Byte+0x40>)
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <FLASH_Program_Byte+0x40>)
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006234:	4b07      	ldr	r3, [pc, #28]	; (8006254 <FLASH_Program_Byte+0x40>)
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	4a06      	ldr	r2, [pc, #24]	; (8006254 <FLASH_Program_Byte+0x40>)
 800623a:	f043 0301 	orr.w	r3, r3, #1
 800623e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	78fa      	ldrb	r2, [r7, #3]
 8006244:	701a      	strb	r2, [r3, #0]
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40023c00 	.word	0x40023c00

08006258 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800625c:	4b2f      	ldr	r3, [pc, #188]	; (800631c <FLASH_SetErrorCode+0xc4>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	d008      	beq.n	800627a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006268:	4b2d      	ldr	r3, [pc, #180]	; (8006320 <FLASH_SetErrorCode+0xc8>)
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	f043 0310 	orr.w	r3, r3, #16
 8006270:	4a2b      	ldr	r2, [pc, #172]	; (8006320 <FLASH_SetErrorCode+0xc8>)
 8006272:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006274:	4b29      	ldr	r3, [pc, #164]	; (800631c <FLASH_SetErrorCode+0xc4>)
 8006276:	2210      	movs	r2, #16
 8006278:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800627a:	4b28      	ldr	r3, [pc, #160]	; (800631c <FLASH_SetErrorCode+0xc4>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d008      	beq.n	8006298 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006286:	4b26      	ldr	r3, [pc, #152]	; (8006320 <FLASH_SetErrorCode+0xc8>)
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f043 0308 	orr.w	r3, r3, #8
 800628e:	4a24      	ldr	r2, [pc, #144]	; (8006320 <FLASH_SetErrorCode+0xc8>)
 8006290:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006292:	4b22      	ldr	r3, [pc, #136]	; (800631c <FLASH_SetErrorCode+0xc4>)
 8006294:	2220      	movs	r2, #32
 8006296:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006298:	4b20      	ldr	r3, [pc, #128]	; (800631c <FLASH_SetErrorCode+0xc4>)
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d008      	beq.n	80062b6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80062a4:	4b1e      	ldr	r3, [pc, #120]	; (8006320 <FLASH_SetErrorCode+0xc8>)
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	f043 0304 	orr.w	r3, r3, #4
 80062ac:	4a1c      	ldr	r2, [pc, #112]	; (8006320 <FLASH_SetErrorCode+0xc8>)
 80062ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80062b0:	4b1a      	ldr	r3, [pc, #104]	; (800631c <FLASH_SetErrorCode+0xc4>)
 80062b2:	2240      	movs	r2, #64	; 0x40
 80062b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80062b6:	4b19      	ldr	r3, [pc, #100]	; (800631c <FLASH_SetErrorCode+0xc4>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80062c2:	4b17      	ldr	r3, [pc, #92]	; (8006320 <FLASH_SetErrorCode+0xc8>)
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f043 0302 	orr.w	r3, r3, #2
 80062ca:	4a15      	ldr	r2, [pc, #84]	; (8006320 <FLASH_SetErrorCode+0xc8>)
 80062cc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <FLASH_SetErrorCode+0xc4>)
 80062d0:	2280      	movs	r2, #128	; 0x80
 80062d2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80062d4:	4b11      	ldr	r3, [pc, #68]	; (800631c <FLASH_SetErrorCode+0xc4>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d009      	beq.n	80062f4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <FLASH_SetErrorCode+0xc8>)
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f043 0301 	orr.w	r3, r3, #1
 80062e8:	4a0d      	ldr	r2, [pc, #52]	; (8006320 <FLASH_SetErrorCode+0xc8>)
 80062ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80062ec:	4b0b      	ldr	r3, [pc, #44]	; (800631c <FLASH_SetErrorCode+0xc4>)
 80062ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062f2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80062f4:	4b09      	ldr	r3, [pc, #36]	; (800631c <FLASH_SetErrorCode+0xc4>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d008      	beq.n	8006312 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <FLASH_SetErrorCode+0xc8>)
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	f043 0320 	orr.w	r3, r3, #32
 8006308:	4a05      	ldr	r2, [pc, #20]	; (8006320 <FLASH_SetErrorCode+0xc8>)
 800630a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800630c:	4b03      	ldr	r3, [pc, #12]	; (800631c <FLASH_SetErrorCode+0xc4>)
 800630e:	2202      	movs	r2, #2
 8006310:	60da      	str	r2, [r3, #12]
  }
}
 8006312:	bf00      	nop
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	40023c00 	.word	0x40023c00
 8006320:	200005d8 	.word	0x200005d8

08006324 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006336:	4b31      	ldr	r3, [pc, #196]	; (80063fc <HAL_FLASHEx_Erase+0xd8>)
 8006338:	7e1b      	ldrb	r3, [r3, #24]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <HAL_FLASHEx_Erase+0x1e>
 800633e:	2302      	movs	r3, #2
 8006340:	e058      	b.n	80063f4 <HAL_FLASHEx_Erase+0xd0>
 8006342:	4b2e      	ldr	r3, [pc, #184]	; (80063fc <HAL_FLASHEx_Erase+0xd8>)
 8006344:	2201      	movs	r2, #1
 8006346:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006348:	f24c 3050 	movw	r0, #50000	; 0xc350
 800634c:	f7ff feac 	bl	80060a8 <FLASH_WaitForLastOperation>
 8006350:	4603      	mov	r3, r0
 8006352:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d148      	bne.n	80063ec <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	f04f 32ff 	mov.w	r2, #4294967295
 8006360:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d115      	bne.n	8006396 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	b2da      	uxtb	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	4619      	mov	r1, r3
 8006376:	4610      	mov	r0, r2
 8006378:	f000 f844 	bl	8006404 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800637c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006380:	f7ff fe92 	bl	80060a8 <FLASH_WaitForLastOperation>
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006388:	4b1d      	ldr	r3, [pc, #116]	; (8006400 <HAL_FLASHEx_Erase+0xdc>)
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <HAL_FLASHEx_Erase+0xdc>)
 800638e:	f023 0304 	bic.w	r3, r3, #4
 8006392:	6113      	str	r3, [r2, #16]
 8006394:	e028      	b.n	80063e8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	60bb      	str	r3, [r7, #8]
 800639c:	e01c      	b.n	80063d8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	4619      	mov	r1, r3
 80063a6:	68b8      	ldr	r0, [r7, #8]
 80063a8:	f000 f850 	bl	800644c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063b0:	f7ff fe7a 	bl	80060a8 <FLASH_WaitForLastOperation>
 80063b4:	4603      	mov	r3, r0
 80063b6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80063b8:	4b11      	ldr	r3, [pc, #68]	; (8006400 <HAL_FLASHEx_Erase+0xdc>)
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	4a10      	ldr	r2, [pc, #64]	; (8006400 <HAL_FLASHEx_Erase+0xdc>)
 80063be:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80063c2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	601a      	str	r2, [r3, #0]
          break;
 80063d0:	e00a      	b.n	80063e8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	3301      	adds	r3, #1
 80063d6:	60bb      	str	r3, [r7, #8]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	4413      	add	r3, r2
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d3da      	bcc.n	800639e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80063e8:	f000 f878 	bl	80064dc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80063ec:	4b03      	ldr	r3, [pc, #12]	; (80063fc <HAL_FLASHEx_Erase+0xd8>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	761a      	strb	r2, [r3, #24]

  return status;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	200005d8 	.word	0x200005d8
 8006400:	40023c00 	.word	0x40023c00

08006404 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	6039      	str	r1, [r7, #0]
 800640e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006410:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <FLASH_MassErase+0x44>)
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	4a0c      	ldr	r2, [pc, #48]	; (8006448 <FLASH_MassErase+0x44>)
 8006416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800641c:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <FLASH_MassErase+0x44>)
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	4a09      	ldr	r2, [pc, #36]	; (8006448 <FLASH_MassErase+0x44>)
 8006422:	f043 0304 	orr.w	r3, r3, #4
 8006426:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8006428:	4b07      	ldr	r3, [pc, #28]	; (8006448 <FLASH_MassErase+0x44>)
 800642a:	691a      	ldr	r2, [r3, #16]
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	4313      	orrs	r3, r2
 8006432:	4a05      	ldr	r2, [pc, #20]	; (8006448 <FLASH_MassErase+0x44>)
 8006434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006438:	6113      	str	r3, [r2, #16]
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40023c00 	.word	0x40023c00

0800644c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d102      	bne.n	8006468 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	e010      	b.n	800648a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d103      	bne.n	8006476 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800646e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	e009      	b.n	800648a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006476:	78fb      	ldrb	r3, [r7, #3]
 8006478:	2b02      	cmp	r3, #2
 800647a:	d103      	bne.n	8006484 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800647c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	e002      	b.n	800648a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006484:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006488:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800648a:	4b13      	ldr	r3, [pc, #76]	; (80064d8 <FLASH_Erase_Sector+0x8c>)
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	4a12      	ldr	r2, [pc, #72]	; (80064d8 <FLASH_Erase_Sector+0x8c>)
 8006490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006494:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006496:	4b10      	ldr	r3, [pc, #64]	; (80064d8 <FLASH_Erase_Sector+0x8c>)
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	490f      	ldr	r1, [pc, #60]	; (80064d8 <FLASH_Erase_Sector+0x8c>)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80064a2:	4b0d      	ldr	r3, [pc, #52]	; (80064d8 <FLASH_Erase_Sector+0x8c>)
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	4a0c      	ldr	r2, [pc, #48]	; (80064d8 <FLASH_Erase_Sector+0x8c>)
 80064a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80064ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80064ae:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <FLASH_Erase_Sector+0x8c>)
 80064b0:	691a      	ldr	r2, [r3, #16]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	4313      	orrs	r3, r2
 80064b8:	4a07      	ldr	r2, [pc, #28]	; (80064d8 <FLASH_Erase_Sector+0x8c>)
 80064ba:	f043 0302 	orr.w	r3, r3, #2
 80064be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80064c0:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <FLASH_Erase_Sector+0x8c>)
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	4a04      	ldr	r2, [pc, #16]	; (80064d8 <FLASH_Erase_Sector+0x8c>)
 80064c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ca:	6113      	str	r3, [r2, #16]
}
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	40023c00 	.word	0x40023c00

080064dc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80064e0:	4b20      	ldr	r3, [pc, #128]	; (8006564 <FLASH_FlushCaches+0x88>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d017      	beq.n	800651c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80064ec:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <FLASH_FlushCaches+0x88>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1c      	ldr	r2, [pc, #112]	; (8006564 <FLASH_FlushCaches+0x88>)
 80064f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064f6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80064f8:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <FLASH_FlushCaches+0x88>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a19      	ldr	r2, [pc, #100]	; (8006564 <FLASH_FlushCaches+0x88>)
 80064fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	4b17      	ldr	r3, [pc, #92]	; (8006564 <FLASH_FlushCaches+0x88>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a16      	ldr	r2, [pc, #88]	; (8006564 <FLASH_FlushCaches+0x88>)
 800650a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800650e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006510:	4b14      	ldr	r3, [pc, #80]	; (8006564 <FLASH_FlushCaches+0x88>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a13      	ldr	r2, [pc, #76]	; (8006564 <FLASH_FlushCaches+0x88>)
 8006516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800651a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800651c:	4b11      	ldr	r3, [pc, #68]	; (8006564 <FLASH_FlushCaches+0x88>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006524:	2b00      	cmp	r3, #0
 8006526:	d017      	beq.n	8006558 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006528:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <FLASH_FlushCaches+0x88>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a0d      	ldr	r2, [pc, #52]	; (8006564 <FLASH_FlushCaches+0x88>)
 800652e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006532:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006534:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <FLASH_FlushCaches+0x88>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a0a      	ldr	r2, [pc, #40]	; (8006564 <FLASH_FlushCaches+0x88>)
 800653a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	4b08      	ldr	r3, [pc, #32]	; (8006564 <FLASH_FlushCaches+0x88>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a07      	ldr	r2, [pc, #28]	; (8006564 <FLASH_FlushCaches+0x88>)
 8006546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800654a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <FLASH_FlushCaches+0x88>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a04      	ldr	r2, [pc, #16]	; (8006564 <FLASH_FlushCaches+0x88>)
 8006552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006556:	6013      	str	r3, [r2, #0]
  }
}
 8006558:	bf00      	nop
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	40023c00 	.word	0x40023c00

08006568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006568:	b480      	push	{r7}
 800656a:	b089      	sub	sp, #36	; 0x24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006572:	2300      	movs	r3, #0
 8006574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006576:	2300      	movs	r3, #0
 8006578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800657a:	2300      	movs	r3, #0
 800657c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	e159      	b.n	8006838 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006584:	2201      	movs	r2, #1
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	4013      	ands	r3, r2
 8006596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	429a      	cmp	r2, r3
 800659e:	f040 8148 	bne.w	8006832 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d00b      	beq.n	80065c2 <HAL_GPIO_Init+0x5a>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d007      	beq.n	80065c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80065b6:	2b11      	cmp	r3, #17
 80065b8:	d003      	beq.n	80065c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b12      	cmp	r3, #18
 80065c0:	d130      	bne.n	8006624 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	2203      	movs	r2, #3
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	43db      	mvns	r3, r3
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	4013      	ands	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	fa02 f303 	lsl.w	r3, r2, r3
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065f8:	2201      	movs	r2, #1
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	43db      	mvns	r3, r3
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	4013      	ands	r3, r2
 8006606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	091b      	lsrs	r3, r3, #4
 800660e:	f003 0201 	and.w	r2, r3, #1
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	4313      	orrs	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	2203      	movs	r2, #3
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	43db      	mvns	r3, r3
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	4013      	ands	r3, r2
 800663a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	fa02 f303 	lsl.w	r3, r2, r3
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	4313      	orrs	r3, r2
 800664c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2b02      	cmp	r3, #2
 800665a:	d003      	beq.n	8006664 <HAL_GPIO_Init+0xfc>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b12      	cmp	r3, #18
 8006662:	d123      	bne.n	80066ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	08da      	lsrs	r2, r3, #3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3208      	adds	r2, #8
 800666c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f003 0307 	and.w	r3, r3, #7
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	220f      	movs	r2, #15
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	43db      	mvns	r3, r3
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	4013      	ands	r3, r2
 8006686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	691a      	ldr	r2, [r3, #16]
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	fa02 f303 	lsl.w	r3, r2, r3
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	4313      	orrs	r3, r2
 800669c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	08da      	lsrs	r2, r3, #3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3208      	adds	r2, #8
 80066a6:	69b9      	ldr	r1, [r7, #24]
 80066a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	2203      	movs	r2, #3
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	43db      	mvns	r3, r3
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	4013      	ands	r3, r2
 80066c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f003 0203 	and.w	r2, r3, #3
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	fa02 f303 	lsl.w	r3, r2, r3
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80a2 	beq.w	8006832 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	4b56      	ldr	r3, [pc, #344]	; (800684c <HAL_GPIO_Init+0x2e4>)
 80066f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f6:	4a55      	ldr	r2, [pc, #340]	; (800684c <HAL_GPIO_Init+0x2e4>)
 80066f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066fc:	6453      	str	r3, [r2, #68]	; 0x44
 80066fe:	4b53      	ldr	r3, [pc, #332]	; (800684c <HAL_GPIO_Init+0x2e4>)
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800670a:	4a51      	ldr	r2, [pc, #324]	; (8006850 <HAL_GPIO_Init+0x2e8>)
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	089b      	lsrs	r3, r3, #2
 8006710:	3302      	adds	r3, #2
 8006712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	220f      	movs	r2, #15
 8006722:	fa02 f303 	lsl.w	r3, r2, r3
 8006726:	43db      	mvns	r3, r3
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	4013      	ands	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a48      	ldr	r2, [pc, #288]	; (8006854 <HAL_GPIO_Init+0x2ec>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d019      	beq.n	800676a <HAL_GPIO_Init+0x202>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a47      	ldr	r2, [pc, #284]	; (8006858 <HAL_GPIO_Init+0x2f0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d013      	beq.n	8006766 <HAL_GPIO_Init+0x1fe>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a46      	ldr	r2, [pc, #280]	; (800685c <HAL_GPIO_Init+0x2f4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d00d      	beq.n	8006762 <HAL_GPIO_Init+0x1fa>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a45      	ldr	r2, [pc, #276]	; (8006860 <HAL_GPIO_Init+0x2f8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d007      	beq.n	800675e <HAL_GPIO_Init+0x1f6>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a44      	ldr	r2, [pc, #272]	; (8006864 <HAL_GPIO_Init+0x2fc>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d101      	bne.n	800675a <HAL_GPIO_Init+0x1f2>
 8006756:	2304      	movs	r3, #4
 8006758:	e008      	b.n	800676c <HAL_GPIO_Init+0x204>
 800675a:	2307      	movs	r3, #7
 800675c:	e006      	b.n	800676c <HAL_GPIO_Init+0x204>
 800675e:	2303      	movs	r3, #3
 8006760:	e004      	b.n	800676c <HAL_GPIO_Init+0x204>
 8006762:	2302      	movs	r3, #2
 8006764:	e002      	b.n	800676c <HAL_GPIO_Init+0x204>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <HAL_GPIO_Init+0x204>
 800676a:	2300      	movs	r3, #0
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	f002 0203 	and.w	r2, r2, #3
 8006772:	0092      	lsls	r2, r2, #2
 8006774:	4093      	lsls	r3, r2
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	4313      	orrs	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800677c:	4934      	ldr	r1, [pc, #208]	; (8006850 <HAL_GPIO_Init+0x2e8>)
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	089b      	lsrs	r3, r3, #2
 8006782:	3302      	adds	r3, #2
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800678a:	4b37      	ldr	r3, [pc, #220]	; (8006868 <HAL_GPIO_Init+0x300>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	43db      	mvns	r3, r3
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	4013      	ands	r3, r2
 8006798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067ae:	4a2e      	ldr	r2, [pc, #184]	; (8006868 <HAL_GPIO_Init+0x300>)
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80067b4:	4b2c      	ldr	r3, [pc, #176]	; (8006868 <HAL_GPIO_Init+0x300>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	43db      	mvns	r3, r3
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	4013      	ands	r3, r2
 80067c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067d8:	4a23      	ldr	r2, [pc, #140]	; (8006868 <HAL_GPIO_Init+0x300>)
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067de:	4b22      	ldr	r3, [pc, #136]	; (8006868 <HAL_GPIO_Init+0x300>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	43db      	mvns	r3, r3
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	4013      	ands	r3, r2
 80067ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006802:	4a19      	ldr	r2, [pc, #100]	; (8006868 <HAL_GPIO_Init+0x300>)
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006808:	4b17      	ldr	r3, [pc, #92]	; (8006868 <HAL_GPIO_Init+0x300>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	43db      	mvns	r3, r3
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	4013      	ands	r3, r2
 8006816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800682c:	4a0e      	ldr	r2, [pc, #56]	; (8006868 <HAL_GPIO_Init+0x300>)
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	3301      	adds	r3, #1
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	2b0f      	cmp	r3, #15
 800683c:	f67f aea2 	bls.w	8006584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006840:	bf00      	nop
 8006842:	3724      	adds	r7, #36	; 0x24
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	40023800 	.word	0x40023800
 8006850:	40013800 	.word	0x40013800
 8006854:	40020000 	.word	0x40020000
 8006858:	40020400 	.word	0x40020400
 800685c:	40020800 	.word	0x40020800
 8006860:	40020c00 	.word	0x40020c00
 8006864:	40021000 	.word	0x40021000
 8006868:	40013c00 	.word	0x40013c00

0800686c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006876:	2300      	movs	r3, #0
 8006878:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800687e:	2300      	movs	r3, #0
 8006880:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006882:	2300      	movs	r3, #0
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	e0bb      	b.n	8006a00 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006888:	2201      	movs	r2, #1
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	fa02 f303 	lsl.w	r3, r2, r3
 8006890:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	4013      	ands	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	429a      	cmp	r2, r3
 80068a0:	f040 80ab 	bne.w	80069fa <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80068a4:	4a5b      	ldr	r2, [pc, #364]	; (8006a14 <HAL_GPIO_DeInit+0x1a8>)
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	089b      	lsrs	r3, r3, #2
 80068aa:	3302      	adds	r3, #2
 80068ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f003 0303 	and.w	r3, r3, #3
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	220f      	movs	r2, #15
 80068bc:	fa02 f303 	lsl.w	r3, r2, r3
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	4013      	ands	r3, r2
 80068c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a53      	ldr	r2, [pc, #332]	; (8006a18 <HAL_GPIO_DeInit+0x1ac>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d019      	beq.n	8006902 <HAL_GPIO_DeInit+0x96>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a52      	ldr	r2, [pc, #328]	; (8006a1c <HAL_GPIO_DeInit+0x1b0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d013      	beq.n	80068fe <HAL_GPIO_DeInit+0x92>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a51      	ldr	r2, [pc, #324]	; (8006a20 <HAL_GPIO_DeInit+0x1b4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00d      	beq.n	80068fa <HAL_GPIO_DeInit+0x8e>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a50      	ldr	r2, [pc, #320]	; (8006a24 <HAL_GPIO_DeInit+0x1b8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d007      	beq.n	80068f6 <HAL_GPIO_DeInit+0x8a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a4f      	ldr	r2, [pc, #316]	; (8006a28 <HAL_GPIO_DeInit+0x1bc>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d101      	bne.n	80068f2 <HAL_GPIO_DeInit+0x86>
 80068ee:	2304      	movs	r3, #4
 80068f0:	e008      	b.n	8006904 <HAL_GPIO_DeInit+0x98>
 80068f2:	2307      	movs	r3, #7
 80068f4:	e006      	b.n	8006904 <HAL_GPIO_DeInit+0x98>
 80068f6:	2303      	movs	r3, #3
 80068f8:	e004      	b.n	8006904 <HAL_GPIO_DeInit+0x98>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e002      	b.n	8006904 <HAL_GPIO_DeInit+0x98>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <HAL_GPIO_DeInit+0x98>
 8006902:	2300      	movs	r3, #0
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	f002 0203 	and.w	r2, r2, #3
 800690a:	0092      	lsls	r2, r2, #2
 800690c:	4093      	lsls	r3, r2
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	429a      	cmp	r2, r3
 8006912:	d132      	bne.n	800697a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006914:	4b45      	ldr	r3, [pc, #276]	; (8006a2c <HAL_GPIO_DeInit+0x1c0>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	43db      	mvns	r3, r3
 800691c:	4943      	ldr	r1, [pc, #268]	; (8006a2c <HAL_GPIO_DeInit+0x1c0>)
 800691e:	4013      	ands	r3, r2
 8006920:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006922:	4b42      	ldr	r3, [pc, #264]	; (8006a2c <HAL_GPIO_DeInit+0x1c0>)
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	43db      	mvns	r3, r3
 800692a:	4940      	ldr	r1, [pc, #256]	; (8006a2c <HAL_GPIO_DeInit+0x1c0>)
 800692c:	4013      	ands	r3, r2
 800692e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006930:	4b3e      	ldr	r3, [pc, #248]	; (8006a2c <HAL_GPIO_DeInit+0x1c0>)
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	43db      	mvns	r3, r3
 8006938:	493c      	ldr	r1, [pc, #240]	; (8006a2c <HAL_GPIO_DeInit+0x1c0>)
 800693a:	4013      	ands	r3, r2
 800693c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800693e:	4b3b      	ldr	r3, [pc, #236]	; (8006a2c <HAL_GPIO_DeInit+0x1c0>)
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	43db      	mvns	r3, r3
 8006946:	4939      	ldr	r1, [pc, #228]	; (8006a2c <HAL_GPIO_DeInit+0x1c0>)
 8006948:	4013      	ands	r3, r2
 800694a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	220f      	movs	r2, #15
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800695c:	4a2d      	ldr	r2, [pc, #180]	; (8006a14 <HAL_GPIO_DeInit+0x1a8>)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	089b      	lsrs	r3, r3, #2
 8006962:	3302      	adds	r3, #2
 8006964:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	43da      	mvns	r2, r3
 800696c:	4829      	ldr	r0, [pc, #164]	; (8006a14 <HAL_GPIO_DeInit+0x1a8>)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	089b      	lsrs	r3, r3, #2
 8006972:	400a      	ands	r2, r1
 8006974:	3302      	adds	r3, #2
 8006976:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	2103      	movs	r1, #3
 8006984:	fa01 f303 	lsl.w	r3, r1, r3
 8006988:	43db      	mvns	r3, r3
 800698a:	401a      	ands	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	08da      	lsrs	r2, r3, #3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3208      	adds	r2, #8
 8006998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	220f      	movs	r2, #15
 80069a6:	fa02 f303 	lsl.w	r3, r2, r3
 80069aa:	43db      	mvns	r3, r3
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	08d2      	lsrs	r2, r2, #3
 80069b0:	4019      	ands	r1, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3208      	adds	r2, #8
 80069b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	2103      	movs	r1, #3
 80069c4:	fa01 f303 	lsl.w	r3, r1, r3
 80069c8:	43db      	mvns	r3, r3
 80069ca:	401a      	ands	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	2101      	movs	r1, #1
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	fa01 f303 	lsl.w	r3, r1, r3
 80069dc:	43db      	mvns	r3, r3
 80069de:	401a      	ands	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	2103      	movs	r1, #3
 80069ee:	fa01 f303 	lsl.w	r3, r1, r3
 80069f2:	43db      	mvns	r3, r3
 80069f4:	401a      	ands	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	3301      	adds	r3, #1
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2b0f      	cmp	r3, #15
 8006a04:	f67f af40 	bls.w	8006888 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	40013800 	.word	0x40013800
 8006a18:	40020000 	.word	0x40020000
 8006a1c:	40020400 	.word	0x40020400
 8006a20:	40020800 	.word	0x40020800
 8006a24:	40020c00 	.word	0x40020c00
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	40013c00 	.word	0x40013c00

08006a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	887b      	ldrh	r3, [r7, #2]
 8006a42:	4013      	ands	r3, r2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	73fb      	strb	r3, [r7, #15]
 8006a4c:	e001      	b.n	8006a52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	807b      	strh	r3, [r7, #2]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a70:	787b      	ldrb	r3, [r7, #1]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a76:	887a      	ldrh	r2, [r7, #2]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a7c:	e003      	b.n	8006a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a7e:	887b      	ldrh	r3, [r7, #2]
 8006a80:	041a      	lsls	r2, r3, #16
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	619a      	str	r2, [r3, #24]
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
	...

08006a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e11f      	b.n	8006ce6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d106      	bne.n	8006ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7fa ff68 	bl	8001990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2224      	movs	r2, #36	; 0x24
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0201 	bic.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ae6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006af6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006af8:	f001 fd84 	bl	8008604 <HAL_RCC_GetPCLK1Freq>
 8006afc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4a7b      	ldr	r2, [pc, #492]	; (8006cf0 <HAL_I2C_Init+0x25c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d807      	bhi.n	8006b18 <HAL_I2C_Init+0x84>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4a7a      	ldr	r2, [pc, #488]	; (8006cf4 <HAL_I2C_Init+0x260>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	bf94      	ite	ls
 8006b10:	2301      	movls	r3, #1
 8006b12:	2300      	movhi	r3, #0
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	e006      	b.n	8006b26 <HAL_I2C_Init+0x92>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4a77      	ldr	r2, [pc, #476]	; (8006cf8 <HAL_I2C_Init+0x264>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	bf94      	ite	ls
 8006b20:	2301      	movls	r3, #1
 8006b22:	2300      	movhi	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e0db      	b.n	8006ce6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4a72      	ldr	r2, [pc, #456]	; (8006cfc <HAL_I2C_Init+0x268>)
 8006b32:	fba2 2303 	umull	r2, r3, r2, r3
 8006b36:	0c9b      	lsrs	r3, r3, #18
 8006b38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	4a64      	ldr	r2, [pc, #400]	; (8006cf0 <HAL_I2C_Init+0x25c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d802      	bhi.n	8006b68 <HAL_I2C_Init+0xd4>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	3301      	adds	r3, #1
 8006b66:	e009      	b.n	8006b7c <HAL_I2C_Init+0xe8>
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006b6e:	fb02 f303 	mul.w	r3, r2, r3
 8006b72:	4a63      	ldr	r2, [pc, #396]	; (8006d00 <HAL_I2C_Init+0x26c>)
 8006b74:	fba2 2303 	umull	r2, r3, r2, r3
 8006b78:	099b      	lsrs	r3, r3, #6
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	430b      	orrs	r3, r1
 8006b82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006b8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	4956      	ldr	r1, [pc, #344]	; (8006cf0 <HAL_I2C_Init+0x25c>)
 8006b98:	428b      	cmp	r3, r1
 8006b9a:	d80d      	bhi.n	8006bb8 <HAL_I2C_Init+0x124>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	1e59      	subs	r1, r3, #1
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006baa:	3301      	adds	r3, #1
 8006bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	bf38      	it	cc
 8006bb4:	2304      	movcc	r3, #4
 8006bb6:	e04f      	b.n	8006c58 <HAL_I2C_Init+0x1c4>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d111      	bne.n	8006be4 <HAL_I2C_Init+0x150>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	1e58      	subs	r0, r3, #1
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6859      	ldr	r1, [r3, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	440b      	add	r3, r1
 8006bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bf0c      	ite	eq
 8006bdc:	2301      	moveq	r3, #1
 8006bde:	2300      	movne	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	e012      	b.n	8006c0a <HAL_I2C_Init+0x176>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	1e58      	subs	r0, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6859      	ldr	r1, [r3, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	440b      	add	r3, r1
 8006bf2:	0099      	lsls	r1, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	bf0c      	ite	eq
 8006c04:	2301      	moveq	r3, #1
 8006c06:	2300      	movne	r3, #0
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <HAL_I2C_Init+0x17e>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e022      	b.n	8006c58 <HAL_I2C_Init+0x1c4>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10e      	bne.n	8006c38 <HAL_I2C_Init+0x1a4>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	1e58      	subs	r0, r3, #1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6859      	ldr	r1, [r3, #4]
 8006c22:	460b      	mov	r3, r1
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	440b      	add	r3, r1
 8006c28:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c36:	e00f      	b.n	8006c58 <HAL_I2C_Init+0x1c4>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	1e58      	subs	r0, r3, #1
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6859      	ldr	r1, [r3, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	440b      	add	r3, r1
 8006c46:	0099      	lsls	r1, r3, #2
 8006c48:	440b      	add	r3, r1
 8006c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c4e:	3301      	adds	r3, #1
 8006c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c58:	6879      	ldr	r1, [r7, #4]
 8006c5a:	6809      	ldr	r1, [r1, #0]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69da      	ldr	r2, [r3, #28]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006c86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6911      	ldr	r1, [r2, #16]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	68d2      	ldr	r2, [r2, #12]
 8006c92:	4311      	orrs	r1, r2
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6812      	ldr	r2, [r2, #0]
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	000186a0 	.word	0x000186a0
 8006cf4:	001e847f 	.word	0x001e847f
 8006cf8:	003d08ff 	.word	0x003d08ff
 8006cfc:	431bde83 	.word	0x431bde83
 8006d00:	10624dd3 	.word	0x10624dd3

08006d04 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e021      	b.n	8006d5a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2224      	movs	r2, #36	; 0x24
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0201 	bic.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fa fe98 	bl	8001a64 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	607a      	str	r2, [r7, #4]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	460b      	mov	r3, r1
 8006d72:	817b      	strh	r3, [r7, #10]
 8006d74:	4613      	mov	r3, r2
 8006d76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d78:	f7fe f89c 	bl	8004eb4 <HAL_GetTick>
 8006d7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	f040 80e0 	bne.w	8006f4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	2319      	movs	r3, #25
 8006d92:	2201      	movs	r2, #1
 8006d94:	4970      	ldr	r1, [pc, #448]	; (8006f58 <HAL_I2C_Master_Transmit+0x1f4>)
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f000 fe1c 	bl	80079d4 <I2C_WaitOnFlagUntilTimeout>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006da2:	2302      	movs	r3, #2
 8006da4:	e0d3      	b.n	8006f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <HAL_I2C_Master_Transmit+0x50>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e0cc      	b.n	8006f4e <HAL_I2C_Master_Transmit+0x1ea>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d007      	beq.n	8006dda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0201 	orr.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006de8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2221      	movs	r2, #33	; 0x21
 8006dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2210      	movs	r2, #16
 8006df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	893a      	ldrh	r2, [r7, #8]
 8006e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4a50      	ldr	r2, [pc, #320]	; (8006f5c <HAL_I2C_Master_Transmit+0x1f8>)
 8006e1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006e1c:	8979      	ldrh	r1, [r7, #10]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	6a3a      	ldr	r2, [r7, #32]
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 fbd6 	bl	80075d4 <I2C_MasterRequestWrite>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e08d      	b.n	8006f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e32:	2300      	movs	r3, #0
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	613b      	str	r3, [r7, #16]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006e48:	e066      	b.n	8006f18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	6a39      	ldr	r1, [r7, #32]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 fe96 	bl	8007b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00d      	beq.n	8006e76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d107      	bne.n	8006e72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e06b      	b.n	8006f4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	781a      	ldrb	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d11b      	bne.n	8006eec <HAL_I2C_Master_Transmit+0x188>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d017      	beq.n	8006eec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	781a      	ldrb	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	6a39      	ldr	r1, [r7, #32]
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 fe86 	bl	8007c02 <I2C_WaitOnBTFFlagUntilTimeout>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00d      	beq.n	8006f18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	d107      	bne.n	8006f14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e01a      	b.n	8006f4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d194      	bne.n	8006e4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e000      	b.n	8006f4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	00100002 	.word	0x00100002
 8006f5c:	ffff0000 	.word	0xffff0000

08006f60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	4608      	mov	r0, r1
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4603      	mov	r3, r0
 8006f70:	817b      	strh	r3, [r7, #10]
 8006f72:	460b      	mov	r3, r1
 8006f74:	813b      	strh	r3, [r7, #8]
 8006f76:	4613      	mov	r3, r2
 8006f78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f7a:	f7fd ff9b 	bl	8004eb4 <HAL_GetTick>
 8006f7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	f040 80d9 	bne.w	8007140 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	2319      	movs	r3, #25
 8006f94:	2201      	movs	r2, #1
 8006f96:	496d      	ldr	r1, [pc, #436]	; (800714c <HAL_I2C_Mem_Write+0x1ec>)
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fd1b 	bl	80079d4 <I2C_WaitOnFlagUntilTimeout>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e0cc      	b.n	8007142 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d101      	bne.n	8006fb6 <HAL_I2C_Mem_Write+0x56>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e0c5      	b.n	8007142 <HAL_I2C_Mem_Write+0x1e2>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d007      	beq.n	8006fdc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0201 	orr.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2221      	movs	r2, #33	; 0x21
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2240      	movs	r2, #64	; 0x40
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a3a      	ldr	r2, [r7, #32]
 8007006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800700c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007012:	b29a      	uxth	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4a4d      	ldr	r2, [pc, #308]	; (8007150 <HAL_I2C_Mem_Write+0x1f0>)
 800701c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800701e:	88f8      	ldrh	r0, [r7, #6]
 8007020:	893a      	ldrh	r2, [r7, #8]
 8007022:	8979      	ldrh	r1, [r7, #10]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	4603      	mov	r3, r0
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 fb52 	bl	80076d8 <I2C_RequestMemoryWrite>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d052      	beq.n	80070e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e081      	b.n	8007142 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fd9c 	bl	8007b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00d      	beq.n	800706a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	2b04      	cmp	r3, #4
 8007054:	d107      	bne.n	8007066 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007064:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e06b      	b.n	8007142 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	781a      	ldrb	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007084:	3b01      	subs	r3, #1
 8007086:	b29a      	uxth	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d11b      	bne.n	80070e0 <HAL_I2C_Mem_Write+0x180>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d017      	beq.n	80070e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	781a      	ldrb	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ca:	3b01      	subs	r3, #1
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	3b01      	subs	r3, #1
 80070da:	b29a      	uxth	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1aa      	bne.n	800703e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fd88 	bl	8007c02 <I2C_WaitOnBTFFlagUntilTimeout>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00d      	beq.n	8007114 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d107      	bne.n	8007110 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800710e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e016      	b.n	8007142 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	e000      	b.n	8007142 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007140:	2302      	movs	r3, #2
  }
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	00100002 	.word	0x00100002
 8007150:	ffff0000 	.word	0xffff0000

08007154 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08c      	sub	sp, #48	; 0x30
 8007158:	af02      	add	r7, sp, #8
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	4608      	mov	r0, r1
 800715e:	4611      	mov	r1, r2
 8007160:	461a      	mov	r2, r3
 8007162:	4603      	mov	r3, r0
 8007164:	817b      	strh	r3, [r7, #10]
 8007166:	460b      	mov	r3, r1
 8007168:	813b      	strh	r3, [r7, #8]
 800716a:	4613      	mov	r3, r2
 800716c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800716e:	f7fd fea1 	bl	8004eb4 <HAL_GetTick>
 8007172:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b20      	cmp	r3, #32
 800717e:	f040 8208 	bne.w	8007592 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	2319      	movs	r3, #25
 8007188:	2201      	movs	r2, #1
 800718a:	497b      	ldr	r1, [pc, #492]	; (8007378 <HAL_I2C_Mem_Read+0x224>)
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 fc21 	bl	80079d4 <I2C_WaitOnFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007198:	2302      	movs	r3, #2
 800719a:	e1fb      	b.n	8007594 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d101      	bne.n	80071aa <HAL_I2C_Mem_Read+0x56>
 80071a6:	2302      	movs	r3, #2
 80071a8:	e1f4      	b.n	8007594 <HAL_I2C_Mem_Read+0x440>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d007      	beq.n	80071d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0201 	orr.w	r2, r2, #1
 80071ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2222      	movs	r2, #34	; 0x22
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2240      	movs	r2, #64	; 0x40
 80071ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4a5b      	ldr	r2, [pc, #364]	; (800737c <HAL_I2C_Mem_Read+0x228>)
 8007210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007212:	88f8      	ldrh	r0, [r7, #6]
 8007214:	893a      	ldrh	r2, [r7, #8]
 8007216:	8979      	ldrh	r1, [r7, #10]
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	9301      	str	r3, [sp, #4]
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	4603      	mov	r3, r0
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 faee 	bl	8007804 <I2C_RequestMemoryRead>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e1b0      	b.n	8007594 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007236:	2b00      	cmp	r3, #0
 8007238:	d113      	bne.n	8007262 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800723a:	2300      	movs	r3, #0
 800723c:	623b      	str	r3, [r7, #32]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	623b      	str	r3, [r7, #32]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	623b      	str	r3, [r7, #32]
 800724e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	e184      	b.n	800756c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007266:	2b01      	cmp	r3, #1
 8007268:	d11b      	bne.n	80072a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	61fb      	str	r3, [r7, #28]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	61fb      	str	r3, [r7, #28]
 800728e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	e164      	b.n	800756c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d11b      	bne.n	80072e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ca:	2300      	movs	r3, #0
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	61bb      	str	r3, [r7, #24]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	e144      	b.n	800756c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072e2:	2300      	movs	r3, #0
 80072e4:	617b      	str	r3, [r7, #20]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	617b      	str	r3, [r7, #20]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80072f8:	e138      	b.n	800756c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072fe:	2b03      	cmp	r3, #3
 8007300:	f200 80f1 	bhi.w	80074e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007308:	2b01      	cmp	r3, #1
 800730a:	d123      	bne.n	8007354 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800730c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fcb7 	bl	8007c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e139      	b.n	8007594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691a      	ldr	r2, [r3, #16]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007352:	e10b      	b.n	800756c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007358:	2b02      	cmp	r3, #2
 800735a:	d14e      	bne.n	80073fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	2200      	movs	r2, #0
 8007364:	4906      	ldr	r1, [pc, #24]	; (8007380 <HAL_I2C_Mem_Read+0x22c>)
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 fb34 	bl	80079d4 <I2C_WaitOnFlagUntilTimeout>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d008      	beq.n	8007384 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e10e      	b.n	8007594 <HAL_I2C_Mem_Read+0x440>
 8007376:	bf00      	nop
 8007378:	00100002 	.word	0x00100002
 800737c:	ffff0000 	.word	0xffff0000
 8007380:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	691a      	ldr	r2, [r3, #16]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073bc:	b29b      	uxth	r3, r3
 80073be:	3b01      	subs	r3, #1
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073f8:	e0b8      	b.n	800756c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	2200      	movs	r2, #0
 8007402:	4966      	ldr	r1, [pc, #408]	; (800759c <HAL_I2C_Mem_Read+0x448>)
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fae5 	bl	80079d4 <I2C_WaitOnFlagUntilTimeout>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e0bf      	b.n	8007594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691a      	ldr	r2, [r3, #16]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007440:	3b01      	subs	r3, #1
 8007442:	b29a      	uxth	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744c:	b29b      	uxth	r3, r3
 800744e:	3b01      	subs	r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	2200      	movs	r2, #0
 800745e:	494f      	ldr	r1, [pc, #316]	; (800759c <HAL_I2C_Mem_Read+0x448>)
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 fab7 	bl	80079d4 <I2C_WaitOnFlagUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e091      	b.n	8007594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800747e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691a      	ldr	r2, [r3, #16]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800749c:	3b01      	subs	r3, #1
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	691a      	ldr	r2, [r3, #16]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	b2d2      	uxtb	r2, r2
 80074be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ce:	3b01      	subs	r3, #1
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074da:	b29b      	uxth	r3, r3
 80074dc:	3b01      	subs	r3, #1
 80074de:	b29a      	uxth	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074e4:	e042      	b.n	800756c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 fbca 	bl	8007c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e04c      	b.n	8007594 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	b2d2      	uxtb	r2, r2
 8007506:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007516:	3b01      	subs	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007522:	b29b      	uxth	r3, r3
 8007524:	3b01      	subs	r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	f003 0304 	and.w	r3, r3, #4
 8007536:	2b04      	cmp	r3, #4
 8007538:	d118      	bne.n	800756c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	691a      	ldr	r2, [r3, #16]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	b2d2      	uxtb	r2, r2
 8007546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007556:	3b01      	subs	r3, #1
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007562:	b29b      	uxth	r3, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	b29a      	uxth	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007570:	2b00      	cmp	r3, #0
 8007572:	f47f aec2 	bne.w	80072fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2220      	movs	r2, #32
 800757a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	e000      	b.n	8007594 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007592:	2302      	movs	r3, #2
  }
}
 8007594:	4618      	mov	r0, r3
 8007596:	3728      	adds	r7, #40	; 0x28
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	00010004 	.word	0x00010004

080075a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ae:	b2db      	uxtb	r3, r3
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af02      	add	r7, sp, #8
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	460b      	mov	r3, r1
 80075e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d006      	beq.n	80075fe <I2C_MasterRequestWrite+0x2a>
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d003      	beq.n	80075fe <I2C_MasterRequestWrite+0x2a>
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075fc:	d108      	bne.n	8007610 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e00b      	b.n	8007628 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007614:	2b12      	cmp	r3, #18
 8007616:	d107      	bne.n	8007628 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007626:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 f9cd 	bl	80079d4 <I2C_WaitOnFlagUntilTimeout>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00d      	beq.n	800765c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800764e:	d103      	bne.n	8007658 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007656:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e035      	b.n	80076c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007664:	d108      	bne.n	8007678 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007666:	897b      	ldrh	r3, [r7, #10]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007674:	611a      	str	r2, [r3, #16]
 8007676:	e01b      	b.n	80076b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007678:	897b      	ldrh	r3, [r7, #10]
 800767a:	11db      	asrs	r3, r3, #7
 800767c:	b2db      	uxtb	r3, r3
 800767e:	f003 0306 	and.w	r3, r3, #6
 8007682:	b2db      	uxtb	r3, r3
 8007684:	f063 030f 	orn	r3, r3, #15
 8007688:	b2da      	uxtb	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	490e      	ldr	r1, [pc, #56]	; (80076d0 <I2C_MasterRequestWrite+0xfc>)
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f9f3 	bl	8007a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e010      	b.n	80076c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80076a6:	897b      	ldrh	r3, [r7, #10]
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	4907      	ldr	r1, [pc, #28]	; (80076d4 <I2C_MasterRequestWrite+0x100>)
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 f9e3 	bl	8007a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e000      	b.n	80076c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	00010008 	.word	0x00010008
 80076d4:	00010002 	.word	0x00010002

080076d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af02      	add	r7, sp, #8
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	4608      	mov	r0, r1
 80076e2:	4611      	mov	r1, r2
 80076e4:	461a      	mov	r2, r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	817b      	strh	r3, [r7, #10]
 80076ea:	460b      	mov	r3, r1
 80076ec:	813b      	strh	r3, [r7, #8]
 80076ee:	4613      	mov	r3, r2
 80076f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007700:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	2200      	movs	r2, #0
 800770a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 f960 	bl	80079d4 <I2C_WaitOnFlagUntilTimeout>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00d      	beq.n	8007736 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007728:	d103      	bne.n	8007732 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007730:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e05f      	b.n	80077f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007736:	897b      	ldrh	r3, [r7, #10]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	461a      	mov	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007744:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	492d      	ldr	r1, [pc, #180]	; (8007800 <I2C_RequestMemoryWrite+0x128>)
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 f998 	bl	8007a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e04c      	b.n	80077f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800775c:	2300      	movs	r3, #0
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007774:	6a39      	ldr	r1, [r7, #32]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 fa02 	bl	8007b80 <I2C_WaitOnTXEFlagUntilTimeout>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00d      	beq.n	800779e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	2b04      	cmp	r3, #4
 8007788:	d107      	bne.n	800779a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007798:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e02b      	b.n	80077f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800779e:	88fb      	ldrh	r3, [r7, #6]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d105      	bne.n	80077b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077a4:	893b      	ldrh	r3, [r7, #8]
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	611a      	str	r2, [r3, #16]
 80077ae:	e021      	b.n	80077f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80077b0:	893b      	ldrh	r3, [r7, #8]
 80077b2:	0a1b      	lsrs	r3, r3, #8
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c0:	6a39      	ldr	r1, [r7, #32]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 f9dc 	bl	8007b80 <I2C_WaitOnTXEFlagUntilTimeout>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00d      	beq.n	80077ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d107      	bne.n	80077e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e005      	b.n	80077f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077ea:	893b      	ldrh	r3, [r7, #8]
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	00010002 	.word	0x00010002

08007804 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b088      	sub	sp, #32
 8007808:	af02      	add	r7, sp, #8
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	4608      	mov	r0, r1
 800780e:	4611      	mov	r1, r2
 8007810:	461a      	mov	r2, r3
 8007812:	4603      	mov	r3, r0
 8007814:	817b      	strh	r3, [r7, #10]
 8007816:	460b      	mov	r3, r1
 8007818:	813b      	strh	r3, [r7, #8]
 800781a:	4613      	mov	r3, r2
 800781c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800782c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800783c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	2200      	movs	r2, #0
 8007846:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 f8c2 	bl	80079d4 <I2C_WaitOnFlagUntilTimeout>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00d      	beq.n	8007872 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007864:	d103      	bne.n	800786e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800786c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e0aa      	b.n	80079c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007872:	897b      	ldrh	r3, [r7, #10]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007880:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	6a3a      	ldr	r2, [r7, #32]
 8007886:	4952      	ldr	r1, [pc, #328]	; (80079d0 <I2C_RequestMemoryRead+0x1cc>)
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 f8fa 	bl	8007a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e097      	b.n	80079c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007898:	2300      	movs	r3, #0
 800789a:	617b      	str	r3, [r7, #20]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b0:	6a39      	ldr	r1, [r7, #32]
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 f964 	bl	8007b80 <I2C_WaitOnTXEFlagUntilTimeout>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00d      	beq.n	80078da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	d107      	bne.n	80078d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e076      	b.n	80079c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078da:	88fb      	ldrh	r3, [r7, #6]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d105      	bne.n	80078ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078e0:	893b      	ldrh	r3, [r7, #8]
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	611a      	str	r2, [r3, #16]
 80078ea:	e021      	b.n	8007930 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078ec:	893b      	ldrh	r3, [r7, #8]
 80078ee:	0a1b      	lsrs	r3, r3, #8
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fc:	6a39      	ldr	r1, [r7, #32]
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f93e 	bl	8007b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00d      	beq.n	8007926 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	2b04      	cmp	r3, #4
 8007910:	d107      	bne.n	8007922 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007920:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e050      	b.n	80079c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007926:	893b      	ldrh	r3, [r7, #8]
 8007928:	b2da      	uxtb	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007932:	6a39      	ldr	r1, [r7, #32]
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 f923 	bl	8007b80 <I2C_WaitOnTXEFlagUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00d      	beq.n	800795c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007944:	2b04      	cmp	r3, #4
 8007946:	d107      	bne.n	8007958 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007956:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e035      	b.n	80079c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800796a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	2200      	movs	r2, #0
 8007974:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f82b 	bl	80079d4 <I2C_WaitOnFlagUntilTimeout>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00d      	beq.n	80079a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800798e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007992:	d103      	bne.n	800799c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800799a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e013      	b.n	80079c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80079a0:	897b      	ldrh	r3, [r7, #10]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	f043 0301 	orr.w	r3, r3, #1
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	6a3a      	ldr	r2, [r7, #32]
 80079b4:	4906      	ldr	r1, [pc, #24]	; (80079d0 <I2C_RequestMemoryRead+0x1cc>)
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 f863 	bl	8007a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e000      	b.n	80079c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	00010002 	.word	0x00010002

080079d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	4613      	mov	r3, r2
 80079e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079e4:	e025      	b.n	8007a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ec:	d021      	beq.n	8007a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ee:	f7fd fa61 	bl	8004eb4 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d302      	bcc.n	8007a04 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d116      	bne.n	8007a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	f043 0220 	orr.w	r2, r3, #32
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e023      	b.n	8007a7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	0c1b      	lsrs	r3, r3, #16
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d10d      	bne.n	8007a58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	43da      	mvns	r2, r3
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4013      	ands	r3, r2
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bf0c      	ite	eq
 8007a4e:	2301      	moveq	r3, #1
 8007a50:	2300      	movne	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	e00c      	b.n	8007a72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	43da      	mvns	r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	4013      	ands	r3, r2
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bf0c      	ite	eq
 8007a6a:	2301      	moveq	r3, #1
 8007a6c:	2300      	movne	r3, #0
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d0b6      	beq.n	80079e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	607a      	str	r2, [r7, #4]
 8007a8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a90:	e051      	b.n	8007b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa0:	d123      	bne.n	8007aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007aba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	f043 0204 	orr.w	r2, r3, #4
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e046      	b.n	8007b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af0:	d021      	beq.n	8007b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007af2:	f7fd f9df 	bl	8004eb4 <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d302      	bcc.n	8007b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d116      	bne.n	8007b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	f043 0220 	orr.w	r2, r3, #32
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e020      	b.n	8007b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	0c1b      	lsrs	r3, r3, #16
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d10c      	bne.n	8007b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	43da      	mvns	r2, r3
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	bf14      	ite	ne
 8007b52:	2301      	movne	r3, #1
 8007b54:	2300      	moveq	r3, #0
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	e00b      	b.n	8007b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	43da      	mvns	r2, r3
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4013      	ands	r3, r2
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	bf14      	ite	ne
 8007b6c:	2301      	movne	r3, #1
 8007b6e:	2300      	moveq	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d18d      	bne.n	8007a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b8c:	e02d      	b.n	8007bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 f8ce 	bl	8007d30 <I2C_IsAcknowledgeFailed>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e02d      	b.n	8007bfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba4:	d021      	beq.n	8007bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba6:	f7fd f985 	bl	8004eb4 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d302      	bcc.n	8007bbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d116      	bne.n	8007bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	f043 0220 	orr.w	r2, r3, #32
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e007      	b.n	8007bfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf4:	2b80      	cmp	r3, #128	; 0x80
 8007bf6:	d1ca      	bne.n	8007b8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	60f8      	str	r0, [r7, #12]
 8007c0a:	60b9      	str	r1, [r7, #8]
 8007c0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c0e:	e02d      	b.n	8007c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 f88d 	bl	8007d30 <I2C_IsAcknowledgeFailed>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e02d      	b.n	8007c7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c26:	d021      	beq.n	8007c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c28:	f7fd f944 	bl	8004eb4 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d302      	bcc.n	8007c3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d116      	bne.n	8007c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	f043 0220 	orr.w	r2, r3, #32
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e007      	b.n	8007c7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d1ca      	bne.n	8007c10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c90:	e042      	b.n	8007d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	f003 0310 	and.w	r3, r3, #16
 8007c9c:	2b10      	cmp	r3, #16
 8007c9e:	d119      	bne.n	8007cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f06f 0210 	mvn.w	r2, #16
 8007ca8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e029      	b.n	8007d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cd4:	f7fd f8ee 	bl	8004eb4 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d302      	bcc.n	8007cea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d116      	bne.n	8007d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	f043 0220 	orr.w	r2, r3, #32
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e007      	b.n	8007d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b40      	cmp	r3, #64	; 0x40
 8007d24:	d1b5      	bne.n	8007c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d46:	d11b      	bne.n	8007d80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	f043 0204 	orr.w	r2, r3, #4
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
	...

08007d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e25b      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d075      	beq.n	8007e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007dae:	4ba3      	ldr	r3, [pc, #652]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f003 030c 	and.w	r3, r3, #12
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d00c      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dba:	4ba0      	ldr	r3, [pc, #640]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007dc2:	2b08      	cmp	r3, #8
 8007dc4:	d112      	bne.n	8007dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dc6:	4b9d      	ldr	r3, [pc, #628]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dd2:	d10b      	bne.n	8007dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dd4:	4b99      	ldr	r3, [pc, #612]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d05b      	beq.n	8007e98 <HAL_RCC_OscConfig+0x108>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d157      	bne.n	8007e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e236      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df4:	d106      	bne.n	8007e04 <HAL_RCC_OscConfig+0x74>
 8007df6:	4b91      	ldr	r3, [pc, #580]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a90      	ldr	r2, [pc, #576]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e00:	6013      	str	r3, [r2, #0]
 8007e02:	e01d      	b.n	8007e40 <HAL_RCC_OscConfig+0xb0>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e0c:	d10c      	bne.n	8007e28 <HAL_RCC_OscConfig+0x98>
 8007e0e:	4b8b      	ldr	r3, [pc, #556]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a8a      	ldr	r2, [pc, #552]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	4b88      	ldr	r3, [pc, #544]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a87      	ldr	r2, [pc, #540]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e24:	6013      	str	r3, [r2, #0]
 8007e26:	e00b      	b.n	8007e40 <HAL_RCC_OscConfig+0xb0>
 8007e28:	4b84      	ldr	r3, [pc, #528]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a83      	ldr	r2, [pc, #524]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e32:	6013      	str	r3, [r2, #0]
 8007e34:	4b81      	ldr	r3, [pc, #516]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a80      	ldr	r2, [pc, #512]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d013      	beq.n	8007e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e48:	f7fd f834 	bl	8004eb4 <HAL_GetTick>
 8007e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e4e:	e008      	b.n	8007e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e50:	f7fd f830 	bl	8004eb4 <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	2b64      	cmp	r3, #100	; 0x64
 8007e5c:	d901      	bls.n	8007e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e1fb      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e62:	4b76      	ldr	r3, [pc, #472]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0f0      	beq.n	8007e50 <HAL_RCC_OscConfig+0xc0>
 8007e6e:	e014      	b.n	8007e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e70:	f7fd f820 	bl	8004eb4 <HAL_GetTick>
 8007e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e76:	e008      	b.n	8007e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e78:	f7fd f81c 	bl	8004eb4 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2b64      	cmp	r3, #100	; 0x64
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e1e7      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e8a:	4b6c      	ldr	r3, [pc, #432]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1f0      	bne.n	8007e78 <HAL_RCC_OscConfig+0xe8>
 8007e96:	e000      	b.n	8007e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d063      	beq.n	8007f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ea6:	4b65      	ldr	r3, [pc, #404]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f003 030c 	and.w	r3, r3, #12
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00b      	beq.n	8007eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007eb2:	4b62      	ldr	r3, [pc, #392]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007eba:	2b08      	cmp	r3, #8
 8007ebc:	d11c      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ebe:	4b5f      	ldr	r3, [pc, #380]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d116      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007eca:	4b5c      	ldr	r3, [pc, #368]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d005      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x152>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d001      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e1bb      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ee2:	4b56      	ldr	r3, [pc, #344]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	00db      	lsls	r3, r3, #3
 8007ef0:	4952      	ldr	r1, [pc, #328]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ef6:	e03a      	b.n	8007f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d020      	beq.n	8007f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f00:	4b4f      	ldr	r3, [pc, #316]	; (8008040 <HAL_RCC_OscConfig+0x2b0>)
 8007f02:	2201      	movs	r2, #1
 8007f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f06:	f7fc ffd5 	bl	8004eb4 <HAL_GetTick>
 8007f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f0c:	e008      	b.n	8007f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f0e:	f7fc ffd1 	bl	8004eb4 <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d901      	bls.n	8007f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e19c      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f20:	4b46      	ldr	r3, [pc, #280]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d0f0      	beq.n	8007f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f2c:	4b43      	ldr	r3, [pc, #268]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	00db      	lsls	r3, r3, #3
 8007f3a:	4940      	ldr	r1, [pc, #256]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	600b      	str	r3, [r1, #0]
 8007f40:	e015      	b.n	8007f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f42:	4b3f      	ldr	r3, [pc, #252]	; (8008040 <HAL_RCC_OscConfig+0x2b0>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f48:	f7fc ffb4 	bl	8004eb4 <HAL_GetTick>
 8007f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f50:	f7fc ffb0 	bl	8004eb4 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e17b      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f62:	4b36      	ldr	r3, [pc, #216]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1f0      	bne.n	8007f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0308 	and.w	r3, r3, #8
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d030      	beq.n	8007fdc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d016      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f82:	4b30      	ldr	r3, [pc, #192]	; (8008044 <HAL_RCC_OscConfig+0x2b4>)
 8007f84:	2201      	movs	r2, #1
 8007f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f88:	f7fc ff94 	bl	8004eb4 <HAL_GetTick>
 8007f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f8e:	e008      	b.n	8007fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f90:	f7fc ff90 	bl	8004eb4 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e15b      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fa2:	4b26      	ldr	r3, [pc, #152]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0f0      	beq.n	8007f90 <HAL_RCC_OscConfig+0x200>
 8007fae:	e015      	b.n	8007fdc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fb0:	4b24      	ldr	r3, [pc, #144]	; (8008044 <HAL_RCC_OscConfig+0x2b4>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fb6:	f7fc ff7d 	bl	8004eb4 <HAL_GetTick>
 8007fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fbc:	e008      	b.n	8007fd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fbe:	f7fc ff79 	bl	8004eb4 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d901      	bls.n	8007fd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e144      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fd0:	4b1a      	ldr	r3, [pc, #104]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1f0      	bne.n	8007fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 80a0 	beq.w	800812a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fea:	2300      	movs	r3, #0
 8007fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fee:	4b13      	ldr	r3, [pc, #76]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10f      	bne.n	800801a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60bb      	str	r3, [r7, #8]
 8007ffe:	4b0f      	ldr	r3, [pc, #60]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	4a0e      	ldr	r2, [pc, #56]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 8008004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008008:	6413      	str	r3, [r2, #64]	; 0x40
 800800a:	4b0c      	ldr	r3, [pc, #48]	; (800803c <HAL_RCC_OscConfig+0x2ac>)
 800800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008012:	60bb      	str	r3, [r7, #8]
 8008014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008016:	2301      	movs	r3, #1
 8008018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800801a:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <HAL_RCC_OscConfig+0x2b8>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008022:	2b00      	cmp	r3, #0
 8008024:	d121      	bne.n	800806a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008026:	4b08      	ldr	r3, [pc, #32]	; (8008048 <HAL_RCC_OscConfig+0x2b8>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a07      	ldr	r2, [pc, #28]	; (8008048 <HAL_RCC_OscConfig+0x2b8>)
 800802c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008032:	f7fc ff3f 	bl	8004eb4 <HAL_GetTick>
 8008036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008038:	e011      	b.n	800805e <HAL_RCC_OscConfig+0x2ce>
 800803a:	bf00      	nop
 800803c:	40023800 	.word	0x40023800
 8008040:	42470000 	.word	0x42470000
 8008044:	42470e80 	.word	0x42470e80
 8008048:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800804c:	f7fc ff32 	bl	8004eb4 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b02      	cmp	r3, #2
 8008058:	d901      	bls.n	800805e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e0fd      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800805e:	4b81      	ldr	r3, [pc, #516]	; (8008264 <HAL_RCC_OscConfig+0x4d4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008066:	2b00      	cmp	r3, #0
 8008068:	d0f0      	beq.n	800804c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d106      	bne.n	8008080 <HAL_RCC_OscConfig+0x2f0>
 8008072:	4b7d      	ldr	r3, [pc, #500]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 8008074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008076:	4a7c      	ldr	r2, [pc, #496]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 8008078:	f043 0301 	orr.w	r3, r3, #1
 800807c:	6713      	str	r3, [r2, #112]	; 0x70
 800807e:	e01c      	b.n	80080ba <HAL_RCC_OscConfig+0x32a>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	2b05      	cmp	r3, #5
 8008086:	d10c      	bne.n	80080a2 <HAL_RCC_OscConfig+0x312>
 8008088:	4b77      	ldr	r3, [pc, #476]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 800808a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808c:	4a76      	ldr	r2, [pc, #472]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 800808e:	f043 0304 	orr.w	r3, r3, #4
 8008092:	6713      	str	r3, [r2, #112]	; 0x70
 8008094:	4b74      	ldr	r3, [pc, #464]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 8008096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008098:	4a73      	ldr	r2, [pc, #460]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 800809a:	f043 0301 	orr.w	r3, r3, #1
 800809e:	6713      	str	r3, [r2, #112]	; 0x70
 80080a0:	e00b      	b.n	80080ba <HAL_RCC_OscConfig+0x32a>
 80080a2:	4b71      	ldr	r3, [pc, #452]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 80080a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a6:	4a70      	ldr	r2, [pc, #448]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 80080a8:	f023 0301 	bic.w	r3, r3, #1
 80080ac:	6713      	str	r3, [r2, #112]	; 0x70
 80080ae:	4b6e      	ldr	r3, [pc, #440]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 80080b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b2:	4a6d      	ldr	r2, [pc, #436]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 80080b4:	f023 0304 	bic.w	r3, r3, #4
 80080b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d015      	beq.n	80080ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080c2:	f7fc fef7 	bl	8004eb4 <HAL_GetTick>
 80080c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080c8:	e00a      	b.n	80080e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080ca:	f7fc fef3 	bl	8004eb4 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d8:	4293      	cmp	r3, r2
 80080da:	d901      	bls.n	80080e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e0bc      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080e0:	4b61      	ldr	r3, [pc, #388]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 80080e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e4:	f003 0302 	and.w	r3, r3, #2
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d0ee      	beq.n	80080ca <HAL_RCC_OscConfig+0x33a>
 80080ec:	e014      	b.n	8008118 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080ee:	f7fc fee1 	bl	8004eb4 <HAL_GetTick>
 80080f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080f4:	e00a      	b.n	800810c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080f6:	f7fc fedd 	bl	8004eb4 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	f241 3288 	movw	r2, #5000	; 0x1388
 8008104:	4293      	cmp	r3, r2
 8008106:	d901      	bls.n	800810c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e0a6      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800810c:	4b56      	ldr	r3, [pc, #344]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 800810e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1ee      	bne.n	80080f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d105      	bne.n	800812a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800811e:	4b52      	ldr	r3, [pc, #328]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 8008120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008122:	4a51      	ldr	r2, [pc, #324]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 8008124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008128:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8092 	beq.w	8008258 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008134:	4b4c      	ldr	r3, [pc, #304]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f003 030c 	and.w	r3, r3, #12
 800813c:	2b08      	cmp	r3, #8
 800813e:	d05c      	beq.n	80081fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d141      	bne.n	80081cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008148:	4b48      	ldr	r3, [pc, #288]	; (800826c <HAL_RCC_OscConfig+0x4dc>)
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800814e:	f7fc feb1 	bl	8004eb4 <HAL_GetTick>
 8008152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008154:	e008      	b.n	8008168 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008156:	f7fc fead 	bl	8004eb4 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b02      	cmp	r3, #2
 8008162:	d901      	bls.n	8008168 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e078      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008168:	4b3f      	ldr	r3, [pc, #252]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1f0      	bne.n	8008156 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	69da      	ldr	r2, [r3, #28]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	019b      	lsls	r3, r3, #6
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	085b      	lsrs	r3, r3, #1
 800818c:	3b01      	subs	r3, #1
 800818e:	041b      	lsls	r3, r3, #16
 8008190:	431a      	orrs	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008196:	061b      	lsls	r3, r3, #24
 8008198:	4933      	ldr	r1, [pc, #204]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 800819a:	4313      	orrs	r3, r2
 800819c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800819e:	4b33      	ldr	r3, [pc, #204]	; (800826c <HAL_RCC_OscConfig+0x4dc>)
 80081a0:	2201      	movs	r2, #1
 80081a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081a4:	f7fc fe86 	bl	8004eb4 <HAL_GetTick>
 80081a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081aa:	e008      	b.n	80081be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081ac:	f7fc fe82 	bl	8004eb4 <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d901      	bls.n	80081be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e04d      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081be:	4b2a      	ldr	r3, [pc, #168]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0f0      	beq.n	80081ac <HAL_RCC_OscConfig+0x41c>
 80081ca:	e045      	b.n	8008258 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081cc:	4b27      	ldr	r3, [pc, #156]	; (800826c <HAL_RCC_OscConfig+0x4dc>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081d2:	f7fc fe6f 	bl	8004eb4 <HAL_GetTick>
 80081d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081d8:	e008      	b.n	80081ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081da:	f7fc fe6b 	bl	8004eb4 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d901      	bls.n	80081ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e036      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081ec:	4b1e      	ldr	r3, [pc, #120]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1f0      	bne.n	80081da <HAL_RCC_OscConfig+0x44a>
 80081f8:	e02e      	b.n	8008258 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d101      	bne.n	8008206 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e029      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008206:	4b18      	ldr	r3, [pc, #96]	; (8008268 <HAL_RCC_OscConfig+0x4d8>)
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	429a      	cmp	r2, r3
 8008218:	d11c      	bne.n	8008254 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008224:	429a      	cmp	r2, r3
 8008226:	d115      	bne.n	8008254 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800822e:	4013      	ands	r3, r2
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008234:	4293      	cmp	r3, r2
 8008236:	d10d      	bne.n	8008254 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008242:	429a      	cmp	r2, r3
 8008244:	d106      	bne.n	8008254 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008250:	429a      	cmp	r2, r3
 8008252:	d001      	beq.n	8008258 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e000      	b.n	800825a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	40007000 	.word	0x40007000
 8008268:	40023800 	.word	0x40023800
 800826c:	42470060 	.word	0x42470060

08008270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e0cc      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008284:	4b68      	ldr	r3, [pc, #416]	; (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d90c      	bls.n	80082ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008292:	4b65      	ldr	r3, [pc, #404]	; (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	b2d2      	uxtb	r2, r2
 8008298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800829a:	4b63      	ldr	r3, [pc, #396]	; (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 030f 	and.w	r3, r3, #15
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d001      	beq.n	80082ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e0b8      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0302 	and.w	r3, r3, #2
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d020      	beq.n	80082fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082c4:	4b59      	ldr	r3, [pc, #356]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	4a58      	ldr	r2, [pc, #352]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0308 	and.w	r3, r3, #8
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082dc:	4b53      	ldr	r3, [pc, #332]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	4a52      	ldr	r2, [pc, #328]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082e8:	4b50      	ldr	r3, [pc, #320]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	494d      	ldr	r1, [pc, #308]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d044      	beq.n	8008390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d107      	bne.n	800831e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800830e:	4b47      	ldr	r3, [pc, #284]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d119      	bne.n	800834e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e07f      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d003      	beq.n	800832e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800832a:	2b03      	cmp	r3, #3
 800832c:	d107      	bne.n	800833e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800832e:	4b3f      	ldr	r3, [pc, #252]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e06f      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800833e:	4b3b      	ldr	r3, [pc, #236]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e067      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800834e:	4b37      	ldr	r3, [pc, #220]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f023 0203 	bic.w	r2, r3, #3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	4934      	ldr	r1, [pc, #208]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 800835c:	4313      	orrs	r3, r2
 800835e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008360:	f7fc fda8 	bl	8004eb4 <HAL_GetTick>
 8008364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008366:	e00a      	b.n	800837e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008368:	f7fc fda4 	bl	8004eb4 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	f241 3288 	movw	r2, #5000	; 0x1388
 8008376:	4293      	cmp	r3, r2
 8008378:	d901      	bls.n	800837e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e04f      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800837e:	4b2b      	ldr	r3, [pc, #172]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f003 020c 	and.w	r2, r3, #12
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	429a      	cmp	r2, r3
 800838e:	d1eb      	bne.n	8008368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008390:	4b25      	ldr	r3, [pc, #148]	; (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 030f 	and.w	r3, r3, #15
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d20c      	bcs.n	80083b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800839e:	4b22      	ldr	r3, [pc, #136]	; (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083a6:	4b20      	ldr	r3, [pc, #128]	; (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 030f 	and.w	r3, r3, #15
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d001      	beq.n	80083b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e032      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d008      	beq.n	80083d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083c4:	4b19      	ldr	r3, [pc, #100]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	4916      	ldr	r1, [pc, #88]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0308 	and.w	r3, r3, #8
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d009      	beq.n	80083f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083e2:	4b12      	ldr	r3, [pc, #72]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	490e      	ldr	r1, [pc, #56]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083f6:	f000 f821 	bl	800843c <HAL_RCC_GetSysClockFreq>
 80083fa:	4601      	mov	r1, r0
 80083fc:	4b0b      	ldr	r3, [pc, #44]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	091b      	lsrs	r3, r3, #4
 8008402:	f003 030f 	and.w	r3, r3, #15
 8008406:	4a0a      	ldr	r2, [pc, #40]	; (8008430 <HAL_RCC_ClockConfig+0x1c0>)
 8008408:	5cd3      	ldrb	r3, [r2, r3]
 800840a:	fa21 f303 	lsr.w	r3, r1, r3
 800840e:	4a09      	ldr	r2, [pc, #36]	; (8008434 <HAL_RCC_ClockConfig+0x1c4>)
 8008410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008412:	4b09      	ldr	r3, [pc, #36]	; (8008438 <HAL_RCC_ClockConfig+0x1c8>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f7fc fd08 	bl	8004e2c <HAL_InitTick>

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	40023c00 	.word	0x40023c00
 800842c:	40023800 	.word	0x40023800
 8008430:	0800cd7c 	.word	0x0800cd7c
 8008434:	20000004 	.word	0x20000004
 8008438:	2000008c 	.word	0x2000008c

0800843c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800843c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	607b      	str	r3, [r7, #4]
 8008446:	2300      	movs	r3, #0
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	2300      	movs	r3, #0
 800844c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008452:	4b63      	ldr	r3, [pc, #396]	; (80085e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f003 030c 	and.w	r3, r3, #12
 800845a:	2b04      	cmp	r3, #4
 800845c:	d007      	beq.n	800846e <HAL_RCC_GetSysClockFreq+0x32>
 800845e:	2b08      	cmp	r3, #8
 8008460:	d008      	beq.n	8008474 <HAL_RCC_GetSysClockFreq+0x38>
 8008462:	2b00      	cmp	r3, #0
 8008464:	f040 80b4 	bne.w	80085d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008468:	4b5e      	ldr	r3, [pc, #376]	; (80085e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800846a:	60bb      	str	r3, [r7, #8]
       break;
 800846c:	e0b3      	b.n	80085d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800846e:	4b5e      	ldr	r3, [pc, #376]	; (80085e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008470:	60bb      	str	r3, [r7, #8]
      break;
 8008472:	e0b0      	b.n	80085d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008474:	4b5a      	ldr	r3, [pc, #360]	; (80085e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800847c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800847e:	4b58      	ldr	r3, [pc, #352]	; (80085e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d04a      	beq.n	8008520 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800848a:	4b55      	ldr	r3, [pc, #340]	; (80085e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	099b      	lsrs	r3, r3, #6
 8008490:	f04f 0400 	mov.w	r4, #0
 8008494:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	ea03 0501 	and.w	r5, r3, r1
 80084a0:	ea04 0602 	and.w	r6, r4, r2
 80084a4:	4629      	mov	r1, r5
 80084a6:	4632      	mov	r2, r6
 80084a8:	f04f 0300 	mov.w	r3, #0
 80084ac:	f04f 0400 	mov.w	r4, #0
 80084b0:	0154      	lsls	r4, r2, #5
 80084b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80084b6:	014b      	lsls	r3, r1, #5
 80084b8:	4619      	mov	r1, r3
 80084ba:	4622      	mov	r2, r4
 80084bc:	1b49      	subs	r1, r1, r5
 80084be:	eb62 0206 	sbc.w	r2, r2, r6
 80084c2:	f04f 0300 	mov.w	r3, #0
 80084c6:	f04f 0400 	mov.w	r4, #0
 80084ca:	0194      	lsls	r4, r2, #6
 80084cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80084d0:	018b      	lsls	r3, r1, #6
 80084d2:	1a5b      	subs	r3, r3, r1
 80084d4:	eb64 0402 	sbc.w	r4, r4, r2
 80084d8:	f04f 0100 	mov.w	r1, #0
 80084dc:	f04f 0200 	mov.w	r2, #0
 80084e0:	00e2      	lsls	r2, r4, #3
 80084e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80084e6:	00d9      	lsls	r1, r3, #3
 80084e8:	460b      	mov	r3, r1
 80084ea:	4614      	mov	r4, r2
 80084ec:	195b      	adds	r3, r3, r5
 80084ee:	eb44 0406 	adc.w	r4, r4, r6
 80084f2:	f04f 0100 	mov.w	r1, #0
 80084f6:	f04f 0200 	mov.w	r2, #0
 80084fa:	0262      	lsls	r2, r4, #9
 80084fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008500:	0259      	lsls	r1, r3, #9
 8008502:	460b      	mov	r3, r1
 8008504:	4614      	mov	r4, r2
 8008506:	4618      	mov	r0, r3
 8008508:	4621      	mov	r1, r4
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f04f 0400 	mov.w	r4, #0
 8008510:	461a      	mov	r2, r3
 8008512:	4623      	mov	r3, r4
 8008514:	f7f8 fba0 	bl	8000c58 <__aeabi_uldivmod>
 8008518:	4603      	mov	r3, r0
 800851a:	460c      	mov	r4, r1
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	e049      	b.n	80085b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008520:	4b2f      	ldr	r3, [pc, #188]	; (80085e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	099b      	lsrs	r3, r3, #6
 8008526:	f04f 0400 	mov.w	r4, #0
 800852a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800852e:	f04f 0200 	mov.w	r2, #0
 8008532:	ea03 0501 	and.w	r5, r3, r1
 8008536:	ea04 0602 	and.w	r6, r4, r2
 800853a:	4629      	mov	r1, r5
 800853c:	4632      	mov	r2, r6
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	f04f 0400 	mov.w	r4, #0
 8008546:	0154      	lsls	r4, r2, #5
 8008548:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800854c:	014b      	lsls	r3, r1, #5
 800854e:	4619      	mov	r1, r3
 8008550:	4622      	mov	r2, r4
 8008552:	1b49      	subs	r1, r1, r5
 8008554:	eb62 0206 	sbc.w	r2, r2, r6
 8008558:	f04f 0300 	mov.w	r3, #0
 800855c:	f04f 0400 	mov.w	r4, #0
 8008560:	0194      	lsls	r4, r2, #6
 8008562:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008566:	018b      	lsls	r3, r1, #6
 8008568:	1a5b      	subs	r3, r3, r1
 800856a:	eb64 0402 	sbc.w	r4, r4, r2
 800856e:	f04f 0100 	mov.w	r1, #0
 8008572:	f04f 0200 	mov.w	r2, #0
 8008576:	00e2      	lsls	r2, r4, #3
 8008578:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800857c:	00d9      	lsls	r1, r3, #3
 800857e:	460b      	mov	r3, r1
 8008580:	4614      	mov	r4, r2
 8008582:	195b      	adds	r3, r3, r5
 8008584:	eb44 0406 	adc.w	r4, r4, r6
 8008588:	f04f 0100 	mov.w	r1, #0
 800858c:	f04f 0200 	mov.w	r2, #0
 8008590:	02a2      	lsls	r2, r4, #10
 8008592:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008596:	0299      	lsls	r1, r3, #10
 8008598:	460b      	mov	r3, r1
 800859a:	4614      	mov	r4, r2
 800859c:	4618      	mov	r0, r3
 800859e:	4621      	mov	r1, r4
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f04f 0400 	mov.w	r4, #0
 80085a6:	461a      	mov	r2, r3
 80085a8:	4623      	mov	r3, r4
 80085aa:	f7f8 fb55 	bl	8000c58 <__aeabi_uldivmod>
 80085ae:	4603      	mov	r3, r0
 80085b0:	460c      	mov	r4, r1
 80085b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80085b4:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	0c1b      	lsrs	r3, r3, #16
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	3301      	adds	r3, #1
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085cc:	60bb      	str	r3, [r7, #8]
      break;
 80085ce:	e002      	b.n	80085d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80085d0:	4b04      	ldr	r3, [pc, #16]	; (80085e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80085d2:	60bb      	str	r3, [r7, #8]
      break;
 80085d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085d6:	68bb      	ldr	r3, [r7, #8]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085e0:	40023800 	.word	0x40023800
 80085e4:	00f42400 	.word	0x00f42400
 80085e8:	007a1200 	.word	0x007a1200

080085ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085f0:	4b03      	ldr	r3, [pc, #12]	; (8008600 <HAL_RCC_GetHCLKFreq+0x14>)
 80085f2:	681b      	ldr	r3, [r3, #0]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	20000004 	.word	0x20000004

08008604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008608:	f7ff fff0 	bl	80085ec <HAL_RCC_GetHCLKFreq>
 800860c:	4601      	mov	r1, r0
 800860e:	4b05      	ldr	r3, [pc, #20]	; (8008624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	0a9b      	lsrs	r3, r3, #10
 8008614:	f003 0307 	and.w	r3, r3, #7
 8008618:	4a03      	ldr	r2, [pc, #12]	; (8008628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800861a:	5cd3      	ldrb	r3, [r2, r3]
 800861c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008620:	4618      	mov	r0, r3
 8008622:	bd80      	pop	{r7, pc}
 8008624:	40023800 	.word	0x40023800
 8008628:	0800cd8c 	.word	0x0800cd8c

0800862c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008630:	f7ff ffdc 	bl	80085ec <HAL_RCC_GetHCLKFreq>
 8008634:	4601      	mov	r1, r0
 8008636:	4b05      	ldr	r3, [pc, #20]	; (800864c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	0b5b      	lsrs	r3, r3, #13
 800863c:	f003 0307 	and.w	r3, r3, #7
 8008640:	4a03      	ldr	r2, [pc, #12]	; (8008650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008642:	5cd3      	ldrb	r3, [r2, r3]
 8008644:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008648:	4618      	mov	r0, r3
 800864a:	bd80      	pop	{r7, pc}
 800864c:	40023800 	.word	0x40023800
 8008650:	0800cd8c 	.word	0x0800cd8c

08008654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e01d      	b.n	80086a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d106      	bne.n	8008680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7fa fc72 	bl	8002f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3304      	adds	r3, #4
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f000 fb8e 	bl	8008db4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b085      	sub	sp, #20
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f042 0201 	orr.w	r2, r2, #1
 80086c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b06      	cmp	r3, #6
 80086d2:	d007      	beq.n	80086e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0201 	orr.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e01d      	b.n	8008740 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	d106      	bne.n	800871e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f815 	bl	8008748 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2202      	movs	r2, #2
 8008722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	3304      	adds	r3, #4
 800872e:	4619      	mov	r1, r3
 8008730:	4610      	mov	r0, r2
 8008732:	f000 fb3f 	bl	8008db4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2201      	movs	r2, #1
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	f000 fdc6 	bl	8009300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a10      	ldr	r2, [pc, #64]	; (80087bc <HAL_TIM_PWM_Start+0x60>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d107      	bne.n	800878e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800878c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f003 0307 	and.w	r3, r3, #7
 8008798:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b06      	cmp	r3, #6
 800879e:	d007      	beq.n	80087b0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f042 0201 	orr.w	r2, r2, #1
 80087ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	40010000 	.word	0x40010000

080087c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2200      	movs	r2, #0
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fd94 	bl	8009300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a1d      	ldr	r2, [pc, #116]	; (8008854 <HAL_TIM_PWM_Stop+0x94>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d117      	bne.n	8008812 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6a1a      	ldr	r2, [r3, #32]
 80087e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80087ec:	4013      	ands	r3, r2
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10f      	bne.n	8008812 <HAL_TIM_PWM_Stop+0x52>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6a1a      	ldr	r2, [r3, #32]
 80087f8:	f240 4344 	movw	r3, #1092	; 0x444
 80087fc:	4013      	ands	r3, r2
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d107      	bne.n	8008812 <HAL_TIM_PWM_Stop+0x52>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008810:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6a1a      	ldr	r2, [r3, #32]
 8008818:	f241 1311 	movw	r3, #4369	; 0x1111
 800881c:	4013      	ands	r3, r2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10f      	bne.n	8008842 <HAL_TIM_PWM_Stop+0x82>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6a1a      	ldr	r2, [r3, #32]
 8008828:	f240 4344 	movw	r3, #1092	; 0x444
 800882c:	4013      	ands	r3, r2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d107      	bne.n	8008842 <HAL_TIM_PWM_Stop+0x82>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 0201 	bic.w	r2, r2, #1
 8008840:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	40010000 	.word	0x40010000

08008858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b02      	cmp	r3, #2
 800886c:	d122      	bne.n	80088b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b02      	cmp	r3, #2
 800887a:	d11b      	bne.n	80088b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f06f 0202 	mvn.w	r2, #2
 8008884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fa6b 	bl	8008d76 <HAL_TIM_IC_CaptureCallback>
 80088a0:	e005      	b.n	80088ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fa5d 	bl	8008d62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fa6e 	bl	8008d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f003 0304 	and.w	r3, r3, #4
 80088be:	2b04      	cmp	r3, #4
 80088c0:	d122      	bne.n	8008908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b04      	cmp	r3, #4
 80088ce:	d11b      	bne.n	8008908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f06f 0204 	mvn.w	r2, #4
 80088d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2202      	movs	r2, #2
 80088de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fa41 	bl	8008d76 <HAL_TIM_IC_CaptureCallback>
 80088f4:	e005      	b.n	8008902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fa33 	bl	8008d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fa44 	bl	8008d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0308 	and.w	r3, r3, #8
 8008912:	2b08      	cmp	r3, #8
 8008914:	d122      	bne.n	800895c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f003 0308 	and.w	r3, r3, #8
 8008920:	2b08      	cmp	r3, #8
 8008922:	d11b      	bne.n	800895c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f06f 0208 	mvn.w	r2, #8
 800892c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2204      	movs	r2, #4
 8008932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	f003 0303 	and.w	r3, r3, #3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fa17 	bl	8008d76 <HAL_TIM_IC_CaptureCallback>
 8008948:	e005      	b.n	8008956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa09 	bl	8008d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fa1a 	bl	8008d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	f003 0310 	and.w	r3, r3, #16
 8008966:	2b10      	cmp	r3, #16
 8008968:	d122      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f003 0310 	and.w	r3, r3, #16
 8008974:	2b10      	cmp	r3, #16
 8008976:	d11b      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f06f 0210 	mvn.w	r2, #16
 8008980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2208      	movs	r2, #8
 8008986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f9ed 	bl	8008d76 <HAL_TIM_IC_CaptureCallback>
 800899c:	e005      	b.n	80089aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f9df 	bl	8008d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f9f0 	bl	8008d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d10e      	bne.n	80089dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d107      	bne.n	80089dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f06f 0201 	mvn.w	r2, #1
 80089d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7f9 fad4 	bl	8001f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e6:	2b80      	cmp	r3, #128	; 0x80
 80089e8:	d10e      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f4:	2b80      	cmp	r3, #128	; 0x80
 80089f6:	d107      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fd1a 	bl	800943c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a12:	2b40      	cmp	r3, #64	; 0x40
 8008a14:	d10e      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a20:	2b40      	cmp	r3, #64	; 0x40
 8008a22:	d107      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f9b5 	bl	8008d9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	d10e      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f003 0320 	and.w	r3, r3, #32
 8008a4c:	2b20      	cmp	r3, #32
 8008a4e:	d107      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f06f 0220 	mvn.w	r2, #32
 8008a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fce4 	bl	8009428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d101      	bne.n	8008a82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008a7e:	2302      	movs	r3, #2
 8008a80:	e0b4      	b.n	8008bec <HAL_TIM_PWM_ConfigChannel+0x184>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b0c      	cmp	r3, #12
 8008a96:	f200 809f 	bhi.w	8008bd8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008a9a:	a201      	add	r2, pc, #4	; (adr r2, 8008aa0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa0:	08008ad5 	.word	0x08008ad5
 8008aa4:	08008bd9 	.word	0x08008bd9
 8008aa8:	08008bd9 	.word	0x08008bd9
 8008aac:	08008bd9 	.word	0x08008bd9
 8008ab0:	08008b15 	.word	0x08008b15
 8008ab4:	08008bd9 	.word	0x08008bd9
 8008ab8:	08008bd9 	.word	0x08008bd9
 8008abc:	08008bd9 	.word	0x08008bd9
 8008ac0:	08008b57 	.word	0x08008b57
 8008ac4:	08008bd9 	.word	0x08008bd9
 8008ac8:	08008bd9 	.word	0x08008bd9
 8008acc:	08008bd9 	.word	0x08008bd9
 8008ad0:	08008b97 	.word	0x08008b97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f9ea 	bl	8008eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	699a      	ldr	r2, [r3, #24]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f042 0208 	orr.w	r2, r2, #8
 8008aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0204 	bic.w	r2, r2, #4
 8008afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6999      	ldr	r1, [r3, #24]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	691a      	ldr	r2, [r3, #16]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	619a      	str	r2, [r3, #24]
      break;
 8008b12:	e062      	b.n	8008bda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68b9      	ldr	r1, [r7, #8]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 fa30 	bl	8008f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	699a      	ldr	r2, [r3, #24]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	699a      	ldr	r2, [r3, #24]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6999      	ldr	r1, [r3, #24]
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	021a      	lsls	r2, r3, #8
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	430a      	orrs	r2, r1
 8008b52:	619a      	str	r2, [r3, #24]
      break;
 8008b54:	e041      	b.n	8008bda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68b9      	ldr	r1, [r7, #8]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fa7b 	bl	8009058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	69da      	ldr	r2, [r3, #28]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f042 0208 	orr.w	r2, r2, #8
 8008b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69da      	ldr	r2, [r3, #28]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f022 0204 	bic.w	r2, r2, #4
 8008b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69d9      	ldr	r1, [r3, #28]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	691a      	ldr	r2, [r3, #16]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	61da      	str	r2, [r3, #28]
      break;
 8008b94:	e021      	b.n	8008bda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68b9      	ldr	r1, [r7, #8]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fac5 	bl	800912c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	69da      	ldr	r2, [r3, #28]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	69da      	ldr	r2, [r3, #28]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69d9      	ldr	r1, [r3, #28]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	021a      	lsls	r2, r3, #8
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	61da      	str	r2, [r3, #28]
      break;
 8008bd6:	e000      	b.n	8008bda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008bd8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d101      	bne.n	8008c0c <HAL_TIM_ConfigClockSource+0x18>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e0a6      	b.n	8008d5a <HAL_TIM_ConfigClockSource+0x166>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b40      	cmp	r3, #64	; 0x40
 8008c42:	d067      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0x120>
 8008c44:	2b40      	cmp	r3, #64	; 0x40
 8008c46:	d80b      	bhi.n	8008c60 <HAL_TIM_ConfigClockSource+0x6c>
 8008c48:	2b10      	cmp	r3, #16
 8008c4a:	d073      	beq.n	8008d34 <HAL_TIM_ConfigClockSource+0x140>
 8008c4c:	2b10      	cmp	r3, #16
 8008c4e:	d802      	bhi.n	8008c56 <HAL_TIM_ConfigClockSource+0x62>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d06f      	beq.n	8008d34 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008c54:	e078      	b.n	8008d48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c56:	2b20      	cmp	r3, #32
 8008c58:	d06c      	beq.n	8008d34 <HAL_TIM_ConfigClockSource+0x140>
 8008c5a:	2b30      	cmp	r3, #48	; 0x30
 8008c5c:	d06a      	beq.n	8008d34 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008c5e:	e073      	b.n	8008d48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c60:	2b70      	cmp	r3, #112	; 0x70
 8008c62:	d00d      	beq.n	8008c80 <HAL_TIM_ConfigClockSource+0x8c>
 8008c64:	2b70      	cmp	r3, #112	; 0x70
 8008c66:	d804      	bhi.n	8008c72 <HAL_TIM_ConfigClockSource+0x7e>
 8008c68:	2b50      	cmp	r3, #80	; 0x50
 8008c6a:	d033      	beq.n	8008cd4 <HAL_TIM_ConfigClockSource+0xe0>
 8008c6c:	2b60      	cmp	r3, #96	; 0x60
 8008c6e:	d041      	beq.n	8008cf4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008c70:	e06a      	b.n	8008d48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c76:	d066      	beq.n	8008d46 <HAL_TIM_ConfigClockSource+0x152>
 8008c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c7c:	d017      	beq.n	8008cae <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008c7e:	e063      	b.n	8008d48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6818      	ldr	r0, [r3, #0]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	6899      	ldr	r1, [r3, #8]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f000 fb16 	bl	80092c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ca2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	609a      	str	r2, [r3, #8]
      break;
 8008cac:	e04c      	b.n	8008d48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6818      	ldr	r0, [r3, #0]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	6899      	ldr	r1, [r3, #8]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f000 faff 	bl	80092c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cd0:	609a      	str	r2, [r3, #8]
      break;
 8008cd2:	e039      	b.n	8008d48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6818      	ldr	r0, [r3, #0]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	6859      	ldr	r1, [r3, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f000 fa73 	bl	80091cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2150      	movs	r1, #80	; 0x50
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 facc 	bl	800928a <TIM_ITRx_SetConfig>
      break;
 8008cf2:	e029      	b.n	8008d48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6818      	ldr	r0, [r3, #0]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	6859      	ldr	r1, [r3, #4]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	461a      	mov	r2, r3
 8008d02:	f000 fa92 	bl	800922a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2160      	movs	r1, #96	; 0x60
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fabc 	bl	800928a <TIM_ITRx_SetConfig>
      break;
 8008d12:	e019      	b.n	8008d48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6818      	ldr	r0, [r3, #0]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	6859      	ldr	r1, [r3, #4]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	461a      	mov	r2, r3
 8008d22:	f000 fa53 	bl	80091cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2140      	movs	r1, #64	; 0x40
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f000 faac 	bl	800928a <TIM_ITRx_SetConfig>
      break;
 8008d32:	e009      	b.n	8008d48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	f000 faa3 	bl	800928a <TIM_ITRx_SetConfig>
      break;
 8008d44:	e000      	b.n	8008d48 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d6a:	bf00      	nop
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d76:	b480      	push	{r7}
 8008d78:	b083      	sub	sp, #12
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d7e:	bf00      	nop
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b083      	sub	sp, #12
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008da6:	bf00      	nop
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
	...

08008db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a34      	ldr	r2, [pc, #208]	; (8008e98 <TIM_Base_SetConfig+0xe4>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00f      	beq.n	8008dec <TIM_Base_SetConfig+0x38>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dd2:	d00b      	beq.n	8008dec <TIM_Base_SetConfig+0x38>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a31      	ldr	r2, [pc, #196]	; (8008e9c <TIM_Base_SetConfig+0xe8>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d007      	beq.n	8008dec <TIM_Base_SetConfig+0x38>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a30      	ldr	r2, [pc, #192]	; (8008ea0 <TIM_Base_SetConfig+0xec>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d003      	beq.n	8008dec <TIM_Base_SetConfig+0x38>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a2f      	ldr	r2, [pc, #188]	; (8008ea4 <TIM_Base_SetConfig+0xf0>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d108      	bne.n	8008dfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a25      	ldr	r2, [pc, #148]	; (8008e98 <TIM_Base_SetConfig+0xe4>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d01b      	beq.n	8008e3e <TIM_Base_SetConfig+0x8a>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e0c:	d017      	beq.n	8008e3e <TIM_Base_SetConfig+0x8a>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a22      	ldr	r2, [pc, #136]	; (8008e9c <TIM_Base_SetConfig+0xe8>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d013      	beq.n	8008e3e <TIM_Base_SetConfig+0x8a>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a21      	ldr	r2, [pc, #132]	; (8008ea0 <TIM_Base_SetConfig+0xec>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d00f      	beq.n	8008e3e <TIM_Base_SetConfig+0x8a>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a20      	ldr	r2, [pc, #128]	; (8008ea4 <TIM_Base_SetConfig+0xf0>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d00b      	beq.n	8008e3e <TIM_Base_SetConfig+0x8a>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a1f      	ldr	r2, [pc, #124]	; (8008ea8 <TIM_Base_SetConfig+0xf4>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d007      	beq.n	8008e3e <TIM_Base_SetConfig+0x8a>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a1e      	ldr	r2, [pc, #120]	; (8008eac <TIM_Base_SetConfig+0xf8>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d003      	beq.n	8008e3e <TIM_Base_SetConfig+0x8a>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a1d      	ldr	r2, [pc, #116]	; (8008eb0 <TIM_Base_SetConfig+0xfc>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d108      	bne.n	8008e50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a08      	ldr	r2, [pc, #32]	; (8008e98 <TIM_Base_SetConfig+0xe4>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d103      	bne.n	8008e84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	691a      	ldr	r2, [r3, #16]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	615a      	str	r2, [r3, #20]
}
 8008e8a:	bf00      	nop
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	40010000 	.word	0x40010000
 8008e9c:	40000400 	.word	0x40000400
 8008ea0:	40000800 	.word	0x40000800
 8008ea4:	40000c00 	.word	0x40000c00
 8008ea8:	40014000 	.word	0x40014000
 8008eac:	40014400 	.word	0x40014400
 8008eb0:	40014800 	.word	0x40014800

08008eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b087      	sub	sp, #28
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	f023 0201 	bic.w	r2, r3, #1
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f023 0302 	bic.w	r3, r3, #2
 8008efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a1c      	ldr	r2, [pc, #112]	; (8008f7c <TIM_OC1_SetConfig+0xc8>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10c      	bne.n	8008f2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f023 0308 	bic.w	r3, r3, #8
 8008f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f023 0304 	bic.w	r3, r3, #4
 8008f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a13      	ldr	r2, [pc, #76]	; (8008f7c <TIM_OC1_SetConfig+0xc8>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d111      	bne.n	8008f56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	621a      	str	r2, [r3, #32]
}
 8008f70:	bf00      	nop
 8008f72:	371c      	adds	r7, #28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	40010000 	.word	0x40010000

08008f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	f023 0210 	bic.w	r2, r3, #16
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f023 0320 	bic.w	r3, r3, #32
 8008fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	011b      	lsls	r3, r3, #4
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a1e      	ldr	r2, [pc, #120]	; (8009054 <TIM_OC2_SetConfig+0xd4>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d10d      	bne.n	8008ffc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	011b      	lsls	r3, r3, #4
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ffa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a15      	ldr	r2, [pc, #84]	; (8009054 <TIM_OC2_SetConfig+0xd4>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d113      	bne.n	800902c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800900a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	695b      	ldr	r3, [r3, #20]
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	4313      	orrs	r3, r2
 800901e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	4313      	orrs	r3, r2
 800902a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	621a      	str	r2, [r3, #32]
}
 8009046:	bf00      	nop
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	40010000 	.word	0x40010000

08009058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f023 0303 	bic.w	r3, r3, #3
 800908e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	4313      	orrs	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	021b      	lsls	r3, r3, #8
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a1d      	ldr	r2, [pc, #116]	; (8009128 <TIM_OC3_SetConfig+0xd0>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d10d      	bne.n	80090d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	021b      	lsls	r3, r3, #8
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a14      	ldr	r2, [pc, #80]	; (8009128 <TIM_OC3_SetConfig+0xd0>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d113      	bne.n	8009102 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	011b      	lsls	r3, r3, #4
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	4313      	orrs	r3, r2
 8009100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	621a      	str	r2, [r3, #32]
}
 800911c:	bf00      	nop
 800911e:	371c      	adds	r7, #28
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	40010000 	.word	0x40010000

0800912c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	69db      	ldr	r3, [r3, #28]
 8009152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800915a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	021b      	lsls	r3, r3, #8
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	4313      	orrs	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	031b      	lsls	r3, r3, #12
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	4313      	orrs	r3, r2
 8009182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a10      	ldr	r2, [pc, #64]	; (80091c8 <TIM_OC4_SetConfig+0x9c>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d109      	bne.n	80091a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	695b      	ldr	r3, [r3, #20]
 8009198:	019b      	lsls	r3, r3, #6
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	4313      	orrs	r3, r2
 800919e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	621a      	str	r2, [r3, #32]
}
 80091ba:	bf00      	nop
 80091bc:	371c      	adds	r7, #28
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	40010000 	.word	0x40010000

080091cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	f023 0201 	bic.w	r2, r3, #1
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	011b      	lsls	r3, r3, #4
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	4313      	orrs	r3, r2
 8009200:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f023 030a 	bic.w	r3, r3, #10
 8009208:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	4313      	orrs	r3, r2
 8009210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	621a      	str	r2, [r3, #32]
}
 800921e:	bf00      	nop
 8009220:	371c      	adds	r7, #28
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800922a:	b480      	push	{r7}
 800922c:	b087      	sub	sp, #28
 800922e:	af00      	add	r7, sp, #0
 8009230:	60f8      	str	r0, [r7, #12]
 8009232:	60b9      	str	r1, [r7, #8]
 8009234:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	f023 0210 	bic.w	r2, r3, #16
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6a1b      	ldr	r3, [r3, #32]
 800924c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009254:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	031b      	lsls	r3, r3, #12
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	4313      	orrs	r3, r2
 800925e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009266:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	011b      	lsls	r3, r3, #4
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	4313      	orrs	r3, r2
 8009270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	621a      	str	r2, [r3, #32]
}
 800927e:	bf00      	nop
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800928a:	b480      	push	{r7}
 800928c:	b085      	sub	sp, #20
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	f043 0307 	orr.w	r3, r3, #7
 80092ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	609a      	str	r2, [r3, #8]
}
 80092b4:	bf00      	nop
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	021a      	lsls	r2, r3, #8
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	431a      	orrs	r2, r3
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	609a      	str	r2, [r3, #8]
}
 80092f4:	bf00      	nop
 80092f6:	371c      	adds	r7, #28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	f003 031f 	and.w	r3, r3, #31
 8009312:	2201      	movs	r2, #1
 8009314:	fa02 f303 	lsl.w	r3, r2, r3
 8009318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6a1a      	ldr	r2, [r3, #32]
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	43db      	mvns	r3, r3
 8009322:	401a      	ands	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6a1a      	ldr	r2, [r3, #32]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	f003 031f 	and.w	r3, r3, #31
 8009332:	6879      	ldr	r1, [r7, #4]
 8009334:	fa01 f303 	lsl.w	r3, r1, r3
 8009338:	431a      	orrs	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	621a      	str	r2, [r3, #32]
}
 800933e:	bf00      	nop
 8009340:	371c      	adds	r7, #28
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
	...

0800934c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800935c:	2b01      	cmp	r3, #1
 800935e:	d101      	bne.n	8009364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009360:	2302      	movs	r3, #2
 8009362:	e050      	b.n	8009406 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2202      	movs	r2, #2
 8009370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800938a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	4313      	orrs	r3, r2
 8009394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a1c      	ldr	r2, [pc, #112]	; (8009414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d018      	beq.n	80093da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b0:	d013      	beq.n	80093da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a18      	ldr	r2, [pc, #96]	; (8009418 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d00e      	beq.n	80093da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a16      	ldr	r2, [pc, #88]	; (800941c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d009      	beq.n	80093da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a15      	ldr	r2, [pc, #84]	; (8009420 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d004      	beq.n	80093da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a13      	ldr	r2, [pc, #76]	; (8009424 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d10c      	bne.n	80093f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	40010000 	.word	0x40010000
 8009418:	40000400 	.word	0x40000400
 800941c:	40000800 	.word	0x40000800
 8009420:	40000c00 	.word	0x40000c00
 8009424:	40014000 	.word	0x40014000

08009428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e03f      	b.n	80094e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d106      	bne.n	800947c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7f9 fe32 	bl	80030e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2224      	movs	r2, #36	; 0x24
 8009480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f90b 	bl	80096b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	695a      	ldr	r2, [r3, #20]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2220      	movs	r2, #32
 80094d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2220      	movs	r2, #32
 80094dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b088      	sub	sp, #32
 80094ee:	af02      	add	r7, sp, #8
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	60b9      	str	r1, [r7, #8]
 80094f4:	603b      	str	r3, [r7, #0]
 80094f6:	4613      	mov	r3, r2
 80094f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b20      	cmp	r3, #32
 8009508:	f040 8083 	bne.w	8009612 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <HAL_UART_Transmit+0x2e>
 8009512:	88fb      	ldrh	r3, [r7, #6]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d101      	bne.n	800951c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	e07b      	b.n	8009614 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009522:	2b01      	cmp	r3, #1
 8009524:	d101      	bne.n	800952a <HAL_UART_Transmit+0x40>
 8009526:	2302      	movs	r3, #2
 8009528:	e074      	b.n	8009614 <HAL_UART_Transmit+0x12a>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2221      	movs	r2, #33	; 0x21
 800953c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009540:	f7fb fcb8 	bl	8004eb4 <HAL_GetTick>
 8009544:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	88fa      	ldrh	r2, [r7, #6]
 800954a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	88fa      	ldrh	r2, [r7, #6]
 8009550:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800955a:	e042      	b.n	80095e2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009560:	b29b      	uxth	r3, r3
 8009562:	3b01      	subs	r3, #1
 8009564:	b29a      	uxth	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009572:	d122      	bne.n	80095ba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	2200      	movs	r2, #0
 800957c:	2180      	movs	r1, #128	; 0x80
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 f84c 	bl	800961c <UART_WaitOnFlagUntilTimeout>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e042      	b.n	8009614 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	881b      	ldrh	r3, [r3, #0]
 8009596:	461a      	mov	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095a0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d103      	bne.n	80095b2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	3302      	adds	r3, #2
 80095ae:	60bb      	str	r3, [r7, #8]
 80095b0:	e017      	b.n	80095e2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	3301      	adds	r3, #1
 80095b6:	60bb      	str	r3, [r7, #8]
 80095b8:	e013      	b.n	80095e2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	2200      	movs	r2, #0
 80095c2:	2180      	movs	r1, #128	; 0x80
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 f829 	bl	800961c <UART_WaitOnFlagUntilTimeout>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e01f      	b.n	8009614 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	60ba      	str	r2, [r7, #8]
 80095da:	781a      	ldrb	r2, [r3, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1b7      	bne.n	800955c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	2200      	movs	r2, #0
 80095f4:	2140      	movs	r1, #64	; 0x40
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f000 f810 	bl	800961c <UART_WaitOnFlagUntilTimeout>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e006      	b.n	8009614 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2220      	movs	r2, #32
 800960a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	e000      	b.n	8009614 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009612:	2302      	movs	r3, #2
  }
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	4613      	mov	r3, r2
 800962a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800962c:	e02c      	b.n	8009688 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009634:	d028      	beq.n	8009688 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d007      	beq.n	800964c <UART_WaitOnFlagUntilTimeout+0x30>
 800963c:	f7fb fc3a 	bl	8004eb4 <HAL_GetTick>
 8009640:	4602      	mov	r2, r0
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	429a      	cmp	r2, r3
 800964a:	d21d      	bcs.n	8009688 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68da      	ldr	r2, [r3, #12]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800965a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	695a      	ldr	r2, [r3, #20]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0201 	bic.w	r2, r2, #1
 800966a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2220      	movs	r2, #32
 8009670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2220      	movs	r2, #32
 8009678:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e00f      	b.n	80096a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	4013      	ands	r3, r2
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	429a      	cmp	r2, r3
 8009696:	bf0c      	ite	eq
 8009698:	2301      	moveq	r3, #1
 800969a:	2300      	movne	r3, #0
 800969c:	b2db      	uxtb	r3, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d0c3      	beq.n	800962e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	b085      	sub	sp, #20
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	68da      	ldr	r2, [r3, #12]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	430a      	orrs	r2, r1
 80096ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	689a      	ldr	r2, [r3, #8]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	431a      	orrs	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	431a      	orrs	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80096f2:	f023 030c 	bic.w	r3, r3, #12
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	6812      	ldr	r2, [r2, #0]
 80096fa:	68f9      	ldr	r1, [r7, #12]
 80096fc:	430b      	orrs	r3, r1
 80096fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	699a      	ldr	r2, [r3, #24]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800971e:	f040 818b 	bne.w	8009a38 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4ac1      	ldr	r2, [pc, #772]	; (8009a2c <UART_SetConfig+0x37c>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d005      	beq.n	8009738 <UART_SetConfig+0x88>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4abf      	ldr	r2, [pc, #764]	; (8009a30 <UART_SetConfig+0x380>)
 8009732:	4293      	cmp	r3, r2
 8009734:	f040 80bd 	bne.w	80098b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009738:	f7fe ff78 	bl	800862c <HAL_RCC_GetPCLK2Freq>
 800973c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	461d      	mov	r5, r3
 8009742:	f04f 0600 	mov.w	r6, #0
 8009746:	46a8      	mov	r8, r5
 8009748:	46b1      	mov	r9, r6
 800974a:	eb18 0308 	adds.w	r3, r8, r8
 800974e:	eb49 0409 	adc.w	r4, r9, r9
 8009752:	4698      	mov	r8, r3
 8009754:	46a1      	mov	r9, r4
 8009756:	eb18 0805 	adds.w	r8, r8, r5
 800975a:	eb49 0906 	adc.w	r9, r9, r6
 800975e:	f04f 0100 	mov.w	r1, #0
 8009762:	f04f 0200 	mov.w	r2, #0
 8009766:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800976a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800976e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009772:	4688      	mov	r8, r1
 8009774:	4691      	mov	r9, r2
 8009776:	eb18 0005 	adds.w	r0, r8, r5
 800977a:	eb49 0106 	adc.w	r1, r9, r6
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	461d      	mov	r5, r3
 8009784:	f04f 0600 	mov.w	r6, #0
 8009788:	196b      	adds	r3, r5, r5
 800978a:	eb46 0406 	adc.w	r4, r6, r6
 800978e:	461a      	mov	r2, r3
 8009790:	4623      	mov	r3, r4
 8009792:	f7f7 fa61 	bl	8000c58 <__aeabi_uldivmod>
 8009796:	4603      	mov	r3, r0
 8009798:	460c      	mov	r4, r1
 800979a:	461a      	mov	r2, r3
 800979c:	4ba5      	ldr	r3, [pc, #660]	; (8009a34 <UART_SetConfig+0x384>)
 800979e:	fba3 2302 	umull	r2, r3, r3, r2
 80097a2:	095b      	lsrs	r3, r3, #5
 80097a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	461d      	mov	r5, r3
 80097ac:	f04f 0600 	mov.w	r6, #0
 80097b0:	46a9      	mov	r9, r5
 80097b2:	46b2      	mov	sl, r6
 80097b4:	eb19 0309 	adds.w	r3, r9, r9
 80097b8:	eb4a 040a 	adc.w	r4, sl, sl
 80097bc:	4699      	mov	r9, r3
 80097be:	46a2      	mov	sl, r4
 80097c0:	eb19 0905 	adds.w	r9, r9, r5
 80097c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80097c8:	f04f 0100 	mov.w	r1, #0
 80097cc:	f04f 0200 	mov.w	r2, #0
 80097d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097dc:	4689      	mov	r9, r1
 80097de:	4692      	mov	sl, r2
 80097e0:	eb19 0005 	adds.w	r0, r9, r5
 80097e4:	eb4a 0106 	adc.w	r1, sl, r6
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	461d      	mov	r5, r3
 80097ee:	f04f 0600 	mov.w	r6, #0
 80097f2:	196b      	adds	r3, r5, r5
 80097f4:	eb46 0406 	adc.w	r4, r6, r6
 80097f8:	461a      	mov	r2, r3
 80097fa:	4623      	mov	r3, r4
 80097fc:	f7f7 fa2c 	bl	8000c58 <__aeabi_uldivmod>
 8009800:	4603      	mov	r3, r0
 8009802:	460c      	mov	r4, r1
 8009804:	461a      	mov	r2, r3
 8009806:	4b8b      	ldr	r3, [pc, #556]	; (8009a34 <UART_SetConfig+0x384>)
 8009808:	fba3 1302 	umull	r1, r3, r3, r2
 800980c:	095b      	lsrs	r3, r3, #5
 800980e:	2164      	movs	r1, #100	; 0x64
 8009810:	fb01 f303 	mul.w	r3, r1, r3
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	00db      	lsls	r3, r3, #3
 8009818:	3332      	adds	r3, #50	; 0x32
 800981a:	4a86      	ldr	r2, [pc, #536]	; (8009a34 <UART_SetConfig+0x384>)
 800981c:	fba2 2303 	umull	r2, r3, r2, r3
 8009820:	095b      	lsrs	r3, r3, #5
 8009822:	005b      	lsls	r3, r3, #1
 8009824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009828:	4498      	add	r8, r3
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	461d      	mov	r5, r3
 800982e:	f04f 0600 	mov.w	r6, #0
 8009832:	46a9      	mov	r9, r5
 8009834:	46b2      	mov	sl, r6
 8009836:	eb19 0309 	adds.w	r3, r9, r9
 800983a:	eb4a 040a 	adc.w	r4, sl, sl
 800983e:	4699      	mov	r9, r3
 8009840:	46a2      	mov	sl, r4
 8009842:	eb19 0905 	adds.w	r9, r9, r5
 8009846:	eb4a 0a06 	adc.w	sl, sl, r6
 800984a:	f04f 0100 	mov.w	r1, #0
 800984e:	f04f 0200 	mov.w	r2, #0
 8009852:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009856:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800985a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800985e:	4689      	mov	r9, r1
 8009860:	4692      	mov	sl, r2
 8009862:	eb19 0005 	adds.w	r0, r9, r5
 8009866:	eb4a 0106 	adc.w	r1, sl, r6
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	461d      	mov	r5, r3
 8009870:	f04f 0600 	mov.w	r6, #0
 8009874:	196b      	adds	r3, r5, r5
 8009876:	eb46 0406 	adc.w	r4, r6, r6
 800987a:	461a      	mov	r2, r3
 800987c:	4623      	mov	r3, r4
 800987e:	f7f7 f9eb 	bl	8000c58 <__aeabi_uldivmod>
 8009882:	4603      	mov	r3, r0
 8009884:	460c      	mov	r4, r1
 8009886:	461a      	mov	r2, r3
 8009888:	4b6a      	ldr	r3, [pc, #424]	; (8009a34 <UART_SetConfig+0x384>)
 800988a:	fba3 1302 	umull	r1, r3, r3, r2
 800988e:	095b      	lsrs	r3, r3, #5
 8009890:	2164      	movs	r1, #100	; 0x64
 8009892:	fb01 f303 	mul.w	r3, r1, r3
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	00db      	lsls	r3, r3, #3
 800989a:	3332      	adds	r3, #50	; 0x32
 800989c:	4a65      	ldr	r2, [pc, #404]	; (8009a34 <UART_SetConfig+0x384>)
 800989e:	fba2 2303 	umull	r2, r3, r2, r3
 80098a2:	095b      	lsrs	r3, r3, #5
 80098a4:	f003 0207 	and.w	r2, r3, #7
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4442      	add	r2, r8
 80098ae:	609a      	str	r2, [r3, #8]
 80098b0:	e26f      	b.n	8009d92 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098b2:	f7fe fea7 	bl	8008604 <HAL_RCC_GetPCLK1Freq>
 80098b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	461d      	mov	r5, r3
 80098bc:	f04f 0600 	mov.w	r6, #0
 80098c0:	46a8      	mov	r8, r5
 80098c2:	46b1      	mov	r9, r6
 80098c4:	eb18 0308 	adds.w	r3, r8, r8
 80098c8:	eb49 0409 	adc.w	r4, r9, r9
 80098cc:	4698      	mov	r8, r3
 80098ce:	46a1      	mov	r9, r4
 80098d0:	eb18 0805 	adds.w	r8, r8, r5
 80098d4:	eb49 0906 	adc.w	r9, r9, r6
 80098d8:	f04f 0100 	mov.w	r1, #0
 80098dc:	f04f 0200 	mov.w	r2, #0
 80098e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80098e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80098e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80098ec:	4688      	mov	r8, r1
 80098ee:	4691      	mov	r9, r2
 80098f0:	eb18 0005 	adds.w	r0, r8, r5
 80098f4:	eb49 0106 	adc.w	r1, r9, r6
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	461d      	mov	r5, r3
 80098fe:	f04f 0600 	mov.w	r6, #0
 8009902:	196b      	adds	r3, r5, r5
 8009904:	eb46 0406 	adc.w	r4, r6, r6
 8009908:	461a      	mov	r2, r3
 800990a:	4623      	mov	r3, r4
 800990c:	f7f7 f9a4 	bl	8000c58 <__aeabi_uldivmod>
 8009910:	4603      	mov	r3, r0
 8009912:	460c      	mov	r4, r1
 8009914:	461a      	mov	r2, r3
 8009916:	4b47      	ldr	r3, [pc, #284]	; (8009a34 <UART_SetConfig+0x384>)
 8009918:	fba3 2302 	umull	r2, r3, r3, r2
 800991c:	095b      	lsrs	r3, r3, #5
 800991e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	461d      	mov	r5, r3
 8009926:	f04f 0600 	mov.w	r6, #0
 800992a:	46a9      	mov	r9, r5
 800992c:	46b2      	mov	sl, r6
 800992e:	eb19 0309 	adds.w	r3, r9, r9
 8009932:	eb4a 040a 	adc.w	r4, sl, sl
 8009936:	4699      	mov	r9, r3
 8009938:	46a2      	mov	sl, r4
 800993a:	eb19 0905 	adds.w	r9, r9, r5
 800993e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009942:	f04f 0100 	mov.w	r1, #0
 8009946:	f04f 0200 	mov.w	r2, #0
 800994a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800994e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009952:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009956:	4689      	mov	r9, r1
 8009958:	4692      	mov	sl, r2
 800995a:	eb19 0005 	adds.w	r0, r9, r5
 800995e:	eb4a 0106 	adc.w	r1, sl, r6
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	461d      	mov	r5, r3
 8009968:	f04f 0600 	mov.w	r6, #0
 800996c:	196b      	adds	r3, r5, r5
 800996e:	eb46 0406 	adc.w	r4, r6, r6
 8009972:	461a      	mov	r2, r3
 8009974:	4623      	mov	r3, r4
 8009976:	f7f7 f96f 	bl	8000c58 <__aeabi_uldivmod>
 800997a:	4603      	mov	r3, r0
 800997c:	460c      	mov	r4, r1
 800997e:	461a      	mov	r2, r3
 8009980:	4b2c      	ldr	r3, [pc, #176]	; (8009a34 <UART_SetConfig+0x384>)
 8009982:	fba3 1302 	umull	r1, r3, r3, r2
 8009986:	095b      	lsrs	r3, r3, #5
 8009988:	2164      	movs	r1, #100	; 0x64
 800998a:	fb01 f303 	mul.w	r3, r1, r3
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	3332      	adds	r3, #50	; 0x32
 8009994:	4a27      	ldr	r2, [pc, #156]	; (8009a34 <UART_SetConfig+0x384>)
 8009996:	fba2 2303 	umull	r2, r3, r2, r3
 800999a:	095b      	lsrs	r3, r3, #5
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80099a2:	4498      	add	r8, r3
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	461d      	mov	r5, r3
 80099a8:	f04f 0600 	mov.w	r6, #0
 80099ac:	46a9      	mov	r9, r5
 80099ae:	46b2      	mov	sl, r6
 80099b0:	eb19 0309 	adds.w	r3, r9, r9
 80099b4:	eb4a 040a 	adc.w	r4, sl, sl
 80099b8:	4699      	mov	r9, r3
 80099ba:	46a2      	mov	sl, r4
 80099bc:	eb19 0905 	adds.w	r9, r9, r5
 80099c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80099c4:	f04f 0100 	mov.w	r1, #0
 80099c8:	f04f 0200 	mov.w	r2, #0
 80099cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80099d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80099d8:	4689      	mov	r9, r1
 80099da:	4692      	mov	sl, r2
 80099dc:	eb19 0005 	adds.w	r0, r9, r5
 80099e0:	eb4a 0106 	adc.w	r1, sl, r6
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	461d      	mov	r5, r3
 80099ea:	f04f 0600 	mov.w	r6, #0
 80099ee:	196b      	adds	r3, r5, r5
 80099f0:	eb46 0406 	adc.w	r4, r6, r6
 80099f4:	461a      	mov	r2, r3
 80099f6:	4623      	mov	r3, r4
 80099f8:	f7f7 f92e 	bl	8000c58 <__aeabi_uldivmod>
 80099fc:	4603      	mov	r3, r0
 80099fe:	460c      	mov	r4, r1
 8009a00:	461a      	mov	r2, r3
 8009a02:	4b0c      	ldr	r3, [pc, #48]	; (8009a34 <UART_SetConfig+0x384>)
 8009a04:	fba3 1302 	umull	r1, r3, r3, r2
 8009a08:	095b      	lsrs	r3, r3, #5
 8009a0a:	2164      	movs	r1, #100	; 0x64
 8009a0c:	fb01 f303 	mul.w	r3, r1, r3
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	3332      	adds	r3, #50	; 0x32
 8009a16:	4a07      	ldr	r2, [pc, #28]	; (8009a34 <UART_SetConfig+0x384>)
 8009a18:	fba2 2303 	umull	r2, r3, r2, r3
 8009a1c:	095b      	lsrs	r3, r3, #5
 8009a1e:	f003 0207 	and.w	r2, r3, #7
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4442      	add	r2, r8
 8009a28:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009a2a:	e1b2      	b.n	8009d92 <UART_SetConfig+0x6e2>
 8009a2c:	40011000 	.word	0x40011000
 8009a30:	40011400 	.word	0x40011400
 8009a34:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4ad7      	ldr	r2, [pc, #860]	; (8009d9c <UART_SetConfig+0x6ec>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d005      	beq.n	8009a4e <UART_SetConfig+0x39e>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4ad6      	ldr	r2, [pc, #856]	; (8009da0 <UART_SetConfig+0x6f0>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	f040 80d1 	bne.w	8009bf0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a4e:	f7fe fded 	bl	800862c <HAL_RCC_GetPCLK2Freq>
 8009a52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	469a      	mov	sl, r3
 8009a58:	f04f 0b00 	mov.w	fp, #0
 8009a5c:	46d0      	mov	r8, sl
 8009a5e:	46d9      	mov	r9, fp
 8009a60:	eb18 0308 	adds.w	r3, r8, r8
 8009a64:	eb49 0409 	adc.w	r4, r9, r9
 8009a68:	4698      	mov	r8, r3
 8009a6a:	46a1      	mov	r9, r4
 8009a6c:	eb18 080a 	adds.w	r8, r8, sl
 8009a70:	eb49 090b 	adc.w	r9, r9, fp
 8009a74:	f04f 0100 	mov.w	r1, #0
 8009a78:	f04f 0200 	mov.w	r2, #0
 8009a7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009a80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009a84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009a88:	4688      	mov	r8, r1
 8009a8a:	4691      	mov	r9, r2
 8009a8c:	eb1a 0508 	adds.w	r5, sl, r8
 8009a90:	eb4b 0609 	adc.w	r6, fp, r9
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	4619      	mov	r1, r3
 8009a9a:	f04f 0200 	mov.w	r2, #0
 8009a9e:	f04f 0300 	mov.w	r3, #0
 8009aa2:	f04f 0400 	mov.w	r4, #0
 8009aa6:	0094      	lsls	r4, r2, #2
 8009aa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009aac:	008b      	lsls	r3, r1, #2
 8009aae:	461a      	mov	r2, r3
 8009ab0:	4623      	mov	r3, r4
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	4631      	mov	r1, r6
 8009ab6:	f7f7 f8cf 	bl	8000c58 <__aeabi_uldivmod>
 8009aba:	4603      	mov	r3, r0
 8009abc:	460c      	mov	r4, r1
 8009abe:	461a      	mov	r2, r3
 8009ac0:	4bb8      	ldr	r3, [pc, #736]	; (8009da4 <UART_SetConfig+0x6f4>)
 8009ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8009ac6:	095b      	lsrs	r3, r3, #5
 8009ac8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	469b      	mov	fp, r3
 8009ad0:	f04f 0c00 	mov.w	ip, #0
 8009ad4:	46d9      	mov	r9, fp
 8009ad6:	46e2      	mov	sl, ip
 8009ad8:	eb19 0309 	adds.w	r3, r9, r9
 8009adc:	eb4a 040a 	adc.w	r4, sl, sl
 8009ae0:	4699      	mov	r9, r3
 8009ae2:	46a2      	mov	sl, r4
 8009ae4:	eb19 090b 	adds.w	r9, r9, fp
 8009ae8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009aec:	f04f 0100 	mov.w	r1, #0
 8009af0:	f04f 0200 	mov.w	r2, #0
 8009af4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009af8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009afc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b00:	4689      	mov	r9, r1
 8009b02:	4692      	mov	sl, r2
 8009b04:	eb1b 0509 	adds.w	r5, fp, r9
 8009b08:	eb4c 060a 	adc.w	r6, ip, sl
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	4619      	mov	r1, r3
 8009b12:	f04f 0200 	mov.w	r2, #0
 8009b16:	f04f 0300 	mov.w	r3, #0
 8009b1a:	f04f 0400 	mov.w	r4, #0
 8009b1e:	0094      	lsls	r4, r2, #2
 8009b20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009b24:	008b      	lsls	r3, r1, #2
 8009b26:	461a      	mov	r2, r3
 8009b28:	4623      	mov	r3, r4
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	f7f7 f893 	bl	8000c58 <__aeabi_uldivmod>
 8009b32:	4603      	mov	r3, r0
 8009b34:	460c      	mov	r4, r1
 8009b36:	461a      	mov	r2, r3
 8009b38:	4b9a      	ldr	r3, [pc, #616]	; (8009da4 <UART_SetConfig+0x6f4>)
 8009b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8009b3e:	095b      	lsrs	r3, r3, #5
 8009b40:	2164      	movs	r1, #100	; 0x64
 8009b42:	fb01 f303 	mul.w	r3, r1, r3
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	011b      	lsls	r3, r3, #4
 8009b4a:	3332      	adds	r3, #50	; 0x32
 8009b4c:	4a95      	ldr	r2, [pc, #596]	; (8009da4 <UART_SetConfig+0x6f4>)
 8009b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b52:	095b      	lsrs	r3, r3, #5
 8009b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b58:	4498      	add	r8, r3
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	469b      	mov	fp, r3
 8009b5e:	f04f 0c00 	mov.w	ip, #0
 8009b62:	46d9      	mov	r9, fp
 8009b64:	46e2      	mov	sl, ip
 8009b66:	eb19 0309 	adds.w	r3, r9, r9
 8009b6a:	eb4a 040a 	adc.w	r4, sl, sl
 8009b6e:	4699      	mov	r9, r3
 8009b70:	46a2      	mov	sl, r4
 8009b72:	eb19 090b 	adds.w	r9, r9, fp
 8009b76:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009b7a:	f04f 0100 	mov.w	r1, #0
 8009b7e:	f04f 0200 	mov.w	r2, #0
 8009b82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b8e:	4689      	mov	r9, r1
 8009b90:	4692      	mov	sl, r2
 8009b92:	eb1b 0509 	adds.w	r5, fp, r9
 8009b96:	eb4c 060a 	adc.w	r6, ip, sl
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	f04f 0200 	mov.w	r2, #0
 8009ba4:	f04f 0300 	mov.w	r3, #0
 8009ba8:	f04f 0400 	mov.w	r4, #0
 8009bac:	0094      	lsls	r4, r2, #2
 8009bae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009bb2:	008b      	lsls	r3, r1, #2
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	4623      	mov	r3, r4
 8009bb8:	4628      	mov	r0, r5
 8009bba:	4631      	mov	r1, r6
 8009bbc:	f7f7 f84c 	bl	8000c58 <__aeabi_uldivmod>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	4b77      	ldr	r3, [pc, #476]	; (8009da4 <UART_SetConfig+0x6f4>)
 8009bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8009bcc:	095b      	lsrs	r3, r3, #5
 8009bce:	2164      	movs	r1, #100	; 0x64
 8009bd0:	fb01 f303 	mul.w	r3, r1, r3
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	011b      	lsls	r3, r3, #4
 8009bd8:	3332      	adds	r3, #50	; 0x32
 8009bda:	4a72      	ldr	r2, [pc, #456]	; (8009da4 <UART_SetConfig+0x6f4>)
 8009bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009be0:	095b      	lsrs	r3, r3, #5
 8009be2:	f003 020f 	and.w	r2, r3, #15
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4442      	add	r2, r8
 8009bec:	609a      	str	r2, [r3, #8]
 8009bee:	e0d0      	b.n	8009d92 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009bf0:	f7fe fd08 	bl	8008604 <HAL_RCC_GetPCLK1Freq>
 8009bf4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	469a      	mov	sl, r3
 8009bfa:	f04f 0b00 	mov.w	fp, #0
 8009bfe:	46d0      	mov	r8, sl
 8009c00:	46d9      	mov	r9, fp
 8009c02:	eb18 0308 	adds.w	r3, r8, r8
 8009c06:	eb49 0409 	adc.w	r4, r9, r9
 8009c0a:	4698      	mov	r8, r3
 8009c0c:	46a1      	mov	r9, r4
 8009c0e:	eb18 080a 	adds.w	r8, r8, sl
 8009c12:	eb49 090b 	adc.w	r9, r9, fp
 8009c16:	f04f 0100 	mov.w	r1, #0
 8009c1a:	f04f 0200 	mov.w	r2, #0
 8009c1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009c22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009c26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009c2a:	4688      	mov	r8, r1
 8009c2c:	4691      	mov	r9, r2
 8009c2e:	eb1a 0508 	adds.w	r5, sl, r8
 8009c32:	eb4b 0609 	adc.w	r6, fp, r9
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	f04f 0200 	mov.w	r2, #0
 8009c40:	f04f 0300 	mov.w	r3, #0
 8009c44:	f04f 0400 	mov.w	r4, #0
 8009c48:	0094      	lsls	r4, r2, #2
 8009c4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009c4e:	008b      	lsls	r3, r1, #2
 8009c50:	461a      	mov	r2, r3
 8009c52:	4623      	mov	r3, r4
 8009c54:	4628      	mov	r0, r5
 8009c56:	4631      	mov	r1, r6
 8009c58:	f7f6 fffe 	bl	8000c58 <__aeabi_uldivmod>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	460c      	mov	r4, r1
 8009c60:	461a      	mov	r2, r3
 8009c62:	4b50      	ldr	r3, [pc, #320]	; (8009da4 <UART_SetConfig+0x6f4>)
 8009c64:	fba3 2302 	umull	r2, r3, r3, r2
 8009c68:	095b      	lsrs	r3, r3, #5
 8009c6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	469b      	mov	fp, r3
 8009c72:	f04f 0c00 	mov.w	ip, #0
 8009c76:	46d9      	mov	r9, fp
 8009c78:	46e2      	mov	sl, ip
 8009c7a:	eb19 0309 	adds.w	r3, r9, r9
 8009c7e:	eb4a 040a 	adc.w	r4, sl, sl
 8009c82:	4699      	mov	r9, r3
 8009c84:	46a2      	mov	sl, r4
 8009c86:	eb19 090b 	adds.w	r9, r9, fp
 8009c8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009c8e:	f04f 0100 	mov.w	r1, #0
 8009c92:	f04f 0200 	mov.w	r2, #0
 8009c96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009ca2:	4689      	mov	r9, r1
 8009ca4:	4692      	mov	sl, r2
 8009ca6:	eb1b 0509 	adds.w	r5, fp, r9
 8009caa:	eb4c 060a 	adc.w	r6, ip, sl
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	f04f 0200 	mov.w	r2, #0
 8009cb8:	f04f 0300 	mov.w	r3, #0
 8009cbc:	f04f 0400 	mov.w	r4, #0
 8009cc0:	0094      	lsls	r4, r2, #2
 8009cc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009cc6:	008b      	lsls	r3, r1, #2
 8009cc8:	461a      	mov	r2, r3
 8009cca:	4623      	mov	r3, r4
 8009ccc:	4628      	mov	r0, r5
 8009cce:	4631      	mov	r1, r6
 8009cd0:	f7f6 ffc2 	bl	8000c58 <__aeabi_uldivmod>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	461a      	mov	r2, r3
 8009cda:	4b32      	ldr	r3, [pc, #200]	; (8009da4 <UART_SetConfig+0x6f4>)
 8009cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8009ce0:	095b      	lsrs	r3, r3, #5
 8009ce2:	2164      	movs	r1, #100	; 0x64
 8009ce4:	fb01 f303 	mul.w	r3, r1, r3
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	011b      	lsls	r3, r3, #4
 8009cec:	3332      	adds	r3, #50	; 0x32
 8009cee:	4a2d      	ldr	r2, [pc, #180]	; (8009da4 <UART_SetConfig+0x6f4>)
 8009cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf4:	095b      	lsrs	r3, r3, #5
 8009cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cfa:	4498      	add	r8, r3
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	469b      	mov	fp, r3
 8009d00:	f04f 0c00 	mov.w	ip, #0
 8009d04:	46d9      	mov	r9, fp
 8009d06:	46e2      	mov	sl, ip
 8009d08:	eb19 0309 	adds.w	r3, r9, r9
 8009d0c:	eb4a 040a 	adc.w	r4, sl, sl
 8009d10:	4699      	mov	r9, r3
 8009d12:	46a2      	mov	sl, r4
 8009d14:	eb19 090b 	adds.w	r9, r9, fp
 8009d18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009d1c:	f04f 0100 	mov.w	r1, #0
 8009d20:	f04f 0200 	mov.w	r2, #0
 8009d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d30:	4689      	mov	r9, r1
 8009d32:	4692      	mov	sl, r2
 8009d34:	eb1b 0509 	adds.w	r5, fp, r9
 8009d38:	eb4c 060a 	adc.w	r6, ip, sl
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	4619      	mov	r1, r3
 8009d42:	f04f 0200 	mov.w	r2, #0
 8009d46:	f04f 0300 	mov.w	r3, #0
 8009d4a:	f04f 0400 	mov.w	r4, #0
 8009d4e:	0094      	lsls	r4, r2, #2
 8009d50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009d54:	008b      	lsls	r3, r1, #2
 8009d56:	461a      	mov	r2, r3
 8009d58:	4623      	mov	r3, r4
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	f7f6 ff7b 	bl	8000c58 <__aeabi_uldivmod>
 8009d62:	4603      	mov	r3, r0
 8009d64:	460c      	mov	r4, r1
 8009d66:	461a      	mov	r2, r3
 8009d68:	4b0e      	ldr	r3, [pc, #56]	; (8009da4 <UART_SetConfig+0x6f4>)
 8009d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8009d6e:	095b      	lsrs	r3, r3, #5
 8009d70:	2164      	movs	r1, #100	; 0x64
 8009d72:	fb01 f303 	mul.w	r3, r1, r3
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	011b      	lsls	r3, r3, #4
 8009d7a:	3332      	adds	r3, #50	; 0x32
 8009d7c:	4a09      	ldr	r2, [pc, #36]	; (8009da4 <UART_SetConfig+0x6f4>)
 8009d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d82:	095b      	lsrs	r3, r3, #5
 8009d84:	f003 020f 	and.w	r2, r3, #15
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4442      	add	r2, r8
 8009d8e:	609a      	str	r2, [r3, #8]
}
 8009d90:	e7ff      	b.n	8009d92 <UART_SetConfig+0x6e2>
 8009d92:	bf00      	nop
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9c:	40011000 	.word	0x40011000
 8009da0:	40011400 	.word	0x40011400
 8009da4:	51eb851f 	.word	0x51eb851f

08009da8 <gcvt>:
 8009da8:	b530      	push	{r4, r5, lr}
 8009daa:	ed2d 8b02 	vpush	{d8}
 8009dae:	eeb0 8a40 	vmov.f32	s16, s0
 8009db2:	eef0 8a60 	vmov.f32	s17, s1
 8009db6:	460c      	mov	r4, r1
 8009db8:	2200      	movs	r2, #0
 8009dba:	b083      	sub	sp, #12
 8009dbc:	4605      	mov	r5, r0
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	ec51 0b10 	vmov	r0, r1, d0
 8009dc4:	f7f6 fe92 	bl	8000aec <__aeabi_dcmplt>
 8009dc8:	4622      	mov	r2, r4
 8009dca:	b118      	cbz	r0, 8009dd4 <gcvt+0x2c>
 8009dcc:	232d      	movs	r3, #45	; 0x2d
 8009dce:	f802 3b01 	strb.w	r3, [r2], #1
 8009dd2:	3d01      	subs	r5, #1
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4809      	ldr	r0, [pc, #36]	; (8009dfc <gcvt+0x54>)
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	4629      	mov	r1, r5
 8009ddc:	2367      	movs	r3, #103	; 0x67
 8009dde:	eeb0 0a48 	vmov.f32	s0, s16
 8009de2:	eef0 0a68 	vmov.f32	s1, s17
 8009de6:	6800      	ldr	r0, [r0, #0]
 8009de8:	f001 fb86 	bl	800b4f8 <_gcvt>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	bf14      	ite	ne
 8009df0:	4620      	movne	r0, r4
 8009df2:	2000      	moveq	r0, #0
 8009df4:	b003      	add	sp, #12
 8009df6:	ecbd 8b02 	vpop	{d8}
 8009dfa:	bd30      	pop	{r4, r5, pc}
 8009dfc:	20000094 	.word	0x20000094

08009e00 <__errno>:
 8009e00:	4b01      	ldr	r3, [pc, #4]	; (8009e08 <__errno+0x8>)
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	20000094 	.word	0x20000094

08009e0c <__libc_init_array>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	4e0d      	ldr	r6, [pc, #52]	; (8009e44 <__libc_init_array+0x38>)
 8009e10:	4c0d      	ldr	r4, [pc, #52]	; (8009e48 <__libc_init_array+0x3c>)
 8009e12:	1ba4      	subs	r4, r4, r6
 8009e14:	10a4      	asrs	r4, r4, #2
 8009e16:	2500      	movs	r5, #0
 8009e18:	42a5      	cmp	r5, r4
 8009e1a:	d109      	bne.n	8009e30 <__libc_init_array+0x24>
 8009e1c:	4e0b      	ldr	r6, [pc, #44]	; (8009e4c <__libc_init_array+0x40>)
 8009e1e:	4c0c      	ldr	r4, [pc, #48]	; (8009e50 <__libc_init_array+0x44>)
 8009e20:	f002 fedc 	bl	800cbdc <_init>
 8009e24:	1ba4      	subs	r4, r4, r6
 8009e26:	10a4      	asrs	r4, r4, #2
 8009e28:	2500      	movs	r5, #0
 8009e2a:	42a5      	cmp	r5, r4
 8009e2c:	d105      	bne.n	8009e3a <__libc_init_array+0x2e>
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e34:	4798      	blx	r3
 8009e36:	3501      	adds	r5, #1
 8009e38:	e7ee      	b.n	8009e18 <__libc_init_array+0xc>
 8009e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e3e:	4798      	blx	r3
 8009e40:	3501      	adds	r5, #1
 8009e42:	e7f2      	b.n	8009e2a <__libc_init_array+0x1e>
 8009e44:	0800d028 	.word	0x0800d028
 8009e48:	0800d028 	.word	0x0800d028
 8009e4c:	0800d028 	.word	0x0800d028
 8009e50:	0800d02c 	.word	0x0800d02c

08009e54 <memset>:
 8009e54:	4402      	add	r2, r0
 8009e56:	4603      	mov	r3, r0
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d100      	bne.n	8009e5e <memset+0xa>
 8009e5c:	4770      	bx	lr
 8009e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e62:	e7f9      	b.n	8009e58 <memset+0x4>

08009e64 <__cvt>:
 8009e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e68:	ec55 4b10 	vmov	r4, r5, d0
 8009e6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009e6e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009e72:	2d00      	cmp	r5, #0
 8009e74:	460e      	mov	r6, r1
 8009e76:	4691      	mov	r9, r2
 8009e78:	4619      	mov	r1, r3
 8009e7a:	bfb8      	it	lt
 8009e7c:	4622      	movlt	r2, r4
 8009e7e:	462b      	mov	r3, r5
 8009e80:	f027 0720 	bic.w	r7, r7, #32
 8009e84:	bfbb      	ittet	lt
 8009e86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e8a:	461d      	movlt	r5, r3
 8009e8c:	2300      	movge	r3, #0
 8009e8e:	232d      	movlt	r3, #45	; 0x2d
 8009e90:	bfb8      	it	lt
 8009e92:	4614      	movlt	r4, r2
 8009e94:	2f46      	cmp	r7, #70	; 0x46
 8009e96:	700b      	strb	r3, [r1, #0]
 8009e98:	d004      	beq.n	8009ea4 <__cvt+0x40>
 8009e9a:	2f45      	cmp	r7, #69	; 0x45
 8009e9c:	d100      	bne.n	8009ea0 <__cvt+0x3c>
 8009e9e:	3601      	adds	r6, #1
 8009ea0:	2102      	movs	r1, #2
 8009ea2:	e000      	b.n	8009ea6 <__cvt+0x42>
 8009ea4:	2103      	movs	r1, #3
 8009ea6:	ab03      	add	r3, sp, #12
 8009ea8:	9301      	str	r3, [sp, #4]
 8009eaa:	ab02      	add	r3, sp, #8
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	4632      	mov	r2, r6
 8009eb0:	4653      	mov	r3, sl
 8009eb2:	ec45 4b10 	vmov	d0, r4, r5
 8009eb6:	f000 fcf3 	bl	800a8a0 <_dtoa_r>
 8009eba:	2f47      	cmp	r7, #71	; 0x47
 8009ebc:	4680      	mov	r8, r0
 8009ebe:	d102      	bne.n	8009ec6 <__cvt+0x62>
 8009ec0:	f019 0f01 	tst.w	r9, #1
 8009ec4:	d026      	beq.n	8009f14 <__cvt+0xb0>
 8009ec6:	2f46      	cmp	r7, #70	; 0x46
 8009ec8:	eb08 0906 	add.w	r9, r8, r6
 8009ecc:	d111      	bne.n	8009ef2 <__cvt+0x8e>
 8009ece:	f898 3000 	ldrb.w	r3, [r8]
 8009ed2:	2b30      	cmp	r3, #48	; 0x30
 8009ed4:	d10a      	bne.n	8009eec <__cvt+0x88>
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	2300      	movs	r3, #0
 8009eda:	4620      	mov	r0, r4
 8009edc:	4629      	mov	r1, r5
 8009ede:	f7f6 fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ee2:	b918      	cbnz	r0, 8009eec <__cvt+0x88>
 8009ee4:	f1c6 0601 	rsb	r6, r6, #1
 8009ee8:	f8ca 6000 	str.w	r6, [sl]
 8009eec:	f8da 3000 	ldr.w	r3, [sl]
 8009ef0:	4499      	add	r9, r3
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	4629      	mov	r1, r5
 8009efa:	f7f6 fded 	bl	8000ad8 <__aeabi_dcmpeq>
 8009efe:	b938      	cbnz	r0, 8009f10 <__cvt+0xac>
 8009f00:	2230      	movs	r2, #48	; 0x30
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	454b      	cmp	r3, r9
 8009f06:	d205      	bcs.n	8009f14 <__cvt+0xb0>
 8009f08:	1c59      	adds	r1, r3, #1
 8009f0a:	9103      	str	r1, [sp, #12]
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	e7f8      	b.n	8009f02 <__cvt+0x9e>
 8009f10:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f14:	9b03      	ldr	r3, [sp, #12]
 8009f16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f18:	eba3 0308 	sub.w	r3, r3, r8
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	b004      	add	sp, #16
 8009f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009f26 <__exponent>:
 8009f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f28:	2900      	cmp	r1, #0
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	bfba      	itte	lt
 8009f2e:	4249      	neglt	r1, r1
 8009f30:	232d      	movlt	r3, #45	; 0x2d
 8009f32:	232b      	movge	r3, #43	; 0x2b
 8009f34:	2909      	cmp	r1, #9
 8009f36:	f804 2b02 	strb.w	r2, [r4], #2
 8009f3a:	7043      	strb	r3, [r0, #1]
 8009f3c:	dd20      	ble.n	8009f80 <__exponent+0x5a>
 8009f3e:	f10d 0307 	add.w	r3, sp, #7
 8009f42:	461f      	mov	r7, r3
 8009f44:	260a      	movs	r6, #10
 8009f46:	fb91 f5f6 	sdiv	r5, r1, r6
 8009f4a:	fb06 1115 	mls	r1, r6, r5, r1
 8009f4e:	3130      	adds	r1, #48	; 0x30
 8009f50:	2d09      	cmp	r5, #9
 8009f52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f56:	f103 32ff 	add.w	r2, r3, #4294967295
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	dc09      	bgt.n	8009f72 <__exponent+0x4c>
 8009f5e:	3130      	adds	r1, #48	; 0x30
 8009f60:	3b02      	subs	r3, #2
 8009f62:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009f66:	42bb      	cmp	r3, r7
 8009f68:	4622      	mov	r2, r4
 8009f6a:	d304      	bcc.n	8009f76 <__exponent+0x50>
 8009f6c:	1a10      	subs	r0, r2, r0
 8009f6e:	b003      	add	sp, #12
 8009f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f72:	4613      	mov	r3, r2
 8009f74:	e7e7      	b.n	8009f46 <__exponent+0x20>
 8009f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f7a:	f804 2b01 	strb.w	r2, [r4], #1
 8009f7e:	e7f2      	b.n	8009f66 <__exponent+0x40>
 8009f80:	2330      	movs	r3, #48	; 0x30
 8009f82:	4419      	add	r1, r3
 8009f84:	7083      	strb	r3, [r0, #2]
 8009f86:	1d02      	adds	r2, r0, #4
 8009f88:	70c1      	strb	r1, [r0, #3]
 8009f8a:	e7ef      	b.n	8009f6c <__exponent+0x46>

08009f8c <_printf_float>:
 8009f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f90:	b08d      	sub	sp, #52	; 0x34
 8009f92:	460c      	mov	r4, r1
 8009f94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009f98:	4616      	mov	r6, r2
 8009f9a:	461f      	mov	r7, r3
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	f001 fb75 	bl	800b68c <_localeconv_r>
 8009fa2:	6803      	ldr	r3, [r0, #0]
 8009fa4:	9304      	str	r3, [sp, #16]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7f6 f91a 	bl	80001e0 <strlen>
 8009fac:	2300      	movs	r3, #0
 8009fae:	930a      	str	r3, [sp, #40]	; 0x28
 8009fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8009fb4:	9005      	str	r0, [sp, #20]
 8009fb6:	3307      	adds	r3, #7
 8009fb8:	f023 0307 	bic.w	r3, r3, #7
 8009fbc:	f103 0208 	add.w	r2, r3, #8
 8009fc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009fc4:	f8d4 b000 	ldr.w	fp, [r4]
 8009fc8:	f8c8 2000 	str.w	r2, [r8]
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009fd4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009fd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009fdc:	9307      	str	r3, [sp, #28]
 8009fde:	f8cd 8018 	str.w	r8, [sp, #24]
 8009fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe6:	4ba7      	ldr	r3, [pc, #668]	; (800a284 <_printf_float+0x2f8>)
 8009fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fec:	f7f6 fda6 	bl	8000b3c <__aeabi_dcmpun>
 8009ff0:	bb70      	cbnz	r0, 800a050 <_printf_float+0xc4>
 8009ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff6:	4ba3      	ldr	r3, [pc, #652]	; (800a284 <_printf_float+0x2f8>)
 8009ff8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ffc:	f7f6 fd80 	bl	8000b00 <__aeabi_dcmple>
 800a000:	bb30      	cbnz	r0, 800a050 <_printf_float+0xc4>
 800a002:	2200      	movs	r2, #0
 800a004:	2300      	movs	r3, #0
 800a006:	4640      	mov	r0, r8
 800a008:	4649      	mov	r1, r9
 800a00a:	f7f6 fd6f 	bl	8000aec <__aeabi_dcmplt>
 800a00e:	b110      	cbz	r0, 800a016 <_printf_float+0x8a>
 800a010:	232d      	movs	r3, #45	; 0x2d
 800a012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a016:	4a9c      	ldr	r2, [pc, #624]	; (800a288 <_printf_float+0x2fc>)
 800a018:	4b9c      	ldr	r3, [pc, #624]	; (800a28c <_printf_float+0x300>)
 800a01a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a01e:	bf8c      	ite	hi
 800a020:	4690      	movhi	r8, r2
 800a022:	4698      	movls	r8, r3
 800a024:	2303      	movs	r3, #3
 800a026:	f02b 0204 	bic.w	r2, fp, #4
 800a02a:	6123      	str	r3, [r4, #16]
 800a02c:	6022      	str	r2, [r4, #0]
 800a02e:	f04f 0900 	mov.w	r9, #0
 800a032:	9700      	str	r7, [sp, #0]
 800a034:	4633      	mov	r3, r6
 800a036:	aa0b      	add	r2, sp, #44	; 0x2c
 800a038:	4621      	mov	r1, r4
 800a03a:	4628      	mov	r0, r5
 800a03c:	f000 f9e6 	bl	800a40c <_printf_common>
 800a040:	3001      	adds	r0, #1
 800a042:	f040 808d 	bne.w	800a160 <_printf_float+0x1d4>
 800a046:	f04f 30ff 	mov.w	r0, #4294967295
 800a04a:	b00d      	add	sp, #52	; 0x34
 800a04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a050:	4642      	mov	r2, r8
 800a052:	464b      	mov	r3, r9
 800a054:	4640      	mov	r0, r8
 800a056:	4649      	mov	r1, r9
 800a058:	f7f6 fd70 	bl	8000b3c <__aeabi_dcmpun>
 800a05c:	b110      	cbz	r0, 800a064 <_printf_float+0xd8>
 800a05e:	4a8c      	ldr	r2, [pc, #560]	; (800a290 <_printf_float+0x304>)
 800a060:	4b8c      	ldr	r3, [pc, #560]	; (800a294 <_printf_float+0x308>)
 800a062:	e7da      	b.n	800a01a <_printf_float+0x8e>
 800a064:	6861      	ldr	r1, [r4, #4]
 800a066:	1c4b      	adds	r3, r1, #1
 800a068:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a06c:	a80a      	add	r0, sp, #40	; 0x28
 800a06e:	d13e      	bne.n	800a0ee <_printf_float+0x162>
 800a070:	2306      	movs	r3, #6
 800a072:	6063      	str	r3, [r4, #4]
 800a074:	2300      	movs	r3, #0
 800a076:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a07a:	ab09      	add	r3, sp, #36	; 0x24
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	ec49 8b10 	vmov	d0, r8, r9
 800a082:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a086:	6022      	str	r2, [r4, #0]
 800a088:	f8cd a004 	str.w	sl, [sp, #4]
 800a08c:	6861      	ldr	r1, [r4, #4]
 800a08e:	4628      	mov	r0, r5
 800a090:	f7ff fee8 	bl	8009e64 <__cvt>
 800a094:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a098:	2b47      	cmp	r3, #71	; 0x47
 800a09a:	4680      	mov	r8, r0
 800a09c:	d109      	bne.n	800a0b2 <_printf_float+0x126>
 800a09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a0:	1cd8      	adds	r0, r3, #3
 800a0a2:	db02      	blt.n	800a0aa <_printf_float+0x11e>
 800a0a4:	6862      	ldr	r2, [r4, #4]
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	dd47      	ble.n	800a13a <_printf_float+0x1ae>
 800a0aa:	f1aa 0a02 	sub.w	sl, sl, #2
 800a0ae:	fa5f fa8a 	uxtb.w	sl, sl
 800a0b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a0b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0b8:	d824      	bhi.n	800a104 <_printf_float+0x178>
 800a0ba:	3901      	subs	r1, #1
 800a0bc:	4652      	mov	r2, sl
 800a0be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a0c2:	9109      	str	r1, [sp, #36]	; 0x24
 800a0c4:	f7ff ff2f 	bl	8009f26 <__exponent>
 800a0c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ca:	1813      	adds	r3, r2, r0
 800a0cc:	2a01      	cmp	r2, #1
 800a0ce:	4681      	mov	r9, r0
 800a0d0:	6123      	str	r3, [r4, #16]
 800a0d2:	dc02      	bgt.n	800a0da <_printf_float+0x14e>
 800a0d4:	6822      	ldr	r2, [r4, #0]
 800a0d6:	07d1      	lsls	r1, r2, #31
 800a0d8:	d501      	bpl.n	800a0de <_printf_float+0x152>
 800a0da:	3301      	adds	r3, #1
 800a0dc:	6123      	str	r3, [r4, #16]
 800a0de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0a5      	beq.n	800a032 <_printf_float+0xa6>
 800a0e6:	232d      	movs	r3, #45	; 0x2d
 800a0e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ec:	e7a1      	b.n	800a032 <_printf_float+0xa6>
 800a0ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a0f2:	f000 8177 	beq.w	800a3e4 <_printf_float+0x458>
 800a0f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a0fa:	d1bb      	bne.n	800a074 <_printf_float+0xe8>
 800a0fc:	2900      	cmp	r1, #0
 800a0fe:	d1b9      	bne.n	800a074 <_printf_float+0xe8>
 800a100:	2301      	movs	r3, #1
 800a102:	e7b6      	b.n	800a072 <_printf_float+0xe6>
 800a104:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a108:	d119      	bne.n	800a13e <_printf_float+0x1b2>
 800a10a:	2900      	cmp	r1, #0
 800a10c:	6863      	ldr	r3, [r4, #4]
 800a10e:	dd0c      	ble.n	800a12a <_printf_float+0x19e>
 800a110:	6121      	str	r1, [r4, #16]
 800a112:	b913      	cbnz	r3, 800a11a <_printf_float+0x18e>
 800a114:	6822      	ldr	r2, [r4, #0]
 800a116:	07d2      	lsls	r2, r2, #31
 800a118:	d502      	bpl.n	800a120 <_printf_float+0x194>
 800a11a:	3301      	adds	r3, #1
 800a11c:	440b      	add	r3, r1
 800a11e:	6123      	str	r3, [r4, #16]
 800a120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a122:	65a3      	str	r3, [r4, #88]	; 0x58
 800a124:	f04f 0900 	mov.w	r9, #0
 800a128:	e7d9      	b.n	800a0de <_printf_float+0x152>
 800a12a:	b913      	cbnz	r3, 800a132 <_printf_float+0x1a6>
 800a12c:	6822      	ldr	r2, [r4, #0]
 800a12e:	07d0      	lsls	r0, r2, #31
 800a130:	d501      	bpl.n	800a136 <_printf_float+0x1aa>
 800a132:	3302      	adds	r3, #2
 800a134:	e7f3      	b.n	800a11e <_printf_float+0x192>
 800a136:	2301      	movs	r3, #1
 800a138:	e7f1      	b.n	800a11e <_printf_float+0x192>
 800a13a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a13e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a142:	4293      	cmp	r3, r2
 800a144:	db05      	blt.n	800a152 <_printf_float+0x1c6>
 800a146:	6822      	ldr	r2, [r4, #0]
 800a148:	6123      	str	r3, [r4, #16]
 800a14a:	07d1      	lsls	r1, r2, #31
 800a14c:	d5e8      	bpl.n	800a120 <_printf_float+0x194>
 800a14e:	3301      	adds	r3, #1
 800a150:	e7e5      	b.n	800a11e <_printf_float+0x192>
 800a152:	2b00      	cmp	r3, #0
 800a154:	bfd4      	ite	le
 800a156:	f1c3 0302 	rsble	r3, r3, #2
 800a15a:	2301      	movgt	r3, #1
 800a15c:	4413      	add	r3, r2
 800a15e:	e7de      	b.n	800a11e <_printf_float+0x192>
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	055a      	lsls	r2, r3, #21
 800a164:	d407      	bmi.n	800a176 <_printf_float+0x1ea>
 800a166:	6923      	ldr	r3, [r4, #16]
 800a168:	4642      	mov	r2, r8
 800a16a:	4631      	mov	r1, r6
 800a16c:	4628      	mov	r0, r5
 800a16e:	47b8      	blx	r7
 800a170:	3001      	adds	r0, #1
 800a172:	d12b      	bne.n	800a1cc <_printf_float+0x240>
 800a174:	e767      	b.n	800a046 <_printf_float+0xba>
 800a176:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a17a:	f240 80dc 	bls.w	800a336 <_printf_float+0x3aa>
 800a17e:	2200      	movs	r2, #0
 800a180:	2300      	movs	r3, #0
 800a182:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a186:	f7f6 fca7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d033      	beq.n	800a1f6 <_printf_float+0x26a>
 800a18e:	2301      	movs	r3, #1
 800a190:	4a41      	ldr	r2, [pc, #260]	; (800a298 <_printf_float+0x30c>)
 800a192:	4631      	mov	r1, r6
 800a194:	4628      	mov	r0, r5
 800a196:	47b8      	blx	r7
 800a198:	3001      	adds	r0, #1
 800a19a:	f43f af54 	beq.w	800a046 <_printf_float+0xba>
 800a19e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	db02      	blt.n	800a1ac <_printf_float+0x220>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	07d8      	lsls	r0, r3, #31
 800a1aa:	d50f      	bpl.n	800a1cc <_printf_float+0x240>
 800a1ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1b0:	4631      	mov	r1, r6
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	47b8      	blx	r7
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	f43f af45 	beq.w	800a046 <_printf_float+0xba>
 800a1bc:	f04f 0800 	mov.w	r8, #0
 800a1c0:	f104 091a 	add.w	r9, r4, #26
 800a1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	4543      	cmp	r3, r8
 800a1ca:	dc09      	bgt.n	800a1e0 <_printf_float+0x254>
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	079b      	lsls	r3, r3, #30
 800a1d0:	f100 8103 	bmi.w	800a3da <_printf_float+0x44e>
 800a1d4:	68e0      	ldr	r0, [r4, #12]
 800a1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1d8:	4298      	cmp	r0, r3
 800a1da:	bfb8      	it	lt
 800a1dc:	4618      	movlt	r0, r3
 800a1de:	e734      	b.n	800a04a <_printf_float+0xbe>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	464a      	mov	r2, r9
 800a1e4:	4631      	mov	r1, r6
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	47b8      	blx	r7
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	f43f af2b 	beq.w	800a046 <_printf_float+0xba>
 800a1f0:	f108 0801 	add.w	r8, r8, #1
 800a1f4:	e7e6      	b.n	800a1c4 <_printf_float+0x238>
 800a1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	dc2b      	bgt.n	800a254 <_printf_float+0x2c8>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	4a26      	ldr	r2, [pc, #152]	; (800a298 <_printf_float+0x30c>)
 800a200:	4631      	mov	r1, r6
 800a202:	4628      	mov	r0, r5
 800a204:	47b8      	blx	r7
 800a206:	3001      	adds	r0, #1
 800a208:	f43f af1d 	beq.w	800a046 <_printf_float+0xba>
 800a20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a20e:	b923      	cbnz	r3, 800a21a <_printf_float+0x28e>
 800a210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a212:	b913      	cbnz	r3, 800a21a <_printf_float+0x28e>
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	07d9      	lsls	r1, r3, #31
 800a218:	d5d8      	bpl.n	800a1cc <_printf_float+0x240>
 800a21a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a21e:	4631      	mov	r1, r6
 800a220:	4628      	mov	r0, r5
 800a222:	47b8      	blx	r7
 800a224:	3001      	adds	r0, #1
 800a226:	f43f af0e 	beq.w	800a046 <_printf_float+0xba>
 800a22a:	f04f 0900 	mov.w	r9, #0
 800a22e:	f104 0a1a 	add.w	sl, r4, #26
 800a232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a234:	425b      	negs	r3, r3
 800a236:	454b      	cmp	r3, r9
 800a238:	dc01      	bgt.n	800a23e <_printf_float+0x2b2>
 800a23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a23c:	e794      	b.n	800a168 <_printf_float+0x1dc>
 800a23e:	2301      	movs	r3, #1
 800a240:	4652      	mov	r2, sl
 800a242:	4631      	mov	r1, r6
 800a244:	4628      	mov	r0, r5
 800a246:	47b8      	blx	r7
 800a248:	3001      	adds	r0, #1
 800a24a:	f43f aefc 	beq.w	800a046 <_printf_float+0xba>
 800a24e:	f109 0901 	add.w	r9, r9, #1
 800a252:	e7ee      	b.n	800a232 <_printf_float+0x2a6>
 800a254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a256:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a258:	429a      	cmp	r2, r3
 800a25a:	bfa8      	it	ge
 800a25c:	461a      	movge	r2, r3
 800a25e:	2a00      	cmp	r2, #0
 800a260:	4691      	mov	r9, r2
 800a262:	dd07      	ble.n	800a274 <_printf_float+0x2e8>
 800a264:	4613      	mov	r3, r2
 800a266:	4631      	mov	r1, r6
 800a268:	4642      	mov	r2, r8
 800a26a:	4628      	mov	r0, r5
 800a26c:	47b8      	blx	r7
 800a26e:	3001      	adds	r0, #1
 800a270:	f43f aee9 	beq.w	800a046 <_printf_float+0xba>
 800a274:	f104 031a 	add.w	r3, r4, #26
 800a278:	f04f 0b00 	mov.w	fp, #0
 800a27c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a280:	9306      	str	r3, [sp, #24]
 800a282:	e015      	b.n	800a2b0 <_printf_float+0x324>
 800a284:	7fefffff 	.word	0x7fefffff
 800a288:	0800cda0 	.word	0x0800cda0
 800a28c:	0800cd9c 	.word	0x0800cd9c
 800a290:	0800cda8 	.word	0x0800cda8
 800a294:	0800cda4 	.word	0x0800cda4
 800a298:	0800cdac 	.word	0x0800cdac
 800a29c:	2301      	movs	r3, #1
 800a29e:	9a06      	ldr	r2, [sp, #24]
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	47b8      	blx	r7
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	f43f aecd 	beq.w	800a046 <_printf_float+0xba>
 800a2ac:	f10b 0b01 	add.w	fp, fp, #1
 800a2b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a2b4:	ebaa 0309 	sub.w	r3, sl, r9
 800a2b8:	455b      	cmp	r3, fp
 800a2ba:	dcef      	bgt.n	800a29c <_printf_float+0x310>
 800a2bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	44d0      	add	r8, sl
 800a2c4:	db15      	blt.n	800a2f2 <_printf_float+0x366>
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	07da      	lsls	r2, r3, #31
 800a2ca:	d412      	bmi.n	800a2f2 <_printf_float+0x366>
 800a2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2d0:	eba3 020a 	sub.w	r2, r3, sl
 800a2d4:	eba3 0a01 	sub.w	sl, r3, r1
 800a2d8:	4592      	cmp	sl, r2
 800a2da:	bfa8      	it	ge
 800a2dc:	4692      	movge	sl, r2
 800a2de:	f1ba 0f00 	cmp.w	sl, #0
 800a2e2:	dc0e      	bgt.n	800a302 <_printf_float+0x376>
 800a2e4:	f04f 0800 	mov.w	r8, #0
 800a2e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2ec:	f104 091a 	add.w	r9, r4, #26
 800a2f0:	e019      	b.n	800a326 <_printf_float+0x39a>
 800a2f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	47b8      	blx	r7
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d1e5      	bne.n	800a2cc <_printf_float+0x340>
 800a300:	e6a1      	b.n	800a046 <_printf_float+0xba>
 800a302:	4653      	mov	r3, sl
 800a304:	4642      	mov	r2, r8
 800a306:	4631      	mov	r1, r6
 800a308:	4628      	mov	r0, r5
 800a30a:	47b8      	blx	r7
 800a30c:	3001      	adds	r0, #1
 800a30e:	d1e9      	bne.n	800a2e4 <_printf_float+0x358>
 800a310:	e699      	b.n	800a046 <_printf_float+0xba>
 800a312:	2301      	movs	r3, #1
 800a314:	464a      	mov	r2, r9
 800a316:	4631      	mov	r1, r6
 800a318:	4628      	mov	r0, r5
 800a31a:	47b8      	blx	r7
 800a31c:	3001      	adds	r0, #1
 800a31e:	f43f ae92 	beq.w	800a046 <_printf_float+0xba>
 800a322:	f108 0801 	add.w	r8, r8, #1
 800a326:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a32a:	1a9b      	subs	r3, r3, r2
 800a32c:	eba3 030a 	sub.w	r3, r3, sl
 800a330:	4543      	cmp	r3, r8
 800a332:	dcee      	bgt.n	800a312 <_printf_float+0x386>
 800a334:	e74a      	b.n	800a1cc <_printf_float+0x240>
 800a336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a338:	2a01      	cmp	r2, #1
 800a33a:	dc01      	bgt.n	800a340 <_printf_float+0x3b4>
 800a33c:	07db      	lsls	r3, r3, #31
 800a33e:	d53a      	bpl.n	800a3b6 <_printf_float+0x42a>
 800a340:	2301      	movs	r3, #1
 800a342:	4642      	mov	r2, r8
 800a344:	4631      	mov	r1, r6
 800a346:	4628      	mov	r0, r5
 800a348:	47b8      	blx	r7
 800a34a:	3001      	adds	r0, #1
 800a34c:	f43f ae7b 	beq.w	800a046 <_printf_float+0xba>
 800a350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a354:	4631      	mov	r1, r6
 800a356:	4628      	mov	r0, r5
 800a358:	47b8      	blx	r7
 800a35a:	3001      	adds	r0, #1
 800a35c:	f108 0801 	add.w	r8, r8, #1
 800a360:	f43f ae71 	beq.w	800a046 <_printf_float+0xba>
 800a364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a366:	2200      	movs	r2, #0
 800a368:	f103 3aff 	add.w	sl, r3, #4294967295
 800a36c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a370:	2300      	movs	r3, #0
 800a372:	f7f6 fbb1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a376:	b9c8      	cbnz	r0, 800a3ac <_printf_float+0x420>
 800a378:	4653      	mov	r3, sl
 800a37a:	4642      	mov	r2, r8
 800a37c:	4631      	mov	r1, r6
 800a37e:	4628      	mov	r0, r5
 800a380:	47b8      	blx	r7
 800a382:	3001      	adds	r0, #1
 800a384:	d10e      	bne.n	800a3a4 <_printf_float+0x418>
 800a386:	e65e      	b.n	800a046 <_printf_float+0xba>
 800a388:	2301      	movs	r3, #1
 800a38a:	4652      	mov	r2, sl
 800a38c:	4631      	mov	r1, r6
 800a38e:	4628      	mov	r0, r5
 800a390:	47b8      	blx	r7
 800a392:	3001      	adds	r0, #1
 800a394:	f43f ae57 	beq.w	800a046 <_printf_float+0xba>
 800a398:	f108 0801 	add.w	r8, r8, #1
 800a39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	4543      	cmp	r3, r8
 800a3a2:	dcf1      	bgt.n	800a388 <_printf_float+0x3fc>
 800a3a4:	464b      	mov	r3, r9
 800a3a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a3aa:	e6de      	b.n	800a16a <_printf_float+0x1de>
 800a3ac:	f04f 0800 	mov.w	r8, #0
 800a3b0:	f104 0a1a 	add.w	sl, r4, #26
 800a3b4:	e7f2      	b.n	800a39c <_printf_float+0x410>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e7df      	b.n	800a37a <_printf_float+0x3ee>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	464a      	mov	r2, r9
 800a3be:	4631      	mov	r1, r6
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	47b8      	blx	r7
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	f43f ae3e 	beq.w	800a046 <_printf_float+0xba>
 800a3ca:	f108 0801 	add.w	r8, r8, #1
 800a3ce:	68e3      	ldr	r3, [r4, #12]
 800a3d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3d2:	1a9b      	subs	r3, r3, r2
 800a3d4:	4543      	cmp	r3, r8
 800a3d6:	dcf0      	bgt.n	800a3ba <_printf_float+0x42e>
 800a3d8:	e6fc      	b.n	800a1d4 <_printf_float+0x248>
 800a3da:	f04f 0800 	mov.w	r8, #0
 800a3de:	f104 0919 	add.w	r9, r4, #25
 800a3e2:	e7f4      	b.n	800a3ce <_printf_float+0x442>
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	f43f ae8b 	beq.w	800a100 <_printf_float+0x174>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a3f0:	ab09      	add	r3, sp, #36	; 0x24
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	ec49 8b10 	vmov	d0, r8, r9
 800a3f8:	6022      	str	r2, [r4, #0]
 800a3fa:	f8cd a004 	str.w	sl, [sp, #4]
 800a3fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a402:	4628      	mov	r0, r5
 800a404:	f7ff fd2e 	bl	8009e64 <__cvt>
 800a408:	4680      	mov	r8, r0
 800a40a:	e648      	b.n	800a09e <_printf_float+0x112>

0800a40c <_printf_common>:
 800a40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a410:	4691      	mov	r9, r2
 800a412:	461f      	mov	r7, r3
 800a414:	688a      	ldr	r2, [r1, #8]
 800a416:	690b      	ldr	r3, [r1, #16]
 800a418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a41c:	4293      	cmp	r3, r2
 800a41e:	bfb8      	it	lt
 800a420:	4613      	movlt	r3, r2
 800a422:	f8c9 3000 	str.w	r3, [r9]
 800a426:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a42a:	4606      	mov	r6, r0
 800a42c:	460c      	mov	r4, r1
 800a42e:	b112      	cbz	r2, 800a436 <_printf_common+0x2a>
 800a430:	3301      	adds	r3, #1
 800a432:	f8c9 3000 	str.w	r3, [r9]
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	0699      	lsls	r1, r3, #26
 800a43a:	bf42      	ittt	mi
 800a43c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a440:	3302      	addmi	r3, #2
 800a442:	f8c9 3000 	strmi.w	r3, [r9]
 800a446:	6825      	ldr	r5, [r4, #0]
 800a448:	f015 0506 	ands.w	r5, r5, #6
 800a44c:	d107      	bne.n	800a45e <_printf_common+0x52>
 800a44e:	f104 0a19 	add.w	sl, r4, #25
 800a452:	68e3      	ldr	r3, [r4, #12]
 800a454:	f8d9 2000 	ldr.w	r2, [r9]
 800a458:	1a9b      	subs	r3, r3, r2
 800a45a:	42ab      	cmp	r3, r5
 800a45c:	dc28      	bgt.n	800a4b0 <_printf_common+0xa4>
 800a45e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a462:	6822      	ldr	r2, [r4, #0]
 800a464:	3300      	adds	r3, #0
 800a466:	bf18      	it	ne
 800a468:	2301      	movne	r3, #1
 800a46a:	0692      	lsls	r2, r2, #26
 800a46c:	d42d      	bmi.n	800a4ca <_printf_common+0xbe>
 800a46e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a472:	4639      	mov	r1, r7
 800a474:	4630      	mov	r0, r6
 800a476:	47c0      	blx	r8
 800a478:	3001      	adds	r0, #1
 800a47a:	d020      	beq.n	800a4be <_printf_common+0xb2>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	68e5      	ldr	r5, [r4, #12]
 800a480:	f8d9 2000 	ldr.w	r2, [r9]
 800a484:	f003 0306 	and.w	r3, r3, #6
 800a488:	2b04      	cmp	r3, #4
 800a48a:	bf08      	it	eq
 800a48c:	1aad      	subeq	r5, r5, r2
 800a48e:	68a3      	ldr	r3, [r4, #8]
 800a490:	6922      	ldr	r2, [r4, #16]
 800a492:	bf0c      	ite	eq
 800a494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a498:	2500      	movne	r5, #0
 800a49a:	4293      	cmp	r3, r2
 800a49c:	bfc4      	itt	gt
 800a49e:	1a9b      	subgt	r3, r3, r2
 800a4a0:	18ed      	addgt	r5, r5, r3
 800a4a2:	f04f 0900 	mov.w	r9, #0
 800a4a6:	341a      	adds	r4, #26
 800a4a8:	454d      	cmp	r5, r9
 800a4aa:	d11a      	bne.n	800a4e2 <_printf_common+0xd6>
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	e008      	b.n	800a4c2 <_printf_common+0xb6>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	4652      	mov	r2, sl
 800a4b4:	4639      	mov	r1, r7
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	47c0      	blx	r8
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	d103      	bne.n	800a4c6 <_printf_common+0xba>
 800a4be:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c6:	3501      	adds	r5, #1
 800a4c8:	e7c3      	b.n	800a452 <_printf_common+0x46>
 800a4ca:	18e1      	adds	r1, r4, r3
 800a4cc:	1c5a      	adds	r2, r3, #1
 800a4ce:	2030      	movs	r0, #48	; 0x30
 800a4d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4d4:	4422      	add	r2, r4
 800a4d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4de:	3302      	adds	r3, #2
 800a4e0:	e7c5      	b.n	800a46e <_printf_common+0x62>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	4639      	mov	r1, r7
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	47c0      	blx	r8
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d0e6      	beq.n	800a4be <_printf_common+0xb2>
 800a4f0:	f109 0901 	add.w	r9, r9, #1
 800a4f4:	e7d8      	b.n	800a4a8 <_printf_common+0x9c>
	...

0800a4f8 <_printf_i>:
 800a4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a500:	460c      	mov	r4, r1
 800a502:	7e09      	ldrb	r1, [r1, #24]
 800a504:	b085      	sub	sp, #20
 800a506:	296e      	cmp	r1, #110	; 0x6e
 800a508:	4617      	mov	r7, r2
 800a50a:	4606      	mov	r6, r0
 800a50c:	4698      	mov	r8, r3
 800a50e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a510:	f000 80b3 	beq.w	800a67a <_printf_i+0x182>
 800a514:	d822      	bhi.n	800a55c <_printf_i+0x64>
 800a516:	2963      	cmp	r1, #99	; 0x63
 800a518:	d036      	beq.n	800a588 <_printf_i+0x90>
 800a51a:	d80a      	bhi.n	800a532 <_printf_i+0x3a>
 800a51c:	2900      	cmp	r1, #0
 800a51e:	f000 80b9 	beq.w	800a694 <_printf_i+0x19c>
 800a522:	2958      	cmp	r1, #88	; 0x58
 800a524:	f000 8083 	beq.w	800a62e <_printf_i+0x136>
 800a528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a52c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a530:	e032      	b.n	800a598 <_printf_i+0xa0>
 800a532:	2964      	cmp	r1, #100	; 0x64
 800a534:	d001      	beq.n	800a53a <_printf_i+0x42>
 800a536:	2969      	cmp	r1, #105	; 0x69
 800a538:	d1f6      	bne.n	800a528 <_printf_i+0x30>
 800a53a:	6820      	ldr	r0, [r4, #0]
 800a53c:	6813      	ldr	r3, [r2, #0]
 800a53e:	0605      	lsls	r5, r0, #24
 800a540:	f103 0104 	add.w	r1, r3, #4
 800a544:	d52a      	bpl.n	800a59c <_printf_i+0xa4>
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6011      	str	r1, [r2, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	da03      	bge.n	800a556 <_printf_i+0x5e>
 800a54e:	222d      	movs	r2, #45	; 0x2d
 800a550:	425b      	negs	r3, r3
 800a552:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a556:	486f      	ldr	r0, [pc, #444]	; (800a714 <_printf_i+0x21c>)
 800a558:	220a      	movs	r2, #10
 800a55a:	e039      	b.n	800a5d0 <_printf_i+0xd8>
 800a55c:	2973      	cmp	r1, #115	; 0x73
 800a55e:	f000 809d 	beq.w	800a69c <_printf_i+0x1a4>
 800a562:	d808      	bhi.n	800a576 <_printf_i+0x7e>
 800a564:	296f      	cmp	r1, #111	; 0x6f
 800a566:	d020      	beq.n	800a5aa <_printf_i+0xb2>
 800a568:	2970      	cmp	r1, #112	; 0x70
 800a56a:	d1dd      	bne.n	800a528 <_printf_i+0x30>
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	f043 0320 	orr.w	r3, r3, #32
 800a572:	6023      	str	r3, [r4, #0]
 800a574:	e003      	b.n	800a57e <_printf_i+0x86>
 800a576:	2975      	cmp	r1, #117	; 0x75
 800a578:	d017      	beq.n	800a5aa <_printf_i+0xb2>
 800a57a:	2978      	cmp	r1, #120	; 0x78
 800a57c:	d1d4      	bne.n	800a528 <_printf_i+0x30>
 800a57e:	2378      	movs	r3, #120	; 0x78
 800a580:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a584:	4864      	ldr	r0, [pc, #400]	; (800a718 <_printf_i+0x220>)
 800a586:	e055      	b.n	800a634 <_printf_i+0x13c>
 800a588:	6813      	ldr	r3, [r2, #0]
 800a58a:	1d19      	adds	r1, r3, #4
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6011      	str	r1, [r2, #0]
 800a590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a598:	2301      	movs	r3, #1
 800a59a:	e08c      	b.n	800a6b6 <_printf_i+0x1be>
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6011      	str	r1, [r2, #0]
 800a5a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a5a4:	bf18      	it	ne
 800a5a6:	b21b      	sxthne	r3, r3
 800a5a8:	e7cf      	b.n	800a54a <_printf_i+0x52>
 800a5aa:	6813      	ldr	r3, [r2, #0]
 800a5ac:	6825      	ldr	r5, [r4, #0]
 800a5ae:	1d18      	adds	r0, r3, #4
 800a5b0:	6010      	str	r0, [r2, #0]
 800a5b2:	0628      	lsls	r0, r5, #24
 800a5b4:	d501      	bpl.n	800a5ba <_printf_i+0xc2>
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	e002      	b.n	800a5c0 <_printf_i+0xc8>
 800a5ba:	0668      	lsls	r0, r5, #25
 800a5bc:	d5fb      	bpl.n	800a5b6 <_printf_i+0xbe>
 800a5be:	881b      	ldrh	r3, [r3, #0]
 800a5c0:	4854      	ldr	r0, [pc, #336]	; (800a714 <_printf_i+0x21c>)
 800a5c2:	296f      	cmp	r1, #111	; 0x6f
 800a5c4:	bf14      	ite	ne
 800a5c6:	220a      	movne	r2, #10
 800a5c8:	2208      	moveq	r2, #8
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5d0:	6865      	ldr	r5, [r4, #4]
 800a5d2:	60a5      	str	r5, [r4, #8]
 800a5d4:	2d00      	cmp	r5, #0
 800a5d6:	f2c0 8095 	blt.w	800a704 <_printf_i+0x20c>
 800a5da:	6821      	ldr	r1, [r4, #0]
 800a5dc:	f021 0104 	bic.w	r1, r1, #4
 800a5e0:	6021      	str	r1, [r4, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d13d      	bne.n	800a662 <_printf_i+0x16a>
 800a5e6:	2d00      	cmp	r5, #0
 800a5e8:	f040 808e 	bne.w	800a708 <_printf_i+0x210>
 800a5ec:	4665      	mov	r5, ip
 800a5ee:	2a08      	cmp	r2, #8
 800a5f0:	d10b      	bne.n	800a60a <_printf_i+0x112>
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	07db      	lsls	r3, r3, #31
 800a5f6:	d508      	bpl.n	800a60a <_printf_i+0x112>
 800a5f8:	6923      	ldr	r3, [r4, #16]
 800a5fa:	6862      	ldr	r2, [r4, #4]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	bfde      	ittt	le
 800a600:	2330      	movle	r3, #48	; 0x30
 800a602:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a606:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a60a:	ebac 0305 	sub.w	r3, ip, r5
 800a60e:	6123      	str	r3, [r4, #16]
 800a610:	f8cd 8000 	str.w	r8, [sp]
 800a614:	463b      	mov	r3, r7
 800a616:	aa03      	add	r2, sp, #12
 800a618:	4621      	mov	r1, r4
 800a61a:	4630      	mov	r0, r6
 800a61c:	f7ff fef6 	bl	800a40c <_printf_common>
 800a620:	3001      	adds	r0, #1
 800a622:	d14d      	bne.n	800a6c0 <_printf_i+0x1c8>
 800a624:	f04f 30ff 	mov.w	r0, #4294967295
 800a628:	b005      	add	sp, #20
 800a62a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a62e:	4839      	ldr	r0, [pc, #228]	; (800a714 <_printf_i+0x21c>)
 800a630:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a634:	6813      	ldr	r3, [r2, #0]
 800a636:	6821      	ldr	r1, [r4, #0]
 800a638:	1d1d      	adds	r5, r3, #4
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6015      	str	r5, [r2, #0]
 800a63e:	060a      	lsls	r2, r1, #24
 800a640:	d50b      	bpl.n	800a65a <_printf_i+0x162>
 800a642:	07ca      	lsls	r2, r1, #31
 800a644:	bf44      	itt	mi
 800a646:	f041 0120 	orrmi.w	r1, r1, #32
 800a64a:	6021      	strmi	r1, [r4, #0]
 800a64c:	b91b      	cbnz	r3, 800a656 <_printf_i+0x15e>
 800a64e:	6822      	ldr	r2, [r4, #0]
 800a650:	f022 0220 	bic.w	r2, r2, #32
 800a654:	6022      	str	r2, [r4, #0]
 800a656:	2210      	movs	r2, #16
 800a658:	e7b7      	b.n	800a5ca <_printf_i+0xd2>
 800a65a:	064d      	lsls	r5, r1, #25
 800a65c:	bf48      	it	mi
 800a65e:	b29b      	uxthmi	r3, r3
 800a660:	e7ef      	b.n	800a642 <_printf_i+0x14a>
 800a662:	4665      	mov	r5, ip
 800a664:	fbb3 f1f2 	udiv	r1, r3, r2
 800a668:	fb02 3311 	mls	r3, r2, r1, r3
 800a66c:	5cc3      	ldrb	r3, [r0, r3]
 800a66e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a672:	460b      	mov	r3, r1
 800a674:	2900      	cmp	r1, #0
 800a676:	d1f5      	bne.n	800a664 <_printf_i+0x16c>
 800a678:	e7b9      	b.n	800a5ee <_printf_i+0xf6>
 800a67a:	6813      	ldr	r3, [r2, #0]
 800a67c:	6825      	ldr	r5, [r4, #0]
 800a67e:	6961      	ldr	r1, [r4, #20]
 800a680:	1d18      	adds	r0, r3, #4
 800a682:	6010      	str	r0, [r2, #0]
 800a684:	0628      	lsls	r0, r5, #24
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	d501      	bpl.n	800a68e <_printf_i+0x196>
 800a68a:	6019      	str	r1, [r3, #0]
 800a68c:	e002      	b.n	800a694 <_printf_i+0x19c>
 800a68e:	066a      	lsls	r2, r5, #25
 800a690:	d5fb      	bpl.n	800a68a <_printf_i+0x192>
 800a692:	8019      	strh	r1, [r3, #0]
 800a694:	2300      	movs	r3, #0
 800a696:	6123      	str	r3, [r4, #16]
 800a698:	4665      	mov	r5, ip
 800a69a:	e7b9      	b.n	800a610 <_printf_i+0x118>
 800a69c:	6813      	ldr	r3, [r2, #0]
 800a69e:	1d19      	adds	r1, r3, #4
 800a6a0:	6011      	str	r1, [r2, #0]
 800a6a2:	681d      	ldr	r5, [r3, #0]
 800a6a4:	6862      	ldr	r2, [r4, #4]
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	f7f5 fda1 	bl	80001f0 <memchr>
 800a6ae:	b108      	cbz	r0, 800a6b4 <_printf_i+0x1bc>
 800a6b0:	1b40      	subs	r0, r0, r5
 800a6b2:	6060      	str	r0, [r4, #4]
 800a6b4:	6863      	ldr	r3, [r4, #4]
 800a6b6:	6123      	str	r3, [r4, #16]
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6be:	e7a7      	b.n	800a610 <_printf_i+0x118>
 800a6c0:	6923      	ldr	r3, [r4, #16]
 800a6c2:	462a      	mov	r2, r5
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	47c0      	blx	r8
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	d0aa      	beq.n	800a624 <_printf_i+0x12c>
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	079b      	lsls	r3, r3, #30
 800a6d2:	d413      	bmi.n	800a6fc <_printf_i+0x204>
 800a6d4:	68e0      	ldr	r0, [r4, #12]
 800a6d6:	9b03      	ldr	r3, [sp, #12]
 800a6d8:	4298      	cmp	r0, r3
 800a6da:	bfb8      	it	lt
 800a6dc:	4618      	movlt	r0, r3
 800a6de:	e7a3      	b.n	800a628 <_printf_i+0x130>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	464a      	mov	r2, r9
 800a6e4:	4639      	mov	r1, r7
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	47c0      	blx	r8
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	d09a      	beq.n	800a624 <_printf_i+0x12c>
 800a6ee:	3501      	adds	r5, #1
 800a6f0:	68e3      	ldr	r3, [r4, #12]
 800a6f2:	9a03      	ldr	r2, [sp, #12]
 800a6f4:	1a9b      	subs	r3, r3, r2
 800a6f6:	42ab      	cmp	r3, r5
 800a6f8:	dcf2      	bgt.n	800a6e0 <_printf_i+0x1e8>
 800a6fa:	e7eb      	b.n	800a6d4 <_printf_i+0x1dc>
 800a6fc:	2500      	movs	r5, #0
 800a6fe:	f104 0919 	add.w	r9, r4, #25
 800a702:	e7f5      	b.n	800a6f0 <_printf_i+0x1f8>
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1ac      	bne.n	800a662 <_printf_i+0x16a>
 800a708:	7803      	ldrb	r3, [r0, #0]
 800a70a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a70e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a712:	e76c      	b.n	800a5ee <_printf_i+0xf6>
 800a714:	0800cdae 	.word	0x0800cdae
 800a718:	0800cdbf 	.word	0x0800cdbf

0800a71c <siprintf>:
 800a71c:	b40e      	push	{r1, r2, r3}
 800a71e:	b500      	push	{lr}
 800a720:	b09c      	sub	sp, #112	; 0x70
 800a722:	ab1d      	add	r3, sp, #116	; 0x74
 800a724:	9002      	str	r0, [sp, #8]
 800a726:	9006      	str	r0, [sp, #24]
 800a728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a72c:	4809      	ldr	r0, [pc, #36]	; (800a754 <siprintf+0x38>)
 800a72e:	9107      	str	r1, [sp, #28]
 800a730:	9104      	str	r1, [sp, #16]
 800a732:	4909      	ldr	r1, [pc, #36]	; (800a758 <siprintf+0x3c>)
 800a734:	f853 2b04 	ldr.w	r2, [r3], #4
 800a738:	9105      	str	r1, [sp, #20]
 800a73a:	6800      	ldr	r0, [r0, #0]
 800a73c:	9301      	str	r3, [sp, #4]
 800a73e:	a902      	add	r1, sp, #8
 800a740:	f001 fbf4 	bl	800bf2c <_svfiprintf_r>
 800a744:	9b02      	ldr	r3, [sp, #8]
 800a746:	2200      	movs	r2, #0
 800a748:	701a      	strb	r2, [r3, #0]
 800a74a:	b01c      	add	sp, #112	; 0x70
 800a74c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a750:	b003      	add	sp, #12
 800a752:	4770      	bx	lr
 800a754:	20000094 	.word	0x20000094
 800a758:	ffff0208 	.word	0xffff0208

0800a75c <strncat>:
 800a75c:	b530      	push	{r4, r5, lr}
 800a75e:	4603      	mov	r3, r0
 800a760:	781c      	ldrb	r4, [r3, #0]
 800a762:	1c5d      	adds	r5, r3, #1
 800a764:	b944      	cbnz	r4, 800a778 <strncat+0x1c>
 800a766:	f112 32ff 	adds.w	r2, r2, #4294967295
 800a76a:	d304      	bcc.n	800a776 <strncat+0x1a>
 800a76c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a770:	f803 4b01 	strb.w	r4, [r3], #1
 800a774:	b914      	cbnz	r4, 800a77c <strncat+0x20>
 800a776:	bd30      	pop	{r4, r5, pc}
 800a778:	462b      	mov	r3, r5
 800a77a:	e7f1      	b.n	800a760 <strncat+0x4>
 800a77c:	2a00      	cmp	r2, #0
 800a77e:	d1f2      	bne.n	800a766 <strncat+0xa>
 800a780:	701a      	strb	r2, [r3, #0]
 800a782:	e7f0      	b.n	800a766 <strncat+0xa>

0800a784 <quorem>:
 800a784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a788:	6903      	ldr	r3, [r0, #16]
 800a78a:	690c      	ldr	r4, [r1, #16]
 800a78c:	42a3      	cmp	r3, r4
 800a78e:	4680      	mov	r8, r0
 800a790:	f2c0 8082 	blt.w	800a898 <quorem+0x114>
 800a794:	3c01      	subs	r4, #1
 800a796:	f101 0714 	add.w	r7, r1, #20
 800a79a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a79e:	f100 0614 	add.w	r6, r0, #20
 800a7a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a7a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a7aa:	eb06 030c 	add.w	r3, r6, ip
 800a7ae:	3501      	adds	r5, #1
 800a7b0:	eb07 090c 	add.w	r9, r7, ip
 800a7b4:	9301      	str	r3, [sp, #4]
 800a7b6:	fbb0 f5f5 	udiv	r5, r0, r5
 800a7ba:	b395      	cbz	r5, 800a822 <quorem+0x9e>
 800a7bc:	f04f 0a00 	mov.w	sl, #0
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	46b6      	mov	lr, r6
 800a7c4:	46d3      	mov	fp, sl
 800a7c6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7ca:	b293      	uxth	r3, r2
 800a7cc:	fb05 a303 	mla	r3, r5, r3, sl
 800a7d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	ebab 0303 	sub.w	r3, fp, r3
 800a7da:	0c12      	lsrs	r2, r2, #16
 800a7dc:	f8de b000 	ldr.w	fp, [lr]
 800a7e0:	fb05 a202 	mla	r2, r5, r2, sl
 800a7e4:	fa13 f38b 	uxtah	r3, r3, fp
 800a7e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a7ec:	fa1f fb82 	uxth.w	fp, r2
 800a7f0:	f8de 2000 	ldr.w	r2, [lr]
 800a7f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a7f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a802:	4581      	cmp	r9, r0
 800a804:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a808:	f84e 3b04 	str.w	r3, [lr], #4
 800a80c:	d2db      	bcs.n	800a7c6 <quorem+0x42>
 800a80e:	f856 300c 	ldr.w	r3, [r6, ip]
 800a812:	b933      	cbnz	r3, 800a822 <quorem+0x9e>
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	3b04      	subs	r3, #4
 800a818:	429e      	cmp	r6, r3
 800a81a:	461a      	mov	r2, r3
 800a81c:	d330      	bcc.n	800a880 <quorem+0xfc>
 800a81e:	f8c8 4010 	str.w	r4, [r8, #16]
 800a822:	4640      	mov	r0, r8
 800a824:	f001 f968 	bl	800baf8 <__mcmp>
 800a828:	2800      	cmp	r0, #0
 800a82a:	db25      	blt.n	800a878 <quorem+0xf4>
 800a82c:	3501      	adds	r5, #1
 800a82e:	4630      	mov	r0, r6
 800a830:	f04f 0c00 	mov.w	ip, #0
 800a834:	f857 2b04 	ldr.w	r2, [r7], #4
 800a838:	f8d0 e000 	ldr.w	lr, [r0]
 800a83c:	b293      	uxth	r3, r2
 800a83e:	ebac 0303 	sub.w	r3, ip, r3
 800a842:	0c12      	lsrs	r2, r2, #16
 800a844:	fa13 f38e 	uxtah	r3, r3, lr
 800a848:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a84c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a850:	b29b      	uxth	r3, r3
 800a852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a856:	45b9      	cmp	r9, r7
 800a858:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a85c:	f840 3b04 	str.w	r3, [r0], #4
 800a860:	d2e8      	bcs.n	800a834 <quorem+0xb0>
 800a862:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a866:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a86a:	b92a      	cbnz	r2, 800a878 <quorem+0xf4>
 800a86c:	3b04      	subs	r3, #4
 800a86e:	429e      	cmp	r6, r3
 800a870:	461a      	mov	r2, r3
 800a872:	d30b      	bcc.n	800a88c <quorem+0x108>
 800a874:	f8c8 4010 	str.w	r4, [r8, #16]
 800a878:	4628      	mov	r0, r5
 800a87a:	b003      	add	sp, #12
 800a87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a880:	6812      	ldr	r2, [r2, #0]
 800a882:	3b04      	subs	r3, #4
 800a884:	2a00      	cmp	r2, #0
 800a886:	d1ca      	bne.n	800a81e <quorem+0x9a>
 800a888:	3c01      	subs	r4, #1
 800a88a:	e7c5      	b.n	800a818 <quorem+0x94>
 800a88c:	6812      	ldr	r2, [r2, #0]
 800a88e:	3b04      	subs	r3, #4
 800a890:	2a00      	cmp	r2, #0
 800a892:	d1ef      	bne.n	800a874 <quorem+0xf0>
 800a894:	3c01      	subs	r4, #1
 800a896:	e7ea      	b.n	800a86e <quorem+0xea>
 800a898:	2000      	movs	r0, #0
 800a89a:	e7ee      	b.n	800a87a <quorem+0xf6>
 800a89c:	0000      	movs	r0, r0
	...

0800a8a0 <_dtoa_r>:
 800a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	ec57 6b10 	vmov	r6, r7, d0
 800a8a8:	b097      	sub	sp, #92	; 0x5c
 800a8aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a8ac:	9106      	str	r1, [sp, #24]
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800a8b2:	9312      	str	r3, [sp, #72]	; 0x48
 800a8b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8b8:	e9cd 6700 	strd	r6, r7, [sp]
 800a8bc:	b93d      	cbnz	r5, 800a8ce <_dtoa_r+0x2e>
 800a8be:	2010      	movs	r0, #16
 800a8c0:	f000 fef2 	bl	800b6a8 <malloc>
 800a8c4:	6260      	str	r0, [r4, #36]	; 0x24
 800a8c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8ca:	6005      	str	r5, [r0, #0]
 800a8cc:	60c5      	str	r5, [r0, #12]
 800a8ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8d0:	6819      	ldr	r1, [r3, #0]
 800a8d2:	b151      	cbz	r1, 800a8ea <_dtoa_r+0x4a>
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	604a      	str	r2, [r1, #4]
 800a8d8:	2301      	movs	r3, #1
 800a8da:	4093      	lsls	r3, r2
 800a8dc:	608b      	str	r3, [r1, #8]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f000 ff29 	bl	800b736 <_Bfree>
 800a8e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	1e3b      	subs	r3, r7, #0
 800a8ec:	bfbb      	ittet	lt
 800a8ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a8f2:	9301      	strlt	r3, [sp, #4]
 800a8f4:	2300      	movge	r3, #0
 800a8f6:	2201      	movlt	r2, #1
 800a8f8:	bfac      	ite	ge
 800a8fa:	f8c8 3000 	strge.w	r3, [r8]
 800a8fe:	f8c8 2000 	strlt.w	r2, [r8]
 800a902:	4baf      	ldr	r3, [pc, #700]	; (800abc0 <_dtoa_r+0x320>)
 800a904:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a908:	ea33 0308 	bics.w	r3, r3, r8
 800a90c:	d114      	bne.n	800a938 <_dtoa_r+0x98>
 800a90e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a910:	f242 730f 	movw	r3, #9999	; 0x270f
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	9b00      	ldr	r3, [sp, #0]
 800a918:	b923      	cbnz	r3, 800a924 <_dtoa_r+0x84>
 800a91a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a91e:	2800      	cmp	r0, #0
 800a920:	f000 8542 	beq.w	800b3a8 <_dtoa_r+0xb08>
 800a924:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a926:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800abd4 <_dtoa_r+0x334>
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f000 8544 	beq.w	800b3b8 <_dtoa_r+0xb18>
 800a930:	f10b 0303 	add.w	r3, fp, #3
 800a934:	f000 bd3e 	b.w	800b3b4 <_dtoa_r+0xb14>
 800a938:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a93c:	2200      	movs	r2, #0
 800a93e:	2300      	movs	r3, #0
 800a940:	4630      	mov	r0, r6
 800a942:	4639      	mov	r1, r7
 800a944:	f7f6 f8c8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a948:	4681      	mov	r9, r0
 800a94a:	b168      	cbz	r0, 800a968 <_dtoa_r+0xc8>
 800a94c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a94e:	2301      	movs	r3, #1
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a954:	2b00      	cmp	r3, #0
 800a956:	f000 8524 	beq.w	800b3a2 <_dtoa_r+0xb02>
 800a95a:	4b9a      	ldr	r3, [pc, #616]	; (800abc4 <_dtoa_r+0x324>)
 800a95c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a95e:	f103 3bff 	add.w	fp, r3, #4294967295
 800a962:	6013      	str	r3, [r2, #0]
 800a964:	f000 bd28 	b.w	800b3b8 <_dtoa_r+0xb18>
 800a968:	aa14      	add	r2, sp, #80	; 0x50
 800a96a:	a915      	add	r1, sp, #84	; 0x54
 800a96c:	ec47 6b10 	vmov	d0, r6, r7
 800a970:	4620      	mov	r0, r4
 800a972:	f001 f938 	bl	800bbe6 <__d2b>
 800a976:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a97a:	9004      	str	r0, [sp, #16]
 800a97c:	2d00      	cmp	r5, #0
 800a97e:	d07c      	beq.n	800aa7a <_dtoa_r+0x1da>
 800a980:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a984:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a988:	46b2      	mov	sl, r6
 800a98a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a98e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a992:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a996:	2200      	movs	r2, #0
 800a998:	4b8b      	ldr	r3, [pc, #556]	; (800abc8 <_dtoa_r+0x328>)
 800a99a:	4650      	mov	r0, sl
 800a99c:	4659      	mov	r1, fp
 800a99e:	f7f5 fc7b 	bl	8000298 <__aeabi_dsub>
 800a9a2:	a381      	add	r3, pc, #516	; (adr r3, 800aba8 <_dtoa_r+0x308>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	f7f5 fe2e 	bl	8000608 <__aeabi_dmul>
 800a9ac:	a380      	add	r3, pc, #512	; (adr r3, 800abb0 <_dtoa_r+0x310>)
 800a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b2:	f7f5 fc73 	bl	800029c <__adddf3>
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	460f      	mov	r7, r1
 800a9bc:	f7f5 fdba 	bl	8000534 <__aeabi_i2d>
 800a9c0:	a37d      	add	r3, pc, #500	; (adr r3, 800abb8 <_dtoa_r+0x318>)
 800a9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c6:	f7f5 fe1f 	bl	8000608 <__aeabi_dmul>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	f7f5 fc63 	bl	800029c <__adddf3>
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	460f      	mov	r7, r1
 800a9da:	f7f6 f8c5 	bl	8000b68 <__aeabi_d2iz>
 800a9de:	2200      	movs	r2, #0
 800a9e0:	4682      	mov	sl, r0
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	4639      	mov	r1, r7
 800a9e8:	f7f6 f880 	bl	8000aec <__aeabi_dcmplt>
 800a9ec:	b148      	cbz	r0, 800aa02 <_dtoa_r+0x162>
 800a9ee:	4650      	mov	r0, sl
 800a9f0:	f7f5 fda0 	bl	8000534 <__aeabi_i2d>
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	463b      	mov	r3, r7
 800a9f8:	f7f6 f86e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9fc:	b908      	cbnz	r0, 800aa02 <_dtoa_r+0x162>
 800a9fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa02:	f1ba 0f16 	cmp.w	sl, #22
 800aa06:	d859      	bhi.n	800aabc <_dtoa_r+0x21c>
 800aa08:	4970      	ldr	r1, [pc, #448]	; (800abcc <_dtoa_r+0x32c>)
 800aa0a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800aa0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa16:	f7f6 f887 	bl	8000b28 <__aeabi_dcmpgt>
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	d050      	beq.n	800aac0 <_dtoa_r+0x220>
 800aa1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa22:	2300      	movs	r3, #0
 800aa24:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa28:	1b5d      	subs	r5, r3, r5
 800aa2a:	f1b5 0801 	subs.w	r8, r5, #1
 800aa2e:	bf49      	itett	mi
 800aa30:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa34:	2300      	movpl	r3, #0
 800aa36:	9305      	strmi	r3, [sp, #20]
 800aa38:	f04f 0800 	movmi.w	r8, #0
 800aa3c:	bf58      	it	pl
 800aa3e:	9305      	strpl	r3, [sp, #20]
 800aa40:	f1ba 0f00 	cmp.w	sl, #0
 800aa44:	db3e      	blt.n	800aac4 <_dtoa_r+0x224>
 800aa46:	2300      	movs	r3, #0
 800aa48:	44d0      	add	r8, sl
 800aa4a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800aa4e:	9307      	str	r3, [sp, #28]
 800aa50:	9b06      	ldr	r3, [sp, #24]
 800aa52:	2b09      	cmp	r3, #9
 800aa54:	f200 8090 	bhi.w	800ab78 <_dtoa_r+0x2d8>
 800aa58:	2b05      	cmp	r3, #5
 800aa5a:	bfc4      	itt	gt
 800aa5c:	3b04      	subgt	r3, #4
 800aa5e:	9306      	strgt	r3, [sp, #24]
 800aa60:	9b06      	ldr	r3, [sp, #24]
 800aa62:	f1a3 0302 	sub.w	r3, r3, #2
 800aa66:	bfcc      	ite	gt
 800aa68:	2500      	movgt	r5, #0
 800aa6a:	2501      	movle	r5, #1
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	f200 808f 	bhi.w	800ab90 <_dtoa_r+0x2f0>
 800aa72:	e8df f003 	tbb	[pc, r3]
 800aa76:	7f7d      	.short	0x7f7d
 800aa78:	7131      	.short	0x7131
 800aa7a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800aa7e:	441d      	add	r5, r3
 800aa80:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800aa84:	2820      	cmp	r0, #32
 800aa86:	dd13      	ble.n	800aab0 <_dtoa_r+0x210>
 800aa88:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800aa8c:	9b00      	ldr	r3, [sp, #0]
 800aa8e:	fa08 f800 	lsl.w	r8, r8, r0
 800aa92:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800aa96:	fa23 f000 	lsr.w	r0, r3, r0
 800aa9a:	ea48 0000 	orr.w	r0, r8, r0
 800aa9e:	f7f5 fd39 	bl	8000514 <__aeabi_ui2d>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800aaaa:	3d01      	subs	r5, #1
 800aaac:	9313      	str	r3, [sp, #76]	; 0x4c
 800aaae:	e772      	b.n	800a996 <_dtoa_r+0xf6>
 800aab0:	9b00      	ldr	r3, [sp, #0]
 800aab2:	f1c0 0020 	rsb	r0, r0, #32
 800aab6:	fa03 f000 	lsl.w	r0, r3, r0
 800aaba:	e7f0      	b.n	800aa9e <_dtoa_r+0x1fe>
 800aabc:	2301      	movs	r3, #1
 800aabe:	e7b1      	b.n	800aa24 <_dtoa_r+0x184>
 800aac0:	900f      	str	r0, [sp, #60]	; 0x3c
 800aac2:	e7b0      	b.n	800aa26 <_dtoa_r+0x186>
 800aac4:	9b05      	ldr	r3, [sp, #20]
 800aac6:	eba3 030a 	sub.w	r3, r3, sl
 800aaca:	9305      	str	r3, [sp, #20]
 800aacc:	f1ca 0300 	rsb	r3, sl, #0
 800aad0:	9307      	str	r3, [sp, #28]
 800aad2:	2300      	movs	r3, #0
 800aad4:	930e      	str	r3, [sp, #56]	; 0x38
 800aad6:	e7bb      	b.n	800aa50 <_dtoa_r+0x1b0>
 800aad8:	2301      	movs	r3, #1
 800aada:	930a      	str	r3, [sp, #40]	; 0x28
 800aadc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	dd59      	ble.n	800ab96 <_dtoa_r+0x2f6>
 800aae2:	9302      	str	r3, [sp, #8]
 800aae4:	4699      	mov	r9, r3
 800aae6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aae8:	2200      	movs	r2, #0
 800aaea:	6072      	str	r2, [r6, #4]
 800aaec:	2204      	movs	r2, #4
 800aaee:	f102 0014 	add.w	r0, r2, #20
 800aaf2:	4298      	cmp	r0, r3
 800aaf4:	6871      	ldr	r1, [r6, #4]
 800aaf6:	d953      	bls.n	800aba0 <_dtoa_r+0x300>
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f000 fde8 	bl	800b6ce <_Balloc>
 800aafe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab00:	6030      	str	r0, [r6, #0]
 800ab02:	f1b9 0f0e 	cmp.w	r9, #14
 800ab06:	f8d3 b000 	ldr.w	fp, [r3]
 800ab0a:	f200 80e6 	bhi.w	800acda <_dtoa_r+0x43a>
 800ab0e:	2d00      	cmp	r5, #0
 800ab10:	f000 80e3 	beq.w	800acda <_dtoa_r+0x43a>
 800ab14:	ed9d 7b00 	vldr	d7, [sp]
 800ab18:	f1ba 0f00 	cmp.w	sl, #0
 800ab1c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ab20:	dd74      	ble.n	800ac0c <_dtoa_r+0x36c>
 800ab22:	4a2a      	ldr	r2, [pc, #168]	; (800abcc <_dtoa_r+0x32c>)
 800ab24:	f00a 030f 	and.w	r3, sl, #15
 800ab28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab2c:	ed93 7b00 	vldr	d7, [r3]
 800ab30:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ab34:	06f0      	lsls	r0, r6, #27
 800ab36:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ab3a:	d565      	bpl.n	800ac08 <_dtoa_r+0x368>
 800ab3c:	4b24      	ldr	r3, [pc, #144]	; (800abd0 <_dtoa_r+0x330>)
 800ab3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab46:	f7f5 fe89 	bl	800085c <__aeabi_ddiv>
 800ab4a:	e9cd 0100 	strd	r0, r1, [sp]
 800ab4e:	f006 060f 	and.w	r6, r6, #15
 800ab52:	2503      	movs	r5, #3
 800ab54:	4f1e      	ldr	r7, [pc, #120]	; (800abd0 <_dtoa_r+0x330>)
 800ab56:	e04c      	b.n	800abf2 <_dtoa_r+0x352>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab5e:	4453      	add	r3, sl
 800ab60:	f103 0901 	add.w	r9, r3, #1
 800ab64:	9302      	str	r3, [sp, #8]
 800ab66:	464b      	mov	r3, r9
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	bfb8      	it	lt
 800ab6c:	2301      	movlt	r3, #1
 800ab6e:	e7ba      	b.n	800aae6 <_dtoa_r+0x246>
 800ab70:	2300      	movs	r3, #0
 800ab72:	e7b2      	b.n	800aada <_dtoa_r+0x23a>
 800ab74:	2300      	movs	r3, #0
 800ab76:	e7f0      	b.n	800ab5a <_dtoa_r+0x2ba>
 800ab78:	2501      	movs	r5, #1
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	9306      	str	r3, [sp, #24]
 800ab7e:	950a      	str	r5, [sp, #40]	; 0x28
 800ab80:	f04f 33ff 	mov.w	r3, #4294967295
 800ab84:	9302      	str	r3, [sp, #8]
 800ab86:	4699      	mov	r9, r3
 800ab88:	2200      	movs	r2, #0
 800ab8a:	2312      	movs	r3, #18
 800ab8c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ab8e:	e7aa      	b.n	800aae6 <_dtoa_r+0x246>
 800ab90:	2301      	movs	r3, #1
 800ab92:	930a      	str	r3, [sp, #40]	; 0x28
 800ab94:	e7f4      	b.n	800ab80 <_dtoa_r+0x2e0>
 800ab96:	2301      	movs	r3, #1
 800ab98:	9302      	str	r3, [sp, #8]
 800ab9a:	4699      	mov	r9, r3
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	e7f5      	b.n	800ab8c <_dtoa_r+0x2ec>
 800aba0:	3101      	adds	r1, #1
 800aba2:	6071      	str	r1, [r6, #4]
 800aba4:	0052      	lsls	r2, r2, #1
 800aba6:	e7a2      	b.n	800aaee <_dtoa_r+0x24e>
 800aba8:	636f4361 	.word	0x636f4361
 800abac:	3fd287a7 	.word	0x3fd287a7
 800abb0:	8b60c8b3 	.word	0x8b60c8b3
 800abb4:	3fc68a28 	.word	0x3fc68a28
 800abb8:	509f79fb 	.word	0x509f79fb
 800abbc:	3fd34413 	.word	0x3fd34413
 800abc0:	7ff00000 	.word	0x7ff00000
 800abc4:	0800cdad 	.word	0x0800cdad
 800abc8:	3ff80000 	.word	0x3ff80000
 800abcc:	0800ce08 	.word	0x0800ce08
 800abd0:	0800cde0 	.word	0x0800cde0
 800abd4:	0800cdd9 	.word	0x0800cdd9
 800abd8:	07f1      	lsls	r1, r6, #31
 800abda:	d508      	bpl.n	800abee <_dtoa_r+0x34e>
 800abdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800abe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abe4:	f7f5 fd10 	bl	8000608 <__aeabi_dmul>
 800abe8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800abec:	3501      	adds	r5, #1
 800abee:	1076      	asrs	r6, r6, #1
 800abf0:	3708      	adds	r7, #8
 800abf2:	2e00      	cmp	r6, #0
 800abf4:	d1f0      	bne.n	800abd8 <_dtoa_r+0x338>
 800abf6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800abfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abfe:	f7f5 fe2d 	bl	800085c <__aeabi_ddiv>
 800ac02:	e9cd 0100 	strd	r0, r1, [sp]
 800ac06:	e01a      	b.n	800ac3e <_dtoa_r+0x39e>
 800ac08:	2502      	movs	r5, #2
 800ac0a:	e7a3      	b.n	800ab54 <_dtoa_r+0x2b4>
 800ac0c:	f000 80a0 	beq.w	800ad50 <_dtoa_r+0x4b0>
 800ac10:	f1ca 0600 	rsb	r6, sl, #0
 800ac14:	4b9f      	ldr	r3, [pc, #636]	; (800ae94 <_dtoa_r+0x5f4>)
 800ac16:	4fa0      	ldr	r7, [pc, #640]	; (800ae98 <_dtoa_r+0x5f8>)
 800ac18:	f006 020f 	and.w	r2, r6, #15
 800ac1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac28:	f7f5 fcee 	bl	8000608 <__aeabi_dmul>
 800ac2c:	e9cd 0100 	strd	r0, r1, [sp]
 800ac30:	1136      	asrs	r6, r6, #4
 800ac32:	2300      	movs	r3, #0
 800ac34:	2502      	movs	r5, #2
 800ac36:	2e00      	cmp	r6, #0
 800ac38:	d17f      	bne.n	800ad3a <_dtoa_r+0x49a>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1e1      	bne.n	800ac02 <_dtoa_r+0x362>
 800ac3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f000 8087 	beq.w	800ad54 <_dtoa_r+0x4b4>
 800ac46:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	4b93      	ldr	r3, [pc, #588]	; (800ae9c <_dtoa_r+0x5fc>)
 800ac4e:	4630      	mov	r0, r6
 800ac50:	4639      	mov	r1, r7
 800ac52:	f7f5 ff4b 	bl	8000aec <__aeabi_dcmplt>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d07c      	beq.n	800ad54 <_dtoa_r+0x4b4>
 800ac5a:	f1b9 0f00 	cmp.w	r9, #0
 800ac5e:	d079      	beq.n	800ad54 <_dtoa_r+0x4b4>
 800ac60:	9b02      	ldr	r3, [sp, #8]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	dd35      	ble.n	800acd2 <_dtoa_r+0x432>
 800ac66:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ac6a:	9308      	str	r3, [sp, #32]
 800ac6c:	4639      	mov	r1, r7
 800ac6e:	2200      	movs	r2, #0
 800ac70:	4b8b      	ldr	r3, [pc, #556]	; (800aea0 <_dtoa_r+0x600>)
 800ac72:	4630      	mov	r0, r6
 800ac74:	f7f5 fcc8 	bl	8000608 <__aeabi_dmul>
 800ac78:	e9cd 0100 	strd	r0, r1, [sp]
 800ac7c:	9f02      	ldr	r7, [sp, #8]
 800ac7e:	3501      	adds	r5, #1
 800ac80:	4628      	mov	r0, r5
 800ac82:	f7f5 fc57 	bl	8000534 <__aeabi_i2d>
 800ac86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac8a:	f7f5 fcbd 	bl	8000608 <__aeabi_dmul>
 800ac8e:	2200      	movs	r2, #0
 800ac90:	4b84      	ldr	r3, [pc, #528]	; (800aea4 <_dtoa_r+0x604>)
 800ac92:	f7f5 fb03 	bl	800029c <__adddf3>
 800ac96:	4605      	mov	r5, r0
 800ac98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ac9c:	2f00      	cmp	r7, #0
 800ac9e:	d15d      	bne.n	800ad5c <_dtoa_r+0x4bc>
 800aca0:	2200      	movs	r2, #0
 800aca2:	4b81      	ldr	r3, [pc, #516]	; (800aea8 <_dtoa_r+0x608>)
 800aca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aca8:	f7f5 faf6 	bl	8000298 <__aeabi_dsub>
 800acac:	462a      	mov	r2, r5
 800acae:	4633      	mov	r3, r6
 800acb0:	e9cd 0100 	strd	r0, r1, [sp]
 800acb4:	f7f5 ff38 	bl	8000b28 <__aeabi_dcmpgt>
 800acb8:	2800      	cmp	r0, #0
 800acba:	f040 8288 	bne.w	800b1ce <_dtoa_r+0x92e>
 800acbe:	462a      	mov	r2, r5
 800acc0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800acc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acc8:	f7f5 ff10 	bl	8000aec <__aeabi_dcmplt>
 800accc:	2800      	cmp	r0, #0
 800acce:	f040 827c 	bne.w	800b1ca <_dtoa_r+0x92a>
 800acd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800acd6:	e9cd 2300 	strd	r2, r3, [sp]
 800acda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f2c0 8150 	blt.w	800af82 <_dtoa_r+0x6e2>
 800ace2:	f1ba 0f0e 	cmp.w	sl, #14
 800ace6:	f300 814c 	bgt.w	800af82 <_dtoa_r+0x6e2>
 800acea:	4b6a      	ldr	r3, [pc, #424]	; (800ae94 <_dtoa_r+0x5f4>)
 800acec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800acf0:	ed93 7b00 	vldr	d7, [r3]
 800acf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800acfc:	f280 80d8 	bge.w	800aeb0 <_dtoa_r+0x610>
 800ad00:	f1b9 0f00 	cmp.w	r9, #0
 800ad04:	f300 80d4 	bgt.w	800aeb0 <_dtoa_r+0x610>
 800ad08:	f040 825e 	bne.w	800b1c8 <_dtoa_r+0x928>
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	4b66      	ldr	r3, [pc, #408]	; (800aea8 <_dtoa_r+0x608>)
 800ad10:	ec51 0b17 	vmov	r0, r1, d7
 800ad14:	f7f5 fc78 	bl	8000608 <__aeabi_dmul>
 800ad18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad1c:	f7f5 fefa 	bl	8000b14 <__aeabi_dcmpge>
 800ad20:	464f      	mov	r7, r9
 800ad22:	464e      	mov	r6, r9
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f040 8234 	bne.w	800b192 <_dtoa_r+0x8f2>
 800ad2a:	2331      	movs	r3, #49	; 0x31
 800ad2c:	f10b 0501 	add.w	r5, fp, #1
 800ad30:	f88b 3000 	strb.w	r3, [fp]
 800ad34:	f10a 0a01 	add.w	sl, sl, #1
 800ad38:	e22f      	b.n	800b19a <_dtoa_r+0x8fa>
 800ad3a:	07f2      	lsls	r2, r6, #31
 800ad3c:	d505      	bpl.n	800ad4a <_dtoa_r+0x4aa>
 800ad3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad42:	f7f5 fc61 	bl	8000608 <__aeabi_dmul>
 800ad46:	3501      	adds	r5, #1
 800ad48:	2301      	movs	r3, #1
 800ad4a:	1076      	asrs	r6, r6, #1
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	e772      	b.n	800ac36 <_dtoa_r+0x396>
 800ad50:	2502      	movs	r5, #2
 800ad52:	e774      	b.n	800ac3e <_dtoa_r+0x39e>
 800ad54:	f8cd a020 	str.w	sl, [sp, #32]
 800ad58:	464f      	mov	r7, r9
 800ad5a:	e791      	b.n	800ac80 <_dtoa_r+0x3e0>
 800ad5c:	4b4d      	ldr	r3, [pc, #308]	; (800ae94 <_dtoa_r+0x5f4>)
 800ad5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad62:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ad66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d047      	beq.n	800adfc <_dtoa_r+0x55c>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	2000      	movs	r0, #0
 800ad72:	494e      	ldr	r1, [pc, #312]	; (800aeac <_dtoa_r+0x60c>)
 800ad74:	f7f5 fd72 	bl	800085c <__aeabi_ddiv>
 800ad78:	462a      	mov	r2, r5
 800ad7a:	4633      	mov	r3, r6
 800ad7c:	f7f5 fa8c 	bl	8000298 <__aeabi_dsub>
 800ad80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ad84:	465d      	mov	r5, fp
 800ad86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad8a:	f7f5 feed 	bl	8000b68 <__aeabi_d2iz>
 800ad8e:	4606      	mov	r6, r0
 800ad90:	f7f5 fbd0 	bl	8000534 <__aeabi_i2d>
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad9c:	f7f5 fa7c 	bl	8000298 <__aeabi_dsub>
 800ada0:	3630      	adds	r6, #48	; 0x30
 800ada2:	f805 6b01 	strb.w	r6, [r5], #1
 800ada6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800adaa:	e9cd 0100 	strd	r0, r1, [sp]
 800adae:	f7f5 fe9d 	bl	8000aec <__aeabi_dcmplt>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d163      	bne.n	800ae7e <_dtoa_r+0x5de>
 800adb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adba:	2000      	movs	r0, #0
 800adbc:	4937      	ldr	r1, [pc, #220]	; (800ae9c <_dtoa_r+0x5fc>)
 800adbe:	f7f5 fa6b 	bl	8000298 <__aeabi_dsub>
 800adc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800adc6:	f7f5 fe91 	bl	8000aec <__aeabi_dcmplt>
 800adca:	2800      	cmp	r0, #0
 800adcc:	f040 80b7 	bne.w	800af3e <_dtoa_r+0x69e>
 800add0:	eba5 030b 	sub.w	r3, r5, fp
 800add4:	429f      	cmp	r7, r3
 800add6:	f77f af7c 	ble.w	800acd2 <_dtoa_r+0x432>
 800adda:	2200      	movs	r2, #0
 800addc:	4b30      	ldr	r3, [pc, #192]	; (800aea0 <_dtoa_r+0x600>)
 800adde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ade2:	f7f5 fc11 	bl	8000608 <__aeabi_dmul>
 800ade6:	2200      	movs	r2, #0
 800ade8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800adec:	4b2c      	ldr	r3, [pc, #176]	; (800aea0 <_dtoa_r+0x600>)
 800adee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adf2:	f7f5 fc09 	bl	8000608 <__aeabi_dmul>
 800adf6:	e9cd 0100 	strd	r0, r1, [sp]
 800adfa:	e7c4      	b.n	800ad86 <_dtoa_r+0x4e6>
 800adfc:	462a      	mov	r2, r5
 800adfe:	4633      	mov	r3, r6
 800ae00:	f7f5 fc02 	bl	8000608 <__aeabi_dmul>
 800ae04:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ae08:	eb0b 0507 	add.w	r5, fp, r7
 800ae0c:	465e      	mov	r6, fp
 800ae0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae12:	f7f5 fea9 	bl	8000b68 <__aeabi_d2iz>
 800ae16:	4607      	mov	r7, r0
 800ae18:	f7f5 fb8c 	bl	8000534 <__aeabi_i2d>
 800ae1c:	3730      	adds	r7, #48	; 0x30
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae26:	f7f5 fa37 	bl	8000298 <__aeabi_dsub>
 800ae2a:	f806 7b01 	strb.w	r7, [r6], #1
 800ae2e:	42ae      	cmp	r6, r5
 800ae30:	e9cd 0100 	strd	r0, r1, [sp]
 800ae34:	f04f 0200 	mov.w	r2, #0
 800ae38:	d126      	bne.n	800ae88 <_dtoa_r+0x5e8>
 800ae3a:	4b1c      	ldr	r3, [pc, #112]	; (800aeac <_dtoa_r+0x60c>)
 800ae3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae40:	f7f5 fa2c 	bl	800029c <__adddf3>
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae4c:	f7f5 fe6c 	bl	8000b28 <__aeabi_dcmpgt>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d174      	bne.n	800af3e <_dtoa_r+0x69e>
 800ae54:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ae58:	2000      	movs	r0, #0
 800ae5a:	4914      	ldr	r1, [pc, #80]	; (800aeac <_dtoa_r+0x60c>)
 800ae5c:	f7f5 fa1c 	bl	8000298 <__aeabi_dsub>
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae68:	f7f5 fe40 	bl	8000aec <__aeabi_dcmplt>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	f43f af30 	beq.w	800acd2 <_dtoa_r+0x432>
 800ae72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae76:	2b30      	cmp	r3, #48	; 0x30
 800ae78:	f105 32ff 	add.w	r2, r5, #4294967295
 800ae7c:	d002      	beq.n	800ae84 <_dtoa_r+0x5e4>
 800ae7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ae82:	e04a      	b.n	800af1a <_dtoa_r+0x67a>
 800ae84:	4615      	mov	r5, r2
 800ae86:	e7f4      	b.n	800ae72 <_dtoa_r+0x5d2>
 800ae88:	4b05      	ldr	r3, [pc, #20]	; (800aea0 <_dtoa_r+0x600>)
 800ae8a:	f7f5 fbbd 	bl	8000608 <__aeabi_dmul>
 800ae8e:	e9cd 0100 	strd	r0, r1, [sp]
 800ae92:	e7bc      	b.n	800ae0e <_dtoa_r+0x56e>
 800ae94:	0800ce08 	.word	0x0800ce08
 800ae98:	0800cde0 	.word	0x0800cde0
 800ae9c:	3ff00000 	.word	0x3ff00000
 800aea0:	40240000 	.word	0x40240000
 800aea4:	401c0000 	.word	0x401c0000
 800aea8:	40140000 	.word	0x40140000
 800aeac:	3fe00000 	.word	0x3fe00000
 800aeb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aeb4:	465d      	mov	r5, fp
 800aeb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeba:	4630      	mov	r0, r6
 800aebc:	4639      	mov	r1, r7
 800aebe:	f7f5 fccd 	bl	800085c <__aeabi_ddiv>
 800aec2:	f7f5 fe51 	bl	8000b68 <__aeabi_d2iz>
 800aec6:	4680      	mov	r8, r0
 800aec8:	f7f5 fb34 	bl	8000534 <__aeabi_i2d>
 800aecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aed0:	f7f5 fb9a 	bl	8000608 <__aeabi_dmul>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	4630      	mov	r0, r6
 800aeda:	4639      	mov	r1, r7
 800aedc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800aee0:	f7f5 f9da 	bl	8000298 <__aeabi_dsub>
 800aee4:	f805 6b01 	strb.w	r6, [r5], #1
 800aee8:	eba5 060b 	sub.w	r6, r5, fp
 800aeec:	45b1      	cmp	r9, r6
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	d139      	bne.n	800af68 <_dtoa_r+0x6c8>
 800aef4:	f7f5 f9d2 	bl	800029c <__adddf3>
 800aef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aefc:	4606      	mov	r6, r0
 800aefe:	460f      	mov	r7, r1
 800af00:	f7f5 fe12 	bl	8000b28 <__aeabi_dcmpgt>
 800af04:	b9c8      	cbnz	r0, 800af3a <_dtoa_r+0x69a>
 800af06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af0a:	4630      	mov	r0, r6
 800af0c:	4639      	mov	r1, r7
 800af0e:	f7f5 fde3 	bl	8000ad8 <__aeabi_dcmpeq>
 800af12:	b110      	cbz	r0, 800af1a <_dtoa_r+0x67a>
 800af14:	f018 0f01 	tst.w	r8, #1
 800af18:	d10f      	bne.n	800af3a <_dtoa_r+0x69a>
 800af1a:	9904      	ldr	r1, [sp, #16]
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 fc0a 	bl	800b736 <_Bfree>
 800af22:	2300      	movs	r3, #0
 800af24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af26:	702b      	strb	r3, [r5, #0]
 800af28:	f10a 0301 	add.w	r3, sl, #1
 800af2c:	6013      	str	r3, [r2, #0]
 800af2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 8241 	beq.w	800b3b8 <_dtoa_r+0xb18>
 800af36:	601d      	str	r5, [r3, #0]
 800af38:	e23e      	b.n	800b3b8 <_dtoa_r+0xb18>
 800af3a:	f8cd a020 	str.w	sl, [sp, #32]
 800af3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800af42:	2a39      	cmp	r2, #57	; 0x39
 800af44:	f105 33ff 	add.w	r3, r5, #4294967295
 800af48:	d108      	bne.n	800af5c <_dtoa_r+0x6bc>
 800af4a:	459b      	cmp	fp, r3
 800af4c:	d10a      	bne.n	800af64 <_dtoa_r+0x6c4>
 800af4e:	9b08      	ldr	r3, [sp, #32]
 800af50:	3301      	adds	r3, #1
 800af52:	9308      	str	r3, [sp, #32]
 800af54:	2330      	movs	r3, #48	; 0x30
 800af56:	f88b 3000 	strb.w	r3, [fp]
 800af5a:	465b      	mov	r3, fp
 800af5c:	781a      	ldrb	r2, [r3, #0]
 800af5e:	3201      	adds	r2, #1
 800af60:	701a      	strb	r2, [r3, #0]
 800af62:	e78c      	b.n	800ae7e <_dtoa_r+0x5de>
 800af64:	461d      	mov	r5, r3
 800af66:	e7ea      	b.n	800af3e <_dtoa_r+0x69e>
 800af68:	2200      	movs	r2, #0
 800af6a:	4b9b      	ldr	r3, [pc, #620]	; (800b1d8 <_dtoa_r+0x938>)
 800af6c:	f7f5 fb4c 	bl	8000608 <__aeabi_dmul>
 800af70:	2200      	movs	r2, #0
 800af72:	2300      	movs	r3, #0
 800af74:	4606      	mov	r6, r0
 800af76:	460f      	mov	r7, r1
 800af78:	f7f5 fdae 	bl	8000ad8 <__aeabi_dcmpeq>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	d09a      	beq.n	800aeb6 <_dtoa_r+0x616>
 800af80:	e7cb      	b.n	800af1a <_dtoa_r+0x67a>
 800af82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af84:	2a00      	cmp	r2, #0
 800af86:	f000 808b 	beq.w	800b0a0 <_dtoa_r+0x800>
 800af8a:	9a06      	ldr	r2, [sp, #24]
 800af8c:	2a01      	cmp	r2, #1
 800af8e:	dc6e      	bgt.n	800b06e <_dtoa_r+0x7ce>
 800af90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800af92:	2a00      	cmp	r2, #0
 800af94:	d067      	beq.n	800b066 <_dtoa_r+0x7c6>
 800af96:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af9a:	9f07      	ldr	r7, [sp, #28]
 800af9c:	9d05      	ldr	r5, [sp, #20]
 800af9e:	9a05      	ldr	r2, [sp, #20]
 800afa0:	2101      	movs	r1, #1
 800afa2:	441a      	add	r2, r3
 800afa4:	4620      	mov	r0, r4
 800afa6:	9205      	str	r2, [sp, #20]
 800afa8:	4498      	add	r8, r3
 800afaa:	f000 fc64 	bl	800b876 <__i2b>
 800afae:	4606      	mov	r6, r0
 800afb0:	2d00      	cmp	r5, #0
 800afb2:	dd0c      	ble.n	800afce <_dtoa_r+0x72e>
 800afb4:	f1b8 0f00 	cmp.w	r8, #0
 800afb8:	dd09      	ble.n	800afce <_dtoa_r+0x72e>
 800afba:	4545      	cmp	r5, r8
 800afbc:	9a05      	ldr	r2, [sp, #20]
 800afbe:	462b      	mov	r3, r5
 800afc0:	bfa8      	it	ge
 800afc2:	4643      	movge	r3, r8
 800afc4:	1ad2      	subs	r2, r2, r3
 800afc6:	9205      	str	r2, [sp, #20]
 800afc8:	1aed      	subs	r5, r5, r3
 800afca:	eba8 0803 	sub.w	r8, r8, r3
 800afce:	9b07      	ldr	r3, [sp, #28]
 800afd0:	b1eb      	cbz	r3, 800b00e <_dtoa_r+0x76e>
 800afd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d067      	beq.n	800b0a8 <_dtoa_r+0x808>
 800afd8:	b18f      	cbz	r7, 800affe <_dtoa_r+0x75e>
 800afda:	4631      	mov	r1, r6
 800afdc:	463a      	mov	r2, r7
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 fce8 	bl	800b9b4 <__pow5mult>
 800afe4:	9a04      	ldr	r2, [sp, #16]
 800afe6:	4601      	mov	r1, r0
 800afe8:	4606      	mov	r6, r0
 800afea:	4620      	mov	r0, r4
 800afec:	f000 fc4c 	bl	800b888 <__multiply>
 800aff0:	9904      	ldr	r1, [sp, #16]
 800aff2:	9008      	str	r0, [sp, #32]
 800aff4:	4620      	mov	r0, r4
 800aff6:	f000 fb9e 	bl	800b736 <_Bfree>
 800affa:	9b08      	ldr	r3, [sp, #32]
 800affc:	9304      	str	r3, [sp, #16]
 800affe:	9b07      	ldr	r3, [sp, #28]
 800b000:	1bda      	subs	r2, r3, r7
 800b002:	d004      	beq.n	800b00e <_dtoa_r+0x76e>
 800b004:	9904      	ldr	r1, [sp, #16]
 800b006:	4620      	mov	r0, r4
 800b008:	f000 fcd4 	bl	800b9b4 <__pow5mult>
 800b00c:	9004      	str	r0, [sp, #16]
 800b00e:	2101      	movs	r1, #1
 800b010:	4620      	mov	r0, r4
 800b012:	f000 fc30 	bl	800b876 <__i2b>
 800b016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b018:	4607      	mov	r7, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 81d0 	beq.w	800b3c0 <_dtoa_r+0xb20>
 800b020:	461a      	mov	r2, r3
 800b022:	4601      	mov	r1, r0
 800b024:	4620      	mov	r0, r4
 800b026:	f000 fcc5 	bl	800b9b4 <__pow5mult>
 800b02a:	9b06      	ldr	r3, [sp, #24]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	4607      	mov	r7, r0
 800b030:	dc40      	bgt.n	800b0b4 <_dtoa_r+0x814>
 800b032:	9b00      	ldr	r3, [sp, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d139      	bne.n	800b0ac <_dtoa_r+0x80c>
 800b038:	9b01      	ldr	r3, [sp, #4]
 800b03a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d136      	bne.n	800b0b0 <_dtoa_r+0x810>
 800b042:	9b01      	ldr	r3, [sp, #4]
 800b044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b048:	0d1b      	lsrs	r3, r3, #20
 800b04a:	051b      	lsls	r3, r3, #20
 800b04c:	b12b      	cbz	r3, 800b05a <_dtoa_r+0x7ba>
 800b04e:	9b05      	ldr	r3, [sp, #20]
 800b050:	3301      	adds	r3, #1
 800b052:	9305      	str	r3, [sp, #20]
 800b054:	f108 0801 	add.w	r8, r8, #1
 800b058:	2301      	movs	r3, #1
 800b05a:	9307      	str	r3, [sp, #28]
 800b05c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d12a      	bne.n	800b0b8 <_dtoa_r+0x818>
 800b062:	2001      	movs	r0, #1
 800b064:	e030      	b.n	800b0c8 <_dtoa_r+0x828>
 800b066:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b068:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b06c:	e795      	b.n	800af9a <_dtoa_r+0x6fa>
 800b06e:	9b07      	ldr	r3, [sp, #28]
 800b070:	f109 37ff 	add.w	r7, r9, #4294967295
 800b074:	42bb      	cmp	r3, r7
 800b076:	bfbf      	itttt	lt
 800b078:	9b07      	ldrlt	r3, [sp, #28]
 800b07a:	9707      	strlt	r7, [sp, #28]
 800b07c:	1afa      	sublt	r2, r7, r3
 800b07e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b080:	bfbb      	ittet	lt
 800b082:	189b      	addlt	r3, r3, r2
 800b084:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b086:	1bdf      	subge	r7, r3, r7
 800b088:	2700      	movlt	r7, #0
 800b08a:	f1b9 0f00 	cmp.w	r9, #0
 800b08e:	bfb5      	itete	lt
 800b090:	9b05      	ldrlt	r3, [sp, #20]
 800b092:	9d05      	ldrge	r5, [sp, #20]
 800b094:	eba3 0509 	sublt.w	r5, r3, r9
 800b098:	464b      	movge	r3, r9
 800b09a:	bfb8      	it	lt
 800b09c:	2300      	movlt	r3, #0
 800b09e:	e77e      	b.n	800af9e <_dtoa_r+0x6fe>
 800b0a0:	9f07      	ldr	r7, [sp, #28]
 800b0a2:	9d05      	ldr	r5, [sp, #20]
 800b0a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b0a6:	e783      	b.n	800afb0 <_dtoa_r+0x710>
 800b0a8:	9a07      	ldr	r2, [sp, #28]
 800b0aa:	e7ab      	b.n	800b004 <_dtoa_r+0x764>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	e7d4      	b.n	800b05a <_dtoa_r+0x7ba>
 800b0b0:	9b00      	ldr	r3, [sp, #0]
 800b0b2:	e7d2      	b.n	800b05a <_dtoa_r+0x7ba>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	9307      	str	r3, [sp, #28]
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b0be:	6918      	ldr	r0, [r3, #16]
 800b0c0:	f000 fb8b 	bl	800b7da <__hi0bits>
 800b0c4:	f1c0 0020 	rsb	r0, r0, #32
 800b0c8:	4440      	add	r0, r8
 800b0ca:	f010 001f 	ands.w	r0, r0, #31
 800b0ce:	d047      	beq.n	800b160 <_dtoa_r+0x8c0>
 800b0d0:	f1c0 0320 	rsb	r3, r0, #32
 800b0d4:	2b04      	cmp	r3, #4
 800b0d6:	dd3b      	ble.n	800b150 <_dtoa_r+0x8b0>
 800b0d8:	9b05      	ldr	r3, [sp, #20]
 800b0da:	f1c0 001c 	rsb	r0, r0, #28
 800b0de:	4403      	add	r3, r0
 800b0e0:	9305      	str	r3, [sp, #20]
 800b0e2:	4405      	add	r5, r0
 800b0e4:	4480      	add	r8, r0
 800b0e6:	9b05      	ldr	r3, [sp, #20]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	dd05      	ble.n	800b0f8 <_dtoa_r+0x858>
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	9904      	ldr	r1, [sp, #16]
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f000 fcad 	bl	800ba50 <__lshift>
 800b0f6:	9004      	str	r0, [sp, #16]
 800b0f8:	f1b8 0f00 	cmp.w	r8, #0
 800b0fc:	dd05      	ble.n	800b10a <_dtoa_r+0x86a>
 800b0fe:	4639      	mov	r1, r7
 800b100:	4642      	mov	r2, r8
 800b102:	4620      	mov	r0, r4
 800b104:	f000 fca4 	bl	800ba50 <__lshift>
 800b108:	4607      	mov	r7, r0
 800b10a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b10c:	b353      	cbz	r3, 800b164 <_dtoa_r+0x8c4>
 800b10e:	4639      	mov	r1, r7
 800b110:	9804      	ldr	r0, [sp, #16]
 800b112:	f000 fcf1 	bl	800baf8 <__mcmp>
 800b116:	2800      	cmp	r0, #0
 800b118:	da24      	bge.n	800b164 <_dtoa_r+0x8c4>
 800b11a:	2300      	movs	r3, #0
 800b11c:	220a      	movs	r2, #10
 800b11e:	9904      	ldr	r1, [sp, #16]
 800b120:	4620      	mov	r0, r4
 800b122:	f000 fb1f 	bl	800b764 <__multadd>
 800b126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b128:	9004      	str	r0, [sp, #16]
 800b12a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f000 814d 	beq.w	800b3ce <_dtoa_r+0xb2e>
 800b134:	2300      	movs	r3, #0
 800b136:	4631      	mov	r1, r6
 800b138:	220a      	movs	r2, #10
 800b13a:	4620      	mov	r0, r4
 800b13c:	f000 fb12 	bl	800b764 <__multadd>
 800b140:	9b02      	ldr	r3, [sp, #8]
 800b142:	2b00      	cmp	r3, #0
 800b144:	4606      	mov	r6, r0
 800b146:	dc4f      	bgt.n	800b1e8 <_dtoa_r+0x948>
 800b148:	9b06      	ldr	r3, [sp, #24]
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	dd4c      	ble.n	800b1e8 <_dtoa_r+0x948>
 800b14e:	e011      	b.n	800b174 <_dtoa_r+0x8d4>
 800b150:	d0c9      	beq.n	800b0e6 <_dtoa_r+0x846>
 800b152:	9a05      	ldr	r2, [sp, #20]
 800b154:	331c      	adds	r3, #28
 800b156:	441a      	add	r2, r3
 800b158:	9205      	str	r2, [sp, #20]
 800b15a:	441d      	add	r5, r3
 800b15c:	4498      	add	r8, r3
 800b15e:	e7c2      	b.n	800b0e6 <_dtoa_r+0x846>
 800b160:	4603      	mov	r3, r0
 800b162:	e7f6      	b.n	800b152 <_dtoa_r+0x8b2>
 800b164:	f1b9 0f00 	cmp.w	r9, #0
 800b168:	dc38      	bgt.n	800b1dc <_dtoa_r+0x93c>
 800b16a:	9b06      	ldr	r3, [sp, #24]
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	dd35      	ble.n	800b1dc <_dtoa_r+0x93c>
 800b170:	f8cd 9008 	str.w	r9, [sp, #8]
 800b174:	9b02      	ldr	r3, [sp, #8]
 800b176:	b963      	cbnz	r3, 800b192 <_dtoa_r+0x8f2>
 800b178:	4639      	mov	r1, r7
 800b17a:	2205      	movs	r2, #5
 800b17c:	4620      	mov	r0, r4
 800b17e:	f000 faf1 	bl	800b764 <__multadd>
 800b182:	4601      	mov	r1, r0
 800b184:	4607      	mov	r7, r0
 800b186:	9804      	ldr	r0, [sp, #16]
 800b188:	f000 fcb6 	bl	800baf8 <__mcmp>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	f73f adcc 	bgt.w	800ad2a <_dtoa_r+0x48a>
 800b192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b194:	465d      	mov	r5, fp
 800b196:	ea6f 0a03 	mvn.w	sl, r3
 800b19a:	f04f 0900 	mov.w	r9, #0
 800b19e:	4639      	mov	r1, r7
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f000 fac8 	bl	800b736 <_Bfree>
 800b1a6:	2e00      	cmp	r6, #0
 800b1a8:	f43f aeb7 	beq.w	800af1a <_dtoa_r+0x67a>
 800b1ac:	f1b9 0f00 	cmp.w	r9, #0
 800b1b0:	d005      	beq.n	800b1be <_dtoa_r+0x91e>
 800b1b2:	45b1      	cmp	r9, r6
 800b1b4:	d003      	beq.n	800b1be <_dtoa_r+0x91e>
 800b1b6:	4649      	mov	r1, r9
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	f000 fabc 	bl	800b736 <_Bfree>
 800b1be:	4631      	mov	r1, r6
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f000 fab8 	bl	800b736 <_Bfree>
 800b1c6:	e6a8      	b.n	800af1a <_dtoa_r+0x67a>
 800b1c8:	2700      	movs	r7, #0
 800b1ca:	463e      	mov	r6, r7
 800b1cc:	e7e1      	b.n	800b192 <_dtoa_r+0x8f2>
 800b1ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b1d2:	463e      	mov	r6, r7
 800b1d4:	e5a9      	b.n	800ad2a <_dtoa_r+0x48a>
 800b1d6:	bf00      	nop
 800b1d8:	40240000 	.word	0x40240000
 800b1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1de:	f8cd 9008 	str.w	r9, [sp, #8]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f000 80fa 	beq.w	800b3dc <_dtoa_r+0xb3c>
 800b1e8:	2d00      	cmp	r5, #0
 800b1ea:	dd05      	ble.n	800b1f8 <_dtoa_r+0x958>
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	462a      	mov	r2, r5
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f000 fc2d 	bl	800ba50 <__lshift>
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	9b07      	ldr	r3, [sp, #28]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d04c      	beq.n	800b298 <_dtoa_r+0x9f8>
 800b1fe:	6871      	ldr	r1, [r6, #4]
 800b200:	4620      	mov	r0, r4
 800b202:	f000 fa64 	bl	800b6ce <_Balloc>
 800b206:	6932      	ldr	r2, [r6, #16]
 800b208:	3202      	adds	r2, #2
 800b20a:	4605      	mov	r5, r0
 800b20c:	0092      	lsls	r2, r2, #2
 800b20e:	f106 010c 	add.w	r1, r6, #12
 800b212:	300c      	adds	r0, #12
 800b214:	f000 fa50 	bl	800b6b8 <memcpy>
 800b218:	2201      	movs	r2, #1
 800b21a:	4629      	mov	r1, r5
 800b21c:	4620      	mov	r0, r4
 800b21e:	f000 fc17 	bl	800ba50 <__lshift>
 800b222:	9b00      	ldr	r3, [sp, #0]
 800b224:	f8cd b014 	str.w	fp, [sp, #20]
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	46b1      	mov	r9, r6
 800b22e:	9307      	str	r3, [sp, #28]
 800b230:	4606      	mov	r6, r0
 800b232:	4639      	mov	r1, r7
 800b234:	9804      	ldr	r0, [sp, #16]
 800b236:	f7ff faa5 	bl	800a784 <quorem>
 800b23a:	4649      	mov	r1, r9
 800b23c:	4605      	mov	r5, r0
 800b23e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b242:	9804      	ldr	r0, [sp, #16]
 800b244:	f000 fc58 	bl	800baf8 <__mcmp>
 800b248:	4632      	mov	r2, r6
 800b24a:	9000      	str	r0, [sp, #0]
 800b24c:	4639      	mov	r1, r7
 800b24e:	4620      	mov	r0, r4
 800b250:	f000 fc6c 	bl	800bb2c <__mdiff>
 800b254:	68c3      	ldr	r3, [r0, #12]
 800b256:	4602      	mov	r2, r0
 800b258:	bb03      	cbnz	r3, 800b29c <_dtoa_r+0x9fc>
 800b25a:	4601      	mov	r1, r0
 800b25c:	9008      	str	r0, [sp, #32]
 800b25e:	9804      	ldr	r0, [sp, #16]
 800b260:	f000 fc4a 	bl	800baf8 <__mcmp>
 800b264:	9a08      	ldr	r2, [sp, #32]
 800b266:	4603      	mov	r3, r0
 800b268:	4611      	mov	r1, r2
 800b26a:	4620      	mov	r0, r4
 800b26c:	9308      	str	r3, [sp, #32]
 800b26e:	f000 fa62 	bl	800b736 <_Bfree>
 800b272:	9b08      	ldr	r3, [sp, #32]
 800b274:	b9a3      	cbnz	r3, 800b2a0 <_dtoa_r+0xa00>
 800b276:	9a06      	ldr	r2, [sp, #24]
 800b278:	b992      	cbnz	r2, 800b2a0 <_dtoa_r+0xa00>
 800b27a:	9a07      	ldr	r2, [sp, #28]
 800b27c:	b982      	cbnz	r2, 800b2a0 <_dtoa_r+0xa00>
 800b27e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b282:	d029      	beq.n	800b2d8 <_dtoa_r+0xa38>
 800b284:	9b00      	ldr	r3, [sp, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	dd01      	ble.n	800b28e <_dtoa_r+0x9ee>
 800b28a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b28e:	9b05      	ldr	r3, [sp, #20]
 800b290:	1c5d      	adds	r5, r3, #1
 800b292:	f883 8000 	strb.w	r8, [r3]
 800b296:	e782      	b.n	800b19e <_dtoa_r+0x8fe>
 800b298:	4630      	mov	r0, r6
 800b29a:	e7c2      	b.n	800b222 <_dtoa_r+0x982>
 800b29c:	2301      	movs	r3, #1
 800b29e:	e7e3      	b.n	800b268 <_dtoa_r+0x9c8>
 800b2a0:	9a00      	ldr	r2, [sp, #0]
 800b2a2:	2a00      	cmp	r2, #0
 800b2a4:	db04      	blt.n	800b2b0 <_dtoa_r+0xa10>
 800b2a6:	d125      	bne.n	800b2f4 <_dtoa_r+0xa54>
 800b2a8:	9a06      	ldr	r2, [sp, #24]
 800b2aa:	bb1a      	cbnz	r2, 800b2f4 <_dtoa_r+0xa54>
 800b2ac:	9a07      	ldr	r2, [sp, #28]
 800b2ae:	bb0a      	cbnz	r2, 800b2f4 <_dtoa_r+0xa54>
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	ddec      	ble.n	800b28e <_dtoa_r+0x9ee>
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	9904      	ldr	r1, [sp, #16]
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f000 fbc9 	bl	800ba50 <__lshift>
 800b2be:	4639      	mov	r1, r7
 800b2c0:	9004      	str	r0, [sp, #16]
 800b2c2:	f000 fc19 	bl	800baf8 <__mcmp>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	dc03      	bgt.n	800b2d2 <_dtoa_r+0xa32>
 800b2ca:	d1e0      	bne.n	800b28e <_dtoa_r+0x9ee>
 800b2cc:	f018 0f01 	tst.w	r8, #1
 800b2d0:	d0dd      	beq.n	800b28e <_dtoa_r+0x9ee>
 800b2d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b2d6:	d1d8      	bne.n	800b28a <_dtoa_r+0x9ea>
 800b2d8:	9b05      	ldr	r3, [sp, #20]
 800b2da:	9a05      	ldr	r2, [sp, #20]
 800b2dc:	1c5d      	adds	r5, r3, #1
 800b2de:	2339      	movs	r3, #57	; 0x39
 800b2e0:	7013      	strb	r3, [r2, #0]
 800b2e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b2e6:	2b39      	cmp	r3, #57	; 0x39
 800b2e8:	f105 32ff 	add.w	r2, r5, #4294967295
 800b2ec:	d04f      	beq.n	800b38e <_dtoa_r+0xaee>
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	7013      	strb	r3, [r2, #0]
 800b2f2:	e754      	b.n	800b19e <_dtoa_r+0x8fe>
 800b2f4:	9a05      	ldr	r2, [sp, #20]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f102 0501 	add.w	r5, r2, #1
 800b2fc:	dd06      	ble.n	800b30c <_dtoa_r+0xa6c>
 800b2fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b302:	d0e9      	beq.n	800b2d8 <_dtoa_r+0xa38>
 800b304:	f108 0801 	add.w	r8, r8, #1
 800b308:	9b05      	ldr	r3, [sp, #20]
 800b30a:	e7c2      	b.n	800b292 <_dtoa_r+0x9f2>
 800b30c:	9a02      	ldr	r2, [sp, #8]
 800b30e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b312:	eba5 030b 	sub.w	r3, r5, fp
 800b316:	4293      	cmp	r3, r2
 800b318:	d021      	beq.n	800b35e <_dtoa_r+0xabe>
 800b31a:	2300      	movs	r3, #0
 800b31c:	220a      	movs	r2, #10
 800b31e:	9904      	ldr	r1, [sp, #16]
 800b320:	4620      	mov	r0, r4
 800b322:	f000 fa1f 	bl	800b764 <__multadd>
 800b326:	45b1      	cmp	r9, r6
 800b328:	9004      	str	r0, [sp, #16]
 800b32a:	f04f 0300 	mov.w	r3, #0
 800b32e:	f04f 020a 	mov.w	r2, #10
 800b332:	4649      	mov	r1, r9
 800b334:	4620      	mov	r0, r4
 800b336:	d105      	bne.n	800b344 <_dtoa_r+0xaa4>
 800b338:	f000 fa14 	bl	800b764 <__multadd>
 800b33c:	4681      	mov	r9, r0
 800b33e:	4606      	mov	r6, r0
 800b340:	9505      	str	r5, [sp, #20]
 800b342:	e776      	b.n	800b232 <_dtoa_r+0x992>
 800b344:	f000 fa0e 	bl	800b764 <__multadd>
 800b348:	4631      	mov	r1, r6
 800b34a:	4681      	mov	r9, r0
 800b34c:	2300      	movs	r3, #0
 800b34e:	220a      	movs	r2, #10
 800b350:	4620      	mov	r0, r4
 800b352:	f000 fa07 	bl	800b764 <__multadd>
 800b356:	4606      	mov	r6, r0
 800b358:	e7f2      	b.n	800b340 <_dtoa_r+0xaa0>
 800b35a:	f04f 0900 	mov.w	r9, #0
 800b35e:	2201      	movs	r2, #1
 800b360:	9904      	ldr	r1, [sp, #16]
 800b362:	4620      	mov	r0, r4
 800b364:	f000 fb74 	bl	800ba50 <__lshift>
 800b368:	4639      	mov	r1, r7
 800b36a:	9004      	str	r0, [sp, #16]
 800b36c:	f000 fbc4 	bl	800baf8 <__mcmp>
 800b370:	2800      	cmp	r0, #0
 800b372:	dcb6      	bgt.n	800b2e2 <_dtoa_r+0xa42>
 800b374:	d102      	bne.n	800b37c <_dtoa_r+0xadc>
 800b376:	f018 0f01 	tst.w	r8, #1
 800b37a:	d1b2      	bne.n	800b2e2 <_dtoa_r+0xa42>
 800b37c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b380:	2b30      	cmp	r3, #48	; 0x30
 800b382:	f105 32ff 	add.w	r2, r5, #4294967295
 800b386:	f47f af0a 	bne.w	800b19e <_dtoa_r+0x8fe>
 800b38a:	4615      	mov	r5, r2
 800b38c:	e7f6      	b.n	800b37c <_dtoa_r+0xadc>
 800b38e:	4593      	cmp	fp, r2
 800b390:	d105      	bne.n	800b39e <_dtoa_r+0xafe>
 800b392:	2331      	movs	r3, #49	; 0x31
 800b394:	f10a 0a01 	add.w	sl, sl, #1
 800b398:	f88b 3000 	strb.w	r3, [fp]
 800b39c:	e6ff      	b.n	800b19e <_dtoa_r+0x8fe>
 800b39e:	4615      	mov	r5, r2
 800b3a0:	e79f      	b.n	800b2e2 <_dtoa_r+0xa42>
 800b3a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b408 <_dtoa_r+0xb68>
 800b3a6:	e007      	b.n	800b3b8 <_dtoa_r+0xb18>
 800b3a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3aa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b40c <_dtoa_r+0xb6c>
 800b3ae:	b11b      	cbz	r3, 800b3b8 <_dtoa_r+0xb18>
 800b3b0:	f10b 0308 	add.w	r3, fp, #8
 800b3b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b3b6:	6013      	str	r3, [r2, #0]
 800b3b8:	4658      	mov	r0, fp
 800b3ba:	b017      	add	sp, #92	; 0x5c
 800b3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c0:	9b06      	ldr	r3, [sp, #24]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	f77f ae35 	ble.w	800b032 <_dtoa_r+0x792>
 800b3c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3ca:	9307      	str	r3, [sp, #28]
 800b3cc:	e649      	b.n	800b062 <_dtoa_r+0x7c2>
 800b3ce:	9b02      	ldr	r3, [sp, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	dc03      	bgt.n	800b3dc <_dtoa_r+0xb3c>
 800b3d4:	9b06      	ldr	r3, [sp, #24]
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	f73f aecc 	bgt.w	800b174 <_dtoa_r+0x8d4>
 800b3dc:	465d      	mov	r5, fp
 800b3de:	4639      	mov	r1, r7
 800b3e0:	9804      	ldr	r0, [sp, #16]
 800b3e2:	f7ff f9cf 	bl	800a784 <quorem>
 800b3e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b3ea:	f805 8b01 	strb.w	r8, [r5], #1
 800b3ee:	9a02      	ldr	r2, [sp, #8]
 800b3f0:	eba5 030b 	sub.w	r3, r5, fp
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	ddb0      	ble.n	800b35a <_dtoa_r+0xaba>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	220a      	movs	r2, #10
 800b3fc:	9904      	ldr	r1, [sp, #16]
 800b3fe:	4620      	mov	r0, r4
 800b400:	f000 f9b0 	bl	800b764 <__multadd>
 800b404:	9004      	str	r0, [sp, #16]
 800b406:	e7ea      	b.n	800b3de <_dtoa_r+0xb3e>
 800b408:	0800cdac 	.word	0x0800cdac
 800b40c:	0800cdd0 	.word	0x0800cdd0

0800b410 <print_e>:
 800b410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b412:	b087      	sub	sp, #28
 800b414:	ec43 2b10 	vmov	d0, r2, r3
 800b418:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b41a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800b41e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b420:	ab04      	add	r3, sp, #16
 800b422:	9301      	str	r3, [sp, #4]
 800b424:	ab03      	add	r3, sp, #12
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	460f      	mov	r7, r1
 800b42a:	ab05      	add	r3, sp, #20
 800b42c:	2102      	movs	r1, #2
 800b42e:	1c62      	adds	r2, r4, #1
 800b430:	f7ff fa36 	bl	800a8a0 <_dtoa_r>
 800b434:	4601      	mov	r1, r0
 800b436:	9805      	ldr	r0, [sp, #20]
 800b438:	f242 730f 	movw	r3, #9999	; 0x270f
 800b43c:	4298      	cmp	r0, r3
 800b43e:	d104      	bne.n	800b44a <print_e+0x3a>
 800b440:	4638      	mov	r0, r7
 800b442:	f000 fe7b 	bl	800c13c <strcpy>
 800b446:	b007      	add	sp, #28
 800b448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b44a:	780b      	ldrb	r3, [r1, #0]
 800b44c:	703b      	strb	r3, [r7, #0]
 800b44e:	2d00      	cmp	r5, #0
 800b450:	d143      	bne.n	800b4da <print_e+0xca>
 800b452:	2c00      	cmp	r4, #0
 800b454:	d141      	bne.n	800b4da <print_e+0xca>
 800b456:	1c7b      	adds	r3, r7, #1
 800b458:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b45c:	b10a      	cbz	r2, 800b462 <print_e+0x52>
 800b45e:	2c00      	cmp	r4, #0
 800b460:	dc3f      	bgt.n	800b4e2 <print_e+0xd2>
 800b462:	2e67      	cmp	r6, #103	; 0x67
 800b464:	d044      	beq.n	800b4f0 <print_e+0xe0>
 800b466:	2e47      	cmp	r6, #71	; 0x47
 800b468:	d044      	beq.n	800b4f4 <print_e+0xe4>
 800b46a:	461a      	mov	r2, r3
 800b46c:	191d      	adds	r5, r3, r4
 800b46e:	2730      	movs	r7, #48	; 0x30
 800b470:	1aa9      	subs	r1, r5, r2
 800b472:	2900      	cmp	r1, #0
 800b474:	dc39      	bgt.n	800b4ea <print_e+0xda>
 800b476:	2c00      	cmp	r4, #0
 800b478:	bfa8      	it	ge
 800b47a:	191b      	addge	r3, r3, r4
 800b47c:	1e41      	subs	r1, r0, #1
 800b47e:	2900      	cmp	r1, #0
 800b480:	bfb8      	it	lt
 800b482:	f1c0 0001 	rsblt	r0, r0, #1
 800b486:	9105      	str	r1, [sp, #20]
 800b488:	bfb8      	it	lt
 800b48a:	9005      	strlt	r0, [sp, #20]
 800b48c:	461a      	mov	r2, r3
 800b48e:	9805      	ldr	r0, [sp, #20]
 800b490:	f802 6b02 	strb.w	r6, [r2], #2
 800b494:	bfb5      	itete	lt
 800b496:	212d      	movlt	r1, #45	; 0x2d
 800b498:	212b      	movge	r1, #43	; 0x2b
 800b49a:	7059      	strblt	r1, [r3, #1]
 800b49c:	7059      	strbge	r1, [r3, #1]
 800b49e:	2863      	cmp	r0, #99	; 0x63
 800b4a0:	dd0b      	ble.n	800b4ba <print_e+0xaa>
 800b4a2:	2164      	movs	r1, #100	; 0x64
 800b4a4:	fb90 f1f1 	sdiv	r1, r0, r1
 800b4a8:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800b4ac:	1cda      	adds	r2, r3, #3
 800b4ae:	709c      	strb	r4, [r3, #2]
 800b4b0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b4b4:	fb03 0101 	mla	r1, r3, r1, r0
 800b4b8:	9105      	str	r1, [sp, #20]
 800b4ba:	9905      	ldr	r1, [sp, #20]
 800b4bc:	230a      	movs	r3, #10
 800b4be:	fb91 f3f3 	sdiv	r3, r1, r3
 800b4c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b4c6:	7010      	strb	r0, [r2, #0]
 800b4c8:	f06f 0009 	mvn.w	r0, #9
 800b4cc:	fb00 1303 	mla	r3, r0, r3, r1
 800b4d0:	3330      	adds	r3, #48	; 0x30
 800b4d2:	7053      	strb	r3, [r2, #1]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	7093      	strb	r3, [r2, #2]
 800b4d8:	e7b5      	b.n	800b446 <print_e+0x36>
 800b4da:	222e      	movs	r2, #46	; 0x2e
 800b4dc:	1cbb      	adds	r3, r7, #2
 800b4de:	707a      	strb	r2, [r7, #1]
 800b4e0:	e7ba      	b.n	800b458 <print_e+0x48>
 800b4e2:	f803 2b01 	strb.w	r2, [r3], #1
 800b4e6:	3c01      	subs	r4, #1
 800b4e8:	e7b6      	b.n	800b458 <print_e+0x48>
 800b4ea:	f802 7b01 	strb.w	r7, [r2], #1
 800b4ee:	e7bf      	b.n	800b470 <print_e+0x60>
 800b4f0:	2665      	movs	r6, #101	; 0x65
 800b4f2:	e7c3      	b.n	800b47c <print_e+0x6c>
 800b4f4:	2645      	movs	r6, #69	; 0x45
 800b4f6:	e7c1      	b.n	800b47c <print_e+0x6c>

0800b4f8 <_gcvt>:
 800b4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4fc:	ec55 4b10 	vmov	r4, r5, d0
 800b500:	b088      	sub	sp, #32
 800b502:	4681      	mov	r9, r0
 800b504:	460f      	mov	r7, r1
 800b506:	4616      	mov	r6, r2
 800b508:	469a      	mov	sl, r3
 800b50a:	2200      	movs	r2, #0
 800b50c:	2300      	movs	r3, #0
 800b50e:	ee10 0a10 	vmov	r0, s0
 800b512:	4629      	mov	r1, r5
 800b514:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800b518:	f7f5 fae8 	bl	8000aec <__aeabi_dcmplt>
 800b51c:	b110      	cbz	r0, 800b524 <_gcvt+0x2c>
 800b51e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b522:	461d      	mov	r5, r3
 800b524:	2200      	movs	r2, #0
 800b526:	2300      	movs	r3, #0
 800b528:	4620      	mov	r0, r4
 800b52a:	4629      	mov	r1, r5
 800b52c:	f7f5 fad4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b530:	b138      	cbz	r0, 800b542 <_gcvt+0x4a>
 800b532:	2330      	movs	r3, #48	; 0x30
 800b534:	7033      	strb	r3, [r6, #0]
 800b536:	2300      	movs	r3, #0
 800b538:	7073      	strb	r3, [r6, #1]
 800b53a:	4630      	mov	r0, r6
 800b53c:	b008      	add	sp, #32
 800b53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b542:	a350      	add	r3, pc, #320	; (adr r3, 800b684 <_gcvt+0x18c>)
 800b544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b548:	4620      	mov	r0, r4
 800b54a:	4629      	mov	r1, r5
 800b54c:	f7f5 fad8 	bl	8000b00 <__aeabi_dcmple>
 800b550:	b150      	cbz	r0, 800b568 <_gcvt+0x70>
 800b552:	3f01      	subs	r7, #1
 800b554:	e9cd a801 	strd	sl, r8, [sp, #4]
 800b558:	9700      	str	r7, [sp, #0]
 800b55a:	4622      	mov	r2, r4
 800b55c:	462b      	mov	r3, r5
 800b55e:	4631      	mov	r1, r6
 800b560:	4648      	mov	r0, r9
 800b562:	f7ff ff55 	bl	800b410 <print_e>
 800b566:	e7e8      	b.n	800b53a <_gcvt+0x42>
 800b568:	4638      	mov	r0, r7
 800b56a:	f000 fb8b 	bl	800bc84 <_mprec_log10>
 800b56e:	4622      	mov	r2, r4
 800b570:	462b      	mov	r3, r5
 800b572:	ec51 0b10 	vmov	r0, r1, d0
 800b576:	f7f5 fac3 	bl	8000b00 <__aeabi_dcmple>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d1e9      	bne.n	800b552 <_gcvt+0x5a>
 800b57e:	2200      	movs	r2, #0
 800b580:	4b3f      	ldr	r3, [pc, #252]	; (800b680 <_gcvt+0x188>)
 800b582:	4620      	mov	r0, r4
 800b584:	4629      	mov	r1, r5
 800b586:	f7f5 fab1 	bl	8000aec <__aeabi_dcmplt>
 800b58a:	aa07      	add	r2, sp, #28
 800b58c:	ab06      	add	r3, sp, #24
 800b58e:	e9cd 3200 	strd	r3, r2, [sp]
 800b592:	ab05      	add	r3, sp, #20
 800b594:	463a      	mov	r2, r7
 800b596:	b360      	cbz	r0, 800b5f2 <_gcvt+0xfa>
 800b598:	2103      	movs	r1, #3
 800b59a:	ec45 4b10 	vmov	d0, r4, r5
 800b59e:	4648      	mov	r0, r9
 800b5a0:	f7ff f97e 	bl	800a8a0 <_dtoa_r>
 800b5a4:	9a05      	ldr	r2, [sp, #20]
 800b5a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d023      	beq.n	800b5f6 <_gcvt+0xfe>
 800b5ae:	4633      	mov	r3, r6
 800b5b0:	4437      	add	r7, r6
 800b5b2:	4601      	mov	r1, r0
 800b5b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b8:	9d05      	ldr	r5, [sp, #20]
 800b5ba:	1afc      	subs	r4, r7, r3
 800b5bc:	b32a      	cbz	r2, 800b60a <_gcvt+0x112>
 800b5be:	2d00      	cmp	r5, #0
 800b5c0:	dc1e      	bgt.n	800b600 <_gcvt+0x108>
 800b5c2:	f1b8 0f00 	cmp.w	r8, #0
 800b5c6:	d102      	bne.n	800b5ce <_gcvt+0xd6>
 800b5c8:	780a      	ldrb	r2, [r1, #0]
 800b5ca:	2a00      	cmp	r2, #0
 800b5cc:	d045      	beq.n	800b65a <_gcvt+0x162>
 800b5ce:	429e      	cmp	r6, r3
 800b5d0:	bf02      	ittt	eq
 800b5d2:	1c73      	addeq	r3, r6, #1
 800b5d4:	2230      	moveq	r2, #48	; 0x30
 800b5d6:	7032      	strbeq	r2, [r6, #0]
 800b5d8:	222e      	movs	r2, #46	; 0x2e
 800b5da:	701a      	strb	r2, [r3, #0]
 800b5dc:	9a05      	ldr	r2, [sp, #20]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	2730      	movs	r7, #48	; 0x30
 800b5e4:	2a00      	cmp	r2, #0
 800b5e6:	4615      	mov	r5, r2
 800b5e8:	db24      	blt.n	800b634 <_gcvt+0x13c>
 800b5ea:	b100      	cbz	r0, 800b5ee <_gcvt+0xf6>
 800b5ec:	9205      	str	r2, [sp, #20]
 800b5ee:	1e4a      	subs	r2, r1, #1
 800b5f0:	e02b      	b.n	800b64a <_gcvt+0x152>
 800b5f2:	2102      	movs	r1, #2
 800b5f4:	e7d1      	b.n	800b59a <_gcvt+0xa2>
 800b5f6:	4601      	mov	r1, r0
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	f000 fd9f 	bl	800c13c <strcpy>
 800b5fe:	e79c      	b.n	800b53a <_gcvt+0x42>
 800b600:	3d01      	subs	r5, #1
 800b602:	f803 2b01 	strb.w	r2, [r3], #1
 800b606:	9505      	str	r5, [sp, #20]
 800b608:	e7d3      	b.n	800b5b2 <_gcvt+0xba>
 800b60a:	1b2d      	subs	r5, r5, r4
 800b60c:	2730      	movs	r7, #48	; 0x30
 800b60e:	e005      	b.n	800b61c <_gcvt+0x124>
 800b610:	2c00      	cmp	r4, #0
 800b612:	dd06      	ble.n	800b622 <_gcvt+0x12a>
 800b614:	f803 7b01 	strb.w	r7, [r3], #1
 800b618:	3c01      	subs	r4, #1
 800b61a:	2201      	movs	r2, #1
 800b61c:	1928      	adds	r0, r5, r4
 800b61e:	2800      	cmp	r0, #0
 800b620:	dcf6      	bgt.n	800b610 <_gcvt+0x118>
 800b622:	2a00      	cmp	r2, #0
 800b624:	d0cd      	beq.n	800b5c2 <_gcvt+0xca>
 800b626:	9005      	str	r0, [sp, #20]
 800b628:	e7cb      	b.n	800b5c2 <_gcvt+0xca>
 800b62a:	f803 7b01 	strb.w	r7, [r3], #1
 800b62e:	3c01      	subs	r4, #1
 800b630:	2001      	movs	r0, #1
 800b632:	e7d7      	b.n	800b5e4 <_gcvt+0xec>
 800b634:	2c00      	cmp	r4, #0
 800b636:	f102 0201 	add.w	r2, r2, #1
 800b63a:	dcf6      	bgt.n	800b62a <_gcvt+0x132>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d0d6      	beq.n	800b5ee <_gcvt+0xf6>
 800b640:	9505      	str	r5, [sp, #20]
 800b642:	e7d4      	b.n	800b5ee <_gcvt+0xf6>
 800b644:	f803 1b01 	strb.w	r1, [r3], #1
 800b648:	3c01      	subs	r4, #1
 800b64a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b64e:	b109      	cbz	r1, 800b654 <_gcvt+0x15c>
 800b650:	2c00      	cmp	r4, #0
 800b652:	dcf7      	bgt.n	800b644 <_gcvt+0x14c>
 800b654:	f1b8 0f00 	cmp.w	r8, #0
 800b658:	d10b      	bne.n	800b672 <_gcvt+0x17a>
 800b65a:	2200      	movs	r2, #0
 800b65c:	701a      	strb	r2, [r3, #0]
 800b65e:	e76c      	b.n	800b53a <_gcvt+0x42>
 800b660:	f802 5b01 	strb.w	r5, [r2], #1
 800b664:	1a81      	subs	r1, r0, r2
 800b666:	2900      	cmp	r1, #0
 800b668:	dcfa      	bgt.n	800b660 <_gcvt+0x168>
 800b66a:	2c00      	cmp	r4, #0
 800b66c:	bfa8      	it	ge
 800b66e:	191b      	addge	r3, r3, r4
 800b670:	e7f3      	b.n	800b65a <_gcvt+0x162>
 800b672:	461a      	mov	r2, r3
 800b674:	1918      	adds	r0, r3, r4
 800b676:	2530      	movs	r5, #48	; 0x30
 800b678:	e7f4      	b.n	800b664 <_gcvt+0x16c>
 800b67a:	bf00      	nop
 800b67c:	f3af 8000 	nop.w
 800b680:	3ff00000 	.word	0x3ff00000
 800b684:	eb1c432d 	.word	0xeb1c432d
 800b688:	3f1a36e2 	.word	0x3f1a36e2

0800b68c <_localeconv_r>:
 800b68c:	4b04      	ldr	r3, [pc, #16]	; (800b6a0 <_localeconv_r+0x14>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6a18      	ldr	r0, [r3, #32]
 800b692:	4b04      	ldr	r3, [pc, #16]	; (800b6a4 <_localeconv_r+0x18>)
 800b694:	2800      	cmp	r0, #0
 800b696:	bf08      	it	eq
 800b698:	4618      	moveq	r0, r3
 800b69a:	30f0      	adds	r0, #240	; 0xf0
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	20000094 	.word	0x20000094
 800b6a4:	200000f8 	.word	0x200000f8

0800b6a8 <malloc>:
 800b6a8:	4b02      	ldr	r3, [pc, #8]	; (800b6b4 <malloc+0xc>)
 800b6aa:	4601      	mov	r1, r0
 800b6ac:	6818      	ldr	r0, [r3, #0]
 800b6ae:	f000 bb63 	b.w	800bd78 <_malloc_r>
 800b6b2:	bf00      	nop
 800b6b4:	20000094 	.word	0x20000094

0800b6b8 <memcpy>:
 800b6b8:	b510      	push	{r4, lr}
 800b6ba:	1e43      	subs	r3, r0, #1
 800b6bc:	440a      	add	r2, r1
 800b6be:	4291      	cmp	r1, r2
 800b6c0:	d100      	bne.n	800b6c4 <memcpy+0xc>
 800b6c2:	bd10      	pop	{r4, pc}
 800b6c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6cc:	e7f7      	b.n	800b6be <memcpy+0x6>

0800b6ce <_Balloc>:
 800b6ce:	b570      	push	{r4, r5, r6, lr}
 800b6d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	460e      	mov	r6, r1
 800b6d6:	b93d      	cbnz	r5, 800b6e8 <_Balloc+0x1a>
 800b6d8:	2010      	movs	r0, #16
 800b6da:	f7ff ffe5 	bl	800b6a8 <malloc>
 800b6de:	6260      	str	r0, [r4, #36]	; 0x24
 800b6e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b6e4:	6005      	str	r5, [r0, #0]
 800b6e6:	60c5      	str	r5, [r0, #12]
 800b6e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b6ea:	68eb      	ldr	r3, [r5, #12]
 800b6ec:	b183      	cbz	r3, 800b710 <_Balloc+0x42>
 800b6ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b6f6:	b9b8      	cbnz	r0, 800b728 <_Balloc+0x5a>
 800b6f8:	2101      	movs	r1, #1
 800b6fa:	fa01 f506 	lsl.w	r5, r1, r6
 800b6fe:	1d6a      	adds	r2, r5, #5
 800b700:	0092      	lsls	r2, r2, #2
 800b702:	4620      	mov	r0, r4
 800b704:	f000 fadc 	bl	800bcc0 <_calloc_r>
 800b708:	b160      	cbz	r0, 800b724 <_Balloc+0x56>
 800b70a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b70e:	e00e      	b.n	800b72e <_Balloc+0x60>
 800b710:	2221      	movs	r2, #33	; 0x21
 800b712:	2104      	movs	r1, #4
 800b714:	4620      	mov	r0, r4
 800b716:	f000 fad3 	bl	800bcc0 <_calloc_r>
 800b71a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b71c:	60e8      	str	r0, [r5, #12]
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1e4      	bne.n	800b6ee <_Balloc+0x20>
 800b724:	2000      	movs	r0, #0
 800b726:	bd70      	pop	{r4, r5, r6, pc}
 800b728:	6802      	ldr	r2, [r0, #0]
 800b72a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b72e:	2300      	movs	r3, #0
 800b730:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b734:	e7f7      	b.n	800b726 <_Balloc+0x58>

0800b736 <_Bfree>:
 800b736:	b570      	push	{r4, r5, r6, lr}
 800b738:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b73a:	4606      	mov	r6, r0
 800b73c:	460d      	mov	r5, r1
 800b73e:	b93c      	cbnz	r4, 800b750 <_Bfree+0x1a>
 800b740:	2010      	movs	r0, #16
 800b742:	f7ff ffb1 	bl	800b6a8 <malloc>
 800b746:	6270      	str	r0, [r6, #36]	; 0x24
 800b748:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b74c:	6004      	str	r4, [r0, #0]
 800b74e:	60c4      	str	r4, [r0, #12]
 800b750:	b13d      	cbz	r5, 800b762 <_Bfree+0x2c>
 800b752:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b754:	686a      	ldr	r2, [r5, #4]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b75c:	6029      	str	r1, [r5, #0]
 800b75e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b762:	bd70      	pop	{r4, r5, r6, pc}

0800b764 <__multadd>:
 800b764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b768:	690d      	ldr	r5, [r1, #16]
 800b76a:	461f      	mov	r7, r3
 800b76c:	4606      	mov	r6, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	f101 0c14 	add.w	ip, r1, #20
 800b774:	2300      	movs	r3, #0
 800b776:	f8dc 0000 	ldr.w	r0, [ip]
 800b77a:	b281      	uxth	r1, r0
 800b77c:	fb02 7101 	mla	r1, r2, r1, r7
 800b780:	0c0f      	lsrs	r7, r1, #16
 800b782:	0c00      	lsrs	r0, r0, #16
 800b784:	fb02 7000 	mla	r0, r2, r0, r7
 800b788:	b289      	uxth	r1, r1
 800b78a:	3301      	adds	r3, #1
 800b78c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b790:	429d      	cmp	r5, r3
 800b792:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b796:	f84c 1b04 	str.w	r1, [ip], #4
 800b79a:	dcec      	bgt.n	800b776 <__multadd+0x12>
 800b79c:	b1d7      	cbz	r7, 800b7d4 <__multadd+0x70>
 800b79e:	68a3      	ldr	r3, [r4, #8]
 800b7a0:	42ab      	cmp	r3, r5
 800b7a2:	dc12      	bgt.n	800b7ca <__multadd+0x66>
 800b7a4:	6861      	ldr	r1, [r4, #4]
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	3101      	adds	r1, #1
 800b7aa:	f7ff ff90 	bl	800b6ce <_Balloc>
 800b7ae:	6922      	ldr	r2, [r4, #16]
 800b7b0:	3202      	adds	r2, #2
 800b7b2:	f104 010c 	add.w	r1, r4, #12
 800b7b6:	4680      	mov	r8, r0
 800b7b8:	0092      	lsls	r2, r2, #2
 800b7ba:	300c      	adds	r0, #12
 800b7bc:	f7ff ff7c 	bl	800b6b8 <memcpy>
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f7ff ffb7 	bl	800b736 <_Bfree>
 800b7c8:	4644      	mov	r4, r8
 800b7ca:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7ce:	3501      	adds	r5, #1
 800b7d0:	615f      	str	r7, [r3, #20]
 800b7d2:	6125      	str	r5, [r4, #16]
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b7da <__hi0bits>:
 800b7da:	0c02      	lsrs	r2, r0, #16
 800b7dc:	0412      	lsls	r2, r2, #16
 800b7de:	4603      	mov	r3, r0
 800b7e0:	b9b2      	cbnz	r2, 800b810 <__hi0bits+0x36>
 800b7e2:	0403      	lsls	r3, r0, #16
 800b7e4:	2010      	movs	r0, #16
 800b7e6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b7ea:	bf04      	itt	eq
 800b7ec:	021b      	lsleq	r3, r3, #8
 800b7ee:	3008      	addeq	r0, #8
 800b7f0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b7f4:	bf04      	itt	eq
 800b7f6:	011b      	lsleq	r3, r3, #4
 800b7f8:	3004      	addeq	r0, #4
 800b7fa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b7fe:	bf04      	itt	eq
 800b800:	009b      	lsleq	r3, r3, #2
 800b802:	3002      	addeq	r0, #2
 800b804:	2b00      	cmp	r3, #0
 800b806:	db06      	blt.n	800b816 <__hi0bits+0x3c>
 800b808:	005b      	lsls	r3, r3, #1
 800b80a:	d503      	bpl.n	800b814 <__hi0bits+0x3a>
 800b80c:	3001      	adds	r0, #1
 800b80e:	4770      	bx	lr
 800b810:	2000      	movs	r0, #0
 800b812:	e7e8      	b.n	800b7e6 <__hi0bits+0xc>
 800b814:	2020      	movs	r0, #32
 800b816:	4770      	bx	lr

0800b818 <__lo0bits>:
 800b818:	6803      	ldr	r3, [r0, #0]
 800b81a:	f013 0207 	ands.w	r2, r3, #7
 800b81e:	4601      	mov	r1, r0
 800b820:	d00b      	beq.n	800b83a <__lo0bits+0x22>
 800b822:	07da      	lsls	r2, r3, #31
 800b824:	d423      	bmi.n	800b86e <__lo0bits+0x56>
 800b826:	0798      	lsls	r0, r3, #30
 800b828:	bf49      	itett	mi
 800b82a:	085b      	lsrmi	r3, r3, #1
 800b82c:	089b      	lsrpl	r3, r3, #2
 800b82e:	2001      	movmi	r0, #1
 800b830:	600b      	strmi	r3, [r1, #0]
 800b832:	bf5c      	itt	pl
 800b834:	600b      	strpl	r3, [r1, #0]
 800b836:	2002      	movpl	r0, #2
 800b838:	4770      	bx	lr
 800b83a:	b298      	uxth	r0, r3
 800b83c:	b9a8      	cbnz	r0, 800b86a <__lo0bits+0x52>
 800b83e:	0c1b      	lsrs	r3, r3, #16
 800b840:	2010      	movs	r0, #16
 800b842:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b846:	bf04      	itt	eq
 800b848:	0a1b      	lsreq	r3, r3, #8
 800b84a:	3008      	addeq	r0, #8
 800b84c:	071a      	lsls	r2, r3, #28
 800b84e:	bf04      	itt	eq
 800b850:	091b      	lsreq	r3, r3, #4
 800b852:	3004      	addeq	r0, #4
 800b854:	079a      	lsls	r2, r3, #30
 800b856:	bf04      	itt	eq
 800b858:	089b      	lsreq	r3, r3, #2
 800b85a:	3002      	addeq	r0, #2
 800b85c:	07da      	lsls	r2, r3, #31
 800b85e:	d402      	bmi.n	800b866 <__lo0bits+0x4e>
 800b860:	085b      	lsrs	r3, r3, #1
 800b862:	d006      	beq.n	800b872 <__lo0bits+0x5a>
 800b864:	3001      	adds	r0, #1
 800b866:	600b      	str	r3, [r1, #0]
 800b868:	4770      	bx	lr
 800b86a:	4610      	mov	r0, r2
 800b86c:	e7e9      	b.n	800b842 <__lo0bits+0x2a>
 800b86e:	2000      	movs	r0, #0
 800b870:	4770      	bx	lr
 800b872:	2020      	movs	r0, #32
 800b874:	4770      	bx	lr

0800b876 <__i2b>:
 800b876:	b510      	push	{r4, lr}
 800b878:	460c      	mov	r4, r1
 800b87a:	2101      	movs	r1, #1
 800b87c:	f7ff ff27 	bl	800b6ce <_Balloc>
 800b880:	2201      	movs	r2, #1
 800b882:	6144      	str	r4, [r0, #20]
 800b884:	6102      	str	r2, [r0, #16]
 800b886:	bd10      	pop	{r4, pc}

0800b888 <__multiply>:
 800b888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88c:	4614      	mov	r4, r2
 800b88e:	690a      	ldr	r2, [r1, #16]
 800b890:	6923      	ldr	r3, [r4, #16]
 800b892:	429a      	cmp	r2, r3
 800b894:	bfb8      	it	lt
 800b896:	460b      	movlt	r3, r1
 800b898:	4688      	mov	r8, r1
 800b89a:	bfbc      	itt	lt
 800b89c:	46a0      	movlt	r8, r4
 800b89e:	461c      	movlt	r4, r3
 800b8a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b8a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b8a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b8b0:	eb07 0609 	add.w	r6, r7, r9
 800b8b4:	42b3      	cmp	r3, r6
 800b8b6:	bfb8      	it	lt
 800b8b8:	3101      	addlt	r1, #1
 800b8ba:	f7ff ff08 	bl	800b6ce <_Balloc>
 800b8be:	f100 0514 	add.w	r5, r0, #20
 800b8c2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b8c6:	462b      	mov	r3, r5
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	4573      	cmp	r3, lr
 800b8cc:	d316      	bcc.n	800b8fc <__multiply+0x74>
 800b8ce:	f104 0214 	add.w	r2, r4, #20
 800b8d2:	f108 0114 	add.w	r1, r8, #20
 800b8d6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b8da:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	9b00      	ldr	r3, [sp, #0]
 800b8e2:	9201      	str	r2, [sp, #4]
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d80c      	bhi.n	800b902 <__multiply+0x7a>
 800b8e8:	2e00      	cmp	r6, #0
 800b8ea:	dd03      	ble.n	800b8f4 <__multiply+0x6c>
 800b8ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d05d      	beq.n	800b9b0 <__multiply+0x128>
 800b8f4:	6106      	str	r6, [r0, #16]
 800b8f6:	b003      	add	sp, #12
 800b8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fc:	f843 2b04 	str.w	r2, [r3], #4
 800b900:	e7e3      	b.n	800b8ca <__multiply+0x42>
 800b902:	f8b2 b000 	ldrh.w	fp, [r2]
 800b906:	f1bb 0f00 	cmp.w	fp, #0
 800b90a:	d023      	beq.n	800b954 <__multiply+0xcc>
 800b90c:	4689      	mov	r9, r1
 800b90e:	46ac      	mov	ip, r5
 800b910:	f04f 0800 	mov.w	r8, #0
 800b914:	f859 4b04 	ldr.w	r4, [r9], #4
 800b918:	f8dc a000 	ldr.w	sl, [ip]
 800b91c:	b2a3      	uxth	r3, r4
 800b91e:	fa1f fa8a 	uxth.w	sl, sl
 800b922:	fb0b a303 	mla	r3, fp, r3, sl
 800b926:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b92a:	f8dc 4000 	ldr.w	r4, [ip]
 800b92e:	4443      	add	r3, r8
 800b930:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b934:	fb0b 840a 	mla	r4, fp, sl, r8
 800b938:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b93c:	46e2      	mov	sl, ip
 800b93e:	b29b      	uxth	r3, r3
 800b940:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b944:	454f      	cmp	r7, r9
 800b946:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b94a:	f84a 3b04 	str.w	r3, [sl], #4
 800b94e:	d82b      	bhi.n	800b9a8 <__multiply+0x120>
 800b950:	f8cc 8004 	str.w	r8, [ip, #4]
 800b954:	9b01      	ldr	r3, [sp, #4]
 800b956:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b95a:	3204      	adds	r2, #4
 800b95c:	f1ba 0f00 	cmp.w	sl, #0
 800b960:	d020      	beq.n	800b9a4 <__multiply+0x11c>
 800b962:	682b      	ldr	r3, [r5, #0]
 800b964:	4689      	mov	r9, r1
 800b966:	46a8      	mov	r8, r5
 800b968:	f04f 0b00 	mov.w	fp, #0
 800b96c:	f8b9 c000 	ldrh.w	ip, [r9]
 800b970:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b974:	fb0a 440c 	mla	r4, sl, ip, r4
 800b978:	445c      	add	r4, fp
 800b97a:	46c4      	mov	ip, r8
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b982:	f84c 3b04 	str.w	r3, [ip], #4
 800b986:	f859 3b04 	ldr.w	r3, [r9], #4
 800b98a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b98e:	0c1b      	lsrs	r3, r3, #16
 800b990:	fb0a b303 	mla	r3, sl, r3, fp
 800b994:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b998:	454f      	cmp	r7, r9
 800b99a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b99e:	d805      	bhi.n	800b9ac <__multiply+0x124>
 800b9a0:	f8c8 3004 	str.w	r3, [r8, #4]
 800b9a4:	3504      	adds	r5, #4
 800b9a6:	e79b      	b.n	800b8e0 <__multiply+0x58>
 800b9a8:	46d4      	mov	ip, sl
 800b9aa:	e7b3      	b.n	800b914 <__multiply+0x8c>
 800b9ac:	46e0      	mov	r8, ip
 800b9ae:	e7dd      	b.n	800b96c <__multiply+0xe4>
 800b9b0:	3e01      	subs	r6, #1
 800b9b2:	e799      	b.n	800b8e8 <__multiply+0x60>

0800b9b4 <__pow5mult>:
 800b9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b8:	4615      	mov	r5, r2
 800b9ba:	f012 0203 	ands.w	r2, r2, #3
 800b9be:	4606      	mov	r6, r0
 800b9c0:	460f      	mov	r7, r1
 800b9c2:	d007      	beq.n	800b9d4 <__pow5mult+0x20>
 800b9c4:	3a01      	subs	r2, #1
 800b9c6:	4c21      	ldr	r4, [pc, #132]	; (800ba4c <__pow5mult+0x98>)
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9ce:	f7ff fec9 	bl	800b764 <__multadd>
 800b9d2:	4607      	mov	r7, r0
 800b9d4:	10ad      	asrs	r5, r5, #2
 800b9d6:	d035      	beq.n	800ba44 <__pow5mult+0x90>
 800b9d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b9da:	b93c      	cbnz	r4, 800b9ec <__pow5mult+0x38>
 800b9dc:	2010      	movs	r0, #16
 800b9de:	f7ff fe63 	bl	800b6a8 <malloc>
 800b9e2:	6270      	str	r0, [r6, #36]	; 0x24
 800b9e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9e8:	6004      	str	r4, [r0, #0]
 800b9ea:	60c4      	str	r4, [r0, #12]
 800b9ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9f4:	b94c      	cbnz	r4, 800ba0a <__pow5mult+0x56>
 800b9f6:	f240 2171 	movw	r1, #625	; 0x271
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f7ff ff3b 	bl	800b876 <__i2b>
 800ba00:	2300      	movs	r3, #0
 800ba02:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba06:	4604      	mov	r4, r0
 800ba08:	6003      	str	r3, [r0, #0]
 800ba0a:	f04f 0800 	mov.w	r8, #0
 800ba0e:	07eb      	lsls	r3, r5, #31
 800ba10:	d50a      	bpl.n	800ba28 <__pow5mult+0x74>
 800ba12:	4639      	mov	r1, r7
 800ba14:	4622      	mov	r2, r4
 800ba16:	4630      	mov	r0, r6
 800ba18:	f7ff ff36 	bl	800b888 <__multiply>
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	4681      	mov	r9, r0
 800ba20:	4630      	mov	r0, r6
 800ba22:	f7ff fe88 	bl	800b736 <_Bfree>
 800ba26:	464f      	mov	r7, r9
 800ba28:	106d      	asrs	r5, r5, #1
 800ba2a:	d00b      	beq.n	800ba44 <__pow5mult+0x90>
 800ba2c:	6820      	ldr	r0, [r4, #0]
 800ba2e:	b938      	cbnz	r0, 800ba40 <__pow5mult+0x8c>
 800ba30:	4622      	mov	r2, r4
 800ba32:	4621      	mov	r1, r4
 800ba34:	4630      	mov	r0, r6
 800ba36:	f7ff ff27 	bl	800b888 <__multiply>
 800ba3a:	6020      	str	r0, [r4, #0]
 800ba3c:	f8c0 8000 	str.w	r8, [r0]
 800ba40:	4604      	mov	r4, r0
 800ba42:	e7e4      	b.n	800ba0e <__pow5mult+0x5a>
 800ba44:	4638      	mov	r0, r7
 800ba46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba4a:	bf00      	nop
 800ba4c:	0800ced0 	.word	0x0800ced0

0800ba50 <__lshift>:
 800ba50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba54:	460c      	mov	r4, r1
 800ba56:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba5a:	6923      	ldr	r3, [r4, #16]
 800ba5c:	6849      	ldr	r1, [r1, #4]
 800ba5e:	eb0a 0903 	add.w	r9, sl, r3
 800ba62:	68a3      	ldr	r3, [r4, #8]
 800ba64:	4607      	mov	r7, r0
 800ba66:	4616      	mov	r6, r2
 800ba68:	f109 0501 	add.w	r5, r9, #1
 800ba6c:	42ab      	cmp	r3, r5
 800ba6e:	db32      	blt.n	800bad6 <__lshift+0x86>
 800ba70:	4638      	mov	r0, r7
 800ba72:	f7ff fe2c 	bl	800b6ce <_Balloc>
 800ba76:	2300      	movs	r3, #0
 800ba78:	4680      	mov	r8, r0
 800ba7a:	f100 0114 	add.w	r1, r0, #20
 800ba7e:	461a      	mov	r2, r3
 800ba80:	4553      	cmp	r3, sl
 800ba82:	db2b      	blt.n	800badc <__lshift+0x8c>
 800ba84:	6920      	ldr	r0, [r4, #16]
 800ba86:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba8a:	f104 0314 	add.w	r3, r4, #20
 800ba8e:	f016 021f 	ands.w	r2, r6, #31
 800ba92:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba96:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba9a:	d025      	beq.n	800bae8 <__lshift+0x98>
 800ba9c:	f1c2 0e20 	rsb	lr, r2, #32
 800baa0:	2000      	movs	r0, #0
 800baa2:	681e      	ldr	r6, [r3, #0]
 800baa4:	468a      	mov	sl, r1
 800baa6:	4096      	lsls	r6, r2
 800baa8:	4330      	orrs	r0, r6
 800baaa:	f84a 0b04 	str.w	r0, [sl], #4
 800baae:	f853 0b04 	ldr.w	r0, [r3], #4
 800bab2:	459c      	cmp	ip, r3
 800bab4:	fa20 f00e 	lsr.w	r0, r0, lr
 800bab8:	d814      	bhi.n	800bae4 <__lshift+0x94>
 800baba:	6048      	str	r0, [r1, #4]
 800babc:	b108      	cbz	r0, 800bac2 <__lshift+0x72>
 800babe:	f109 0502 	add.w	r5, r9, #2
 800bac2:	3d01      	subs	r5, #1
 800bac4:	4638      	mov	r0, r7
 800bac6:	f8c8 5010 	str.w	r5, [r8, #16]
 800baca:	4621      	mov	r1, r4
 800bacc:	f7ff fe33 	bl	800b736 <_Bfree>
 800bad0:	4640      	mov	r0, r8
 800bad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bad6:	3101      	adds	r1, #1
 800bad8:	005b      	lsls	r3, r3, #1
 800bada:	e7c7      	b.n	800ba6c <__lshift+0x1c>
 800badc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bae0:	3301      	adds	r3, #1
 800bae2:	e7cd      	b.n	800ba80 <__lshift+0x30>
 800bae4:	4651      	mov	r1, sl
 800bae6:	e7dc      	b.n	800baa2 <__lshift+0x52>
 800bae8:	3904      	subs	r1, #4
 800baea:	f853 2b04 	ldr.w	r2, [r3], #4
 800baee:	f841 2f04 	str.w	r2, [r1, #4]!
 800baf2:	459c      	cmp	ip, r3
 800baf4:	d8f9      	bhi.n	800baea <__lshift+0x9a>
 800baf6:	e7e4      	b.n	800bac2 <__lshift+0x72>

0800baf8 <__mcmp>:
 800baf8:	6903      	ldr	r3, [r0, #16]
 800bafa:	690a      	ldr	r2, [r1, #16]
 800bafc:	1a9b      	subs	r3, r3, r2
 800bafe:	b530      	push	{r4, r5, lr}
 800bb00:	d10c      	bne.n	800bb1c <__mcmp+0x24>
 800bb02:	0092      	lsls	r2, r2, #2
 800bb04:	3014      	adds	r0, #20
 800bb06:	3114      	adds	r1, #20
 800bb08:	1884      	adds	r4, r0, r2
 800bb0a:	4411      	add	r1, r2
 800bb0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb14:	4295      	cmp	r5, r2
 800bb16:	d003      	beq.n	800bb20 <__mcmp+0x28>
 800bb18:	d305      	bcc.n	800bb26 <__mcmp+0x2e>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	bd30      	pop	{r4, r5, pc}
 800bb20:	42a0      	cmp	r0, r4
 800bb22:	d3f3      	bcc.n	800bb0c <__mcmp+0x14>
 800bb24:	e7fa      	b.n	800bb1c <__mcmp+0x24>
 800bb26:	f04f 33ff 	mov.w	r3, #4294967295
 800bb2a:	e7f7      	b.n	800bb1c <__mcmp+0x24>

0800bb2c <__mdiff>:
 800bb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb30:	460d      	mov	r5, r1
 800bb32:	4607      	mov	r7, r0
 800bb34:	4611      	mov	r1, r2
 800bb36:	4628      	mov	r0, r5
 800bb38:	4614      	mov	r4, r2
 800bb3a:	f7ff ffdd 	bl	800baf8 <__mcmp>
 800bb3e:	1e06      	subs	r6, r0, #0
 800bb40:	d108      	bne.n	800bb54 <__mdiff+0x28>
 800bb42:	4631      	mov	r1, r6
 800bb44:	4638      	mov	r0, r7
 800bb46:	f7ff fdc2 	bl	800b6ce <_Balloc>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb54:	bfa4      	itt	ge
 800bb56:	4623      	movge	r3, r4
 800bb58:	462c      	movge	r4, r5
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	6861      	ldr	r1, [r4, #4]
 800bb5e:	bfa6      	itte	ge
 800bb60:	461d      	movge	r5, r3
 800bb62:	2600      	movge	r6, #0
 800bb64:	2601      	movlt	r6, #1
 800bb66:	f7ff fdb2 	bl	800b6ce <_Balloc>
 800bb6a:	692b      	ldr	r3, [r5, #16]
 800bb6c:	60c6      	str	r6, [r0, #12]
 800bb6e:	6926      	ldr	r6, [r4, #16]
 800bb70:	f105 0914 	add.w	r9, r5, #20
 800bb74:	f104 0214 	add.w	r2, r4, #20
 800bb78:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bb7c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bb80:	f100 0514 	add.w	r5, r0, #20
 800bb84:	f04f 0e00 	mov.w	lr, #0
 800bb88:	f852 ab04 	ldr.w	sl, [r2], #4
 800bb8c:	f859 4b04 	ldr.w	r4, [r9], #4
 800bb90:	fa1e f18a 	uxtah	r1, lr, sl
 800bb94:	b2a3      	uxth	r3, r4
 800bb96:	1ac9      	subs	r1, r1, r3
 800bb98:	0c23      	lsrs	r3, r4, #16
 800bb9a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800bb9e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bba2:	b289      	uxth	r1, r1
 800bba4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800bba8:	45c8      	cmp	r8, r9
 800bbaa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bbae:	4694      	mov	ip, r2
 800bbb0:	f845 3b04 	str.w	r3, [r5], #4
 800bbb4:	d8e8      	bhi.n	800bb88 <__mdiff+0x5c>
 800bbb6:	45bc      	cmp	ip, r7
 800bbb8:	d304      	bcc.n	800bbc4 <__mdiff+0x98>
 800bbba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800bbbe:	b183      	cbz	r3, 800bbe2 <__mdiff+0xb6>
 800bbc0:	6106      	str	r6, [r0, #16]
 800bbc2:	e7c5      	b.n	800bb50 <__mdiff+0x24>
 800bbc4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bbc8:	fa1e f381 	uxtah	r3, lr, r1
 800bbcc:	141a      	asrs	r2, r3, #16
 800bbce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbd8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800bbdc:	f845 3b04 	str.w	r3, [r5], #4
 800bbe0:	e7e9      	b.n	800bbb6 <__mdiff+0x8a>
 800bbe2:	3e01      	subs	r6, #1
 800bbe4:	e7e9      	b.n	800bbba <__mdiff+0x8e>

0800bbe6 <__d2b>:
 800bbe6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bbea:	460e      	mov	r6, r1
 800bbec:	2101      	movs	r1, #1
 800bbee:	ec59 8b10 	vmov	r8, r9, d0
 800bbf2:	4615      	mov	r5, r2
 800bbf4:	f7ff fd6b 	bl	800b6ce <_Balloc>
 800bbf8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bbfc:	4607      	mov	r7, r0
 800bbfe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc02:	bb34      	cbnz	r4, 800bc52 <__d2b+0x6c>
 800bc04:	9301      	str	r3, [sp, #4]
 800bc06:	f1b8 0300 	subs.w	r3, r8, #0
 800bc0a:	d027      	beq.n	800bc5c <__d2b+0x76>
 800bc0c:	a802      	add	r0, sp, #8
 800bc0e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800bc12:	f7ff fe01 	bl	800b818 <__lo0bits>
 800bc16:	9900      	ldr	r1, [sp, #0]
 800bc18:	b1f0      	cbz	r0, 800bc58 <__d2b+0x72>
 800bc1a:	9a01      	ldr	r2, [sp, #4]
 800bc1c:	f1c0 0320 	rsb	r3, r0, #32
 800bc20:	fa02 f303 	lsl.w	r3, r2, r3
 800bc24:	430b      	orrs	r3, r1
 800bc26:	40c2      	lsrs	r2, r0
 800bc28:	617b      	str	r3, [r7, #20]
 800bc2a:	9201      	str	r2, [sp, #4]
 800bc2c:	9b01      	ldr	r3, [sp, #4]
 800bc2e:	61bb      	str	r3, [r7, #24]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	bf14      	ite	ne
 800bc34:	2102      	movne	r1, #2
 800bc36:	2101      	moveq	r1, #1
 800bc38:	6139      	str	r1, [r7, #16]
 800bc3a:	b1c4      	cbz	r4, 800bc6e <__d2b+0x88>
 800bc3c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bc40:	4404      	add	r4, r0
 800bc42:	6034      	str	r4, [r6, #0]
 800bc44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc48:	6028      	str	r0, [r5, #0]
 800bc4a:	4638      	mov	r0, r7
 800bc4c:	b003      	add	sp, #12
 800bc4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc56:	e7d5      	b.n	800bc04 <__d2b+0x1e>
 800bc58:	6179      	str	r1, [r7, #20]
 800bc5a:	e7e7      	b.n	800bc2c <__d2b+0x46>
 800bc5c:	a801      	add	r0, sp, #4
 800bc5e:	f7ff fddb 	bl	800b818 <__lo0bits>
 800bc62:	9b01      	ldr	r3, [sp, #4]
 800bc64:	617b      	str	r3, [r7, #20]
 800bc66:	2101      	movs	r1, #1
 800bc68:	6139      	str	r1, [r7, #16]
 800bc6a:	3020      	adds	r0, #32
 800bc6c:	e7e5      	b.n	800bc3a <__d2b+0x54>
 800bc6e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bc72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc76:	6030      	str	r0, [r6, #0]
 800bc78:	6918      	ldr	r0, [r3, #16]
 800bc7a:	f7ff fdae 	bl	800b7da <__hi0bits>
 800bc7e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bc82:	e7e1      	b.n	800bc48 <__d2b+0x62>

0800bc84 <_mprec_log10>:
 800bc84:	2817      	cmp	r0, #23
 800bc86:	b5d0      	push	{r4, r6, r7, lr}
 800bc88:	4604      	mov	r4, r0
 800bc8a:	dc07      	bgt.n	800bc9c <_mprec_log10+0x18>
 800bc8c:	4b09      	ldr	r3, [pc, #36]	; (800bcb4 <_mprec_log10+0x30>)
 800bc8e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800bc92:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bc96:	ec41 0b10 	vmov	d0, r0, r1
 800bc9a:	bdd0      	pop	{r4, r6, r7, pc}
 800bc9c:	4906      	ldr	r1, [pc, #24]	; (800bcb8 <_mprec_log10+0x34>)
 800bc9e:	4f07      	ldr	r7, [pc, #28]	; (800bcbc <_mprec_log10+0x38>)
 800bca0:	2000      	movs	r0, #0
 800bca2:	2600      	movs	r6, #0
 800bca4:	4632      	mov	r2, r6
 800bca6:	463b      	mov	r3, r7
 800bca8:	f7f4 fcae 	bl	8000608 <__aeabi_dmul>
 800bcac:	3c01      	subs	r4, #1
 800bcae:	d1f9      	bne.n	800bca4 <_mprec_log10+0x20>
 800bcb0:	e7f1      	b.n	800bc96 <_mprec_log10+0x12>
 800bcb2:	bf00      	nop
 800bcb4:	0800ce08 	.word	0x0800ce08
 800bcb8:	3ff00000 	.word	0x3ff00000
 800bcbc:	40240000 	.word	0x40240000

0800bcc0 <_calloc_r>:
 800bcc0:	b538      	push	{r3, r4, r5, lr}
 800bcc2:	fb02 f401 	mul.w	r4, r2, r1
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	f000 f856 	bl	800bd78 <_malloc_r>
 800bccc:	4605      	mov	r5, r0
 800bcce:	b118      	cbz	r0, 800bcd8 <_calloc_r+0x18>
 800bcd0:	4622      	mov	r2, r4
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	f7fe f8be 	bl	8009e54 <memset>
 800bcd8:	4628      	mov	r0, r5
 800bcda:	bd38      	pop	{r3, r4, r5, pc}

0800bcdc <_free_r>:
 800bcdc:	b538      	push	{r3, r4, r5, lr}
 800bcde:	4605      	mov	r5, r0
 800bce0:	2900      	cmp	r1, #0
 800bce2:	d045      	beq.n	800bd70 <_free_r+0x94>
 800bce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bce8:	1f0c      	subs	r4, r1, #4
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	bfb8      	it	lt
 800bcee:	18e4      	addlt	r4, r4, r3
 800bcf0:	f000 fa57 	bl	800c1a2 <__malloc_lock>
 800bcf4:	4a1f      	ldr	r2, [pc, #124]	; (800bd74 <_free_r+0x98>)
 800bcf6:	6813      	ldr	r3, [r2, #0]
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	b933      	cbnz	r3, 800bd0a <_free_r+0x2e>
 800bcfc:	6063      	str	r3, [r4, #4]
 800bcfe:	6014      	str	r4, [r2, #0]
 800bd00:	4628      	mov	r0, r5
 800bd02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd06:	f000 ba4d 	b.w	800c1a4 <__malloc_unlock>
 800bd0a:	42a3      	cmp	r3, r4
 800bd0c:	d90c      	bls.n	800bd28 <_free_r+0x4c>
 800bd0e:	6821      	ldr	r1, [r4, #0]
 800bd10:	1862      	adds	r2, r4, r1
 800bd12:	4293      	cmp	r3, r2
 800bd14:	bf04      	itt	eq
 800bd16:	681a      	ldreq	r2, [r3, #0]
 800bd18:	685b      	ldreq	r3, [r3, #4]
 800bd1a:	6063      	str	r3, [r4, #4]
 800bd1c:	bf04      	itt	eq
 800bd1e:	1852      	addeq	r2, r2, r1
 800bd20:	6022      	streq	r2, [r4, #0]
 800bd22:	6004      	str	r4, [r0, #0]
 800bd24:	e7ec      	b.n	800bd00 <_free_r+0x24>
 800bd26:	4613      	mov	r3, r2
 800bd28:	685a      	ldr	r2, [r3, #4]
 800bd2a:	b10a      	cbz	r2, 800bd30 <_free_r+0x54>
 800bd2c:	42a2      	cmp	r2, r4
 800bd2e:	d9fa      	bls.n	800bd26 <_free_r+0x4a>
 800bd30:	6819      	ldr	r1, [r3, #0]
 800bd32:	1858      	adds	r0, r3, r1
 800bd34:	42a0      	cmp	r0, r4
 800bd36:	d10b      	bne.n	800bd50 <_free_r+0x74>
 800bd38:	6820      	ldr	r0, [r4, #0]
 800bd3a:	4401      	add	r1, r0
 800bd3c:	1858      	adds	r0, r3, r1
 800bd3e:	4282      	cmp	r2, r0
 800bd40:	6019      	str	r1, [r3, #0]
 800bd42:	d1dd      	bne.n	800bd00 <_free_r+0x24>
 800bd44:	6810      	ldr	r0, [r2, #0]
 800bd46:	6852      	ldr	r2, [r2, #4]
 800bd48:	605a      	str	r2, [r3, #4]
 800bd4a:	4401      	add	r1, r0
 800bd4c:	6019      	str	r1, [r3, #0]
 800bd4e:	e7d7      	b.n	800bd00 <_free_r+0x24>
 800bd50:	d902      	bls.n	800bd58 <_free_r+0x7c>
 800bd52:	230c      	movs	r3, #12
 800bd54:	602b      	str	r3, [r5, #0]
 800bd56:	e7d3      	b.n	800bd00 <_free_r+0x24>
 800bd58:	6820      	ldr	r0, [r4, #0]
 800bd5a:	1821      	adds	r1, r4, r0
 800bd5c:	428a      	cmp	r2, r1
 800bd5e:	bf04      	itt	eq
 800bd60:	6811      	ldreq	r1, [r2, #0]
 800bd62:	6852      	ldreq	r2, [r2, #4]
 800bd64:	6062      	str	r2, [r4, #4]
 800bd66:	bf04      	itt	eq
 800bd68:	1809      	addeq	r1, r1, r0
 800bd6a:	6021      	streq	r1, [r4, #0]
 800bd6c:	605c      	str	r4, [r3, #4]
 800bd6e:	e7c7      	b.n	800bd00 <_free_r+0x24>
 800bd70:	bd38      	pop	{r3, r4, r5, pc}
 800bd72:	bf00      	nop
 800bd74:	20000318 	.word	0x20000318

0800bd78 <_malloc_r>:
 800bd78:	b570      	push	{r4, r5, r6, lr}
 800bd7a:	1ccd      	adds	r5, r1, #3
 800bd7c:	f025 0503 	bic.w	r5, r5, #3
 800bd80:	3508      	adds	r5, #8
 800bd82:	2d0c      	cmp	r5, #12
 800bd84:	bf38      	it	cc
 800bd86:	250c      	movcc	r5, #12
 800bd88:	2d00      	cmp	r5, #0
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	db01      	blt.n	800bd92 <_malloc_r+0x1a>
 800bd8e:	42a9      	cmp	r1, r5
 800bd90:	d903      	bls.n	800bd9a <_malloc_r+0x22>
 800bd92:	230c      	movs	r3, #12
 800bd94:	6033      	str	r3, [r6, #0]
 800bd96:	2000      	movs	r0, #0
 800bd98:	bd70      	pop	{r4, r5, r6, pc}
 800bd9a:	f000 fa02 	bl	800c1a2 <__malloc_lock>
 800bd9e:	4a21      	ldr	r2, [pc, #132]	; (800be24 <_malloc_r+0xac>)
 800bda0:	6814      	ldr	r4, [r2, #0]
 800bda2:	4621      	mov	r1, r4
 800bda4:	b991      	cbnz	r1, 800bdcc <_malloc_r+0x54>
 800bda6:	4c20      	ldr	r4, [pc, #128]	; (800be28 <_malloc_r+0xb0>)
 800bda8:	6823      	ldr	r3, [r4, #0]
 800bdaa:	b91b      	cbnz	r3, 800bdb4 <_malloc_r+0x3c>
 800bdac:	4630      	mov	r0, r6
 800bdae:	f000 f9b5 	bl	800c11c <_sbrk_r>
 800bdb2:	6020      	str	r0, [r4, #0]
 800bdb4:	4629      	mov	r1, r5
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	f000 f9b0 	bl	800c11c <_sbrk_r>
 800bdbc:	1c43      	adds	r3, r0, #1
 800bdbe:	d124      	bne.n	800be0a <_malloc_r+0x92>
 800bdc0:	230c      	movs	r3, #12
 800bdc2:	6033      	str	r3, [r6, #0]
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	f000 f9ed 	bl	800c1a4 <__malloc_unlock>
 800bdca:	e7e4      	b.n	800bd96 <_malloc_r+0x1e>
 800bdcc:	680b      	ldr	r3, [r1, #0]
 800bdce:	1b5b      	subs	r3, r3, r5
 800bdd0:	d418      	bmi.n	800be04 <_malloc_r+0x8c>
 800bdd2:	2b0b      	cmp	r3, #11
 800bdd4:	d90f      	bls.n	800bdf6 <_malloc_r+0x7e>
 800bdd6:	600b      	str	r3, [r1, #0]
 800bdd8:	50cd      	str	r5, [r1, r3]
 800bdda:	18cc      	adds	r4, r1, r3
 800bddc:	4630      	mov	r0, r6
 800bdde:	f000 f9e1 	bl	800c1a4 <__malloc_unlock>
 800bde2:	f104 000b 	add.w	r0, r4, #11
 800bde6:	1d23      	adds	r3, r4, #4
 800bde8:	f020 0007 	bic.w	r0, r0, #7
 800bdec:	1ac3      	subs	r3, r0, r3
 800bdee:	d0d3      	beq.n	800bd98 <_malloc_r+0x20>
 800bdf0:	425a      	negs	r2, r3
 800bdf2:	50e2      	str	r2, [r4, r3]
 800bdf4:	e7d0      	b.n	800bd98 <_malloc_r+0x20>
 800bdf6:	428c      	cmp	r4, r1
 800bdf8:	684b      	ldr	r3, [r1, #4]
 800bdfa:	bf16      	itet	ne
 800bdfc:	6063      	strne	r3, [r4, #4]
 800bdfe:	6013      	streq	r3, [r2, #0]
 800be00:	460c      	movne	r4, r1
 800be02:	e7eb      	b.n	800bddc <_malloc_r+0x64>
 800be04:	460c      	mov	r4, r1
 800be06:	6849      	ldr	r1, [r1, #4]
 800be08:	e7cc      	b.n	800bda4 <_malloc_r+0x2c>
 800be0a:	1cc4      	adds	r4, r0, #3
 800be0c:	f024 0403 	bic.w	r4, r4, #3
 800be10:	42a0      	cmp	r0, r4
 800be12:	d005      	beq.n	800be20 <_malloc_r+0xa8>
 800be14:	1a21      	subs	r1, r4, r0
 800be16:	4630      	mov	r0, r6
 800be18:	f000 f980 	bl	800c11c <_sbrk_r>
 800be1c:	3001      	adds	r0, #1
 800be1e:	d0cf      	beq.n	800bdc0 <_malloc_r+0x48>
 800be20:	6025      	str	r5, [r4, #0]
 800be22:	e7db      	b.n	800bddc <_malloc_r+0x64>
 800be24:	20000318 	.word	0x20000318
 800be28:	2000031c 	.word	0x2000031c

0800be2c <_realloc_r>:
 800be2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2e:	4607      	mov	r7, r0
 800be30:	4614      	mov	r4, r2
 800be32:	460e      	mov	r6, r1
 800be34:	b921      	cbnz	r1, 800be40 <_realloc_r+0x14>
 800be36:	4611      	mov	r1, r2
 800be38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800be3c:	f7ff bf9c 	b.w	800bd78 <_malloc_r>
 800be40:	b922      	cbnz	r2, 800be4c <_realloc_r+0x20>
 800be42:	f7ff ff4b 	bl	800bcdc <_free_r>
 800be46:	4625      	mov	r5, r4
 800be48:	4628      	mov	r0, r5
 800be4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be4c:	f000 f9ab 	bl	800c1a6 <_malloc_usable_size_r>
 800be50:	42a0      	cmp	r0, r4
 800be52:	d20f      	bcs.n	800be74 <_realloc_r+0x48>
 800be54:	4621      	mov	r1, r4
 800be56:	4638      	mov	r0, r7
 800be58:	f7ff ff8e 	bl	800bd78 <_malloc_r>
 800be5c:	4605      	mov	r5, r0
 800be5e:	2800      	cmp	r0, #0
 800be60:	d0f2      	beq.n	800be48 <_realloc_r+0x1c>
 800be62:	4631      	mov	r1, r6
 800be64:	4622      	mov	r2, r4
 800be66:	f7ff fc27 	bl	800b6b8 <memcpy>
 800be6a:	4631      	mov	r1, r6
 800be6c:	4638      	mov	r0, r7
 800be6e:	f7ff ff35 	bl	800bcdc <_free_r>
 800be72:	e7e9      	b.n	800be48 <_realloc_r+0x1c>
 800be74:	4635      	mov	r5, r6
 800be76:	e7e7      	b.n	800be48 <_realloc_r+0x1c>

0800be78 <__ssputs_r>:
 800be78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be7c:	688e      	ldr	r6, [r1, #8]
 800be7e:	429e      	cmp	r6, r3
 800be80:	4682      	mov	sl, r0
 800be82:	460c      	mov	r4, r1
 800be84:	4690      	mov	r8, r2
 800be86:	4699      	mov	r9, r3
 800be88:	d837      	bhi.n	800befa <__ssputs_r+0x82>
 800be8a:	898a      	ldrh	r2, [r1, #12]
 800be8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be90:	d031      	beq.n	800bef6 <__ssputs_r+0x7e>
 800be92:	6825      	ldr	r5, [r4, #0]
 800be94:	6909      	ldr	r1, [r1, #16]
 800be96:	1a6f      	subs	r7, r5, r1
 800be98:	6965      	ldr	r5, [r4, #20]
 800be9a:	2302      	movs	r3, #2
 800be9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bea0:	fb95 f5f3 	sdiv	r5, r5, r3
 800bea4:	f109 0301 	add.w	r3, r9, #1
 800bea8:	443b      	add	r3, r7
 800beaa:	429d      	cmp	r5, r3
 800beac:	bf38      	it	cc
 800beae:	461d      	movcc	r5, r3
 800beb0:	0553      	lsls	r3, r2, #21
 800beb2:	d530      	bpl.n	800bf16 <__ssputs_r+0x9e>
 800beb4:	4629      	mov	r1, r5
 800beb6:	f7ff ff5f 	bl	800bd78 <_malloc_r>
 800beba:	4606      	mov	r6, r0
 800bebc:	b950      	cbnz	r0, 800bed4 <__ssputs_r+0x5c>
 800bebe:	230c      	movs	r3, #12
 800bec0:	f8ca 3000 	str.w	r3, [sl]
 800bec4:	89a3      	ldrh	r3, [r4, #12]
 800bec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beca:	81a3      	strh	r3, [r4, #12]
 800becc:	f04f 30ff 	mov.w	r0, #4294967295
 800bed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bed4:	463a      	mov	r2, r7
 800bed6:	6921      	ldr	r1, [r4, #16]
 800bed8:	f7ff fbee 	bl	800b6b8 <memcpy>
 800bedc:	89a3      	ldrh	r3, [r4, #12]
 800bede:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bee6:	81a3      	strh	r3, [r4, #12]
 800bee8:	6126      	str	r6, [r4, #16]
 800beea:	6165      	str	r5, [r4, #20]
 800beec:	443e      	add	r6, r7
 800beee:	1bed      	subs	r5, r5, r7
 800bef0:	6026      	str	r6, [r4, #0]
 800bef2:	60a5      	str	r5, [r4, #8]
 800bef4:	464e      	mov	r6, r9
 800bef6:	454e      	cmp	r6, r9
 800bef8:	d900      	bls.n	800befc <__ssputs_r+0x84>
 800befa:	464e      	mov	r6, r9
 800befc:	4632      	mov	r2, r6
 800befe:	4641      	mov	r1, r8
 800bf00:	6820      	ldr	r0, [r4, #0]
 800bf02:	f000 f935 	bl	800c170 <memmove>
 800bf06:	68a3      	ldr	r3, [r4, #8]
 800bf08:	1b9b      	subs	r3, r3, r6
 800bf0a:	60a3      	str	r3, [r4, #8]
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	441e      	add	r6, r3
 800bf10:	6026      	str	r6, [r4, #0]
 800bf12:	2000      	movs	r0, #0
 800bf14:	e7dc      	b.n	800bed0 <__ssputs_r+0x58>
 800bf16:	462a      	mov	r2, r5
 800bf18:	f7ff ff88 	bl	800be2c <_realloc_r>
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d1e2      	bne.n	800bee8 <__ssputs_r+0x70>
 800bf22:	6921      	ldr	r1, [r4, #16]
 800bf24:	4650      	mov	r0, sl
 800bf26:	f7ff fed9 	bl	800bcdc <_free_r>
 800bf2a:	e7c8      	b.n	800bebe <__ssputs_r+0x46>

0800bf2c <_svfiprintf_r>:
 800bf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf30:	461d      	mov	r5, r3
 800bf32:	898b      	ldrh	r3, [r1, #12]
 800bf34:	061f      	lsls	r7, r3, #24
 800bf36:	b09d      	sub	sp, #116	; 0x74
 800bf38:	4680      	mov	r8, r0
 800bf3a:	460c      	mov	r4, r1
 800bf3c:	4616      	mov	r6, r2
 800bf3e:	d50f      	bpl.n	800bf60 <_svfiprintf_r+0x34>
 800bf40:	690b      	ldr	r3, [r1, #16]
 800bf42:	b96b      	cbnz	r3, 800bf60 <_svfiprintf_r+0x34>
 800bf44:	2140      	movs	r1, #64	; 0x40
 800bf46:	f7ff ff17 	bl	800bd78 <_malloc_r>
 800bf4a:	6020      	str	r0, [r4, #0]
 800bf4c:	6120      	str	r0, [r4, #16]
 800bf4e:	b928      	cbnz	r0, 800bf5c <_svfiprintf_r+0x30>
 800bf50:	230c      	movs	r3, #12
 800bf52:	f8c8 3000 	str.w	r3, [r8]
 800bf56:	f04f 30ff 	mov.w	r0, #4294967295
 800bf5a:	e0c8      	b.n	800c0ee <_svfiprintf_r+0x1c2>
 800bf5c:	2340      	movs	r3, #64	; 0x40
 800bf5e:	6163      	str	r3, [r4, #20]
 800bf60:	2300      	movs	r3, #0
 800bf62:	9309      	str	r3, [sp, #36]	; 0x24
 800bf64:	2320      	movs	r3, #32
 800bf66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf6a:	2330      	movs	r3, #48	; 0x30
 800bf6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf70:	9503      	str	r5, [sp, #12]
 800bf72:	f04f 0b01 	mov.w	fp, #1
 800bf76:	4637      	mov	r7, r6
 800bf78:	463d      	mov	r5, r7
 800bf7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf7e:	b10b      	cbz	r3, 800bf84 <_svfiprintf_r+0x58>
 800bf80:	2b25      	cmp	r3, #37	; 0x25
 800bf82:	d13e      	bne.n	800c002 <_svfiprintf_r+0xd6>
 800bf84:	ebb7 0a06 	subs.w	sl, r7, r6
 800bf88:	d00b      	beq.n	800bfa2 <_svfiprintf_r+0x76>
 800bf8a:	4653      	mov	r3, sl
 800bf8c:	4632      	mov	r2, r6
 800bf8e:	4621      	mov	r1, r4
 800bf90:	4640      	mov	r0, r8
 800bf92:	f7ff ff71 	bl	800be78 <__ssputs_r>
 800bf96:	3001      	adds	r0, #1
 800bf98:	f000 80a4 	beq.w	800c0e4 <_svfiprintf_r+0x1b8>
 800bf9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf9e:	4453      	add	r3, sl
 800bfa0:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa2:	783b      	ldrb	r3, [r7, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f000 809d 	beq.w	800c0e4 <_svfiprintf_r+0x1b8>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfb4:	9304      	str	r3, [sp, #16]
 800bfb6:	9307      	str	r3, [sp, #28]
 800bfb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfbc:	931a      	str	r3, [sp, #104]	; 0x68
 800bfbe:	462f      	mov	r7, r5
 800bfc0:	2205      	movs	r2, #5
 800bfc2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bfc6:	4850      	ldr	r0, [pc, #320]	; (800c108 <_svfiprintf_r+0x1dc>)
 800bfc8:	f7f4 f912 	bl	80001f0 <memchr>
 800bfcc:	9b04      	ldr	r3, [sp, #16]
 800bfce:	b9d0      	cbnz	r0, 800c006 <_svfiprintf_r+0xda>
 800bfd0:	06d9      	lsls	r1, r3, #27
 800bfd2:	bf44      	itt	mi
 800bfd4:	2220      	movmi	r2, #32
 800bfd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bfda:	071a      	lsls	r2, r3, #28
 800bfdc:	bf44      	itt	mi
 800bfde:	222b      	movmi	r2, #43	; 0x2b
 800bfe0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bfe4:	782a      	ldrb	r2, [r5, #0]
 800bfe6:	2a2a      	cmp	r2, #42	; 0x2a
 800bfe8:	d015      	beq.n	800c016 <_svfiprintf_r+0xea>
 800bfea:	9a07      	ldr	r2, [sp, #28]
 800bfec:	462f      	mov	r7, r5
 800bfee:	2000      	movs	r0, #0
 800bff0:	250a      	movs	r5, #10
 800bff2:	4639      	mov	r1, r7
 800bff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bff8:	3b30      	subs	r3, #48	; 0x30
 800bffa:	2b09      	cmp	r3, #9
 800bffc:	d94d      	bls.n	800c09a <_svfiprintf_r+0x16e>
 800bffe:	b1b8      	cbz	r0, 800c030 <_svfiprintf_r+0x104>
 800c000:	e00f      	b.n	800c022 <_svfiprintf_r+0xf6>
 800c002:	462f      	mov	r7, r5
 800c004:	e7b8      	b.n	800bf78 <_svfiprintf_r+0x4c>
 800c006:	4a40      	ldr	r2, [pc, #256]	; (800c108 <_svfiprintf_r+0x1dc>)
 800c008:	1a80      	subs	r0, r0, r2
 800c00a:	fa0b f000 	lsl.w	r0, fp, r0
 800c00e:	4318      	orrs	r0, r3
 800c010:	9004      	str	r0, [sp, #16]
 800c012:	463d      	mov	r5, r7
 800c014:	e7d3      	b.n	800bfbe <_svfiprintf_r+0x92>
 800c016:	9a03      	ldr	r2, [sp, #12]
 800c018:	1d11      	adds	r1, r2, #4
 800c01a:	6812      	ldr	r2, [r2, #0]
 800c01c:	9103      	str	r1, [sp, #12]
 800c01e:	2a00      	cmp	r2, #0
 800c020:	db01      	blt.n	800c026 <_svfiprintf_r+0xfa>
 800c022:	9207      	str	r2, [sp, #28]
 800c024:	e004      	b.n	800c030 <_svfiprintf_r+0x104>
 800c026:	4252      	negs	r2, r2
 800c028:	f043 0302 	orr.w	r3, r3, #2
 800c02c:	9207      	str	r2, [sp, #28]
 800c02e:	9304      	str	r3, [sp, #16]
 800c030:	783b      	ldrb	r3, [r7, #0]
 800c032:	2b2e      	cmp	r3, #46	; 0x2e
 800c034:	d10c      	bne.n	800c050 <_svfiprintf_r+0x124>
 800c036:	787b      	ldrb	r3, [r7, #1]
 800c038:	2b2a      	cmp	r3, #42	; 0x2a
 800c03a:	d133      	bne.n	800c0a4 <_svfiprintf_r+0x178>
 800c03c:	9b03      	ldr	r3, [sp, #12]
 800c03e:	1d1a      	adds	r2, r3, #4
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	9203      	str	r2, [sp, #12]
 800c044:	2b00      	cmp	r3, #0
 800c046:	bfb8      	it	lt
 800c048:	f04f 33ff 	movlt.w	r3, #4294967295
 800c04c:	3702      	adds	r7, #2
 800c04e:	9305      	str	r3, [sp, #20]
 800c050:	4d2e      	ldr	r5, [pc, #184]	; (800c10c <_svfiprintf_r+0x1e0>)
 800c052:	7839      	ldrb	r1, [r7, #0]
 800c054:	2203      	movs	r2, #3
 800c056:	4628      	mov	r0, r5
 800c058:	f7f4 f8ca 	bl	80001f0 <memchr>
 800c05c:	b138      	cbz	r0, 800c06e <_svfiprintf_r+0x142>
 800c05e:	2340      	movs	r3, #64	; 0x40
 800c060:	1b40      	subs	r0, r0, r5
 800c062:	fa03 f000 	lsl.w	r0, r3, r0
 800c066:	9b04      	ldr	r3, [sp, #16]
 800c068:	4303      	orrs	r3, r0
 800c06a:	3701      	adds	r7, #1
 800c06c:	9304      	str	r3, [sp, #16]
 800c06e:	7839      	ldrb	r1, [r7, #0]
 800c070:	4827      	ldr	r0, [pc, #156]	; (800c110 <_svfiprintf_r+0x1e4>)
 800c072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c076:	2206      	movs	r2, #6
 800c078:	1c7e      	adds	r6, r7, #1
 800c07a:	f7f4 f8b9 	bl	80001f0 <memchr>
 800c07e:	2800      	cmp	r0, #0
 800c080:	d038      	beq.n	800c0f4 <_svfiprintf_r+0x1c8>
 800c082:	4b24      	ldr	r3, [pc, #144]	; (800c114 <_svfiprintf_r+0x1e8>)
 800c084:	bb13      	cbnz	r3, 800c0cc <_svfiprintf_r+0x1a0>
 800c086:	9b03      	ldr	r3, [sp, #12]
 800c088:	3307      	adds	r3, #7
 800c08a:	f023 0307 	bic.w	r3, r3, #7
 800c08e:	3308      	adds	r3, #8
 800c090:	9303      	str	r3, [sp, #12]
 800c092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c094:	444b      	add	r3, r9
 800c096:	9309      	str	r3, [sp, #36]	; 0x24
 800c098:	e76d      	b.n	800bf76 <_svfiprintf_r+0x4a>
 800c09a:	fb05 3202 	mla	r2, r5, r2, r3
 800c09e:	2001      	movs	r0, #1
 800c0a0:	460f      	mov	r7, r1
 800c0a2:	e7a6      	b.n	800bff2 <_svfiprintf_r+0xc6>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	3701      	adds	r7, #1
 800c0a8:	9305      	str	r3, [sp, #20]
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	250a      	movs	r5, #10
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0b4:	3a30      	subs	r2, #48	; 0x30
 800c0b6:	2a09      	cmp	r2, #9
 800c0b8:	d903      	bls.n	800c0c2 <_svfiprintf_r+0x196>
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d0c8      	beq.n	800c050 <_svfiprintf_r+0x124>
 800c0be:	9105      	str	r1, [sp, #20]
 800c0c0:	e7c6      	b.n	800c050 <_svfiprintf_r+0x124>
 800c0c2:	fb05 2101 	mla	r1, r5, r1, r2
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	e7f0      	b.n	800c0ae <_svfiprintf_r+0x182>
 800c0cc:	ab03      	add	r3, sp, #12
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	4622      	mov	r2, r4
 800c0d2:	4b11      	ldr	r3, [pc, #68]	; (800c118 <_svfiprintf_r+0x1ec>)
 800c0d4:	a904      	add	r1, sp, #16
 800c0d6:	4640      	mov	r0, r8
 800c0d8:	f7fd ff58 	bl	8009f8c <_printf_float>
 800c0dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c0e0:	4681      	mov	r9, r0
 800c0e2:	d1d6      	bne.n	800c092 <_svfiprintf_r+0x166>
 800c0e4:	89a3      	ldrh	r3, [r4, #12]
 800c0e6:	065b      	lsls	r3, r3, #25
 800c0e8:	f53f af35 	bmi.w	800bf56 <_svfiprintf_r+0x2a>
 800c0ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0ee:	b01d      	add	sp, #116	; 0x74
 800c0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f4:	ab03      	add	r3, sp, #12
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	4622      	mov	r2, r4
 800c0fa:	4b07      	ldr	r3, [pc, #28]	; (800c118 <_svfiprintf_r+0x1ec>)
 800c0fc:	a904      	add	r1, sp, #16
 800c0fe:	4640      	mov	r0, r8
 800c100:	f7fe f9fa 	bl	800a4f8 <_printf_i>
 800c104:	e7ea      	b.n	800c0dc <_svfiprintf_r+0x1b0>
 800c106:	bf00      	nop
 800c108:	0800cedc 	.word	0x0800cedc
 800c10c:	0800cee2 	.word	0x0800cee2
 800c110:	0800cee6 	.word	0x0800cee6
 800c114:	08009f8d 	.word	0x08009f8d
 800c118:	0800be79 	.word	0x0800be79

0800c11c <_sbrk_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4c06      	ldr	r4, [pc, #24]	; (800c138 <_sbrk_r+0x1c>)
 800c120:	2300      	movs	r3, #0
 800c122:	4605      	mov	r5, r0
 800c124:	4608      	mov	r0, r1
 800c126:	6023      	str	r3, [r4, #0]
 800c128:	f7f6 fde8 	bl	8002cfc <_sbrk>
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	d102      	bne.n	800c136 <_sbrk_r+0x1a>
 800c130:	6823      	ldr	r3, [r4, #0]
 800c132:	b103      	cbz	r3, 800c136 <_sbrk_r+0x1a>
 800c134:	602b      	str	r3, [r5, #0]
 800c136:	bd38      	pop	{r3, r4, r5, pc}
 800c138:	200005f8 	.word	0x200005f8

0800c13c <strcpy>:
 800c13c:	4603      	mov	r3, r0
 800c13e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c142:	f803 2b01 	strb.w	r2, [r3], #1
 800c146:	2a00      	cmp	r2, #0
 800c148:	d1f9      	bne.n	800c13e <strcpy+0x2>
 800c14a:	4770      	bx	lr

0800c14c <__ascii_mbtowc>:
 800c14c:	b082      	sub	sp, #8
 800c14e:	b901      	cbnz	r1, 800c152 <__ascii_mbtowc+0x6>
 800c150:	a901      	add	r1, sp, #4
 800c152:	b142      	cbz	r2, 800c166 <__ascii_mbtowc+0x1a>
 800c154:	b14b      	cbz	r3, 800c16a <__ascii_mbtowc+0x1e>
 800c156:	7813      	ldrb	r3, [r2, #0]
 800c158:	600b      	str	r3, [r1, #0]
 800c15a:	7812      	ldrb	r2, [r2, #0]
 800c15c:	1c10      	adds	r0, r2, #0
 800c15e:	bf18      	it	ne
 800c160:	2001      	movne	r0, #1
 800c162:	b002      	add	sp, #8
 800c164:	4770      	bx	lr
 800c166:	4610      	mov	r0, r2
 800c168:	e7fb      	b.n	800c162 <__ascii_mbtowc+0x16>
 800c16a:	f06f 0001 	mvn.w	r0, #1
 800c16e:	e7f8      	b.n	800c162 <__ascii_mbtowc+0x16>

0800c170 <memmove>:
 800c170:	4288      	cmp	r0, r1
 800c172:	b510      	push	{r4, lr}
 800c174:	eb01 0302 	add.w	r3, r1, r2
 800c178:	d807      	bhi.n	800c18a <memmove+0x1a>
 800c17a:	1e42      	subs	r2, r0, #1
 800c17c:	4299      	cmp	r1, r3
 800c17e:	d00a      	beq.n	800c196 <memmove+0x26>
 800c180:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c184:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c188:	e7f8      	b.n	800c17c <memmove+0xc>
 800c18a:	4283      	cmp	r3, r0
 800c18c:	d9f5      	bls.n	800c17a <memmove+0xa>
 800c18e:	1881      	adds	r1, r0, r2
 800c190:	1ad2      	subs	r2, r2, r3
 800c192:	42d3      	cmn	r3, r2
 800c194:	d100      	bne.n	800c198 <memmove+0x28>
 800c196:	bd10      	pop	{r4, pc}
 800c198:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c19c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c1a0:	e7f7      	b.n	800c192 <memmove+0x22>

0800c1a2 <__malloc_lock>:
 800c1a2:	4770      	bx	lr

0800c1a4 <__malloc_unlock>:
 800c1a4:	4770      	bx	lr

0800c1a6 <_malloc_usable_size_r>:
 800c1a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1aa:	1f18      	subs	r0, r3, #4
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	bfbc      	itt	lt
 800c1b0:	580b      	ldrlt	r3, [r1, r0]
 800c1b2:	18c0      	addlt	r0, r0, r3
 800c1b4:	4770      	bx	lr

0800c1b6 <__ascii_wctomb>:
 800c1b6:	b149      	cbz	r1, 800c1cc <__ascii_wctomb+0x16>
 800c1b8:	2aff      	cmp	r2, #255	; 0xff
 800c1ba:	bf85      	ittet	hi
 800c1bc:	238a      	movhi	r3, #138	; 0x8a
 800c1be:	6003      	strhi	r3, [r0, #0]
 800c1c0:	700a      	strbls	r2, [r1, #0]
 800c1c2:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1c6:	bf98      	it	ls
 800c1c8:	2001      	movls	r0, #1
 800c1ca:	4770      	bx	lr
 800c1cc:	4608      	mov	r0, r1
 800c1ce:	4770      	bx	lr

0800c1d0 <powf>:
 800c1d0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c1d4:	ed2d 8b04 	vpush	{d8-d9}
 800c1d8:	4ca7      	ldr	r4, [pc, #668]	; (800c478 <powf+0x2a8>)
 800c1da:	b08a      	sub	sp, #40	; 0x28
 800c1dc:	eef0 8a40 	vmov.f32	s17, s0
 800c1e0:	eeb0 8a60 	vmov.f32	s16, s1
 800c1e4:	f000 f958 	bl	800c498 <__ieee754_powf>
 800c1e8:	f994 5000 	ldrsb.w	r5, [r4]
 800c1ec:	1c6b      	adds	r3, r5, #1
 800c1ee:	eeb0 9a40 	vmov.f32	s18, s0
 800c1f2:	4626      	mov	r6, r4
 800c1f4:	d05f      	beq.n	800c2b6 <powf+0xe6>
 800c1f6:	eeb4 8a48 	vcmp.f32	s16, s16
 800c1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1fe:	d65a      	bvs.n	800c2b6 <powf+0xe6>
 800c200:	eef4 8a68 	vcmp.f32	s17, s17
 800c204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c208:	d721      	bvc.n	800c24e <powf+0x7e>
 800c20a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c212:	d150      	bne.n	800c2b6 <powf+0xe6>
 800c214:	2301      	movs	r3, #1
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	4b98      	ldr	r3, [pc, #608]	; (800c47c <powf+0x2ac>)
 800c21a:	9301      	str	r3, [sp, #4]
 800c21c:	ee18 0a90 	vmov	r0, s17
 800c220:	2300      	movs	r3, #0
 800c222:	9308      	str	r3, [sp, #32]
 800c224:	f7f4 f998 	bl	8000558 <__aeabi_f2d>
 800c228:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c22c:	ee18 0a10 	vmov	r0, s16
 800c230:	f7f4 f992 	bl	8000558 <__aeabi_f2d>
 800c234:	4b92      	ldr	r3, [pc, #584]	; (800c480 <powf+0x2b0>)
 800c236:	2200      	movs	r2, #0
 800c238:	2d02      	cmp	r5, #2
 800c23a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c23e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c242:	d032      	beq.n	800c2aa <powf+0xda>
 800c244:	4668      	mov	r0, sp
 800c246:	f000 fbea 	bl	800ca1e <matherr>
 800c24a:	bb40      	cbnz	r0, 800c29e <powf+0xce>
 800c24c:	e065      	b.n	800c31a <powf+0x14a>
 800c24e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800c484 <powf+0x2b4>
 800c252:	eef4 8a69 	vcmp.f32	s17, s19
 800c256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25a:	d163      	bne.n	800c324 <powf+0x154>
 800c25c:	eeb4 8a69 	vcmp.f32	s16, s19
 800c260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c264:	d12e      	bne.n	800c2c4 <powf+0xf4>
 800c266:	2301      	movs	r3, #1
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	4b84      	ldr	r3, [pc, #528]	; (800c47c <powf+0x2ac>)
 800c26c:	9301      	str	r3, [sp, #4]
 800c26e:	ee18 0a90 	vmov	r0, s17
 800c272:	2300      	movs	r3, #0
 800c274:	9308      	str	r3, [sp, #32]
 800c276:	f7f4 f96f 	bl	8000558 <__aeabi_f2d>
 800c27a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c27e:	ee18 0a10 	vmov	r0, s16
 800c282:	f7f4 f969 	bl	8000558 <__aeabi_f2d>
 800c286:	2200      	movs	r2, #0
 800c288:	2300      	movs	r3, #0
 800c28a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c28e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c292:	2d00      	cmp	r5, #0
 800c294:	d0d6      	beq.n	800c244 <powf+0x74>
 800c296:	4b7a      	ldr	r3, [pc, #488]	; (800c480 <powf+0x2b0>)
 800c298:	2200      	movs	r2, #0
 800c29a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c29e:	9b08      	ldr	r3, [sp, #32]
 800c2a0:	b11b      	cbz	r3, 800c2aa <powf+0xda>
 800c2a2:	f7fd fdad 	bl	8009e00 <__errno>
 800c2a6:	9b08      	ldr	r3, [sp, #32]
 800c2a8:	6003      	str	r3, [r0, #0]
 800c2aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2ae:	f7f4 fc83 	bl	8000bb8 <__aeabi_d2f>
 800c2b2:	ee09 0a10 	vmov	s18, r0
 800c2b6:	eeb0 0a49 	vmov.f32	s0, s18
 800c2ba:	b00a      	add	sp, #40	; 0x28
 800c2bc:	ecbd 8b04 	vpop	{d8-d9}
 800c2c0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c2c4:	eeb0 0a48 	vmov.f32	s0, s16
 800c2c8:	f000 fbb2 	bl	800ca30 <finitef>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	d0f2      	beq.n	800c2b6 <powf+0xe6>
 800c2d0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d8:	d5ed      	bpl.n	800c2b6 <powf+0xe6>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	4b67      	ldr	r3, [pc, #412]	; (800c47c <powf+0x2ac>)
 800c2e0:	9301      	str	r3, [sp, #4]
 800c2e2:	ee18 0a90 	vmov	r0, s17
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	9308      	str	r3, [sp, #32]
 800c2ea:	f7f4 f935 	bl	8000558 <__aeabi_f2d>
 800c2ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2f2:	ee18 0a10 	vmov	r0, s16
 800c2f6:	f7f4 f92f 	bl	8000558 <__aeabi_f2d>
 800c2fa:	f994 3000 	ldrsb.w	r3, [r4]
 800c2fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c302:	b923      	cbnz	r3, 800c30e <powf+0x13e>
 800c304:	2200      	movs	r2, #0
 800c306:	2300      	movs	r3, #0
 800c308:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c30c:	e79a      	b.n	800c244 <powf+0x74>
 800c30e:	495e      	ldr	r1, [pc, #376]	; (800c488 <powf+0x2b8>)
 800c310:	2000      	movs	r0, #0
 800c312:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c316:	2b02      	cmp	r3, #2
 800c318:	d194      	bne.n	800c244 <powf+0x74>
 800c31a:	f7fd fd71 	bl	8009e00 <__errno>
 800c31e:	2321      	movs	r3, #33	; 0x21
 800c320:	6003      	str	r3, [r0, #0]
 800c322:	e7bc      	b.n	800c29e <powf+0xce>
 800c324:	f000 fb84 	bl	800ca30 <finitef>
 800c328:	4605      	mov	r5, r0
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d173      	bne.n	800c416 <powf+0x246>
 800c32e:	eeb0 0a68 	vmov.f32	s0, s17
 800c332:	f000 fb7d 	bl	800ca30 <finitef>
 800c336:	2800      	cmp	r0, #0
 800c338:	d06d      	beq.n	800c416 <powf+0x246>
 800c33a:	eeb0 0a48 	vmov.f32	s0, s16
 800c33e:	f000 fb77 	bl	800ca30 <finitef>
 800c342:	2800      	cmp	r0, #0
 800c344:	d067      	beq.n	800c416 <powf+0x246>
 800c346:	ee18 0a90 	vmov	r0, s17
 800c34a:	f7f4 f905 	bl	8000558 <__aeabi_f2d>
 800c34e:	4680      	mov	r8, r0
 800c350:	ee18 0a10 	vmov	r0, s16
 800c354:	4689      	mov	r9, r1
 800c356:	f7f4 f8ff 	bl	8000558 <__aeabi_f2d>
 800c35a:	eeb4 9a49 	vcmp.f32	s18, s18
 800c35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c362:	f994 4000 	ldrsb.w	r4, [r4]
 800c366:	4b45      	ldr	r3, [pc, #276]	; (800c47c <powf+0x2ac>)
 800c368:	d713      	bvc.n	800c392 <powf+0x1c2>
 800c36a:	2201      	movs	r2, #1
 800c36c:	e9cd 2300 	strd	r2, r3, [sp]
 800c370:	9508      	str	r5, [sp, #32]
 800c372:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c376:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c37a:	2c00      	cmp	r4, #0
 800c37c:	d0c2      	beq.n	800c304 <powf+0x134>
 800c37e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800c382:	ee17 0a90 	vmov	r0, s15
 800c386:	f7f4 f8e7 	bl	8000558 <__aeabi_f2d>
 800c38a:	2c02      	cmp	r4, #2
 800c38c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c390:	e7c2      	b.n	800c318 <powf+0x148>
 800c392:	2203      	movs	r2, #3
 800c394:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c398:	e9cd 2300 	strd	r2, r3, [sp]
 800c39c:	9508      	str	r5, [sp, #32]
 800c39e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c3a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3a6:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c3aa:	b9fc      	cbnz	r4, 800c3ec <powf+0x21c>
 800c3ac:	4b37      	ldr	r3, [pc, #220]	; (800c48c <powf+0x2bc>)
 800c3ae:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c3b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3be:	d553      	bpl.n	800c468 <powf+0x298>
 800c3c0:	eeb0 0a48 	vmov.f32	s0, s16
 800c3c4:	f000 fb44 	bl	800ca50 <rintf>
 800c3c8:	eeb4 0a48 	vcmp.f32	s0, s16
 800c3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d0:	d004      	beq.n	800c3dc <powf+0x20c>
 800c3d2:	4b2f      	ldr	r3, [pc, #188]	; (800c490 <powf+0x2c0>)
 800c3d4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c3d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3dc:	f996 3000 	ldrsb.w	r3, [r6]
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d141      	bne.n	800c468 <powf+0x298>
 800c3e4:	f7fd fd0c 	bl	8009e00 <__errno>
 800c3e8:	2322      	movs	r3, #34	; 0x22
 800c3ea:	e799      	b.n	800c320 <powf+0x150>
 800c3ec:	4b29      	ldr	r3, [pc, #164]	; (800c494 <powf+0x2c4>)
 800c3ee:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3fc:	d5ee      	bpl.n	800c3dc <powf+0x20c>
 800c3fe:	eeb0 0a48 	vmov.f32	s0, s16
 800c402:	f000 fb25 	bl	800ca50 <rintf>
 800c406:	eeb4 0a48 	vcmp.f32	s0, s16
 800c40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c40e:	d0e5      	beq.n	800c3dc <powf+0x20c>
 800c410:	2200      	movs	r2, #0
 800c412:	4b1d      	ldr	r3, [pc, #116]	; (800c488 <powf+0x2b8>)
 800c414:	e7e0      	b.n	800c3d8 <powf+0x208>
 800c416:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c41e:	f47f af4a 	bne.w	800c2b6 <powf+0xe6>
 800c422:	eeb0 0a68 	vmov.f32	s0, s17
 800c426:	f000 fb03 	bl	800ca30 <finitef>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	f43f af43 	beq.w	800c2b6 <powf+0xe6>
 800c430:	eeb0 0a48 	vmov.f32	s0, s16
 800c434:	f000 fafc 	bl	800ca30 <finitef>
 800c438:	2800      	cmp	r0, #0
 800c43a:	f43f af3c 	beq.w	800c2b6 <powf+0xe6>
 800c43e:	2304      	movs	r3, #4
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	4b0e      	ldr	r3, [pc, #56]	; (800c47c <powf+0x2ac>)
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	ee18 0a90 	vmov	r0, s17
 800c44a:	2300      	movs	r3, #0
 800c44c:	9308      	str	r3, [sp, #32]
 800c44e:	f7f4 f883 	bl	8000558 <__aeabi_f2d>
 800c452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c456:	ee18 0a10 	vmov	r0, s16
 800c45a:	f7f4 f87d 	bl	8000558 <__aeabi_f2d>
 800c45e:	2200      	movs	r2, #0
 800c460:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c464:	2300      	movs	r3, #0
 800c466:	e7b7      	b.n	800c3d8 <powf+0x208>
 800c468:	4668      	mov	r0, sp
 800c46a:	f000 fad8 	bl	800ca1e <matherr>
 800c46e:	2800      	cmp	r0, #0
 800c470:	f47f af15 	bne.w	800c29e <powf+0xce>
 800c474:	e7b6      	b.n	800c3e4 <powf+0x214>
 800c476:	bf00      	nop
 800c478:	20000264 	.word	0x20000264
 800c47c:	0800cff8 	.word	0x0800cff8
 800c480:	3ff00000 	.word	0x3ff00000
 800c484:	00000000 	.word	0x00000000
 800c488:	fff00000 	.word	0xfff00000
 800c48c:	47efffff 	.word	0x47efffff
 800c490:	c7efffff 	.word	0xc7efffff
 800c494:	7ff00000 	.word	0x7ff00000

0800c498 <__ieee754_powf>:
 800c498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c49c:	ee10 5a90 	vmov	r5, s1
 800c4a0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800c4a4:	ed2d 8b02 	vpush	{d8}
 800c4a8:	eeb0 8a40 	vmov.f32	s16, s0
 800c4ac:	eef0 8a60 	vmov.f32	s17, s1
 800c4b0:	f000 8293 	beq.w	800c9da <__ieee754_powf+0x542>
 800c4b4:	ee10 8a10 	vmov	r8, s0
 800c4b8:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800c4bc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c4c0:	dc06      	bgt.n	800c4d0 <__ieee754_powf+0x38>
 800c4c2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800c4c6:	dd0a      	ble.n	800c4de <__ieee754_powf+0x46>
 800c4c8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c4cc:	f000 8285 	beq.w	800c9da <__ieee754_powf+0x542>
 800c4d0:	ecbd 8b02 	vpop	{d8}
 800c4d4:	48d9      	ldr	r0, [pc, #868]	; (800c83c <__ieee754_powf+0x3a4>)
 800c4d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4da:	f000 bab3 	b.w	800ca44 <nanf>
 800c4de:	f1b8 0f00 	cmp.w	r8, #0
 800c4e2:	da1d      	bge.n	800c520 <__ieee754_powf+0x88>
 800c4e4:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800c4e8:	da2c      	bge.n	800c544 <__ieee754_powf+0xac>
 800c4ea:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c4ee:	db30      	blt.n	800c552 <__ieee754_powf+0xba>
 800c4f0:	15fb      	asrs	r3, r7, #23
 800c4f2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c4f6:	fa47 f603 	asr.w	r6, r7, r3
 800c4fa:	fa06 f303 	lsl.w	r3, r6, r3
 800c4fe:	42bb      	cmp	r3, r7
 800c500:	d127      	bne.n	800c552 <__ieee754_powf+0xba>
 800c502:	f006 0601 	and.w	r6, r6, #1
 800c506:	f1c6 0602 	rsb	r6, r6, #2
 800c50a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c50e:	d122      	bne.n	800c556 <__ieee754_powf+0xbe>
 800c510:	2d00      	cmp	r5, #0
 800c512:	f280 8268 	bge.w	800c9e6 <__ieee754_powf+0x54e>
 800c516:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c51a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c51e:	e00d      	b.n	800c53c <__ieee754_powf+0xa4>
 800c520:	2600      	movs	r6, #0
 800c522:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800c526:	d1f0      	bne.n	800c50a <__ieee754_powf+0x72>
 800c528:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c52c:	f000 8255 	beq.w	800c9da <__ieee754_powf+0x542>
 800c530:	dd0a      	ble.n	800c548 <__ieee754_powf+0xb0>
 800c532:	2d00      	cmp	r5, #0
 800c534:	f280 8254 	bge.w	800c9e0 <__ieee754_powf+0x548>
 800c538:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800c840 <__ieee754_powf+0x3a8>
 800c53c:	ecbd 8b02 	vpop	{d8}
 800c540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c544:	2602      	movs	r6, #2
 800c546:	e7ec      	b.n	800c522 <__ieee754_powf+0x8a>
 800c548:	2d00      	cmp	r5, #0
 800c54a:	daf5      	bge.n	800c538 <__ieee754_powf+0xa0>
 800c54c:	eeb1 0a68 	vneg.f32	s0, s17
 800c550:	e7f4      	b.n	800c53c <__ieee754_powf+0xa4>
 800c552:	2600      	movs	r6, #0
 800c554:	e7d9      	b.n	800c50a <__ieee754_powf+0x72>
 800c556:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800c55a:	d102      	bne.n	800c562 <__ieee754_powf+0xca>
 800c55c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c560:	e7ec      	b.n	800c53c <__ieee754_powf+0xa4>
 800c562:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800c566:	eeb0 0a48 	vmov.f32	s0, s16
 800c56a:	d108      	bne.n	800c57e <__ieee754_powf+0xe6>
 800c56c:	f1b8 0f00 	cmp.w	r8, #0
 800c570:	db05      	blt.n	800c57e <__ieee754_powf+0xe6>
 800c572:	ecbd 8b02 	vpop	{d8}
 800c576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c57a:	f000 ba4d 	b.w	800ca18 <__ieee754_sqrtf>
 800c57e:	f000 fa50 	bl	800ca22 <fabsf>
 800c582:	b124      	cbz	r4, 800c58e <__ieee754_powf+0xf6>
 800c584:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800c588:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c58c:	d117      	bne.n	800c5be <__ieee754_powf+0x126>
 800c58e:	2d00      	cmp	r5, #0
 800c590:	bfbc      	itt	lt
 800c592:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800c596:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c59a:	f1b8 0f00 	cmp.w	r8, #0
 800c59e:	dacd      	bge.n	800c53c <__ieee754_powf+0xa4>
 800c5a0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800c5a4:	ea54 0306 	orrs.w	r3, r4, r6
 800c5a8:	d104      	bne.n	800c5b4 <__ieee754_powf+0x11c>
 800c5aa:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c5ae:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c5b2:	e7c3      	b.n	800c53c <__ieee754_powf+0xa4>
 800c5b4:	2e01      	cmp	r6, #1
 800c5b6:	d1c1      	bne.n	800c53c <__ieee754_powf+0xa4>
 800c5b8:	eeb1 0a40 	vneg.f32	s0, s0
 800c5bc:	e7be      	b.n	800c53c <__ieee754_powf+0xa4>
 800c5be:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800c5c2:	3801      	subs	r0, #1
 800c5c4:	ea56 0300 	orrs.w	r3, r6, r0
 800c5c8:	d104      	bne.n	800c5d4 <__ieee754_powf+0x13c>
 800c5ca:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c5ce:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c5d2:	e7b3      	b.n	800c53c <__ieee754_powf+0xa4>
 800c5d4:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800c5d8:	dd6d      	ble.n	800c6b6 <__ieee754_powf+0x21e>
 800c5da:	4b9a      	ldr	r3, [pc, #616]	; (800c844 <__ieee754_powf+0x3ac>)
 800c5dc:	429c      	cmp	r4, r3
 800c5de:	dc06      	bgt.n	800c5ee <__ieee754_powf+0x156>
 800c5e0:	2d00      	cmp	r5, #0
 800c5e2:	daa9      	bge.n	800c538 <__ieee754_powf+0xa0>
 800c5e4:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800c848 <__ieee754_powf+0x3b0>
 800c5e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c5ec:	e7a6      	b.n	800c53c <__ieee754_powf+0xa4>
 800c5ee:	4b97      	ldr	r3, [pc, #604]	; (800c84c <__ieee754_powf+0x3b4>)
 800c5f0:	429c      	cmp	r4, r3
 800c5f2:	dd02      	ble.n	800c5fa <__ieee754_powf+0x162>
 800c5f4:	2d00      	cmp	r5, #0
 800c5f6:	dcf5      	bgt.n	800c5e4 <__ieee754_powf+0x14c>
 800c5f8:	e79e      	b.n	800c538 <__ieee754_powf+0xa0>
 800c5fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c5fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c602:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800c850 <__ieee754_powf+0x3b8>
 800c606:	eef1 6a40 	vneg.f32	s13, s0
 800c60a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c60e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c612:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c616:	eee7 7a40 	vfms.f32	s15, s14, s0
 800c61a:	ee60 0a00 	vmul.f32	s1, s0, s0
 800c61e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800c854 <__ieee754_powf+0x3bc>
 800c622:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800c626:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800c858 <__ieee754_powf+0x3c0>
 800c62a:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800c62e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c632:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c85c <__ieee754_powf+0x3c4>
 800c636:	eeb0 6a67 	vmov.f32	s12, s15
 800c63a:	eea0 6a07 	vfma.f32	s12, s0, s14
 800c63e:	ee16 3a10 	vmov	r3, s12
 800c642:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c646:	f023 030f 	bic.w	r3, r3, #15
 800c64a:	ee00 3a90 	vmov	s1, r3
 800c64e:	eee6 0a87 	vfma.f32	s1, s13, s14
 800c652:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c656:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800c65a:	f025 050f 	bic.w	r5, r5, #15
 800c65e:	ee07 5a10 	vmov	s14, r5
 800c662:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c666:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c66a:	ee07 3a90 	vmov	s15, r3
 800c66e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c672:	3e01      	subs	r6, #1
 800c674:	ea56 0200 	orrs.w	r2, r6, r0
 800c678:	ee07 5a10 	vmov	s14, r5
 800c67c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c680:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c684:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c688:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c68c:	ee17 4a10 	vmov	r4, s14
 800c690:	bf08      	it	eq
 800c692:	eeb0 8a40 	vmoveq.f32	s16, s0
 800c696:	2c00      	cmp	r4, #0
 800c698:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c69c:	f340 8184 	ble.w	800c9a8 <__ieee754_powf+0x510>
 800c6a0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800c6a4:	f340 80fc 	ble.w	800c8a0 <__ieee754_powf+0x408>
 800c6a8:	eddf 7a67 	vldr	s15, [pc, #412]	; 800c848 <__ieee754_powf+0x3b0>
 800c6ac:	ee28 0a27 	vmul.f32	s0, s16, s15
 800c6b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c6b4:	e742      	b.n	800c53c <__ieee754_powf+0xa4>
 800c6b6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800c6ba:	bfbf      	itttt	lt
 800c6bc:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800c860 <__ieee754_powf+0x3c8>
 800c6c0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c6c4:	f06f 0217 	mvnlt.w	r2, #23
 800c6c8:	ee17 4a90 	vmovlt	r4, s15
 800c6cc:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800c6d0:	bfa8      	it	ge
 800c6d2:	2200      	movge	r2, #0
 800c6d4:	3b7f      	subs	r3, #127	; 0x7f
 800c6d6:	4413      	add	r3, r2
 800c6d8:	4a62      	ldr	r2, [pc, #392]	; (800c864 <__ieee754_powf+0x3cc>)
 800c6da:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800c6de:	4294      	cmp	r4, r2
 800c6e0:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800c6e4:	dd06      	ble.n	800c6f4 <__ieee754_powf+0x25c>
 800c6e6:	4a60      	ldr	r2, [pc, #384]	; (800c868 <__ieee754_powf+0x3d0>)
 800c6e8:	4294      	cmp	r4, r2
 800c6ea:	f340 80a5 	ble.w	800c838 <__ieee754_powf+0x3a0>
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c6f4:	2400      	movs	r4, #0
 800c6f6:	4a5d      	ldr	r2, [pc, #372]	; (800c86c <__ieee754_powf+0x3d4>)
 800c6f8:	00a7      	lsls	r7, r4, #2
 800c6fa:	443a      	add	r2, r7
 800c6fc:	ee07 1a90 	vmov	s15, r1
 800c700:	ed92 7a00 	vldr	s14, [r2]
 800c704:	4a5a      	ldr	r2, [pc, #360]	; (800c870 <__ieee754_powf+0x3d8>)
 800c706:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c70a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c70e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800c712:	1049      	asrs	r1, r1, #1
 800c714:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800c718:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800c71c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800c720:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800c724:	ee06 1a10 	vmov	s12, r1
 800c728:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800c72c:	ee14 ca90 	vmov	ip, s9
 800c730:	ea02 0c0c 	and.w	ip, r2, ip
 800c734:	ee05 ca10 	vmov	s10, ip
 800c738:	eeb1 4a45 	vneg.f32	s8, s10
 800c73c:	eee4 5a06 	vfma.f32	s11, s8, s12
 800c740:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c744:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800c874 <__ieee754_powf+0x3dc>
 800c748:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800c74c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800c750:	eee4 5a06 	vfma.f32	s11, s8, s12
 800c754:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800c758:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800c75c:	eddf 5a46 	vldr	s11, [pc, #280]	; 800c878 <__ieee754_powf+0x3e0>
 800c760:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c764:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c87c <__ieee754_powf+0x3e4>
 800c768:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c76c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c850 <__ieee754_powf+0x3b8>
 800c770:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c774:	eddf 5a42 	vldr	s11, [pc, #264]	; 800c880 <__ieee754_powf+0x3e8>
 800c778:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c77c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800c884 <__ieee754_powf+0x3ec>
 800c780:	ee75 6a24 	vadd.f32	s13, s10, s9
 800c784:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c788:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c78c:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800c790:	eef0 7a65 	vmov.f32	s15, s11
 800c794:	eee3 6a87 	vfma.f32	s13, s7, s14
 800c798:	eee5 7a05 	vfma.f32	s15, s10, s10
 800c79c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7a0:	ee17 1a90 	vmov	r1, s15
 800c7a4:	4011      	ands	r1, r2
 800c7a6:	ee07 1a90 	vmov	s15, r1
 800c7aa:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800c7ae:	eddf 5a36 	vldr	s11, [pc, #216]	; 800c888 <__ieee754_powf+0x3f0>
 800c7b2:	eea4 7a05 	vfma.f32	s14, s8, s10
 800c7b6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c7ba:	ee27 7a24 	vmul.f32	s14, s14, s9
 800c7be:	eea7 7a86 	vfma.f32	s14, s15, s12
 800c7c2:	eeb0 6a47 	vmov.f32	s12, s14
 800c7c6:	eea5 6a27 	vfma.f32	s12, s10, s15
 800c7ca:	ee16 1a10 	vmov	r1, s12
 800c7ce:	4011      	ands	r1, r2
 800c7d0:	ee06 1a90 	vmov	s13, r1
 800c7d4:	eee4 6a27 	vfma.f32	s13, s8, s15
 800c7d8:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800c88c <__ieee754_powf+0x3f4>
 800c7dc:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c7e0:	ee06 1a10 	vmov	s12, r1
 800c7e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7e8:	eddf 7a29 	vldr	s15, [pc, #164]	; 800c890 <__ieee754_powf+0x3f8>
 800c7ec:	4929      	ldr	r1, [pc, #164]	; (800c894 <__ieee754_powf+0x3fc>)
 800c7ee:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c7f2:	4439      	add	r1, r7
 800c7f4:	edd1 7a00 	vldr	s15, [r1]
 800c7f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c7fc:	ee07 3a90 	vmov	s15, r3
 800c800:	eef0 0a47 	vmov.f32	s1, s14
 800c804:	4b24      	ldr	r3, [pc, #144]	; (800c898 <__ieee754_powf+0x400>)
 800c806:	eee6 0a25 	vfma.f32	s1, s12, s11
 800c80a:	443b      	add	r3, r7
 800c80c:	ed93 5a00 	vldr	s10, [r3]
 800c810:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c814:	ee70 0a85 	vadd.f32	s1, s1, s10
 800c818:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800c81c:	ee17 3a90 	vmov	r3, s15
 800c820:	4013      	ands	r3, r2
 800c822:	ee07 3a90 	vmov	s15, r3
 800c826:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c82a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c82e:	eee6 7a65 	vfms.f32	s15, s12, s11
 800c832:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c836:	e70e      	b.n	800c656 <__ieee754_powf+0x1be>
 800c838:	2401      	movs	r4, #1
 800c83a:	e75c      	b.n	800c6f6 <__ieee754_powf+0x25e>
 800c83c:	0800cee1 	.word	0x0800cee1
 800c840:	00000000 	.word	0x00000000
 800c844:	3f7ffff7 	.word	0x3f7ffff7
 800c848:	7149f2ca 	.word	0x7149f2ca
 800c84c:	3f800007 	.word	0x3f800007
 800c850:	3eaaaaab 	.word	0x3eaaaaab
 800c854:	36eca570 	.word	0x36eca570
 800c858:	3fb8aa3b 	.word	0x3fb8aa3b
 800c85c:	3fb8aa00 	.word	0x3fb8aa00
 800c860:	4b800000 	.word	0x4b800000
 800c864:	001cc471 	.word	0x001cc471
 800c868:	005db3d6 	.word	0x005db3d6
 800c86c:	0800d000 	.word	0x0800d000
 800c870:	fffff000 	.word	0xfffff000
 800c874:	3e6c3255 	.word	0x3e6c3255
 800c878:	3e53f142 	.word	0x3e53f142
 800c87c:	3e8ba305 	.word	0x3e8ba305
 800c880:	3edb6db7 	.word	0x3edb6db7
 800c884:	3f19999a 	.word	0x3f19999a
 800c888:	3f763800 	.word	0x3f763800
 800c88c:	3f76384f 	.word	0x3f76384f
 800c890:	369dc3a0 	.word	0x369dc3a0
 800c894:	0800d010 	.word	0x0800d010
 800c898:	0800d008 	.word	0x0800d008
 800c89c:	3338aa3c 	.word	0x3338aa3c
 800c8a0:	f040 8092 	bne.w	800c9c8 <__ieee754_powf+0x530>
 800c8a4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800c89c <__ieee754_powf+0x404>
 800c8a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c8ac:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c8b0:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8b8:	f73f aef6 	bgt.w	800c6a8 <__ieee754_powf+0x210>
 800c8bc:	15db      	asrs	r3, r3, #23
 800c8be:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800c8c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c8c6:	4103      	asrs	r3, r0
 800c8c8:	4423      	add	r3, r4
 800c8ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c8ce:	4947      	ldr	r1, [pc, #284]	; (800c9ec <__ieee754_powf+0x554>)
 800c8d0:	3a7f      	subs	r2, #127	; 0x7f
 800c8d2:	4111      	asrs	r1, r2
 800c8d4:	ea23 0101 	bic.w	r1, r3, r1
 800c8d8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800c8dc:	ee07 1a10 	vmov	s14, r1
 800c8e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c8e4:	f1c2 0217 	rsb	r2, r2, #23
 800c8e8:	4110      	asrs	r0, r2
 800c8ea:	2c00      	cmp	r4, #0
 800c8ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8f0:	bfb8      	it	lt
 800c8f2:	4240      	neglt	r0, r0
 800c8f4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c8f8:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c9f0 <__ieee754_powf+0x558>
 800c8fc:	ee17 3a10 	vmov	r3, s14
 800c900:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c904:	f023 030f 	bic.w	r3, r3, #15
 800c908:	ee07 3a10 	vmov	s14, r3
 800c90c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c910:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c914:	eddf 7a37 	vldr	s15, [pc, #220]	; 800c9f4 <__ieee754_powf+0x55c>
 800c918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c91c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800c920:	eddf 6a35 	vldr	s13, [pc, #212]	; 800c9f8 <__ieee754_powf+0x560>
 800c924:	eeb0 0a67 	vmov.f32	s0, s15
 800c928:	eea7 0a26 	vfma.f32	s0, s14, s13
 800c92c:	eeb0 6a40 	vmov.f32	s12, s0
 800c930:	eea7 6a66 	vfms.f32	s12, s14, s13
 800c934:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c938:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c93c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800c9fc <__ieee754_powf+0x564>
 800c940:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800ca00 <__ieee754_powf+0x568>
 800c944:	eea7 6a26 	vfma.f32	s12, s14, s13
 800c948:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800ca04 <__ieee754_powf+0x56c>
 800c94c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c950:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ca08 <__ieee754_powf+0x570>
 800c954:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c958:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800ca0c <__ieee754_powf+0x574>
 800c95c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c960:	eeb0 6a40 	vmov.f32	s12, s0
 800c964:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c968:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c96c:	eeb0 7a46 	vmov.f32	s14, s12
 800c970:	ee77 6a66 	vsub.f32	s13, s14, s13
 800c974:	ee20 6a06 	vmul.f32	s12, s0, s12
 800c978:	eee0 7a27 	vfma.f32	s15, s0, s15
 800c97c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c980:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c984:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c988:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c98c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c990:	ee10 3a10 	vmov	r3, s0
 800c994:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c99c:	da1a      	bge.n	800c9d4 <__ieee754_powf+0x53c>
 800c99e:	f000 f8b1 	bl	800cb04 <scalbnf>
 800c9a2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c9a6:	e5c9      	b.n	800c53c <__ieee754_powf+0xa4>
 800c9a8:	4a19      	ldr	r2, [pc, #100]	; (800ca10 <__ieee754_powf+0x578>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	dd02      	ble.n	800c9b4 <__ieee754_powf+0x51c>
 800c9ae:	eddf 7a19 	vldr	s15, [pc, #100]	; 800ca14 <__ieee754_powf+0x57c>
 800c9b2:	e67b      	b.n	800c6ac <__ieee754_powf+0x214>
 800c9b4:	d108      	bne.n	800c9c8 <__ieee754_powf+0x530>
 800c9b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c9ba:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c2:	f6ff af7b 	blt.w	800c8bc <__ieee754_powf+0x424>
 800c9c6:	e7f2      	b.n	800c9ae <__ieee754_powf+0x516>
 800c9c8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800c9cc:	f73f af76 	bgt.w	800c8bc <__ieee754_powf+0x424>
 800c9d0:	2000      	movs	r0, #0
 800c9d2:	e78f      	b.n	800c8f4 <__ieee754_powf+0x45c>
 800c9d4:	ee00 3a10 	vmov	s0, r3
 800c9d8:	e7e3      	b.n	800c9a2 <__ieee754_powf+0x50a>
 800c9da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c9de:	e5ad      	b.n	800c53c <__ieee754_powf+0xa4>
 800c9e0:	eeb0 0a68 	vmov.f32	s0, s17
 800c9e4:	e5aa      	b.n	800c53c <__ieee754_powf+0xa4>
 800c9e6:	eeb0 0a48 	vmov.f32	s0, s16
 800c9ea:	e5a7      	b.n	800c53c <__ieee754_powf+0xa4>
 800c9ec:	007fffff 	.word	0x007fffff
 800c9f0:	3f317218 	.word	0x3f317218
 800c9f4:	35bfbe8c 	.word	0x35bfbe8c
 800c9f8:	3f317200 	.word	0x3f317200
 800c9fc:	3331bb4c 	.word	0x3331bb4c
 800ca00:	b5ddea0e 	.word	0xb5ddea0e
 800ca04:	388ab355 	.word	0x388ab355
 800ca08:	bb360b61 	.word	0xbb360b61
 800ca0c:	3e2aaaab 	.word	0x3e2aaaab
 800ca10:	43160000 	.word	0x43160000
 800ca14:	0da24260 	.word	0x0da24260

0800ca18 <__ieee754_sqrtf>:
 800ca18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ca1c:	4770      	bx	lr

0800ca1e <matherr>:
 800ca1e:	2000      	movs	r0, #0
 800ca20:	4770      	bx	lr

0800ca22 <fabsf>:
 800ca22:	ee10 3a10 	vmov	r3, s0
 800ca26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca2a:	ee00 3a10 	vmov	s0, r3
 800ca2e:	4770      	bx	lr

0800ca30 <finitef>:
 800ca30:	ee10 3a10 	vmov	r3, s0
 800ca34:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800ca38:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ca3c:	bfac      	ite	ge
 800ca3e:	2000      	movge	r0, #0
 800ca40:	2001      	movlt	r0, #1
 800ca42:	4770      	bx	lr

0800ca44 <nanf>:
 800ca44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ca4c <nanf+0x8>
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	7fc00000 	.word	0x7fc00000

0800ca50 <rintf>:
 800ca50:	b513      	push	{r0, r1, r4, lr}
 800ca52:	ee10 1a10 	vmov	r1, s0
 800ca56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca5a:	0ddc      	lsrs	r4, r3, #23
 800ca5c:	3c7f      	subs	r4, #127	; 0x7f
 800ca5e:	2c16      	cmp	r4, #22
 800ca60:	dc46      	bgt.n	800caf0 <rintf+0xa0>
 800ca62:	b32b      	cbz	r3, 800cab0 <rintf+0x60>
 800ca64:	2c00      	cmp	r4, #0
 800ca66:	ee10 2a10 	vmov	r2, s0
 800ca6a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800ca6e:	da21      	bge.n	800cab4 <rintf+0x64>
 800ca70:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800ca74:	425b      	negs	r3, r3
 800ca76:	4a21      	ldr	r2, [pc, #132]	; (800cafc <rintf+0xac>)
 800ca78:	0a5b      	lsrs	r3, r3, #9
 800ca7a:	0d09      	lsrs	r1, r1, #20
 800ca7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca80:	0509      	lsls	r1, r1, #20
 800ca82:	430b      	orrs	r3, r1
 800ca84:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800ca88:	ee07 3a90 	vmov	s15, r3
 800ca8c:	edd2 6a00 	vldr	s13, [r2]
 800ca90:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800ca94:	ed8d 7a01 	vstr	s14, [sp, #4]
 800ca98:	eddd 7a01 	vldr	s15, [sp, #4]
 800ca9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800caa0:	ee17 3a90 	vmov	r3, s15
 800caa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800caa8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800caac:	ee00 3a10 	vmov	s0, r3
 800cab0:	b002      	add	sp, #8
 800cab2:	bd10      	pop	{r4, pc}
 800cab4:	4b12      	ldr	r3, [pc, #72]	; (800cb00 <rintf+0xb0>)
 800cab6:	4123      	asrs	r3, r4
 800cab8:	4219      	tst	r1, r3
 800caba:	d0f9      	beq.n	800cab0 <rintf+0x60>
 800cabc:	085b      	lsrs	r3, r3, #1
 800cabe:	4219      	tst	r1, r3
 800cac0:	d006      	beq.n	800cad0 <rintf+0x80>
 800cac2:	ea21 0203 	bic.w	r2, r1, r3
 800cac6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800caca:	fa43 f404 	asr.w	r4, r3, r4
 800cace:	4322      	orrs	r2, r4
 800cad0:	4b0a      	ldr	r3, [pc, #40]	; (800cafc <rintf+0xac>)
 800cad2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cad6:	ed90 7a00 	vldr	s14, [r0]
 800cada:	ee07 2a90 	vmov	s15, r2
 800cade:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cae2:	edcd 7a01 	vstr	s15, [sp, #4]
 800cae6:	ed9d 0a01 	vldr	s0, [sp, #4]
 800caea:	ee30 0a47 	vsub.f32	s0, s0, s14
 800caee:	e7df      	b.n	800cab0 <rintf+0x60>
 800caf0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800caf4:	d3dc      	bcc.n	800cab0 <rintf+0x60>
 800caf6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cafa:	e7d9      	b.n	800cab0 <rintf+0x60>
 800cafc:	0800d018 	.word	0x0800d018
 800cb00:	007fffff 	.word	0x007fffff

0800cb04 <scalbnf>:
 800cb04:	b508      	push	{r3, lr}
 800cb06:	ee10 2a10 	vmov	r2, s0
 800cb0a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800cb0e:	ed2d 8b02 	vpush	{d8}
 800cb12:	eef0 0a40 	vmov.f32	s1, s0
 800cb16:	d004      	beq.n	800cb22 <scalbnf+0x1e>
 800cb18:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cb1c:	d306      	bcc.n	800cb2c <scalbnf+0x28>
 800cb1e:	ee70 0a00 	vadd.f32	s1, s0, s0
 800cb22:	ecbd 8b02 	vpop	{d8}
 800cb26:	eeb0 0a60 	vmov.f32	s0, s1
 800cb2a:	bd08      	pop	{r3, pc}
 800cb2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb30:	d21c      	bcs.n	800cb6c <scalbnf+0x68>
 800cb32:	4b1f      	ldr	r3, [pc, #124]	; (800cbb0 <scalbnf+0xac>)
 800cb34:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cbb4 <scalbnf+0xb0>
 800cb38:	4298      	cmp	r0, r3
 800cb3a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800cb3e:	db10      	blt.n	800cb62 <scalbnf+0x5e>
 800cb40:	ee10 2a90 	vmov	r2, s1
 800cb44:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800cb48:	3b19      	subs	r3, #25
 800cb4a:	4403      	add	r3, r0
 800cb4c:	2bfe      	cmp	r3, #254	; 0xfe
 800cb4e:	dd0f      	ble.n	800cb70 <scalbnf+0x6c>
 800cb50:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800cbb8 <scalbnf+0xb4>
 800cb54:	eeb0 0a48 	vmov.f32	s0, s16
 800cb58:	f000 f834 	bl	800cbc4 <copysignf>
 800cb5c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800cb60:	e7df      	b.n	800cb22 <scalbnf+0x1e>
 800cb62:	eddf 7a16 	vldr	s15, [pc, #88]	; 800cbbc <scalbnf+0xb8>
 800cb66:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800cb6a:	e7da      	b.n	800cb22 <scalbnf+0x1e>
 800cb6c:	0ddb      	lsrs	r3, r3, #23
 800cb6e:	e7ec      	b.n	800cb4a <scalbnf+0x46>
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	dd06      	ble.n	800cb82 <scalbnf+0x7e>
 800cb74:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800cb78:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800cb7c:	ee00 3a90 	vmov	s1, r3
 800cb80:	e7cf      	b.n	800cb22 <scalbnf+0x1e>
 800cb82:	f113 0f16 	cmn.w	r3, #22
 800cb86:	da06      	bge.n	800cb96 <scalbnf+0x92>
 800cb88:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cb8c:	4298      	cmp	r0, r3
 800cb8e:	dcdf      	bgt.n	800cb50 <scalbnf+0x4c>
 800cb90:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800cbbc <scalbnf+0xb8>
 800cb94:	e7de      	b.n	800cb54 <scalbnf+0x50>
 800cb96:	3319      	adds	r3, #25
 800cb98:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800cb9c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800cba0:	eddf 7a07 	vldr	s15, [pc, #28]	; 800cbc0 <scalbnf+0xbc>
 800cba4:	ee07 3a10 	vmov	s14, r3
 800cba8:	ee67 0a27 	vmul.f32	s1, s14, s15
 800cbac:	e7b9      	b.n	800cb22 <scalbnf+0x1e>
 800cbae:	bf00      	nop
 800cbb0:	ffff3cb0 	.word	0xffff3cb0
 800cbb4:	4c000000 	.word	0x4c000000
 800cbb8:	7149f2ca 	.word	0x7149f2ca
 800cbbc:	0da24260 	.word	0x0da24260
 800cbc0:	33000000 	.word	0x33000000

0800cbc4 <copysignf>:
 800cbc4:	ee10 3a10 	vmov	r3, s0
 800cbc8:	ee10 2a90 	vmov	r2, s1
 800cbcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbd0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	ee00 3a10 	vmov	s0, r3
 800cbda:	4770      	bx	lr

0800cbdc <_init>:
 800cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbde:	bf00      	nop
 800cbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbe2:	bc08      	pop	{r3}
 800cbe4:	469e      	mov	lr, r3
 800cbe6:	4770      	bx	lr

0800cbe8 <_fini>:
 800cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbea:	bf00      	nop
 800cbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbee:	bc08      	pop	{r3}
 800cbf0:	469e      	mov	lr, r3
 800cbf2:	4770      	bx	lr
