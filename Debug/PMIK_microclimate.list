
PMIK_microclimate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800e870  0800e870  0001e870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edb4  0800edb4  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800edb4  0800edb4  0001edb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edbc  0800edbc  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edbc  0800edbc  0001edbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edc0  0800edc0  0001edc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800edc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000268  0800f02c  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  0800f02c  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   000234e3  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047b8  00000000  00000000  0004377b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a58  00000000  00000000  00047f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001848  00000000  00000000  00049990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b31e  00000000  00000000  0004b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016758  00000000  00000000  000664f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009810b  00000000  00000000  0007cc4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114d59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cc8  00000000  00000000  00114dd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000268 	.word	0x20000268
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e858 	.word	0x0800e858

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	0800e858 	.word	0x0800e858

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000fac:	4a22      	ldr	r2, [pc, #136]	; (8001038 <MX_ADC1_Init+0xa0>)
 8000fae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000fb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000fba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000fdc:	4a17      	ldr	r2, [pc, #92]	; (800103c <MX_ADC1_Init+0xa4>)
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000ffc:	f004 fa5e 	bl	80054bc <HAL_ADC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001006:	f001 f9b1 	bl	800236c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800100a:	230a      	movs	r3, #10
 800100c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001012:	2307      	movs	r3, #7
 8001014:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	4619      	mov	r1, r3
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <MX_ADC1_Init+0x9c>)
 800101c:	f004 fb84 	bl	8005728 <HAL_ADC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001026:	f001 f9a1 	bl	800236c <Error_Handler>
  }

}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000320 	.word	0x20000320
 8001038:	40012000 	.word	0x40012000
 800103c:	0f000001 	.word	0x0f000001

08001040 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a2f      	ldr	r2, [pc, #188]	; (800111c <HAL_ADC_MspInit+0xdc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d157      	bne.n	8001112 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <HAL_ADC_MspInit+0xe0>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <HAL_ADC_MspInit+0xe0>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <HAL_ADC_MspInit+0xe0>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b27      	ldr	r3, [pc, #156]	; (8001120 <HAL_ADC_MspInit+0xe0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a26      	ldr	r2, [pc, #152]	; (8001120 <HAL_ADC_MspInit+0xe0>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b24      	ldr	r3, [pc, #144]	; (8001120 <HAL_ADC_MspInit+0xe0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800109a:	2301      	movs	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109e:	2303      	movs	r3, #3
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	481d      	ldr	r0, [pc, #116]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 80010ae:	f005 fd31 	bl	8006b14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 80010b4:	4a1d      	ldr	r2, [pc, #116]	; (800112c <HAL_ADC_MspInit+0xec>)
 80010b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 80010cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 80010d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 80010dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 80010e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010f6:	480c      	ldr	r0, [pc, #48]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 80010f8:	f004 fec8 	bl	8005e8c <HAL_DMA_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001102:	f001 f933 	bl	800236c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 800110a:	639a      	str	r2, [r3, #56]	; 0x38
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40012000 	.word	0x40012000
 8001120:	40023800 	.word	0x40023800
 8001124:	40020800 	.word	0x40020800
 8001128:	20000368 	.word	0x20000368
 800112c:	40026410 	.word	0x40026410

08001130 <buzzerAlarm>:
 * @param time: alarm time in seconds
 * @param power: power of alarm
 * 	This parameter can be one of values 0-1000 (the smaller value, the louder alarm sounds)
 * @retval none
 */
void buzzerAlarm(uint8_t time,uint8_t power){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	460a      	mov	r2, r1
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	71bb      	strb	r3, [r7, #6]
	htim3.Instance->CCR1 = power;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <buzzerAlarm+0x38>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	79ba      	ldrb	r2, [r7, #6]
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001148:	2100      	movs	r1, #0
 800114a:	4807      	ldr	r0, [pc, #28]	; (8001168 <buzzerAlarm+0x38>)
 800114c:	f007 fddc 	bl	8008d08 <HAL_TIM_PWM_Start>
	delayCounter = time * 1000;
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	461a      	mov	r2, r3
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <buzzerAlarm+0x3c>)
 800115e:	601a      	str	r2, [r3, #0]
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200004c8 	.word	0x200004c8
 800116c:	2000028c 	.word	0x2000028c

08001170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_DMA_Init+0x3c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <MX_DMA_Init+0x3c>)
 8001180:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_DMA_Init+0x3c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2038      	movs	r0, #56	; 0x38
 8001198:	f004 fe41 	bl	8005e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800119c:	2038      	movs	r0, #56	; 0x38
 800119e:	f004 fe5a 	bl	8005e56 <HAL_NVIC_EnableIRQ>

}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <EE_Init>:
  * @retval	Success or error status:
  * 		- Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80011b6:	2306      	movs	r3, #6
 80011b8:	847b      	strh	r3, [r7, #34]	; 0x22
 80011ba:	2306      	movs	r3, #6
 80011bc:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	83fb      	strh	r3, [r7, #30]
 80011c6:	2300      	movs	r3, #0
 80011c8:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 80011ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ce:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80011d4:	4b9f      	ldr	r3, [pc, #636]	; (8001454 <EE_Init+0x2a4>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80011da:	4b9f      	ldr	r3, [pc, #636]	; (8001458 <EE_Init+0x2a8>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80011e0:	2300      	movs	r3, #0
 80011e2:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 80011e4:	2306      	movs	r3, #6
 80011e6:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80011ec:	2302      	movs	r3, #2
 80011ee:	613b      	str	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80011f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011f2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d057      	beq.n	80012aa <EE_Init+0xfa>
 80011fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fe:	4293      	cmp	r3, r2
 8001200:	d003      	beq.n	800120a <EE_Init+0x5a>
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80f4 	beq.w	80013f0 <EE_Init+0x240>
 8001208:	e18d      	b.n	8001526 <EE_Init+0x376>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800120a:	8c3b      	ldrh	r3, [r7, #32]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d116      	bne.n	800123e <EE_Init+0x8e>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001210:	4890      	ldr	r0, [pc, #576]	; (8001454 <EE_Init+0x2a4>)
 8001212:	f000 f9a9 	bl	8001568 <EE_VerifyPageFullyErased>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 818e 	bne.w	800153a <EE_Init+0x38a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800121e:	f107 0214 	add.w	r2, r7, #20
 8001222:	463b      	mov	r3, r7
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f005 fb52 	bl	80068d0 <HAL_FLASHEx_Erase>
 800122c:	4603      	mov	r3, r0
 800122e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001230:	7efb      	ldrb	r3, [r7, #27]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 8181 	beq.w	800153a <EE_Init+0x38a>
          {
            return FlashStatus;
 8001238:	7efb      	ldrb	r3, [r7, #27]
 800123a:	b29b      	uxth	r3, r3
 800123c:	e185      	b.n	800154a <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800123e:	8c3b      	ldrh	r3, [r7, #32]
 8001240:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001244:	4293      	cmp	r3, r2
 8001246:	d125      	bne.n	8001294 <EE_Init+0xe4>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001248:	4882      	ldr	r0, [pc, #520]	; (8001454 <EE_Init+0x2a4>)
 800124a:	f000 f98d 	bl	8001568 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10e      	bne.n	8001272 <EE_Init+0xc2>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001254:	f107 0214 	add.w	r2, r7, #20
 8001258:	463b      	mov	r3, r7
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f005 fb37 	bl	80068d0 <HAL_FLASHEx_Erase>
 8001262:	4603      	mov	r3, r0
 8001264:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001266:	7efb      	ldrb	r3, [r7, #27]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <EE_Init+0xc2>
          {
            return FlashStatus;
 800126c:	7efb      	ldrb	r3, [r7, #27]
 800126e:	b29b      	uxth	r3, r3
 8001270:	e16b      	b.n	800154a <EE_Init+0x39a>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	4977      	ldr	r1, [pc, #476]	; (8001458 <EE_Init+0x2a8>)
 800127c:	2001      	movs	r0, #1
 800127e:	f005 f973 	bl	8006568 <HAL_FLASH_Program>
 8001282:	4603      	mov	r3, r0
 8001284:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001286:	7efb      	ldrb	r3, [r7, #27]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8156 	beq.w	800153a <EE_Init+0x38a>
        {
          return FlashStatus;
 800128e:	7efb      	ldrb	r3, [r7, #27]
 8001290:	b29b      	uxth	r3, r3
 8001292:	e15a      	b.n	800154a <EE_Init+0x39a>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001294:	f000 f9fe 	bl	8001694 <EE_Format>
 8001298:	4603      	mov	r3, r0
 800129a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800129c:	7efb      	ldrb	r3, [r7, #27]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 814b 	beq.w	800153a <EE_Init+0x38a>
        {
          return FlashStatus;
 80012a4:	7efb      	ldrb	r3, [r7, #27]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	e14f      	b.n	800154a <EE_Init+0x39a>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80012aa:	8c3b      	ldrh	r3, [r7, #32]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d163      	bne.n	8001378 <EE_Init+0x1c8>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80012b4:	e030      	b.n	8001318 <EE_Init+0x168>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80012b6:	4b69      	ldr	r3, [pc, #420]	; (800145c <EE_Init+0x2ac>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012be:	4968      	ldr	r1, [pc, #416]	; (8001460 <EE_Init+0x2b0>)
 80012c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d101      	bne.n	80012cc <EE_Init+0x11c>
          {
            x = VarIdx;
 80012c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012ca:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80012cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d01d      	beq.n	8001312 <EE_Init+0x162>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80012d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012d8:	4a61      	ldr	r2, [pc, #388]	; (8001460 <EE_Init+0x2b0>)
 80012da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012de:	4961      	ldr	r1, [pc, #388]	; (8001464 <EE_Init+0x2b4>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f96b 	bl	80015bc <EE_ReadVariable>
 80012e6:	4603      	mov	r3, r0
 80012e8:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80012ea:	8bbb      	ldrh	r3, [r7, #28]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d010      	beq.n	8001312 <EE_Init+0x162>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80012f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012f2:	4a5b      	ldr	r2, [pc, #364]	; (8001460 <EE_Init+0x2b0>)
 80012f4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012f8:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <EE_Init+0x2b4>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4610      	mov	r0, r2
 8001300:	f000 fa60 	bl	80017c4 <EE_VerifyPageFullWriteVariable>
 8001304:	4603      	mov	r3, r0
 8001306:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001308:	8bfb      	ldrh	r3, [r7, #30]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <EE_Init+0x162>
              {
                return EepromStatus;
 800130e:	8bfb      	ldrh	r3, [r7, #30]
 8001310:	e11b      	b.n	800154a <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001314:	3301      	adds	r3, #1
 8001316:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800131a:	2b03      	cmp	r3, #3
 800131c:	d9cb      	bls.n	80012b6 <EE_Init+0x106>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	494b      	ldr	r1, [pc, #300]	; (8001454 <EE_Init+0x2a4>)
 8001328:	2001      	movs	r0, #1
 800132a:	f005 f91d 	bl	8006568 <HAL_FLASH_Program>
 800132e:	4603      	mov	r3, r0
 8001330:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001332:	7efb      	ldrb	r3, [r7, #27]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <EE_Init+0x18e>
        {
          return FlashStatus;
 8001338:	7efb      	ldrb	r3, [r7, #27]
 800133a:	b29b      	uxth	r3, r3
 800133c:	e105      	b.n	800154a <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE1_ID;
 800133e:	2307      	movs	r3, #7
 8001340:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001342:	2301      	movs	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001346:	2302      	movs	r3, #2
 8001348:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800134a:	4843      	ldr	r0, [pc, #268]	; (8001458 <EE_Init+0x2a8>)
 800134c:	f000 f90c 	bl	8001568 <EE_VerifyPageFullyErased>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 80f3 	bne.w	800153e <EE_Init+0x38e>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001358:	f107 0214 	add.w	r2, r7, #20
 800135c:	463b      	mov	r3, r7
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f005 fab5 	bl	80068d0 <HAL_FLASHEx_Erase>
 8001366:	4603      	mov	r3, r0
 8001368:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800136a:	7efb      	ldrb	r3, [r7, #27]
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80e6 	beq.w	800153e <EE_Init+0x38e>
          {
            return FlashStatus;
 8001372:	7efb      	ldrb	r3, [r7, #27]
 8001374:	b29b      	uxth	r3, r3
 8001376:	e0e8      	b.n	800154a <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8001378:	8c3b      	ldrh	r3, [r7, #32]
 800137a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800137e:	4293      	cmp	r3, r2
 8001380:	d12b      	bne.n	80013da <EE_Init+0x22a>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001382:	2307      	movs	r3, #7
 8001384:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001386:	2301      	movs	r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800138a:	2302      	movs	r3, #2
 800138c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800138e:	4832      	ldr	r0, [pc, #200]	; (8001458 <EE_Init+0x2a8>)
 8001390:	f000 f8ea 	bl	8001568 <EE_VerifyPageFullyErased>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10e      	bne.n	80013b8 <EE_Init+0x208>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800139a:	f107 0214 	add.w	r2, r7, #20
 800139e:	463b      	mov	r3, r7
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 fa94 	bl	80068d0 <HAL_FLASHEx_Erase>
 80013a8:	4603      	mov	r3, r0
 80013aa:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80013ac:	7efb      	ldrb	r3, [r7, #27]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <EE_Init+0x208>
          {
            return FlashStatus;
 80013b2:	7efb      	ldrb	r3, [r7, #27]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	e0c8      	b.n	800154a <EE_Init+0x39a>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	4924      	ldr	r1, [pc, #144]	; (8001454 <EE_Init+0x2a4>)
 80013c2:	2001      	movs	r0, #1
 80013c4:	f005 f8d0 	bl	8006568 <HAL_FLASH_Program>
 80013c8:	4603      	mov	r3, r0
 80013ca:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013cc:	7efb      	ldrb	r3, [r7, #27]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 80b5 	beq.w	800153e <EE_Init+0x38e>
        {
          return FlashStatus;
 80013d4:	7efb      	ldrb	r3, [r7, #27]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	e0b7      	b.n	800154a <EE_Init+0x39a>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013da:	f000 f95b 	bl	8001694 <EE_Format>
 80013de:	4603      	mov	r3, r0
 80013e0:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013e2:	7efb      	ldrb	r3, [r7, #27]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80aa 	beq.w	800153e <EE_Init+0x38e>
        {
          return FlashStatus;
 80013ea:	7efb      	ldrb	r3, [r7, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	e0ac      	b.n	800154a <EE_Init+0x39a>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013f0:	8c3b      	ldrh	r3, [r7, #32]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10a      	bne.n	800140c <EE_Init+0x25c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013f6:	f000 f94d 	bl	8001694 <EE_Format>
 80013fa:	4603      	mov	r3, r0
 80013fc:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013fe:	7efb      	ldrb	r3, [r7, #27]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 809e 	beq.w	8001542 <EE_Init+0x392>
        {
          return FlashStatus;
 8001406:	7efb      	ldrb	r3, [r7, #27]
 8001408:	b29b      	uxth	r3, r3
 800140a:	e09e      	b.n	800154a <EE_Init+0x39a>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 800140c:	8c3b      	ldrh	r3, [r7, #32]
 800140e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001412:	4293      	cmp	r3, r2
 8001414:	d11b      	bne.n	800144e <EE_Init+0x29e>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001416:	2307      	movs	r3, #7
 8001418:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800141a:	2301      	movs	r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800141e:	2302      	movs	r3, #2
 8001420:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <EE_Init+0x2a8>)
 8001424:	f000 f8a0 	bl	8001568 <EE_VerifyPageFullyErased>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 8089 	bne.w	8001542 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001430:	f107 0214 	add.w	r2, r7, #20
 8001434:	463b      	mov	r3, r7
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f005 fa49 	bl	80068d0 <HAL_FLASHEx_Erase>
 800143e:	4603      	mov	r3, r0
 8001440:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001442:	7efb      	ldrb	r3, [r7, #27]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d07c      	beq.n	8001542 <EE_Init+0x392>
          {
            return FlashStatus;
 8001448:	7efb      	ldrb	r3, [r7, #27]
 800144a:	b29b      	uxth	r3, r3
 800144c:	e07d      	b.n	800154a <EE_Init+0x39a>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800144e:	2300      	movs	r3, #0
 8001450:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001452:	e03a      	b.n	80014ca <EE_Init+0x31a>
 8001454:	08008000 	.word	0x08008000
 8001458:	08028000 	.word	0x08028000
 800145c:	08008006 	.word	0x08008006
 8001460:	2000041c 	.word	0x2000041c
 8001464:	20000284 	.word	0x20000284
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001468:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <EE_Init+0x3a4>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	b29a      	uxth	r2, r3
 800146e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001470:	4939      	ldr	r1, [pc, #228]	; (8001558 <EE_Init+0x3a8>)
 8001472:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001476:	429a      	cmp	r2, r3
 8001478:	d101      	bne.n	800147e <EE_Init+0x2ce>
          {
            x = VarIdx;
 800147a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800147c:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 800147e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001480:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001484:	429a      	cmp	r2, r3
 8001486:	d01d      	beq.n	80014c4 <EE_Init+0x314>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148a:	4a33      	ldr	r2, [pc, #204]	; (8001558 <EE_Init+0x3a8>)
 800148c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001490:	4932      	ldr	r1, [pc, #200]	; (800155c <EE_Init+0x3ac>)
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f892 	bl	80015bc <EE_ReadVariable>
 8001498:	4603      	mov	r3, r0
 800149a:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800149c:	8bbb      	ldrh	r3, [r7, #28]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d010      	beq.n	80014c4 <EE_Init+0x314>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014a4:	4a2c      	ldr	r2, [pc, #176]	; (8001558 <EE_Init+0x3a8>)
 80014a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80014aa:	4b2c      	ldr	r3, [pc, #176]	; (800155c <EE_Init+0x3ac>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	4610      	mov	r0, r2
 80014b2:	f000 f987 	bl	80017c4 <EE_VerifyPageFullWriteVariable>
 80014b6:	4603      	mov	r3, r0
 80014b8:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80014ba:	8bfb      	ldrh	r3, [r7, #30]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <EE_Init+0x314>
              {
                return EepromStatus;
 80014c0:	8bfb      	ldrh	r3, [r7, #30]
 80014c2:	e042      	b.n	800154a <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80014c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014c6:	3301      	adds	r3, #1
 80014c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80014ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d9cb      	bls.n	8001468 <EE_Init+0x2b8>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	4921      	ldr	r1, [pc, #132]	; (8001560 <EE_Init+0x3b0>)
 80014da:	2001      	movs	r0, #1
 80014dc:	f005 f844 	bl	8006568 <HAL_FLASH_Program>
 80014e0:	4603      	mov	r3, r0
 80014e2:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80014e4:	7efb      	ldrb	r3, [r7, #27]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <EE_Init+0x340>
        {
          return FlashStatus;
 80014ea:	7efb      	ldrb	r3, [r7, #27]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	e02c      	b.n	800154a <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE0_ID;
 80014f0:	2306      	movs	r3, #6
 80014f2:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80014f8:	2302      	movs	r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80014fc:	4819      	ldr	r0, [pc, #100]	; (8001564 <EE_Init+0x3b4>)
 80014fe:	f000 f833 	bl	8001568 <EE_VerifyPageFullyErased>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d11c      	bne.n	8001542 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001508:	f107 0214 	add.w	r2, r7, #20
 800150c:	463b      	mov	r3, r7
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f005 f9dd 	bl	80068d0 <HAL_FLASHEx_Erase>
 8001516:	4603      	mov	r3, r0
 8001518:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800151a:	7efb      	ldrb	r3, [r7, #27]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d010      	beq.n	8001542 <EE_Init+0x392>
          {
            return FlashStatus;
 8001520:	7efb      	ldrb	r3, [r7, #27]
 8001522:	b29b      	uxth	r3, r3
 8001524:	e011      	b.n	800154a <EE_Init+0x39a>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001526:	f000 f8b5 	bl	8001694 <EE_Format>
 800152a:	4603      	mov	r3, r0
 800152c:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800152e:	7efb      	ldrb	r3, [r7, #27]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <EE_Init+0x396>
      {
        return FlashStatus;
 8001534:	7efb      	ldrb	r3, [r7, #27]
 8001536:	b29b      	uxth	r3, r3
 8001538:	e007      	b.n	800154a <EE_Init+0x39a>
      break;
 800153a:	bf00      	nop
 800153c:	e004      	b.n	8001548 <EE_Init+0x398>
      break;
 800153e:	bf00      	nop
 8001540:	e002      	b.n	8001548 <EE_Init+0x398>
      break;
 8001542:	bf00      	nop
 8001544:	e000      	b.n	8001548 <EE_Init+0x398>
      }
      break;
 8001546:	bf00      	nop
  }

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	08028006 	.word	0x08028006
 8001558:	2000041c 	.word	0x2000041c
 800155c:	20000284 	.word	0x20000284
 8001560:	08028000 	.word	0x08028000
 8001564:	08008000 	.word	0x08008000

08001568 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8001570:	2301      	movs	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
  uint32_t BeginAddress = Address;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	613b      	str	r3, [r7, #16]
  uint16_t AddressValue = 0x5555;
 8001578:	f245 5355 	movw	r3, #21845	; 0x5555
 800157c:	81fb      	strh	r3, [r7, #14]

  /* Check each active page address starting from end */
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800157e:	e00d      	b.n	800159c <EE_VerifyPageFullyErased+0x34>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8001586:	89fb      	ldrh	r3, [r7, #14]
 8001588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158c:	4293      	cmp	r3, r2
 800158e:	d002      	beq.n	8001596 <EE_VerifyPageFullyErased+0x2e>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

      break;
 8001594:	e00a      	b.n	80015ac <EE_VerifyPageFullyErased+0x44>
    }
    /* Next address location */
    Address = Address + 4;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3304      	adds	r3, #4
 800159a:	607b      	str	r3, [r7, #4]
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 80015a2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d9e9      	bls.n	8001580 <EE_VerifyPageFullyErased+0x18>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	b29b      	uxth	r3, r3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80015cc:	f245 5355 	movw	r3, #21845	; 0x5555
 80015d0:	81bb      	strh	r3, [r7, #12]
 80015d2:	2301      	movs	r3, #1
 80015d4:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <EE_ReadVariable+0x8c>)
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <EE_ReadVariable+0x8c>)
 80015dc:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 f8aa 	bl	8001738 <EE_FindValidPage>
 80015e4:	4603      	mov	r3, r0
 80015e6:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80015e8:	89fb      	ldrh	r3, [r7, #14]
 80015ea:	2bab      	cmp	r3, #171	; 0xab
 80015ec:	d101      	bne.n	80015f2 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80015ee:	23ab      	movs	r3, #171	; 0xab
 80015f0:	e026      	b.n	8001640 <EE_ReadVariable+0x84>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	045b      	lsls	r3, r3, #17
 80015f6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80015fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015fe:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	3301      	adds	r3, #1
 8001604:	045a      	lsls	r2, r3, #17
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <EE_ReadVariable+0x90>)
 8001608:	4413      	add	r3, r2
 800160a:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 800160c:	e012      	b.n	8001634 <EE_ReadVariable+0x78>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8001614:	89ba      	ldrh	r2, [r7, #12]
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	429a      	cmp	r2, r3
 800161a:	d108      	bne.n	800162e <EE_ReadVariable+0x72>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	3b02      	subs	r3, #2
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	b29a      	uxth	r2, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	82fb      	strh	r3, [r7, #22]

      break;
 800162c:	e007      	b.n	800163e <EE_ReadVariable+0x82>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	3b04      	subs	r3, #4
 8001632:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	3302      	adds	r3, #2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	429a      	cmp	r2, r3
 800163c:	d8e7      	bhi.n	800160e <EE_ReadVariable+0x52>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800163e:	8afb      	ldrh	r3, [r7, #22]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	08008000 	.word	0x08008000
 800164c:	08007ffe 	.word	0x08007ffe

08001650 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	460a      	mov	r2, r1
 800165a:	80fb      	strh	r3, [r7, #6]
 800165c:	4613      	mov	r3, r2
 800165e:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001664:	88ba      	ldrh	r2, [r7, #4]
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f8aa 	bl	80017c4 <EE_VerifyPageFullWriteVariable>
 8001670:	4603      	mov	r3, r0
 8001672:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8001674:	89fb      	ldrh	r3, [r7, #14]
 8001676:	2b80      	cmp	r3, #128	; 0x80
 8001678:	d107      	bne.n	800168a <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800167a:	88ba      	ldrh	r2, [r7, #4]
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f8ff 	bl	8001884 <EE_PageTransfer>
 8001686:	4603      	mov	r3, r0
 8001688:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800168a:	89fb      	ldrh	r3, [r7, #14]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 80016a6:	2306      	movs	r3, #6
 80016a8:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80016ae:	2302      	movs	r3, #2
 80016b0:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80016b2:	481f      	ldr	r0, [pc, #124]	; (8001730 <EE_Format+0x9c>)
 80016b4:	f7ff ff58 	bl	8001568 <EE_VerifyPageFullyErased>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10d      	bne.n	80016da <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80016be:	f107 0218 	add.w	r2, r7, #24
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f005 f902 	bl	80068d0 <HAL_FLASHEx_Erase>
 80016cc:	4603      	mov	r3, r0
 80016ce:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80016d0:	7ffb      	ldrb	r3, [r7, #31]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <EE_Format+0x46>
    {
      return FlashStatus;
 80016d6:	7ffb      	ldrb	r3, [r7, #31]
 80016d8:	e025      	b.n	8001726 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	4913      	ldr	r1, [pc, #76]	; (8001730 <EE_Format+0x9c>)
 80016e4:	2001      	movs	r0, #1
 80016e6:	f004 ff3f 	bl	8006568 <HAL_FLASH_Program>
 80016ea:	4603      	mov	r3, r0
 80016ec:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80016ee:	7ffb      	ldrb	r3, [r7, #31]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <EE_Format+0x64>
  {
    return FlashStatus;
 80016f4:	7ffb      	ldrb	r3, [r7, #31]
 80016f6:	e016      	b.n	8001726 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 80016f8:	2307      	movs	r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <EE_Format+0xa0>)
 80016fe:	f7ff ff33 	bl	8001568 <EE_VerifyPageFullyErased>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10d      	bne.n	8001724 <EE_Format+0x90>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001708:	f107 0218 	add.w	r2, r7, #24
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f005 f8dd 	bl	80068d0 <HAL_FLASHEx_Erase>
 8001716:	4603      	mov	r3, r0
 8001718:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800171a:	7ffb      	ldrb	r3, [r7, #31]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <EE_Format+0x90>
    {
      return FlashStatus;
 8001720:	7ffb      	ldrb	r3, [r7, #31]
 8001722:	e000      	b.n	8001726 <EE_Format+0x92>
    }
  }

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	08008000 	.word	0x08008000
 8001734:	08028000 	.word	0x08028000

08001738 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001742:	2306      	movs	r3, #6
 8001744:	81fb      	strh	r3, [r7, #14]
 8001746:	2306      	movs	r3, #6
 8001748:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <EE_FindValidPage+0x84>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <EE_FindValidPage+0x88>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01b      	beq.n	8001794 <EE_FindValidPage+0x5c>
 800175c:	2b01      	cmp	r3, #1
 800175e:	d125      	bne.n	80017ac <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001760:	89bb      	ldrh	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d108      	bne.n	8001778 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001766:	89fb      	ldrh	r3, [r7, #14]
 8001768:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800176c:	4293      	cmp	r3, r2
 800176e:	d101      	bne.n	8001774 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001770:	2300      	movs	r3, #0
 8001772:	e01c      	b.n	80017ae <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001774:	2301      	movs	r3, #1
 8001776:	e01a      	b.n	80017ae <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001778:	89fb      	ldrh	r3, [r7, #14]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d108      	bne.n	8001790 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800177e:	89bb      	ldrh	r3, [r7, #12]
 8001780:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001784:	4293      	cmp	r3, r2
 8001786:	d101      	bne.n	800178c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001788:	2301      	movs	r3, #1
 800178a:	e010      	b.n	80017ae <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800178c:	2300      	movs	r3, #0
 800178e:	e00e      	b.n	80017ae <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001790:	23ab      	movs	r3, #171	; 0xab
 8001792:	e00c      	b.n	80017ae <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800179a:	2300      	movs	r3, #0
 800179c:	e007      	b.n	80017ae <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800179e:	89bb      	ldrh	r3, [r7, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 80017a4:	2301      	movs	r3, #1
 80017a6:	e002      	b.n	80017ae <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 80017a8:	23ab      	movs	r3, #171	; 0xab
 80017aa:	e000      	b.n	80017ae <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 80017ac:	2300      	movs	r3, #0
  }
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	08008000 	.word	0x08008000
 80017c0:	08028000 	.word	0x08028000

080017c4 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	460a      	mov	r2, r1
 80017ce:	80fb      	strh	r3, [r7, #6]
 80017d0:	4613      	mov	r3, r2
 80017d2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 80017d8:	2300      	movs	r3, #0
 80017da:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80017dc:	4b26      	ldr	r3, [pc, #152]	; (8001878 <EE_VerifyPageFullWriteVariable+0xb4>)
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	4b26      	ldr	r3, [pc, #152]	; (800187c <EE_VerifyPageFullWriteVariable+0xb8>)
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff ffa7 	bl	8001738 <EE_FindValidPage>
 80017ea:	4603      	mov	r3, r0
 80017ec:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80017ee:	8a3b      	ldrh	r3, [r7, #16]
 80017f0:	2bab      	cmp	r3, #171	; 0xab
 80017f2:	d101      	bne.n	80017f8 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 80017f4:	23ab      	movs	r3, #171	; 0xab
 80017f6:	e03a      	b.n	800186e <EE_VerifyPageFullWriteVariable+0xaa>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80017f8:	8a3b      	ldrh	r3, [r7, #16]
 80017fa:	045b      	lsls	r3, r3, #17
 80017fc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001800:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001804:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001806:	8a3b      	ldrh	r3, [r7, #16]
 8001808:	3301      	adds	r3, #1
 800180a:	045a      	lsls	r2, r3, #17
 800180c:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <EE_VerifyPageFullWriteVariable+0xbc>)
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8001812:	e027      	b.n	8001864 <EE_VerifyPageFullWriteVariable+0xa0>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181c:	d11f      	bne.n	800185e <EE_VerifyPageFullWriteVariable+0x9a>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);
 800181e:	88bb      	ldrh	r3, [r7, #4]
 8001820:	f04f 0400 	mov.w	r4, #0
 8001824:	461a      	mov	r2, r3
 8001826:	4623      	mov	r3, r4
 8001828:	6979      	ldr	r1, [r7, #20]
 800182a:	2001      	movs	r0, #1
 800182c:	f004 fe9c 	bl	8006568 <HAL_FLASH_Program>
 8001830:	4603      	mov	r3, r0
 8001832:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001834:	7cfb      	ldrb	r3, [r7, #19]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <EE_VerifyPageFullWriteVariable+0x7c>
      {
        return FlashStatus;
 800183a:	7cfb      	ldrb	r3, [r7, #19]
 800183c:	b29b      	uxth	r3, r3
 800183e:	e016      	b.n	800186e <EE_VerifyPageFullWriteVariable+0xaa>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	1c99      	adds	r1, r3, #2
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	f04f 0400 	mov.w	r4, #0
 800184a:	461a      	mov	r2, r3
 800184c:	4623      	mov	r3, r4
 800184e:	2001      	movs	r0, #1
 8001850:	f004 fe8a 	bl	8006568 <HAL_FLASH_Program>
 8001854:	4603      	mov	r3, r0
 8001856:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8001858:	7cfb      	ldrb	r3, [r7, #19]
 800185a:	b29b      	uxth	r3, r3
 800185c:	e007      	b.n	800186e <EE_VerifyPageFullWriteVariable+0xaa>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3304      	adds	r3, #4
 8001862:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d3d3      	bcc.n	8001814 <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800186c:	2380      	movs	r3, #128	; 0x80
}
 800186e:	4618      	mov	r0, r3
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd90      	pop	{r4, r7, pc}
 8001876:	bf00      	nop
 8001878:	08008000 	.word	0x08008000
 800187c:	08028000 	.word	0x08028000
 8001880:	08007fff 	.word	0x08007fff

08001884 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08c      	sub	sp, #48	; 0x30
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	460a      	mov	r2, r1
 800188e:	80fb      	strh	r3, [r7, #6]
 8001890:	4613      	mov	r3, r2
 8001892:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800189a:	4b54      	ldr	r3, [pc, #336]	; (80019ec <EE_PageTransfer+0x168>)
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 800189e:	2300      	movs	r3, #0
 80018a0:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80018a6:	2300      	movs	r3, #0
 80018a8:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	847b      	strh	r3, [r7, #34]	; 0x22
 80018ae:	2300      	movs	r3, #0
 80018b0:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff ff3e 	bl	8001738 <EE_FindValidPage>
 80018bc:	4603      	mov	r3, r0
 80018be:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 80018c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d104      	bne.n	80018d0 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 80018c6:	4b49      	ldr	r3, [pc, #292]	; (80019ec <EE_PageTransfer+0x168>)
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 80018ca:	2307      	movs	r3, #7
 80018cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80018ce:	e009      	b.n	80018e4 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80018d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d104      	bne.n	80018e0 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80018d6:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <EE_PageTransfer+0x16c>)
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 80018da:	2306      	movs	r3, #6
 80018dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80018de:	e001      	b.n	80018e4 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80018e0:	23ab      	movs	r3, #171	; 0xab
 80018e2:	e07e      	b.n	80019e2 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 80018e4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018ee:	2001      	movs	r0, #1
 80018f0:	f004 fe3a 	bl	8006568 <HAL_FLASH_Program>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80018fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8001902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001906:	b29b      	uxth	r3, r3
 8001908:	e06b      	b.n	80019e2 <EE_PageTransfer+0x15e>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800190a:	88ba      	ldrh	r2, [r7, #4]
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff57 	bl	80017c4 <EE_VerifyPageFullWriteVariable>
 8001916:	4603      	mov	r3, r0
 8001918:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800191a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8001920:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001922:	e05e      	b.n	80019e2 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001924:	2300      	movs	r3, #0
 8001926:	853b      	strh	r3, [r7, #40]	; 0x28
 8001928:	e027      	b.n	800197a <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800192a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800192c:	4a31      	ldr	r2, [pc, #196]	; (80019f4 <EE_PageTransfer+0x170>)
 800192e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001932:	88fa      	ldrh	r2, [r7, #6]
 8001934:	429a      	cmp	r2, r3
 8001936:	d01d      	beq.n	8001974 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001938:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800193a:	4a2e      	ldr	r2, [pc, #184]	; (80019f4 <EE_PageTransfer+0x170>)
 800193c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001940:	492d      	ldr	r1, [pc, #180]	; (80019f8 <EE_PageTransfer+0x174>)
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fe3a 	bl	80015bc <EE_ReadVariable>
 8001948:	4603      	mov	r3, r0
 800194a:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 800194c:	8c3b      	ldrh	r3, [r7, #32]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d010      	beq.n	8001974 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001952:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001954:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <EE_PageTransfer+0x170>)
 8001956:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <EE_PageTransfer+0x174>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	4619      	mov	r1, r3
 8001960:	4610      	mov	r0, r2
 8001962:	f7ff ff2f 	bl	80017c4 <EE_VerifyPageFullWriteVariable>
 8001966:	4603      	mov	r3, r0
 8001968:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800196a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8001970:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001972:	e036      	b.n	80019e2 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001974:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001976:	3301      	adds	r3, #1
 8001978:	853b      	strh	r3, [r7, #40]	; 0x28
 800197a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800197c:	2b03      	cmp	r3, #3
 800197e:	d9d4      	bls.n	800192a <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8001984:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001986:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8001988:	2301      	movs	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800198c:	2302      	movs	r3, #2
 800198e:	61bb      	str	r3, [r7, #24]

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001990:	f107 021c 	add.w	r2, r7, #28
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f004 ff98 	bl	80068d0 <HAL_FLASHEx_Erase>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80019a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 80019ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	e015      	b.n	80019e2 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019c0:	2001      	movs	r0, #1
 80019c2:	f004 fdd1 	bl	8006568 <HAL_FLASH_Program>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80019cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 80019d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019d8:	b29b      	uxth	r3, r3
 80019da:	e002      	b.n	80019e2 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 80019dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019e0:	b29b      	uxth	r3, r3
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3730      	adds	r7, #48	; 0x30
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	08008000 	.word	0x08008000
 80019f0:	08028000 	.word	0x08028000
 80019f4:	2000041c 	.word	0x2000041c
 80019f8:	20000284 	.word	0x20000284

080019fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <MX_GPIO_Init+0xd4>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a2d      	ldr	r2, [pc, #180]	; (8001ad0 <MX_GPIO_Init+0xd4>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <MX_GPIO_Init+0xd4>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <MX_GPIO_Init+0xd4>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a26      	ldr	r2, [pc, #152]	; (8001ad0 <MX_GPIO_Init+0xd4>)
 8001a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <MX_GPIO_Init+0xd4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <MX_GPIO_Init+0xd4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <MX_GPIO_Init+0xd4>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <MX_GPIO_Init+0xd4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <MX_GPIO_Init+0xd4>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <MX_GPIO_Init+0xd4>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_GPIO_Init+0xd4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KB_R3_Pin|KB_R4_Pin|KB_R2_Pin
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 51c7 	mov.w	r1, #6368	; 0x18e0
 8001a88:	4812      	ldr	r0, [pc, #72]	; (8001ad4 <MX_GPIO_Init+0xd8>)
 8001a8a:	f005 fabf 	bl	800700c <HAL_GPIO_WritePin>
                          |KB_R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KB_C2_Pin|KB_C3_Pin|KB_C1_Pin;
 8001a8e:	f240 2312 	movw	r3, #530	; 0x212
 8001a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <MX_GPIO_Init+0xd8>)
 8001aa4:	f005 f836 	bl	8006b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|KB_R3_Pin|KB_R4_Pin|KB_R2_Pin
 8001aa8:	f44f 53c7 	mov.w	r3, #6368	; 0x18e0
 8001aac:	617b      	str	r3, [r7, #20]
                          |KB_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <MX_GPIO_Init+0xd8>)
 8001ac2:	f005 f827 	bl	8006b14 <HAL_GPIO_Init>

}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	; 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <hts221_init>:
 * 		   - -1: BSP_ERROR_NO_INIT - initialization failed
 * 		   - -2: BSP_ERROR_WRONG_PARAM - wrong parameter
 * 		   - -5: BSP_ERROR_COMPONENT_FAILURE - error during sensor work
 * 		   - -7: BSP_ERROR_UNKNOWN_COMPONENT - no component detected
 */
int32_t hts221_init(){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
	int32_t status;
	status = IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 8001ade:	2105      	movs	r1, #5
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f003 f9dd 	bl	8004ea0 <IKS01A2_ENV_SENSOR_Init>
 8001ae6:	6078      	str	r0, [r7, #4]
	return status;
 8001ae8:	687b      	ldr	r3, [r7, #4]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <hts221_readTemp>:
 * 		   - 0: BSP_ERROR_NONE - no error occured
 * 		   - -2: BSP_ERROR_WRONG_PARAM - wrong parameter
 * 		   - -5: BSP_ERROR_COMPONENT_FAILURE - error during sensor work
 */

int32_t hts221_readTemp(float *temp){
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
	int32_t status;
	status = IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_TEMPERATURE, temp);
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	2101      	movs	r1, #1
 8001afe:	2000      	movs	r0, #0
 8001b00:	f003 fa8e 	bl	8005020 <IKS01A2_ENV_SENSOR_GetValue>
 8001b04:	60f8      	str	r0, [r7, #12]
	return status;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <hts221_readHumid>:
 * 		   - 0: BSP_ERROR_NONE - no error occured
 * 		   - -2: BSP_ERROR_WRONG_PARAM - wrong parameter
 * 		   - -5: BSP_ERROR_COMPONENT_FAILURE - error during sensor work
 */

int32_t hts221_readHumid(float *hum){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	int32_t status;
	status = IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_HUMIDITY, hum);
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f003 fa7f 	bl	8005020 <IKS01A2_ENV_SENSOR_GetValue>
 8001b22:	60f8      	str	r0, [r7, #12]
	return status;
 8001b24:	68fb      	ldr	r3, [r7, #12]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_I2C3_Init+0x50>)
 8001b36:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <MX_I2C3_Init+0x54>)
 8001b38:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_I2C3_Init+0x50>)
 8001b3c:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <MX_I2C3_Init+0x58>)
 8001b3e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_I2C3_Init+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_I2C3_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_I2C3_Init+0x50>)
 8001b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b52:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <MX_I2C3_Init+0x50>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_I2C3_Init+0x50>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <MX_I2C3_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_I2C3_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <MX_I2C3_Init+0x50>)
 8001b6e:	f005 fa67 	bl	8007040 <HAL_I2C_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b78:	f000 fbf8 	bl	800236c <Error_Handler>
  }

}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200003c8 	.word	0x200003c8
 8001b84:	40005c00 	.word	0x40005c00
 8001b88:	000186a0 	.word	0x000186a0

08001b8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <HAL_I2C_MspInit+0xc4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d14b      	bne.n	8001c46 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_I2C_MspInit+0xc8>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <HAL_I2C_MspInit+0xc8>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_I2C_MspInit+0xc8>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_I2C_MspInit+0xc8>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <HAL_I2C_MspInit+0xc8>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_I2C_MspInit+0xc8>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bec:	2312      	movs	r3, #18
 8001bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4619      	mov	r1, r3
 8001c02:	4815      	ldr	r0, [pc, #84]	; (8001c58 <HAL_I2C_MspInit+0xcc>)
 8001c04:	f004 ff86 	bl	8006b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0e:	2312      	movs	r3, #18
 8001c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <HAL_I2C_MspInit+0xd0>)
 8001c26:	f004 ff75 	bl	8006b14 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_I2C_MspInit+0xc8>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_I2C_MspInit+0xc8>)
 8001c34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_I2C_MspInit+0xc8>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001c46:	bf00      	nop
 8001c48:	3728      	adds	r7, #40	; 0x28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40005c00 	.word	0x40005c00
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	40020000 	.word	0x40020000

08001c60 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_I2C_MspDeInit+0x3c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d10f      	bne.n	8001c92 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_I2C_MspDeInit+0x40>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_I2C_MspDeInit+0x40>)
 8001c78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c82:	4808      	ldr	r0, [pc, #32]	; (8001ca4 <HAL_I2C_MspDeInit+0x44>)
 8001c84:	f005 f8c8 	bl	8006e18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8001c88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8c:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <HAL_I2C_MspDeInit+0x48>)
 8001c8e:	f005 f8c3 	bl	8006e18 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40005c00 	.word	0x40005c00
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020800 	.word	0x40020800
 8001ca8:	40020000 	.word	0x40020000

08001cac <kb_readKey>:
 * @brief read pressed key from keyboard
 * @param None.
 * @retval - Pressed key value from kbMap 2D table or 0xFF if no key is pressed
 */

uint8_t kb_readKey(){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
	uint8_t r,c;
	for(r=0;r<4;r++){
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	71fb      	strb	r3, [r7, #7]
 8001cb6:	e02f      	b.n	8001d18 <kb_readKey+0x6c>
		HAL_GPIO_WritePin(KB_PORT, KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin, GPIO_PIN_SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8001cbe:	481a      	ldr	r0, [pc, #104]	; (8001d28 <kb_readKey+0x7c>)
 8001cc0:	f005 f9a4 	bl	800700c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(KB_PORT, kbRows[r], GPIO_PIN_RESET);
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <kb_readKey+0x80>)
 8001cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4815      	ldr	r0, [pc, #84]	; (8001d28 <kb_readKey+0x7c>)
 8001cd2:	f005 f99b 	bl	800700c <HAL_GPIO_WritePin>
		for(c=0;c<3;c++){
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	71bb      	strb	r3, [r7, #6]
 8001cda:	e017      	b.n	8001d0c <kb_readKey+0x60>
			if((!HAL_GPIO_ReadPin(KB_PORT, kbCols[c]))){
 8001cdc:	79bb      	ldrb	r3, [r7, #6]
 8001cde:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <kb_readKey+0x84>)
 8001ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4810      	ldr	r0, [pc, #64]	; (8001d28 <kb_readKey+0x7c>)
 8001ce8:	f005 f978 	bl	8006fdc <HAL_GPIO_ReadPin>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <kb_readKey+0x5a>
				return kbMap[r][c];
 8001cf2:	79fa      	ldrb	r2, [r7, #7]
 8001cf4:	79b9      	ldrb	r1, [r7, #6]
 8001cf6:	480f      	ldr	r0, [pc, #60]	; (8001d34 <kb_readKey+0x88>)
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4403      	add	r3, r0
 8001d00:	440b      	add	r3, r1
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	e00c      	b.n	8001d20 <kb_readKey+0x74>
		for(c=0;c<3;c++){
 8001d06:	79bb      	ldrb	r3, [r7, #6]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	71bb      	strb	r3, [r7, #6]
 8001d0c:	79bb      	ldrb	r3, [r7, #6]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d9e4      	bls.n	8001cdc <kb_readKey+0x30>
	for(r=0;r<4;r++){
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	3301      	adds	r3, #1
 8001d16:	71fb      	strb	r3, [r7, #7]
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d9cc      	bls.n	8001cb8 <kb_readKey+0xc>
			}
		}
	}
	return 0xFF;
 8001d1e:	23ff      	movs	r3, #255	; 0xff
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	0800eab4 	.word	0x0800eab4
 8001d30:	0800eabc 	.word	0x0800eabc
 8001d34:	0800eaa8 	.word	0x0800eaa8

08001d38 <kb_service>:
 * @brief check keyboard status and wait for pressed key
 * @param None.
 * @retval - pressed key value
 */

uint8_t kb_service(){
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
	while(KB_STATE==KB_STATE_IDLE || KB_STATE==KB_STATE_WAIT);
 8001d3c:	bf00      	nop
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <kb_service+0x30>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0fb      	beq.n	8001d3e <kb_service+0x6>
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <kb_service+0x30>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d0f7      	beq.n	8001d3e <kb_service+0x6>
	if(KB_STATE==KB_STATE_PRESSED)
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <kb_service+0x30>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d102      	bne.n	8001d5c <kb_service+0x24>
		return KB_KEY;
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <kb_service+0x34>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	e7ff      	b.n	8001d5c <kb_service+0x24>
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000286 	.word	0x20000286
 8001d6c:	20000000 	.word	0x20000000

08001d70 <lcd_init>:
/**
 * @brief initialize LCD
 * @param lcd: pointer to LCD display structure
 * @retval None.
 */
void lcd_init(struct lcd_disp * lcd){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
	if(lcd->bl)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <lcd_init+0x1a>
		xpin = BL_PIN;
 8001d86:	2308      	movs	r3, #8
 8001d88:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(40);
 8001d8a:	2028      	movs	r0, #40	; 0x28
 8001d8c:	f003 fb74 	bl	8005478 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8BIT, xpin);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	2130      	movs	r1, #48	; 0x30
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 f853 	bl	8001e44 <lcd_write>
	HAL_Delay(5);
 8001d9e:	2005      	movs	r0, #5
 8001da0:	f003 fb6a 	bl	8005478 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8BIT, xpin);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	2130      	movs	r1, #48	; 0x30
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 f849 	bl	8001e44 <lcd_write>
	HAL_Delay(1);
 8001db2:	2001      	movs	r0, #1
 8001db4:	f003 fb60 	bl	8005478 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8BIT, xpin);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	2130      	movs	r1, #48	; 0x30
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 f83f 	bl	8001e44 <lcd_write>
	HAL_Delay(10);
 8001dc6:	200a      	movs	r0, #10
 8001dc8:	f003 fb56 	bl	8005478 <HAL_Delay>
	lcd_write(lcd->addr, INIT_4BIT, xpin);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 f835 	bl	8001e44 <lcd_write>
	HAL_Delay(10);
 8001dda:	200a      	movs	r0, #10
 8001ddc:	f003 fb4c 	bl	8005478 <HAL_Delay>

	lcd_write(lcd->addr,0x28,xpin); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	2128      	movs	r1, #40	; 0x28
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 f82b 	bl	8001e44 <lcd_write>
	HAL_Delay(1);
 8001dee:	2001      	movs	r0, #1
 8001df0:	f003 fb42 	bl	8005478 <HAL_Delay>
	lcd_write(lcd->addr,0x08,xpin); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	2108      	movs	r1, #8
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 f821 	bl	8001e44 <lcd_write>
	HAL_Delay(1);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f003 fb38 	bl	8005478 <HAL_Delay>
	lcd_clear(&disp);
 8001e08:	480d      	ldr	r0, [pc, #52]	; (8001e40 <lcd_init+0xd0>)
 8001e0a:	f000 f8b3 	bl	8001f74 <lcd_clear>
	HAL_Delay(1);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f003 fb32 	bl	8005478 <HAL_Delay>
	lcd_write(lcd->addr,0x06,xpin); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	2106      	movs	r1, #6
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f811 	bl	8001e44 <lcd_write>
	HAL_Delay(1);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f003 fb28 	bl	8005478 <HAL_Delay>
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF,xpin);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	210c      	movs	r1, #12
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 f807 	bl	8001e44 <lcd_write>

}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000042c 	.word	0x2000042c

08001e44 <lcd_write>:
 * @param addr: I2C slave address
 * @param data: data
 * @param xpin: defines if display backlight should work
 * @retval None.
 */
void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	71bb      	strb	r3, [r7, #6]
 8001e52:	4613      	mov	r3, r2
 8001e54:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8001e56:	79bb      	ldrb	r3, [r7, #6]
 8001e58:	f023 030f 	bic.w	r3, r3, #15
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	797b      	ldrb	r3, [r7, #5]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001e6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e70:	f023 030f 	bic.w	r3, r3, #15
 8001e74:	b25a      	sxtb	r2, r3
 8001e76:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	b25b      	sxtb	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8001e82:	79bb      	ldrb	r3, [r7, #6]
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	797b      	ldrb	r3, [r7, #5]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8001e96:	79bb      	ldrb	r3, [r7, #6]
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	b25a      	sxtb	r2, r3
 8001e9c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&HI2C, addr, tx_data, 4, 100);
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	b299      	uxth	r1, r3
 8001eac:	f107 020c 	add.w	r2, r7, #12
 8001eb0:	2364      	movs	r3, #100	; 0x64
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <lcd_write+0x88>)
 8001eb8:	f005 fa2a 	bl	8007310 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001ebc:	2005      	movs	r0, #5
 8001ebe:	f003 fadb 	bl	8005478 <HAL_Delay>
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200003c8 	.word	0x200003c8

08001ed0 <lcd_display>:
 * @brief display data from LCD display struct on the screen
 * @param lcd: pointer to LCD display structure
 * @retval None.
 */

void lcd_display(struct lcd_disp * lcd){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0 , i = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	2300      	movs	r3, #0
 8001ede:	73bb      	strb	r3, [r7, #14]
	if(lcd->bl){
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <lcd_display+0x1e>
		xpin = BL_PIN;
 8001eea:	2308      	movs	r3, #8
 8001eec:	73fb      	strb	r3, [r7, #15]
	}

	lcd_write(lcd->addr, LINE_1, xpin);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ffa4 	bl	8001e44 <lcd_write>
	while(lcd->f_line[i])
 8001efc:	e00f      	b.n	8001f1e <lcd_display+0x4e>
	{
		lcd_write(lcd->addr,lcd->f_line[i], (xpin | RS_PIN));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7818      	ldrb	r0, [r3, #0]
 8001f02:	7bbb      	ldrb	r3, [r7, #14]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	7859      	ldrb	r1, [r3, #1]
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	f7ff ff96 	bl	8001e44 <lcd_write>
		i++;
 8001f18:	7bbb      	ldrb	r3, [r7, #14]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001f1e:	7bbb      	ldrb	r3, [r7, #14]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	785b      	ldrb	r3, [r3, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1e9      	bne.n	8001efe <lcd_display+0x2e>
	}
	i = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, LINE_2, xpin);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	21c0      	movs	r1, #192	; 0xc0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff84 	bl	8001e44 <lcd_write>
	while(lcd->s_line[i])
 8001f3c:	e00f      	b.n	8001f5e <lcd_display+0x8e>
		{
			lcd_write(lcd->addr,lcd->s_line[i], (xpin | RS_PIN));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7818      	ldrb	r0, [r3, #0]
 8001f42:	7bbb      	ldrb	r3, [r7, #14]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	7c99      	ldrb	r1, [r3, #18]
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	f7ff ff76 	bl	8001e44 <lcd_write>
			i++;
 8001f58:	7bbb      	ldrb	r3, [r7, #14]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001f5e:	7bbb      	ldrb	r3, [r7, #14]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	7c9b      	ldrb	r3, [r3, #18]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1e9      	bne.n	8001f3e <lcd_display+0x6e>
		}
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <lcd_clear>:
/**
 * @brief clear lcd screen
 * @param lcd: pointer to LCD display structure
 * @retval None.
 */
void lcd_clear(struct lcd_disp * lcd){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	 sprintf((char *)disp.f_line, " ");
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <lcd_clear+0x40>)
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <lcd_clear+0x44>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	8013      	strh	r3, [r2, #0]
	 sprintf((char *)disp.s_line, " ");
 8001f84:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <lcd_clear+0x48>)
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <lcd_clear+0x44>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	8013      	strh	r3, [r2, #0]
	uint8_t xpin = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
	if(lcd->bl)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <lcd_clear+0x2a>
	{
		xpin = BL_PIN;
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	73fb      	strb	r3, [r7, #15]
	}
	lcd_write(lcd->addr,LCD_CLEAR,xpin);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff4c 	bl	8001e44 <lcd_write>

}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	2000042d 	.word	0x2000042d
 8001fb8:	0800e870 	.word	0x0800e870
 8001fbc:	2000043e 	.word	0x2000043e

08001fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc4:	f003 f9e6 	bl	8005394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc8:	f000 f8d6 	bl	8002178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fcc:	f7ff fd16 	bl	80019fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001fd0:	f7ff f8ce 	bl	8001170 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001fd4:	f001 fb04 	bl	80035e0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001fd8:	f7fe ffde 	bl	8000f98 <MX_ADC1_Init>
  MX_TIM11_Init();
 8001fdc:	f001 fa48 	bl	8003470 <MX_TIM11_Init>
  MX_I2C3_Init();
 8001fe0:	f7ff fda6 	bl	8001b30 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001fe4:	f001 f980 	bl	80032e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fe8:	f001 f9cc 	bl	8003384 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_SYSTICK_Config(72000);
 8001fec:	4851      	ldr	r0, [pc, #324]	; (8002134 <main+0x174>)
 8001fee:	f003 ff40 	bl	8005e72 <HAL_SYSTICK_Config>
  hts221_init();
 8001ff2:	f7ff fd71 	bl	8001ad8 <hts221_init>

  data_settingInit();
 8001ff6:	f000 f9c1 	bl	800237c <data_settingInit>

  disp.addr = (0x27 << 1);
 8001ffa:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <main+0x178>)
 8001ffc:	224e      	movs	r2, #78	; 0x4e
 8001ffe:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8002000:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <main+0x178>)
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 8002008:	484b      	ldr	r0, [pc, #300]	; (8002138 <main+0x178>)
 800200a:	f7ff feb1 	bl	8001d70 <lcd_init>
  sprintf((char *)disp.f_line, "PROGRAM ");
 800200e:	4a4b      	ldr	r2, [pc, #300]	; (800213c <main+0x17c>)
 8002010:	4b4b      	ldr	r3, [pc, #300]	; (8002140 <main+0x180>)
 8002012:	cb03      	ldmia	r3!, {r0, r1}
 8002014:	6010      	str	r0, [r2, #0]
 8002016:	6051      	str	r1, [r2, #4]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	7213      	strb	r3, [r2, #8]
  sprintf((char *) disp.s_line,"START");
 800201c:	4b49      	ldr	r3, [pc, #292]	; (8002144 <main+0x184>)
 800201e:	4a4a      	ldr	r2, [pc, #296]	; (8002148 <main+0x188>)
 8002020:	6810      	ldr	r0, [r2, #0]
 8002022:	6018      	str	r0, [r3, #0]
 8002024:	8892      	ldrh	r2, [r2, #4]
 8002026:	809a      	strh	r2, [r3, #4]
  lcd_display(&disp);
 8002028:	4843      	ldr	r0, [pc, #268]	; (8002138 <main+0x178>)
 800202a:	f7ff ff51 	bl	8001ed0 <lcd_display>
  HAL_Delay(500);
 800202e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002032:	f003 fa21 	bl	8005478 <HAL_Delay>
  lcd_clear(&disp);
 8002036:	4840      	ldr	r0, [pc, #256]	; (8002138 <main+0x178>)
 8002038:	f7ff ff9c 	bl	8001f74 <lcd_clear>


  HAL_FLASH_Unlock();
 800203c:	f004 fae8 	bl	8006610 <HAL_FLASH_Unlock>
  if(EE_Init() != HAL_OK){
 8002040:	f7ff f8b6 	bl	80011b0 <EE_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <main+0x8e>
	  Error_Handler();
 800204a:	f000 f98f 	bl	800236c <Error_Handler>
  }

  if(EE_ReadVariable(MIN_HUM_ADDR, &p) == 0){
 800204e:	493f      	ldr	r1, [pc, #252]	; (800214c <main+0x18c>)
 8002050:	2001      	movs	r0, #1
 8002052:	f7ff fab3 	bl	80015bc <EE_ReadVariable>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d122      	bne.n	80020a2 <main+0xe2>
	  sprintf((char *)disp.f_line,"Loading settings");
 800205c:	4b36      	ldr	r3, [pc, #216]	; (8002138 <main+0x178>)
 800205e:	4a3c      	ldr	r2, [pc, #240]	; (8002150 <main+0x190>)
 8002060:	1c5d      	adds	r5, r3, #1
 8002062:	4614      	mov	r4, r2
 8002064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002066:	6028      	str	r0, [r5, #0]
 8002068:	6069      	str	r1, [r5, #4]
 800206a:	60aa      	str	r2, [r5, #8]
 800206c:	60eb      	str	r3, [r5, #12]
 800206e:	7823      	ldrb	r3, [r4, #0]
 8002070:	742b      	strb	r3, [r5, #16]
	  sprintf((char *)disp.s_line,"from memory.");
 8002072:	4a34      	ldr	r2, [pc, #208]	; (8002144 <main+0x184>)
 8002074:	4b37      	ldr	r3, [pc, #220]	; (8002154 <main+0x194>)
 8002076:	4614      	mov	r4, r2
 8002078:	cb07      	ldmia	r3!, {r0, r1, r2}
 800207a:	6020      	str	r0, [r4, #0]
 800207c:	6061      	str	r1, [r4, #4]
 800207e:	60a2      	str	r2, [r4, #8]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	7323      	strb	r3, [r4, #12]
	  lcd_display(&disp);
 8002084:	482c      	ldr	r0, [pc, #176]	; (8002138 <main+0x178>)
 8002086:	f7ff ff23 	bl	8001ed0 <lcd_display>
	  data_settingLoad();
 800208a:	f000 f9e1 	bl	8002450 <data_settingLoad>
	  HAL_Delay(3000);
 800208e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002092:	f003 f9f1 	bl	8005478 <HAL_Delay>
	  lcd_clear(&disp);
 8002096:	4828      	ldr	r0, [pc, #160]	; (8002138 <main+0x178>)
 8002098:	f7ff ff6c 	bl	8001f74 <lcd_clear>
	  data_settingPrint();
 800209c:	f000 fca4 	bl	80029e8 <data_settingPrint>
 80020a0:	e01f      	b.n	80020e2 <main+0x122>
  }
  else{
	  data_settingInit();
 80020a2:	f000 f96b 	bl	800237c <data_settingInit>
	  sprintf((char *)disp.f_line,"Loading initial ");
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <main+0x178>)
 80020a8:	4a2b      	ldr	r2, [pc, #172]	; (8002158 <main+0x198>)
 80020aa:	1c5d      	adds	r5, r3, #1
 80020ac:	4614      	mov	r4, r2
 80020ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b0:	6028      	str	r0, [r5, #0]
 80020b2:	6069      	str	r1, [r5, #4]
 80020b4:	60aa      	str	r2, [r5, #8]
 80020b6:	60eb      	str	r3, [r5, #12]
 80020b8:	7823      	ldrb	r3, [r4, #0]
 80020ba:	742b      	strb	r3, [r5, #16]
	  sprintf((char *)disp.s_line,"settings.");
 80020bc:	4a21      	ldr	r2, [pc, #132]	; (8002144 <main+0x184>)
 80020be:	4b27      	ldr	r3, [pc, #156]	; (800215c <main+0x19c>)
 80020c0:	cb03      	ldmia	r3!, {r0, r1}
 80020c2:	6010      	str	r0, [r2, #0]
 80020c4:	6051      	str	r1, [r2, #4]
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	8113      	strh	r3, [r2, #8]
	  lcd_display(&disp);
 80020ca:	481b      	ldr	r0, [pc, #108]	; (8002138 <main+0x178>)
 80020cc:	f7ff ff00 	bl	8001ed0 <lcd_display>
	  HAL_Delay(1000);
 80020d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020d4:	f003 f9d0 	bl	8005478 <HAL_Delay>
	  lcd_clear(&disp);
 80020d8:	4817      	ldr	r0, [pc, #92]	; (8002138 <main+0x178>)
 80020da:	f7ff ff4b 	bl	8001f74 <lcd_clear>
	  data_settingPrint();
 80020de:	f000 fc83 	bl	80029e8 <data_settingPrint>
  }


  HAL_ADC_Start_DMA(&hadc1, &s, 1);
 80020e2:	2201      	movs	r2, #1
 80020e4:	491e      	ldr	r1, [pc, #120]	; (8002160 <main+0x1a0>)
 80020e6:	481f      	ldr	r0, [pc, #124]	; (8002164 <main+0x1a4>)
 80020e8:	f003 fa2c 	bl	8005544 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim11);
 80020ec:	481e      	ldr	r0, [pc, #120]	; (8002168 <main+0x1a8>)
 80020ee:	f006 fdb2 	bl	8008c56 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80020f2:	481e      	ldr	r0, [pc, #120]	; (800216c <main+0x1ac>)
 80020f4:	f006 fdaf 	bl	8008c56 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(settingModeKb == 0 && settingModeUart == 0)
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <main+0x1b0>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <main+0x150>
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <main+0x1b4>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <main+0x150>
		lcd_display(&disp);
 8002108:	480b      	ldr	r0, [pc, #44]	; (8002138 <main+0x178>)
 800210a:	f7ff fee1 	bl	8001ed0 <lcd_display>
 800210e:	e010      	b.n	8002132 <main+0x172>
	else if(settingModeKb == 1){
 8002110:	4b17      	ldr	r3, [pc, #92]	; (8002170 <main+0x1b0>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d107      	bne.n	8002128 <main+0x168>
		data_settingEnter();
 8002118:	f000 f9ec 	bl	80024f4 <data_settingEnter>
		data_settingSave();
 800211c:	f000 f94e 	bl	80023bc <data_settingSave>
		settingModeKb = 0;
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <main+0x1b0>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e7e7      	b.n	80020f8 <main+0x138>
	}
	else{
		usart_settingEnter();
 8002128:	f001 fae4 	bl	80036f4 <usart_settingEnter>
		settingModeUart = 0;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <main+0x1b4>)
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
	if(settingModeKb == 0 && settingModeUart == 0)
 8002132:	e7e1      	b.n	80020f8 <main+0x138>
 8002134:	00011940 	.word	0x00011940
 8002138:	2000042c 	.word	0x2000042c
 800213c:	2000042d 	.word	0x2000042d
 8002140:	0800e874 	.word	0x0800e874
 8002144:	2000043e 	.word	0x2000043e
 8002148:	0800e880 	.word	0x0800e880
 800214c:	20000424 	.word	0x20000424
 8002150:	0800e888 	.word	0x0800e888
 8002154:	0800e89c 	.word	0x0800e89c
 8002158:	0800e8ac 	.word	0x0800e8ac
 800215c:	0800e8c0 	.word	0x0800e8c0
 8002160:	20000428 	.word	0x20000428
 8002164:	20000320 	.word	0x20000320
 8002168:	20000508 	.word	0x20000508
 800216c:	20000548 	.word	0x20000548
 8002170:	20000288 	.word	0x20000288
 8002174:	20000289 	.word	0x20000289

08002178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b094      	sub	sp, #80	; 0x50
 800217c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800217e:	f107 0320 	add.w	r3, r7, #32
 8002182:	2230      	movs	r2, #48	; 0x30
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f008 f9e0 	bl	800a54c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <SystemClock_Config+0xd0>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <SystemClock_Config+0xd0>)
 80021a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021aa:	6413      	str	r3, [r2, #64]	; 0x40
 80021ac:	4b26      	ldr	r3, [pc, #152]	; (8002248 <SystemClock_Config+0xd0>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80021b8:	2300      	movs	r3, #0
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <SystemClock_Config+0xd4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021c4:	4a21      	ldr	r2, [pc, #132]	; (800224c <SystemClock_Config+0xd4>)
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <SystemClock_Config+0xd4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021d8:	2302      	movs	r3, #2
 80021da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021dc:	2301      	movs	r3, #1
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021e0:	2310      	movs	r3, #16
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e4:	2302      	movs	r3, #2
 80021e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021e8:	2300      	movs	r3, #0
 80021ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80021ec:	2310      	movs	r3, #16
 80021ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 80021f0:	f44f 7390 	mov.w	r3, #288	; 0x120
 80021f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80021f6:	2304      	movs	r3, #4
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021fa:	2307      	movs	r3, #7
 80021fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021fe:	f107 0320 	add.w	r3, r7, #32
 8002202:	4618      	mov	r0, r3
 8002204:	f006 f89a 	bl	800833c <HAL_RCC_OscConfig>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800220e:	f000 f8ad 	bl	800236c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002212:	230f      	movs	r3, #15
 8002214:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002216:	2302      	movs	r3, #2
 8002218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800221e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002222:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	2102      	movs	r1, #2
 800222e:	4618      	mov	r0, r3
 8002230:	f006 faf4 	bl	800881c <HAL_RCC_ClockConfig>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800223a:	f000 f897 	bl	800236c <Error_Handler>
  }
}
 800223e:	bf00      	nop
 8002240:	3750      	adds	r7, #80	; 0x50
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	40007000 	.word	0x40007000

08002250 <HAL_TIM_PeriodElapsedCallback>:
 * 			if "#" on keyboard or any key on PC pressed activate settings mode
 * 	TIM2 - get data from sensors, check if data match requirements
 * 		if yes send data to LCD
 * 		if no alternately send data to LCD and send alarm message to LCD and activate alarm
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11 ){
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a3a      	ldr	r2, [pc, #232]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d134      	bne.n	80022cc <HAL_TIM_PeriodElapsedCallback+0x7c>
		uint8_t tempKey = kb_readKey();
 8002262:	f7ff fd23 	bl	8001cac <kb_readKey>
 8002266:	4603      	mov	r3, r0
 8002268:	73fb      	strb	r3, [r7, #15]

		if(tempKey==0xFF)
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2bff      	cmp	r3, #255	; 0xff
 800226e:	d103      	bne.n	8002278 <HAL_TIM_PeriodElapsedCallback+0x28>
		KB_STATE=KB_STATE_IDLE;
 8002270:	4b36      	ldr	r3, [pc, #216]	; (800234c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
 8002276:	e00e      	b.n	8002296 <HAL_TIM_PeriodElapsedCallback+0x46>
		else if(tempKey==KB_KEY)
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	429a      	cmp	r2, r3
 8002280:	d103      	bne.n	800228a <HAL_TIM_PeriodElapsedCallback+0x3a>
		KB_STATE=KB_STATE_PRESSED;
 8002282:	4b32      	ldr	r3, [pc, #200]	; (800234c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e005      	b.n	8002296 <HAL_TIM_PeriodElapsedCallback+0x46>
		else{
		KB_STATE=KB_STATE_WAIT;
 800228a:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800228c:	2202      	movs	r2, #2
 800228e:	701a      	strb	r2, [r3, #0]
		KB_KEY=tempKey;
 8002290:	4a2f      	ldr	r2, [pc, #188]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	7013      	strb	r3, [r2, #0]
		}
		if(KB_STATE == KB_STATE_PRESSED && KB_KEY==KB_HASH)
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d107      	bne.n	80022ae <HAL_TIM_PeriodElapsedCallback+0x5e>
 800229e:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b0b      	cmp	r3, #11
 80022a4:	d103      	bne.n	80022ae <HAL_TIM_PeriodElapsedCallback+0x5e>
			settingModeKb = 1;
 80022a6:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e00e      	b.n	80022cc <HAL_TIM_PeriodElapsedCallback+0x7c>
		else if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE)) {
 80022ae:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d107      	bne.n	80022cc <HAL_TIM_PeriodElapsedCallback+0x7c>
			settingModeUart = 1;
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
			__HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_RXNE);
 80022c2:	4b25      	ldr	r3, [pc, #148]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f06f 0220 	mvn.w	r2, #32
 80022ca:	601a      	str	r2, [r3, #0]
		}
	}


	if(htim->Instance == TIM2){
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d4:	d135      	bne.n	8002342 <HAL_TIM_PeriodElapsedCallback+0xf2>
		if(settingModeKb || settingModeUart)
 80022d6:	4b1f      	ldr	r3, [pc, #124]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d130      	bne.n	8002340 <HAL_TIM_PeriodElapsedCallback+0xf0>
 80022de:	4b1f      	ldr	r3, [pc, #124]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d12c      	bne.n	8002340 <HAL_TIM_PeriodElapsedCallback+0xf0>
			return;
		data_get();
 80022e6:	f000 fc1d 	bl	8002b24 <data_get>
		dataStatus = data_check();
 80022ea:	f000 fd87 	bl	8002dfc <data_check>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80022f4:	701a      	strb	r2, [r3, #0]
		if(dataStatus == S_OK){
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <HAL_TIM_PeriodElapsedCallback+0xb6>
			data_print(&disp);
 80022fe:	4819      	ldr	r0, [pc, #100]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002300:	f000 fc66 	bl	8002bd0 <data_print>
 8002304:	e01d      	b.n	8002342 <HAL_TIM_PeriodElapsedCallback+0xf2>
		}
		else{
			if(alertMode == 1){
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10d      	bne.n	800232a <HAL_TIM_PeriodElapsedCallback+0xda>
				data_printAlert((int)dataStatus,&disp);
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	4914      	ldr	r1, [pc, #80]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fd03 	bl	8002d20 <data_printAlert>
				buzzerAlarm(1, VOLUME);
 800231a:	21c8      	movs	r1, #200	; 0xc8
 800231c:	2001      	movs	r0, #1
 800231e:	f7fe ff07 	bl	8001130 <buzzerAlarm>
				alertMode = 0;
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	e00b      	b.n	8002342 <HAL_TIM_PeriodElapsedCallback+0xf2>
			}
			else if(alertMode == 0 ){
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d107      	bne.n	8002342 <HAL_TIM_PeriodElapsedCallback+0xf2>
				data_print(&disp);
 8002332:	480c      	ldr	r0, [pc, #48]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002334:	f000 fc4c 	bl	8002bd0 <data_print>
				alertMode = 1;
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e000      	b.n	8002342 <HAL_TIM_PeriodElapsedCallback+0xf2>
			return;
 8002340:	bf00      	nop
			}
		}

	}
}
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40014800 	.word	0x40014800
 800234c:	20000286 	.word	0x20000286
 8002350:	20000000 	.word	0x20000000
 8002354:	20000288 	.word	0x20000288
 8002358:	20000588 	.word	0x20000588
 800235c:	20000289 	.word	0x20000289
 8002360:	20000426 	.word	0x20000426
 8002364:	2000042c 	.word	0x2000042c
 8002368:	20000287 	.word	0x20000287

0800236c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//lcd_display(0, 0, "Error occured!");
	HAL_Delay(5000);
 8002370:	f241 3088 	movw	r0, #5000	; 0x1388
 8002374:	f003 f880 	bl	8005478 <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}

0800237c <data_settingInit>:
/**
 * @brief initialize data settings after first device launch
 * @param None.
 * @retval None.
 */
void data_settingInit(){
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
	settingMin.humid = 50.00;
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <data_settingInit+0x28>)
 8002382:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <data_settingInit+0x2c>)
 8002384:	605a      	str	r2, [r3, #4]
	settingMin.temp = 18.00;
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <data_settingInit+0x28>)
 8002388:	4a08      	ldr	r2, [pc, #32]	; (80023ac <data_settingInit+0x30>)
 800238a:	601a      	str	r2, [r3, #0]
	settingMax.humid = 70.00;
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <data_settingInit+0x34>)
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <data_settingInit+0x38>)
 8002390:	605a      	str	r2, [r3, #4]
	settingMax.temp = 30.00;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <data_settingInit+0x34>)
 8002394:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <data_settingInit+0x3c>)
 8002396:	601a      	str	r2, [r3, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000450 	.word	0x20000450
 80023a8:	42480000 	.word	0x42480000
 80023ac:	41900000 	.word	0x41900000
 80023b0:	20000468 	.word	0x20000468
 80023b4:	428c0000 	.word	0x428c0000
 80023b8:	41f00000 	.word	0x41f00000

080023bc <data_settingSave>:
/**
 * @brief save data settings from settingMin and settingMax structures to EEPROM memory emulation
 * @param None.
 * @retval None.
 */
void data_settingSave(){
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
	EE_WriteVariable(MIN_HUM_ADDR,  100*settingMin.humid);
 80023c0:	4b20      	ldr	r3, [pc, #128]	; (8002444 <data_settingSave+0x88>)
 80023c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80023c6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002448 <data_settingSave+0x8c>
 80023ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d2:	ee17 3a90 	vmov	r3, s15
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	4619      	mov	r1, r3
 80023da:	2001      	movs	r0, #1
 80023dc:	f7ff f938 	bl	8001650 <EE_WriteVariable>
	EE_WriteVariable(MAX_HUM_ADDR, 100*settingMax.humid);
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <data_settingSave+0x90>)
 80023e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80023e6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002448 <data_settingSave+0x8c>
 80023ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023f2:	ee17 3a90 	vmov	r3, s15
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	4619      	mov	r1, r3
 80023fa:	2002      	movs	r0, #2
 80023fc:	f7ff f928 	bl	8001650 <EE_WriteVariable>
	EE_WriteVariable(MIN_TEMP_ADDR, 100*settingMin.temp);
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <data_settingSave+0x88>)
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002448 <data_settingSave+0x8c>
 800240a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002412:	ee17 3a90 	vmov	r3, s15
 8002416:	b29b      	uxth	r3, r3
 8002418:	4619      	mov	r1, r3
 800241a:	2003      	movs	r0, #3
 800241c:	f7ff f918 	bl	8001650 <EE_WriteVariable>
	EE_WriteVariable(MAX_TEMP_ADDR, 100*settingMax.temp);
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <data_settingSave+0x90>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002448 <data_settingSave+0x8c>
 800242a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002432:	ee17 3a90 	vmov	r3, s15
 8002436:	b29b      	uxth	r3, r3
 8002438:	4619      	mov	r1, r3
 800243a:	2004      	movs	r0, #4
 800243c:	f7ff f908 	bl	8001650 <EE_WriteVariable>
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000450 	.word	0x20000450
 8002448:	42c80000 	.word	0x42c80000
 800244c:	20000468 	.word	0x20000468

08002450 <data_settingLoad>:
/**
 * @brief load data settings from EEPROM memory emulation to settingMax and settingMin structures
 * @param None.
 * @retval None.
 */
void data_settingLoad(){
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
	uint16_t buf;
	EE_ReadVariable(MIN_HUM_ADDR, &buf);
 8002456:	1dbb      	adds	r3, r7, #6
 8002458:	4619      	mov	r1, r3
 800245a:	2001      	movs	r0, #1
 800245c:	f7ff f8ae 	bl	80015bc <EE_ReadVariable>
	settingMin.humid = (float) buf/100.0;
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800246a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80024e8 <data_settingLoad+0x98>
 800246e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <data_settingLoad+0x9c>)
 8002474:	edc3 7a01 	vstr	s15, [r3, #4]

	EE_ReadVariable(MAX_HUM_ADDR, &buf);
 8002478:	1dbb      	adds	r3, r7, #6
 800247a:	4619      	mov	r1, r3
 800247c:	2002      	movs	r0, #2
 800247e:	f7ff f89d 	bl	80015bc <EE_ReadVariable>
	settingMax.humid = (float) buf/100.0;
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800248c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80024e8 <data_settingLoad+0x98>
 8002490:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002494:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <data_settingLoad+0xa0>)
 8002496:	edc3 7a01 	vstr	s15, [r3, #4]

	EE_ReadVariable(MIN_TEMP_ADDR, &buf);
 800249a:	1dbb      	adds	r3, r7, #6
 800249c:	4619      	mov	r1, r3
 800249e:	2003      	movs	r0, #3
 80024a0:	f7ff f88c 	bl	80015bc <EE_ReadVariable>
	settingMin.temp = (float) buf/100.0;
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024ae:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80024e8 <data_settingLoad+0x98>
 80024b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <data_settingLoad+0x9c>)
 80024b8:	edc3 7a00 	vstr	s15, [r3]

	EE_ReadVariable(MAX_TEMP_ADDR, &buf);
 80024bc:	1dbb      	adds	r3, r7, #6
 80024be:	4619      	mov	r1, r3
 80024c0:	2004      	movs	r0, #4
 80024c2:	f7ff f87b 	bl	80015bc <EE_ReadVariable>
	settingMax.temp = (float) buf/100.0;
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d0:	eddf 6a05 	vldr	s13, [pc, #20]	; 80024e8 <data_settingLoad+0x98>
 80024d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <data_settingLoad+0xa0>)
 80024da:	edc3 7a00 	vstr	s15, [r3]
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	42c80000 	.word	0x42c80000
 80024ec:	20000450 	.word	0x20000450
 80024f0:	20000468 	.word	0x20000468

080024f4 <data_settingEnter>:
/**
 * @brief enter new data setting to settings structures using keyboard input
 * @param None.
 * @retval None.
 */
void data_settingEnter(){
 80024f4:	b5b0      	push	{r4, r5, r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
	float s=0;
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
	char buf[2];
	uint8_t key;
	sprintf((char *)disp.f_line,"Enter settings! ");
 8002500:	4ba1      	ldr	r3, [pc, #644]	; (8002788 <data_settingEnter+0x294>)
 8002502:	4aa2      	ldr	r2, [pc, #648]	; (800278c <data_settingEnter+0x298>)
 8002504:	1c5d      	adds	r5, r3, #1
 8002506:	4614      	mov	r4, r2
 8002508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250a:	6028      	str	r0, [r5, #0]
 800250c:	6069      	str	r1, [r5, #4]
 800250e:	60aa      	str	r2, [r5, #8]
 8002510:	60eb      	str	r3, [r5, #12]
 8002512:	7823      	ldrb	r3, [r4, #0]
 8002514:	742b      	strb	r3, [r5, #16]
	sprintf((char *)disp.s_line,"                ");
 8002516:	4b9c      	ldr	r3, [pc, #624]	; (8002788 <data_settingEnter+0x294>)
 8002518:	4a9d      	ldr	r2, [pc, #628]	; (8002790 <data_settingEnter+0x29c>)
 800251a:	f103 0512 	add.w	r5, r3, #18
 800251e:	4614      	mov	r4, r2
 8002520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002522:	6028      	str	r0, [r5, #0]
 8002524:	6069      	str	r1, [r5, #4]
 8002526:	60aa      	str	r2, [r5, #8]
 8002528:	60eb      	str	r3, [r5, #12]
 800252a:	7823      	ldrb	r3, [r4, #0]
 800252c:	742b      	strb	r3, [r5, #16]
	usart_send_string("Setting mode...");
 800252e:	4899      	ldr	r0, [pc, #612]	; (8002794 <data_settingEnter+0x2a0>)
 8002530:	f001 f8c8 	bl	80036c4 <usart_send_string>
	lcd_display(&disp);
 8002534:	4894      	ldr	r0, [pc, #592]	; (8002788 <data_settingEnter+0x294>)
 8002536:	f7ff fccb 	bl	8001ed0 <lcd_display>
	HAL_Delay(2000);
 800253a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800253e:	f002 ff9b 	bl	8005478 <HAL_Delay>
	lcd_clear(&disp);
 8002542:	4891      	ldr	r0, [pc, #580]	; (8002788 <data_settingEnter+0x294>)
 8002544:	f7ff fd16 	bl	8001f74 <lcd_clear>

	int i;

	sprintf((char *)disp.f_line,"Min. humid.: ");
 8002548:	4a93      	ldr	r2, [pc, #588]	; (8002798 <data_settingEnter+0x2a4>)
 800254a:	4b94      	ldr	r3, [pc, #592]	; (800279c <data_settingEnter+0x2a8>)
 800254c:	4614      	mov	r4, r2
 800254e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002550:	6020      	str	r0, [r4, #0]
 8002552:	6061      	str	r1, [r4, #4]
 8002554:	60a2      	str	r2, [r4, #8]
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	81a3      	strh	r3, [r4, #12]
	sprintf((char *)disp.s_line,"");
 800255a:	4b8b      	ldr	r3, [pc, #556]	; (8002788 <data_settingEnter+0x294>)
 800255c:	2200      	movs	r2, #0
 800255e:	749a      	strb	r2, [r3, #18]
	lcd_display(&disp);
 8002560:	4889      	ldr	r0, [pc, #548]	; (8002788 <data_settingEnter+0x294>)
 8002562:	f7ff fcb5 	bl	8001ed0 <lcd_display>
	for(i=0 ; i<4 ; i++){
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	e068      	b.n	800263e <data_settingEnter+0x14a>
		key = kb_service();
 800256c:	f7ff fbe4 	bl	8001d38 <kb_service>
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
		sprintf(buf,"%d",key);
 8002574:	79fa      	ldrb	r2, [r7, #7]
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	4989      	ldr	r1, [pc, #548]	; (80027a0 <data_settingEnter+0x2ac>)
 800257a:	4618      	mov	r0, r3
 800257c:	f008 fc4a 	bl	800ae14 <siprintf>
		strncat(disp.s_line,buf,1);
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	2201      	movs	r2, #1
 8002584:	4619      	mov	r1, r3
 8002586:	4887      	ldr	r0, [pc, #540]	; (80027a4 <data_settingEnter+0x2b0>)
 8002588:	f008 fc64 	bl	800ae54 <strncat>
		if(i==1)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d10b      	bne.n	80025aa <data_settingEnter+0xb6>
			strncat(disp.s_line,".",1);
 8002592:	4884      	ldr	r0, [pc, #528]	; (80027a4 <data_settingEnter+0x2b0>)
 8002594:	f7fd fe24 	bl	80001e0 <strlen>
 8002598:	4603      	mov	r3, r0
 800259a:	461a      	mov	r2, r3
 800259c:	4b81      	ldr	r3, [pc, #516]	; (80027a4 <data_settingEnter+0x2b0>)
 800259e:	4413      	add	r3, r2
 80025a0:	4981      	ldr	r1, [pc, #516]	; (80027a8 <data_settingEnter+0x2b4>)
 80025a2:	461a      	mov	r2, r3
 80025a4:	460b      	mov	r3, r1
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	8013      	strh	r3, [r2, #0]
		lcd_display(&disp);
 80025aa:	4877      	ldr	r0, [pc, #476]	; (8002788 <data_settingEnter+0x294>)
 80025ac:	f7ff fc90 	bl	8001ed0 <lcd_display>
		s += 10.0/powf(10.0,(float)i) * (float)key;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ba:	eef0 0a67 	vmov.f32	s1, s15
 80025be:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80025c2:	f00b fc49 	bl	800de58 <powf>
 80025c6:	ee10 3a10 	vmov	r3, s0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ffc4 	bl	8000558 <__aeabi_f2d>
 80025d0:	4603      	mov	r3, r0
 80025d2:	460c      	mov	r4, r1
 80025d4:	461a      	mov	r2, r3
 80025d6:	4623      	mov	r3, r4
 80025d8:	f04f 0000 	mov.w	r0, #0
 80025dc:	4973      	ldr	r1, [pc, #460]	; (80027ac <data_settingEnter+0x2b8>)
 80025de:	f7fe f93d 	bl	800085c <__aeabi_ddiv>
 80025e2:	4603      	mov	r3, r0
 80025e4:	460c      	mov	r4, r1
 80025e6:	4625      	mov	r5, r4
 80025e8:	461c      	mov	r4, r3
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	ee07 3a90 	vmov	s15, r3
 80025f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f4:	ee17 0a90 	vmov	r0, s15
 80025f8:	f7fd ffae 	bl	8000558 <__aeabi_f2d>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4620      	mov	r0, r4
 8002602:	4629      	mov	r1, r5
 8002604:	f7fe f800 	bl	8000608 <__aeabi_dmul>
 8002608:	4603      	mov	r3, r0
 800260a:	460c      	mov	r4, r1
 800260c:	4625      	mov	r5, r4
 800260e:	461c      	mov	r4, r3
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7fd ffa1 	bl	8000558 <__aeabi_f2d>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4620      	mov	r0, r4
 800261c:	4629      	mov	r1, r5
 800261e:	f7fd fe3d 	bl	800029c <__adddf3>
 8002622:	4603      	mov	r3, r0
 8002624:	460c      	mov	r4, r1
 8002626:	4618      	mov	r0, r3
 8002628:	4621      	mov	r1, r4
 800262a:	f7fe fae5 	bl	8000bf8 <__aeabi_d2f>
 800262e:	4603      	mov	r3, r0
 8002630:	60fb      	str	r3, [r7, #12]
		HAL_Delay(100);
 8002632:	2064      	movs	r0, #100	; 0x64
 8002634:	f002 ff20 	bl	8005478 <HAL_Delay>
	for(i=0 ; i<4 ; i++){
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	3301      	adds	r3, #1
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b03      	cmp	r3, #3
 8002642:	dd93      	ble.n	800256c <data_settingEnter+0x78>
	}
	lcd_clear(&disp);
 8002644:	4850      	ldr	r0, [pc, #320]	; (8002788 <data_settingEnter+0x294>)
 8002646:	f7ff fc95 	bl	8001f74 <lcd_clear>
	settingMin.humid = s;
 800264a:	4a59      	ldr	r2, [pc, #356]	; (80027b0 <data_settingEnter+0x2bc>)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6053      	str	r3, [r2, #4]
	s=0;
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]

	sprintf((char *)disp.f_line,"Max. humid.: ");
 8002656:	4a50      	ldr	r2, [pc, #320]	; (8002798 <data_settingEnter+0x2a4>)
 8002658:	4b56      	ldr	r3, [pc, #344]	; (80027b4 <data_settingEnter+0x2c0>)
 800265a:	4614      	mov	r4, r2
 800265c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800265e:	6020      	str	r0, [r4, #0]
 8002660:	6061      	str	r1, [r4, #4]
 8002662:	60a2      	str	r2, [r4, #8]
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	81a3      	strh	r3, [r4, #12]
	sprintf((char *)disp.s_line,"");
 8002668:	4b47      	ldr	r3, [pc, #284]	; (8002788 <data_settingEnter+0x294>)
 800266a:	2200      	movs	r2, #0
 800266c:	749a      	strb	r2, [r3, #18]
	lcd_display(&disp);
 800266e:	4846      	ldr	r0, [pc, #280]	; (8002788 <data_settingEnter+0x294>)
 8002670:	f7ff fc2e 	bl	8001ed0 <lcd_display>
	for(i=0 ; i<4 ; i++){
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	e068      	b.n	800274c <data_settingEnter+0x258>
		key = kb_service();
 800267a:	f7ff fb5d 	bl	8001d38 <kb_service>
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
		sprintf(buf,"%d",key);
 8002682:	79fa      	ldrb	r2, [r7, #7]
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	4946      	ldr	r1, [pc, #280]	; (80027a0 <data_settingEnter+0x2ac>)
 8002688:	4618      	mov	r0, r3
 800268a:	f008 fbc3 	bl	800ae14 <siprintf>
		strncat(disp.s_line,buf,1);
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	2201      	movs	r2, #1
 8002692:	4619      	mov	r1, r3
 8002694:	4843      	ldr	r0, [pc, #268]	; (80027a4 <data_settingEnter+0x2b0>)
 8002696:	f008 fbdd 	bl	800ae54 <strncat>
		if(i==1)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d10b      	bne.n	80026b8 <data_settingEnter+0x1c4>
			strncat(disp.s_line,".",1);
 80026a0:	4840      	ldr	r0, [pc, #256]	; (80027a4 <data_settingEnter+0x2b0>)
 80026a2:	f7fd fd9d 	bl	80001e0 <strlen>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b3e      	ldr	r3, [pc, #248]	; (80027a4 <data_settingEnter+0x2b0>)
 80026ac:	4413      	add	r3, r2
 80026ae:	493e      	ldr	r1, [pc, #248]	; (80027a8 <data_settingEnter+0x2b4>)
 80026b0:	461a      	mov	r2, r3
 80026b2:	460b      	mov	r3, r1
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	8013      	strh	r3, [r2, #0]
		lcd_display(&disp);
 80026b8:	4833      	ldr	r0, [pc, #204]	; (8002788 <data_settingEnter+0x294>)
 80026ba:	f7ff fc09 	bl	8001ed0 <lcd_display>
		s += 10.0/powf(10.0,(float)i) * (float)key;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	ee07 3a90 	vmov	s15, r3
 80026c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c8:	eef0 0a67 	vmov.f32	s1, s15
 80026cc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80026d0:	f00b fbc2 	bl	800de58 <powf>
 80026d4:	ee10 3a10 	vmov	r3, s0
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd ff3d 	bl	8000558 <__aeabi_f2d>
 80026de:	4603      	mov	r3, r0
 80026e0:	460c      	mov	r4, r1
 80026e2:	461a      	mov	r2, r3
 80026e4:	4623      	mov	r3, r4
 80026e6:	f04f 0000 	mov.w	r0, #0
 80026ea:	4930      	ldr	r1, [pc, #192]	; (80027ac <data_settingEnter+0x2b8>)
 80026ec:	f7fe f8b6 	bl	800085c <__aeabi_ddiv>
 80026f0:	4603      	mov	r3, r0
 80026f2:	460c      	mov	r4, r1
 80026f4:	4625      	mov	r5, r4
 80026f6:	461c      	mov	r4, r3
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002702:	ee17 0a90 	vmov	r0, s15
 8002706:	f7fd ff27 	bl	8000558 <__aeabi_f2d>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4620      	mov	r0, r4
 8002710:	4629      	mov	r1, r5
 8002712:	f7fd ff79 	bl	8000608 <__aeabi_dmul>
 8002716:	4603      	mov	r3, r0
 8002718:	460c      	mov	r4, r1
 800271a:	4625      	mov	r5, r4
 800271c:	461c      	mov	r4, r3
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f7fd ff1a 	bl	8000558 <__aeabi_f2d>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4620      	mov	r0, r4
 800272a:	4629      	mov	r1, r5
 800272c:	f7fd fdb6 	bl	800029c <__adddf3>
 8002730:	4603      	mov	r3, r0
 8002732:	460c      	mov	r4, r1
 8002734:	4618      	mov	r0, r3
 8002736:	4621      	mov	r1, r4
 8002738:	f7fe fa5e 	bl	8000bf8 <__aeabi_d2f>
 800273c:	4603      	mov	r3, r0
 800273e:	60fb      	str	r3, [r7, #12]
		HAL_Delay(100);
 8002740:	2064      	movs	r0, #100	; 0x64
 8002742:	f002 fe99 	bl	8005478 <HAL_Delay>
	for(i=0 ; i<4 ; i++){
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	3301      	adds	r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b03      	cmp	r3, #3
 8002750:	dd93      	ble.n	800267a <data_settingEnter+0x186>
	}
	lcd_clear(&disp);
 8002752:	480d      	ldr	r0, [pc, #52]	; (8002788 <data_settingEnter+0x294>)
 8002754:	f7ff fc0e 	bl	8001f74 <lcd_clear>
	settingMax.humid = s;
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <data_settingEnter+0x2c4>)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6053      	str	r3, [r2, #4]
	s=0;
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]

	sprintf((char *)disp.f_line,"Min. temp.: ");
 8002764:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <data_settingEnter+0x2a4>)
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <data_settingEnter+0x2c8>)
 8002768:	4614      	mov	r4, r2
 800276a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800276c:	6020      	str	r0, [r4, #0]
 800276e:	6061      	str	r1, [r4, #4]
 8002770:	60a2      	str	r2, [r4, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	7323      	strb	r3, [r4, #12]
	sprintf((char *)disp.s_line,"");
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <data_settingEnter+0x294>)
 8002778:	2200      	movs	r2, #0
 800277a:	749a      	strb	r2, [r3, #18]
	lcd_display(&disp);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <data_settingEnter+0x294>)
 800277e:	f7ff fba7 	bl	8001ed0 <lcd_display>
	for(i=0 ; i<4 ; i++){
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	e084      	b.n	8002892 <data_settingEnter+0x39e>
 8002788:	2000042c 	.word	0x2000042c
 800278c:	0800e8cc 	.word	0x0800e8cc
 8002790:	0800e8e0 	.word	0x0800e8e0
 8002794:	0800e8f4 	.word	0x0800e8f4
 8002798:	2000042d 	.word	0x2000042d
 800279c:	0800e904 	.word	0x0800e904
 80027a0:	0800e914 	.word	0x0800e914
 80027a4:	2000043e 	.word	0x2000043e
 80027a8:	0800e918 	.word	0x0800e918
 80027ac:	40240000 	.word	0x40240000
 80027b0:	20000450 	.word	0x20000450
 80027b4:	0800e91c 	.word	0x0800e91c
 80027b8:	20000468 	.word	0x20000468
 80027bc:	0800e92c 	.word	0x0800e92c
		key = kb_service();
 80027c0:	f7ff faba 	bl	8001d38 <kb_service>
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
		sprintf(buf,"%d",key);
 80027c8:	79fa      	ldrb	r2, [r7, #7]
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	497c      	ldr	r1, [pc, #496]	; (80029c0 <data_settingEnter+0x4cc>)
 80027ce:	4618      	mov	r0, r3
 80027d0:	f008 fb20 	bl	800ae14 <siprintf>
		strncat(disp.s_line,buf,1);
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	2201      	movs	r2, #1
 80027d8:	4619      	mov	r1, r3
 80027da:	487a      	ldr	r0, [pc, #488]	; (80029c4 <data_settingEnter+0x4d0>)
 80027dc:	f008 fb3a 	bl	800ae54 <strncat>
		if(i==1)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10b      	bne.n	80027fe <data_settingEnter+0x30a>
			strncat(disp.s_line,".",1);
 80027e6:	4877      	ldr	r0, [pc, #476]	; (80029c4 <data_settingEnter+0x4d0>)
 80027e8:	f7fd fcfa 	bl	80001e0 <strlen>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b74      	ldr	r3, [pc, #464]	; (80029c4 <data_settingEnter+0x4d0>)
 80027f2:	4413      	add	r3, r2
 80027f4:	4974      	ldr	r1, [pc, #464]	; (80029c8 <data_settingEnter+0x4d4>)
 80027f6:	461a      	mov	r2, r3
 80027f8:	460b      	mov	r3, r1
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	8013      	strh	r3, [r2, #0]
		lcd_display(&disp);
 80027fe:	4873      	ldr	r0, [pc, #460]	; (80029cc <data_settingEnter+0x4d8>)
 8002800:	f7ff fb66 	bl	8001ed0 <lcd_display>
		s += 10.0/powf(10.0,(float)i) * (float)key;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280e:	eef0 0a67 	vmov.f32	s1, s15
 8002812:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002816:	f00b fb1f 	bl	800de58 <powf>
 800281a:	ee10 3a10 	vmov	r3, s0
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd fe9a 	bl	8000558 <__aeabi_f2d>
 8002824:	4603      	mov	r3, r0
 8002826:	460c      	mov	r4, r1
 8002828:	461a      	mov	r2, r3
 800282a:	4623      	mov	r3, r4
 800282c:	f04f 0000 	mov.w	r0, #0
 8002830:	4967      	ldr	r1, [pc, #412]	; (80029d0 <data_settingEnter+0x4dc>)
 8002832:	f7fe f813 	bl	800085c <__aeabi_ddiv>
 8002836:	4603      	mov	r3, r0
 8002838:	460c      	mov	r4, r1
 800283a:	4625      	mov	r5, r4
 800283c:	461c      	mov	r4, r3
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002848:	ee17 0a90 	vmov	r0, s15
 800284c:	f7fd fe84 	bl	8000558 <__aeabi_f2d>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4620      	mov	r0, r4
 8002856:	4629      	mov	r1, r5
 8002858:	f7fd fed6 	bl	8000608 <__aeabi_dmul>
 800285c:	4603      	mov	r3, r0
 800285e:	460c      	mov	r4, r1
 8002860:	4625      	mov	r5, r4
 8002862:	461c      	mov	r4, r3
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f7fd fe77 	bl	8000558 <__aeabi_f2d>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4620      	mov	r0, r4
 8002870:	4629      	mov	r1, r5
 8002872:	f7fd fd13 	bl	800029c <__adddf3>
 8002876:	4603      	mov	r3, r0
 8002878:	460c      	mov	r4, r1
 800287a:	4618      	mov	r0, r3
 800287c:	4621      	mov	r1, r4
 800287e:	f7fe f9bb 	bl	8000bf8 <__aeabi_d2f>
 8002882:	4603      	mov	r3, r0
 8002884:	60fb      	str	r3, [r7, #12]
		HAL_Delay(100);
 8002886:	2064      	movs	r0, #100	; 0x64
 8002888:	f002 fdf6 	bl	8005478 <HAL_Delay>
	for(i=0 ; i<4 ; i++){
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	3301      	adds	r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b03      	cmp	r3, #3
 8002896:	dd93      	ble.n	80027c0 <data_settingEnter+0x2cc>
	}
	lcd_clear(&disp);
 8002898:	484c      	ldr	r0, [pc, #304]	; (80029cc <data_settingEnter+0x4d8>)
 800289a:	f7ff fb6b 	bl	8001f74 <lcd_clear>
	settingMin.temp = s;
 800289e:	4a4d      	ldr	r2, [pc, #308]	; (80029d4 <data_settingEnter+0x4e0>)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6013      	str	r3, [r2, #0]
	s=0;
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]

	sprintf((char *)disp.f_line,"Max. temp.: ");
 80028aa:	4a4b      	ldr	r2, [pc, #300]	; (80029d8 <data_settingEnter+0x4e4>)
 80028ac:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <data_settingEnter+0x4e8>)
 80028ae:	4614      	mov	r4, r2
 80028b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80028b2:	6020      	str	r0, [r4, #0]
 80028b4:	6061      	str	r1, [r4, #4]
 80028b6:	60a2      	str	r2, [r4, #8]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	7323      	strb	r3, [r4, #12]
	sprintf((char *)disp.s_line,"");
 80028bc:	4b43      	ldr	r3, [pc, #268]	; (80029cc <data_settingEnter+0x4d8>)
 80028be:	2200      	movs	r2, #0
 80028c0:	749a      	strb	r2, [r3, #18]
	lcd_display(&disp);
 80028c2:	4842      	ldr	r0, [pc, #264]	; (80029cc <data_settingEnter+0x4d8>)
 80028c4:	f7ff fb04 	bl	8001ed0 <lcd_display>
	for(i=0 ; i<4 ; i++){
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	e068      	b.n	80029a0 <data_settingEnter+0x4ac>
		key = kb_service();
 80028ce:	f7ff fa33 	bl	8001d38 <kb_service>
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
		sprintf(buf,"%d",key);
 80028d6:	79fa      	ldrb	r2, [r7, #7]
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	4939      	ldr	r1, [pc, #228]	; (80029c0 <data_settingEnter+0x4cc>)
 80028dc:	4618      	mov	r0, r3
 80028de:	f008 fa99 	bl	800ae14 <siprintf>
		strncat(disp.s_line,buf,1);
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	2201      	movs	r2, #1
 80028e6:	4619      	mov	r1, r3
 80028e8:	4836      	ldr	r0, [pc, #216]	; (80029c4 <data_settingEnter+0x4d0>)
 80028ea:	f008 fab3 	bl	800ae54 <strncat>
		if(i==1)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d10b      	bne.n	800290c <data_settingEnter+0x418>
			strncat(disp.s_line,".",1);
 80028f4:	4833      	ldr	r0, [pc, #204]	; (80029c4 <data_settingEnter+0x4d0>)
 80028f6:	f7fd fc73 	bl	80001e0 <strlen>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b31      	ldr	r3, [pc, #196]	; (80029c4 <data_settingEnter+0x4d0>)
 8002900:	4413      	add	r3, r2
 8002902:	4931      	ldr	r1, [pc, #196]	; (80029c8 <data_settingEnter+0x4d4>)
 8002904:	461a      	mov	r2, r3
 8002906:	460b      	mov	r3, r1
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	8013      	strh	r3, [r2, #0]
		lcd_display(&disp);
 800290c:	482f      	ldr	r0, [pc, #188]	; (80029cc <data_settingEnter+0x4d8>)
 800290e:	f7ff fadf 	bl	8001ed0 <lcd_display>
		s += 10.0/powf(10.0,(float)i) * (float)key;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291c:	eef0 0a67 	vmov.f32	s1, s15
 8002920:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002924:	f00b fa98 	bl	800de58 <powf>
 8002928:	ee10 3a10 	vmov	r3, s0
 800292c:	4618      	mov	r0, r3
 800292e:	f7fd fe13 	bl	8000558 <__aeabi_f2d>
 8002932:	4603      	mov	r3, r0
 8002934:	460c      	mov	r4, r1
 8002936:	461a      	mov	r2, r3
 8002938:	4623      	mov	r3, r4
 800293a:	f04f 0000 	mov.w	r0, #0
 800293e:	4924      	ldr	r1, [pc, #144]	; (80029d0 <data_settingEnter+0x4dc>)
 8002940:	f7fd ff8c 	bl	800085c <__aeabi_ddiv>
 8002944:	4603      	mov	r3, r0
 8002946:	460c      	mov	r4, r1
 8002948:	4625      	mov	r5, r4
 800294a:	461c      	mov	r4, r3
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002956:	ee17 0a90 	vmov	r0, s15
 800295a:	f7fd fdfd 	bl	8000558 <__aeabi_f2d>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4620      	mov	r0, r4
 8002964:	4629      	mov	r1, r5
 8002966:	f7fd fe4f 	bl	8000608 <__aeabi_dmul>
 800296a:	4603      	mov	r3, r0
 800296c:	460c      	mov	r4, r1
 800296e:	4625      	mov	r5, r4
 8002970:	461c      	mov	r4, r3
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f7fd fdf0 	bl	8000558 <__aeabi_f2d>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4620      	mov	r0, r4
 800297e:	4629      	mov	r1, r5
 8002980:	f7fd fc8c 	bl	800029c <__adddf3>
 8002984:	4603      	mov	r3, r0
 8002986:	460c      	mov	r4, r1
 8002988:	4618      	mov	r0, r3
 800298a:	4621      	mov	r1, r4
 800298c:	f7fe f934 	bl	8000bf8 <__aeabi_d2f>
 8002990:	4603      	mov	r3, r0
 8002992:	60fb      	str	r3, [r7, #12]
		HAL_Delay(100);
 8002994:	2064      	movs	r0, #100	; 0x64
 8002996:	f002 fd6f 	bl	8005478 <HAL_Delay>
	for(i=0 ; i<4 ; i++){
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	3301      	adds	r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	dd93      	ble.n	80028ce <data_settingEnter+0x3da>
	}
	lcd_clear(&disp);
 80029a6:	4809      	ldr	r0, [pc, #36]	; (80029cc <data_settingEnter+0x4d8>)
 80029a8:	f7ff fae4 	bl	8001f74 <lcd_clear>
	settingMax.temp = s;
 80029ac:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <data_settingEnter+0x4ec>)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6013      	str	r3, [r2, #0]
	usart_send_string("Settings saved.");
 80029b2:	480c      	ldr	r0, [pc, #48]	; (80029e4 <data_settingEnter+0x4f0>)
 80029b4:	f000 fe86 	bl	80036c4 <usart_send_string>
}
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bdb0      	pop	{r4, r5, r7, pc}
 80029c0:	0800e914 	.word	0x0800e914
 80029c4:	2000043e 	.word	0x2000043e
 80029c8:	0800e918 	.word	0x0800e918
 80029cc:	2000042c 	.word	0x2000042c
 80029d0:	40240000 	.word	0x40240000
 80029d4:	20000450 	.word	0x20000450
 80029d8:	2000042d 	.word	0x2000042d
 80029dc:	0800e93c 	.word	0x0800e93c
 80029e0:	20000468 	.word	0x20000468
 80029e4:	0800e94c 	.word	0x0800e94c

080029e8 <data_settingPrint>:
 * @brief print current data settings on LCD display
 * @param None.
 * @retval None.
 */

void data_settingPrint(){
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
	lcd_clear(&disp);
 80029ee:	4843      	ldr	r0, [pc, #268]	; (8002afc <data_settingPrint+0x114>)
 80029f0:	f7ff fac0 	bl	8001f74 <lcd_clear>
	char buf[3];

	sprintf(buf,"%f",settingMin.humid);
 80029f4:	4b42      	ldr	r3, [pc, #264]	; (8002b00 <data_settingPrint+0x118>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fdad 	bl	8000558 <__aeabi_f2d>
 80029fe:	4603      	mov	r3, r0
 8002a00:	460c      	mov	r4, r1
 8002a02:	1d38      	adds	r0, r7, #4
 8002a04:	461a      	mov	r2, r3
 8002a06:	4623      	mov	r3, r4
 8002a08:	493e      	ldr	r1, [pc, #248]	; (8002b04 <data_settingPrint+0x11c>)
 8002a0a:	f008 fa03 	bl	800ae14 <siprintf>
	sprintf((char *)disp.f_line,"Min. hum:");
 8002a0e:	4a3e      	ldr	r2, [pc, #248]	; (8002b08 <data_settingPrint+0x120>)
 8002a10:	4b3e      	ldr	r3, [pc, #248]	; (8002b0c <data_settingPrint+0x124>)
 8002a12:	cb03      	ldmia	r3!, {r0, r1}
 8002a14:	6010      	str	r0, [r2, #0]
 8002a16:	6051      	str	r1, [r2, #4]
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	8113      	strh	r3, [r2, #8]
	strncat((char *)disp.f_line,buf,5);
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	2205      	movs	r2, #5
 8002a20:	4619      	mov	r1, r3
 8002a22:	4839      	ldr	r0, [pc, #228]	; (8002b08 <data_settingPrint+0x120>)
 8002a24:	f008 fa16 	bl	800ae54 <strncat>

	sprintf(buf,"%f",settingMax.humid);
 8002a28:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <data_settingPrint+0x128>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fd93 	bl	8000558 <__aeabi_f2d>
 8002a32:	4603      	mov	r3, r0
 8002a34:	460c      	mov	r4, r1
 8002a36:	1d38      	adds	r0, r7, #4
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4623      	mov	r3, r4
 8002a3c:	4931      	ldr	r1, [pc, #196]	; (8002b04 <data_settingPrint+0x11c>)
 8002a3e:	f008 f9e9 	bl	800ae14 <siprintf>
	sprintf((char *)disp.s_line,"Max. hum:");
 8002a42:	4a34      	ldr	r2, [pc, #208]	; (8002b14 <data_settingPrint+0x12c>)
 8002a44:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <data_settingPrint+0x130>)
 8002a46:	cb03      	ldmia	r3!, {r0, r1}
 8002a48:	6010      	str	r0, [r2, #0]
 8002a4a:	6051      	str	r1, [r2, #4]
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	8113      	strh	r3, [r2, #8]
	strncat((char *)disp.s_line,buf,5);
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	2205      	movs	r2, #5
 8002a54:	4619      	mov	r1, r3
 8002a56:	482f      	ldr	r0, [pc, #188]	; (8002b14 <data_settingPrint+0x12c>)
 8002a58:	f008 f9fc 	bl	800ae54 <strncat>

	lcd_display(&disp);
 8002a5c:	4827      	ldr	r0, [pc, #156]	; (8002afc <data_settingPrint+0x114>)
 8002a5e:	f7ff fa37 	bl	8001ed0 <lcd_display>
	HAL_Delay(5000);
 8002a62:	f241 3088 	movw	r0, #5000	; 0x1388
 8002a66:	f002 fd07 	bl	8005478 <HAL_Delay>
	lcd_clear(&disp);
 8002a6a:	4824      	ldr	r0, [pc, #144]	; (8002afc <data_settingPrint+0x114>)
 8002a6c:	f7ff fa82 	bl	8001f74 <lcd_clear>

	sprintf(buf,"%f",settingMin.temp);
 8002a70:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <data_settingPrint+0x118>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd fd6f 	bl	8000558 <__aeabi_f2d>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	460c      	mov	r4, r1
 8002a7e:	1d38      	adds	r0, r7, #4
 8002a80:	461a      	mov	r2, r3
 8002a82:	4623      	mov	r3, r4
 8002a84:	491f      	ldr	r1, [pc, #124]	; (8002b04 <data_settingPrint+0x11c>)
 8002a86:	f008 f9c5 	bl	800ae14 <siprintf>
	sprintf((char *)disp.f_line,"Min. temp:");
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <data_settingPrint+0x120>)
 8002a8c:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <data_settingPrint+0x134>)
 8002a8e:	cb03      	ldmia	r3!, {r0, r1}
 8002a90:	6010      	str	r0, [r2, #0]
 8002a92:	6051      	str	r1, [r2, #4]
 8002a94:	8819      	ldrh	r1, [r3, #0]
 8002a96:	789b      	ldrb	r3, [r3, #2]
 8002a98:	8111      	strh	r1, [r2, #8]
 8002a9a:	7293      	strb	r3, [r2, #10]
	strncat((char *)disp.f_line,buf,5);
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2205      	movs	r2, #5
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4819      	ldr	r0, [pc, #100]	; (8002b08 <data_settingPrint+0x120>)
 8002aa4:	f008 f9d6 	bl	800ae54 <strncat>

	sprintf(buf,"%f",settingMax.temp);
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <data_settingPrint+0x128>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fd53 	bl	8000558 <__aeabi_f2d>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	1d38      	adds	r0, r7, #4
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4623      	mov	r3, r4
 8002abc:	4911      	ldr	r1, [pc, #68]	; (8002b04 <data_settingPrint+0x11c>)
 8002abe:	f008 f9a9 	bl	800ae14 <siprintf>
	sprintf((char *)disp.s_line,"Max. temp:");
 8002ac2:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <data_settingPrint+0x12c>)
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <data_settingPrint+0x138>)
 8002ac6:	cb03      	ldmia	r3!, {r0, r1}
 8002ac8:	6010      	str	r0, [r2, #0]
 8002aca:	6051      	str	r1, [r2, #4]
 8002acc:	8819      	ldrh	r1, [r3, #0]
 8002ace:	789b      	ldrb	r3, [r3, #2]
 8002ad0:	8111      	strh	r1, [r2, #8]
 8002ad2:	7293      	strb	r3, [r2, #10]
	strncat((char *)disp.s_line,buf,5);
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	2205      	movs	r2, #5
 8002ad8:	4619      	mov	r1, r3
 8002ada:	480e      	ldr	r0, [pc, #56]	; (8002b14 <data_settingPrint+0x12c>)
 8002adc:	f008 f9ba 	bl	800ae54 <strncat>

	lcd_display(&disp);
 8002ae0:	4806      	ldr	r0, [pc, #24]	; (8002afc <data_settingPrint+0x114>)
 8002ae2:	f7ff f9f5 	bl	8001ed0 <lcd_display>
	HAL_Delay(5000);
 8002ae6:	f241 3088 	movw	r0, #5000	; 0x1388
 8002aea:	f002 fcc5 	bl	8005478 <HAL_Delay>
	lcd_clear(&disp);
 8002aee:	4803      	ldr	r0, [pc, #12]	; (8002afc <data_settingPrint+0x114>)
 8002af0:	f7ff fa40 	bl	8001f74 <lcd_clear>
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd90      	pop	{r4, r7, pc}
 8002afc:	2000042c 	.word	0x2000042c
 8002b00:	20000450 	.word	0x20000450
 8002b04:	0800e95c 	.word	0x0800e95c
 8002b08:	2000042d 	.word	0x2000042d
 8002b0c:	0800e960 	.word	0x0800e960
 8002b10:	20000468 	.word	0x20000468
 8002b14:	2000043e 	.word	0x2000043e
 8002b18:	0800e96c 	.word	0x0800e96c
 8002b1c:	0800e978 	.word	0x0800e978
 8002b20:	0800e984 	.word	0x0800e984

08002b24 <data_get>:
 * @brief save actual sensors' data values to currentData structure
 * @param None.
 * @retval None.
 */

void data_get(){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	hts221_readHumid(&(currentData.humid));
 8002b28:	4807      	ldr	r0, [pc, #28]	; (8002b48 <data_get+0x24>)
 8002b2a:	f7fe fff1 	bl	8001b10 <hts221_readHumid>
	hts221_readTemp(&(currentData.temp));
 8002b2e:	4807      	ldr	r0, [pc, #28]	; (8002b4c <data_get+0x28>)
 8002b30:	f7fe ffdf 	bl	8001af2 <hts221_readTemp>
	currentData.soil = convertMoisture(s);
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <data_get+0x2c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f80b 	bl	8002b54 <convertMoisture>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b02      	ldr	r3, [pc, #8]	; (8002b4c <data_get+0x28>)
 8002b42:	609a      	str	r2, [r3, #8]
}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000460 	.word	0x20000460
 8002b4c:	2000045c 	.word	0x2000045c
 8002b50:	20000428 	.word	0x20000428

08002b54 <convertMoisture>:
 * 		   - "dry"
 * 		   - "little wet"
 * 		   - "wet"
 * 		   - "very wet"
 */
char* convertMoisture(uint32_t adc_data){
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	uint8_t intervals = (wet_val-dry_val)/4;
 8002b5c:	23a0      	movs	r3, #160	; 0xa0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	2314      	movs	r3, #20
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	da00      	bge.n	8002b6a <convertMoisture+0x16>
 8002b68:	3303      	adds	r3, #3
 8002b6a:	109b      	asrs	r3, r3, #2
 8002b6c:	73fb      	strb	r3, [r7, #15]
	if(adc_data < intervals)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d201      	bcs.n	8002b7a <convertMoisture+0x26>
		return "dry";
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <convertMoisture+0x6c>)
 8002b78:	e01c      	b.n	8002bb4 <convertMoisture+0x60>
	else if(adc_data >= intervals && adc_data < 2*intervals)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d307      	bcc.n	8002b92 <convertMoisture+0x3e>
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	461a      	mov	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d201      	bcs.n	8002b92 <convertMoisture+0x3e>
		return "little wet";
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <convertMoisture+0x70>)
 8002b90:	e010      	b.n	8002bb4 <convertMoisture+0x60>
	else if(adc_data>= 2*intervals && adc_data < 3*intervals)
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d309      	bcc.n	8002bb2 <convertMoisture+0x5e>
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d201      	bcs.n	8002bb2 <convertMoisture+0x5e>
		return "wet";
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <convertMoisture+0x74>)
 8002bb0:	e000      	b.n	8002bb4 <convertMoisture+0x60>
	else
		return "very wet";
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <convertMoisture+0x78>)
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	0800e990 	.word	0x0800e990
 8002bc4:	0800e994 	.word	0x0800e994
 8002bc8:	0800e9a0 	.word	0x0800e9a0
 8002bcc:	0800e9a4 	.word	0x0800e9a4

08002bd0 <data_print>:
/**
 * @brief send data from currentData structure to LCD display structure
 * @param disp: pointer to LCD display structure
 * @retval None.
 */
void data_print(struct lcd_disp *disp){
 8002bd0:	b5b0      	push	{r4, r5, r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	char arr1[5];
	char arr2[5];
	char zeros[8] = "        ";
 8002bd8:	4a48      	ldr	r2, [pc, #288]	; (8002cfc <data_print+0x12c>)
 8002bda:	f107 0308 	add.w	r3, r7, #8
 8002bde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002be2:	e883 0003 	stmia.w	r3, {r0, r1}
	gcvt(currentData.humid,4,arr1);
 8002be6:	4b46      	ldr	r3, [pc, #280]	; (8002d00 <data_print+0x130>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fcb4 	bl	8000558 <__aeabi_f2d>
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	460d      	mov	r5, r1
 8002bf4:	f107 0318 	add.w	r3, r7, #24
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	2004      	movs	r0, #4
 8002bfc:	ec45 4b10 	vmov	d0, r4, r5
 8002c00:	f007 fc4e 	bl	800a4a0 <gcvt>
	gcvt(currentData.temp,4,arr2);
 8002c04:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <data_print+0x130>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fca5 	bl	8000558 <__aeabi_f2d>
 8002c0e:	4604      	mov	r4, r0
 8002c10:	460d      	mov	r5, r1
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	4619      	mov	r1, r3
 8002c18:	2004      	movs	r0, #4
 8002c1a:	ec45 4b10 	vmov	d0, r4, r5
 8002c1e:	f007 fc3f 	bl	800a4a0 <gcvt>

	sprintf((char *)disp->f_line, "H:");
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3301      	adds	r3, #1
 8002c26:	4a37      	ldr	r2, [pc, #220]	; (8002d04 <data_print+0x134>)
 8002c28:	8811      	ldrh	r1, [r2, #0]
 8002c2a:	7892      	ldrb	r2, [r2, #2]
 8002c2c:	8019      	strh	r1, [r3, #0]
 8002c2e:	709a      	strb	r2, [r3, #2]
	strncat(disp->f_line, arr1,5);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3301      	adds	r3, #1
 8002c34:	f107 0118 	add.w	r1, r7, #24
 8002c38:	2205      	movs	r2, #5
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f008 f90a 	bl	800ae54 <strncat>
	strncat(disp->f_line,"  T:",4);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	1c5c      	adds	r4, r3, #1
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7fd facb 	bl	80001e0 <strlen>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4423      	add	r3, r4
 8002c4e:	4a2e      	ldr	r2, [pc, #184]	; (8002d08 <data_print+0x138>)
 8002c50:	6810      	ldr	r0, [r2, #0]
 8002c52:	6018      	str	r0, [r3, #0]
 8002c54:	7912      	ldrb	r2, [r2, #4]
 8002c56:	711a      	strb	r2, [r3, #4]
	strncat(disp->f_line,arr2,5);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f107 0110 	add.w	r1, r7, #16
 8002c60:	2205      	movs	r2, #5
 8002c62:	4618      	mov	r0, r3
 8002c64:	f008 f8f6 	bl	800ae54 <strncat>
	sprintf((char *)disp->s_line, "Soil: ");
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3312      	adds	r3, #18
 8002c6c:	4a27      	ldr	r2, [pc, #156]	; (8002d0c <data_print+0x13c>)
 8002c6e:	6810      	ldr	r0, [r2, #0]
 8002c70:	6018      	str	r0, [r3, #0]
 8002c72:	8891      	ldrh	r1, [r2, #4]
 8002c74:	7992      	ldrb	r2, [r2, #6]
 8002c76:	8099      	strh	r1, [r3, #4]
 8002c78:	719a      	strb	r2, [r3, #6]
	strncat(disp->s_line,currentData.soil,strlen(currentData.soil));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f103 0412 	add.w	r4, r3, #18
 8002c80:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <data_print+0x130>)
 8002c82:	689d      	ldr	r5, [r3, #8]
 8002c84:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <data_print+0x130>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd faa9 	bl	80001e0 <strlen>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	4629      	mov	r1, r5
 8002c94:	4620      	mov	r0, r4
 8002c96:	f008 f8dd 	bl	800ae54 <strncat>
	strncat(disp->s_line,zeros,16-6-strlen(currentData.soil));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f103 0412 	add.w	r4, r3, #18
 8002ca0:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <data_print+0x130>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fa9b 	bl	80001e0 <strlen>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f1c3 020a 	rsb	r2, r3, #10
 8002cb0:	f107 0308 	add.w	r3, r7, #8
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f008 f8cc 	bl	800ae54 <strncat>
	usart_send_string("Hum: ");
 8002cbc:	4814      	ldr	r0, [pc, #80]	; (8002d10 <data_print+0x140>)
 8002cbe:	f000 fd01 	bl	80036c4 <usart_send_string>
	usart_send_string(arr1);
 8002cc2:	f107 0318 	add.w	r3, r7, #24
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fcfc 	bl	80036c4 <usart_send_string>
	usart_send_string("    Temp: ");
 8002ccc:	4811      	ldr	r0, [pc, #68]	; (8002d14 <data_print+0x144>)
 8002cce:	f000 fcf9 	bl	80036c4 <usart_send_string>
	usart_send_string(arr2);
 8002cd2:	f107 0310 	add.w	r3, r7, #16
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fcf4 	bl	80036c4 <usart_send_string>
	usart_send_string("    Soil: ");
 8002cdc:	480e      	ldr	r0, [pc, #56]	; (8002d18 <data_print+0x148>)
 8002cde:	f000 fcf1 	bl	80036c4 <usart_send_string>
	usart_send_string(currentData.soil);
 8002ce2:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <data_print+0x130>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fcec 	bl	80036c4 <usart_send_string>
	usart_send_string("\n\r");
 8002cec:	480b      	ldr	r0, [pc, #44]	; (8002d1c <data_print+0x14c>)
 8002cee:	f000 fce9 	bl	80036c4 <usart_send_string>
}
 8002cf2:	bf00      	nop
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	0800e9e8 	.word	0x0800e9e8
 8002d00:	2000045c 	.word	0x2000045c
 8002d04:	0800e9b0 	.word	0x0800e9b0
 8002d08:	0800e9b4 	.word	0x0800e9b4
 8002d0c:	0800e9bc 	.word	0x0800e9bc
 8002d10:	0800e9c4 	.word	0x0800e9c4
 8002d14:	0800e9cc 	.word	0x0800e9cc
 8002d18:	0800e9d8 	.word	0x0800e9d8
 8002d1c:	0800e9e4 	.word	0x0800e9e4

08002d20 <data_printAlert>:
 * @param e: variable describing current data status
 * @param disp: pointer to LCD display structure
 * @retval None.
 */

void data_printAlert(int e, struct lcd_disp *disp){
 8002d20:	b5b0      	push	{r4, r5, r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
	sprintf((char *)disp->f_line, "ALERT!          ");
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	4a2d      	ldr	r2, [pc, #180]	; (8002de4 <data_printAlert+0xc4>)
 8002d30:	461d      	mov	r5, r3
 8002d32:	4614      	mov	r4, r2
 8002d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d36:	6028      	str	r0, [r5, #0]
 8002d38:	6069      	str	r1, [r5, #4]
 8002d3a:	60aa      	str	r2, [r5, #8]
 8002d3c:	60eb      	str	r3, [r5, #12]
 8002d3e:	7823      	ldrb	r3, [r4, #0]
 8002d40:	742b      	strb	r3, [r5, #16]
	switch(e){
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d83a      	bhi.n	8002dc0 <data_printAlert+0xa0>
 8002d4a:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <data_printAlert+0x30>)
 8002d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d50:	08002d7b 	.word	0x08002d7b
 8002d54:	08002d61 	.word	0x08002d61
 8002d58:	08002dab 	.word	0x08002dab
 8002d5c:	08002d91 	.word	0x08002d91
	case S_HIGHTEMP:
		sprintf((char *)disp->s_line,"Temp too high!  "); break;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	3312      	adds	r3, #18
 8002d64:	4a20      	ldr	r2, [pc, #128]	; (8002de8 <data_printAlert+0xc8>)
 8002d66:	461d      	mov	r5, r3
 8002d68:	4614      	mov	r4, r2
 8002d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6c:	6028      	str	r0, [r5, #0]
 8002d6e:	6069      	str	r1, [r5, #4]
 8002d70:	60aa      	str	r2, [r5, #8]
 8002d72:	60eb      	str	r3, [r5, #12]
 8002d74:	7823      	ldrb	r3, [r4, #0]
 8002d76:	742b      	strb	r3, [r5, #16]
 8002d78:	e022      	b.n	8002dc0 <data_printAlert+0xa0>
	case S_LOWTEMP:
		sprintf((char *)disp->s_line,"Temp too low!  "); break;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	3312      	adds	r3, #18
 8002d7e:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <data_printAlert+0xcc>)
 8002d80:	461c      	mov	r4, r3
 8002d82:	4615      	mov	r5, r2
 8002d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d86:	6020      	str	r0, [r4, #0]
 8002d88:	6061      	str	r1, [r4, #4]
 8002d8a:	60a2      	str	r2, [r4, #8]
 8002d8c:	60e3      	str	r3, [r4, #12]
 8002d8e:	e017      	b.n	8002dc0 <data_printAlert+0xa0>
	case S_HIGHHUM:
		sprintf((char *)disp->s_line, "Hum too high!   "); break;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	3312      	adds	r3, #18
 8002d94:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <data_printAlert+0xd0>)
 8002d96:	461d      	mov	r5, r3
 8002d98:	4614      	mov	r4, r2
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	6028      	str	r0, [r5, #0]
 8002d9e:	6069      	str	r1, [r5, #4]
 8002da0:	60aa      	str	r2, [r5, #8]
 8002da2:	60eb      	str	r3, [r5, #12]
 8002da4:	7823      	ldrb	r3, [r4, #0]
 8002da6:	742b      	strb	r3, [r5, #16]
 8002da8:	e00a      	b.n	8002dc0 <data_printAlert+0xa0>
	case S_LOWHUM:
		sprintf((char *)disp->s_line, "Hum too low!   "); break;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	3312      	adds	r3, #18
 8002dae:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <data_printAlert+0xd4>)
 8002db0:	461c      	mov	r4, r3
 8002db2:	4615      	mov	r5, r2
 8002db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002db6:	6020      	str	r0, [r4, #0]
 8002db8:	6061      	str	r1, [r4, #4]
 8002dba:	60a2      	str	r2, [r4, #8]
 8002dbc:	60e3      	str	r3, [r4, #12]
 8002dbe:	bf00      	nop
	}
	usart_send_string(disp->f_line);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fc7d 	bl	80036c4 <usart_send_string>
	usart_send_string(disp->s_line);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	3312      	adds	r3, #18
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fc78 	bl	80036c4 <usart_send_string>
	usart_send_string("\n\r");
 8002dd4:	4808      	ldr	r0, [pc, #32]	; (8002df8 <data_printAlert+0xd8>)
 8002dd6:	f000 fc75 	bl	80036c4 <usart_send_string>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bdb0      	pop	{r4, r5, r7, pc}
 8002de2:	bf00      	nop
 8002de4:	0800e9f4 	.word	0x0800e9f4
 8002de8:	0800ea08 	.word	0x0800ea08
 8002dec:	0800ea1c 	.word	0x0800ea1c
 8002df0:	0800ea2c 	.word	0x0800ea2c
 8002df4:	0800ea40 	.word	0x0800ea40
 8002df8:	0800e9e4 	.word	0x0800e9e4

08002dfc <data_check>:
 * @brief check if values from currentData structure comply with settings
 * @param None.
 * @retval variable describing current data status
 */

uint8_t data_check(){
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
	if(currentData.temp > settingMax.temp)
 8002e00:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <data_check+0x78>)
 8002e02:	ed93 7a00 	vldr	s14, [r3]
 8002e06:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <data_check+0x7c>)
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e14:	dd01      	ble.n	8002e1a <data_check+0x1e>
		return S_HIGHTEMP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	e027      	b.n	8002e6a <data_check+0x6e>
	if(currentData.temp < settingMin.temp)
 8002e1a:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <data_check+0x78>)
 8002e1c:	ed93 7a00 	vldr	s14, [r3]
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <data_check+0x80>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	d501      	bpl.n	8002e34 <data_check+0x38>
		return S_LOWTEMP;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e01a      	b.n	8002e6a <data_check+0x6e>
	if(currentData.humid > settingMax.humid)
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <data_check+0x78>)
 8002e36:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <data_check+0x7c>)
 8002e3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e48:	dd01      	ble.n	8002e4e <data_check+0x52>
		return S_HIGHHUM;
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	e00d      	b.n	8002e6a <data_check+0x6e>
	if(currentData.humid < settingMin.humid)
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <data_check+0x78>)
 8002e50:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <data_check+0x80>)
 8002e56:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e62:	d501      	bpl.n	8002e68 <data_check+0x6c>
		return S_LOWHUM;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e000      	b.n	8002e6a <data_check+0x6e>
	return S_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	2000045c 	.word	0x2000045c
 8002e78:	20000468 	.word	0x20000468
 8002e7c:	20000450 	.word	0x20000450

08002e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_MspInit+0x4c>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <HAL_MspInit+0x4c>)
 8002e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e94:	6453      	str	r3, [r2, #68]	; 0x44
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_MspInit+0x4c>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_MspInit+0x4c>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <HAL_MspInit+0x4c>)
 8002eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_MspInit+0x4c>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ebe:	2007      	movs	r0, #7
 8002ec0:	f002 ffa2 	bl	8005e08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40023800 	.word	0x40023800

08002ed0 <NMI_Handler>:
/******************************************************************************/
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/

void NMI_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HardFault_Handler>:


void HardFault_Handler(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ee2:	e7fe      	b.n	8002ee2 <HardFault_Handler+0x4>

08002ee4 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <MemManage_Handler+0x4>

08002eea <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eee:	e7fe      	b.n	8002eee <BusFault_Handler+0x4>

08002ef0 <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <UsageFault_Handler+0x4>

08002ef6 <SVC_Handler>:
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}

void SVC_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <PendSV_Handler>:


void PendSV_Handler(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(delayCounter){
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <SysTick_Handler+0x2c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <SysTick_Handler+0x22>
		if(--delayCounter == 0)
 8002f2c:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <SysTick_Handler+0x2c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	4a06      	ldr	r2, [pc, #24]	; (8002f4c <SysTick_Handler+0x2c>)
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <SysTick_Handler+0x22>
			HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4804      	ldr	r0, [pc, #16]	; (8002f50 <SysTick_Handler+0x30>)
 8002f3e:	f005 ff15 	bl	8008d6c <HAL_TIM_PWM_Stop>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f42:	f002 fa79 	bl	8005438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000028c 	.word	0x2000028c
 8002f50:	200004c8 	.word	0x200004c8

08002f54 <TIM1_TRG_COM_TIM11_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/


void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002f58:	4802      	ldr	r0, [pc, #8]	; (8002f64 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002f5a:	f005 ff53 	bl	8008e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000508 	.word	0x20000508

08002f68 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <TIM2_IRQHandler+0x10>)
 8002f6e:	f005 ff49 	bl	8008e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000548 	.word	0x20000548

08002f7c <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <DMA2_Stream0_IRQHandler+0x10>)
 8002f82:	f003 f889 	bl	8006098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000368 	.word	0x20000368

08002f90 <BSP_I2C1_Init>:
/*******************************************************************************
                            BUS OPERATIONS OVER I2C
*******************************************************************************/

int32_t BSP_I2C1_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <BSP_I2C1_Init+0x58>)
 8002f9c:	4a13      	ldr	r2, [pc, #76]	; (8002fec <BSP_I2C1_Init+0x5c>)
 8002f9e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002fa0:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <BSP_I2C1_Init+0x60>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	4912      	ldr	r1, [pc, #72]	; (8002ff0 <BSP_I2C1_Init+0x60>)
 8002fa8:	600a      	str	r2, [r1, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d117      	bne.n	8002fde <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002fae:	480e      	ldr	r0, [pc, #56]	; (8002fe8 <BSP_I2C1_Init+0x58>)
 8002fb0:	f004 fdcc 	bl	8007b4c <HAL_I2C_GetState>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d111      	bne.n	8002fde <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002fba:	480b      	ldr	r0, [pc, #44]	; (8002fe8 <BSP_I2C1_Init+0x58>)
 8002fbc:	f000 f8e2 	bl	8003184 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10b      	bne.n	8002fde <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002fc6:	4808      	ldr	r0, [pc, #32]	; (8002fe8 <BSP_I2C1_Init+0x58>)
 8002fc8:	f000 f8a8 	bl	800311c <MX_I2C1_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8002fd2:	f06f 0307 	mvn.w	r3, #7
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	e001      	b.n	8002fde <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002fde:	687b      	ldr	r3, [r7, #4]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20000474 	.word	0x20000474
 8002fec:	40005400 	.word	0x40005400
 8002ff0:	20000290 	.word	0x20000290

08002ff4 <BSP_I2C1_DeInit>:


int32_t BSP_I2C1_DeInit(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <BSP_I2C1_DeInit+0x48>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d014      	beq.n	8003030 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <BSP_I2C1_DeInit+0x48>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3b01      	subs	r3, #1
 800300c:	4a0b      	ldr	r2, [pc, #44]	; (800303c <BSP_I2C1_DeInit+0x48>)
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <BSP_I2C1_DeInit+0x48>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8003018:	4809      	ldr	r0, [pc, #36]	; (8003040 <BSP_I2C1_DeInit+0x4c>)
 800301a:	f000 f8fd 	bl	8003218 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800301e:	4808      	ldr	r0, [pc, #32]	; (8003040 <BSP_I2C1_DeInit+0x4c>)
 8003020:	f004 f946 	bl	80072b0 <HAL_I2C_DeInit>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800302a:	f06f 0307 	mvn.w	r3, #7
 800302e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8003030:	687b      	ldr	r3, [r7, #4]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000290 	.word	0x20000290
 8003040:	20000474 	.word	0x20000474

08003044 <BSP_I2C1_WriteReg>:
}



int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af04      	add	r7, sp, #16
 800304a:	60ba      	str	r2, [r7, #8]
 800304c:	461a      	mov	r2, r3
 800304e:	4603      	mov	r3, r0
 8003050:	81fb      	strh	r3, [r7, #14]
 8003052:	460b      	mov	r3, r1
 8003054:	81bb      	strh	r3, [r7, #12]
 8003056:	4613      	mov	r3, r2
 8003058:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800305e:	89ba      	ldrh	r2, [r7, #12]
 8003060:	89f9      	ldrh	r1, [r7, #14]
 8003062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003066:	9302      	str	r3, [sp, #8]
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2301      	movs	r3, #1
 8003072:	480c      	ldr	r0, [pc, #48]	; (80030a4 <BSP_I2C1_WriteReg+0x60>)
 8003074:	f004 fa4a 	bl	800750c <HAL_I2C_Mem_Write>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00c      	beq.n	8003098 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800307e:	4809      	ldr	r0, [pc, #36]	; (80030a4 <BSP_I2C1_WriteReg+0x60>)
 8003080:	f004 fd72 	bl	8007b68 <HAL_I2C_GetError>
 8003084:	4603      	mov	r3, r0
 8003086:	2b04      	cmp	r3, #4
 8003088:	d103      	bne.n	8003092 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800308a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	e002      	b.n	8003098 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003092:	f06f 0303 	mvn.w	r3, #3
 8003096:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003098:	697b      	ldr	r3, [r7, #20]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000474 	.word	0x20000474

080030a8 <BSP_I2C1_ReadReg>:


int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af04      	add	r7, sp, #16
 80030ae:	60ba      	str	r2, [r7, #8]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	81fb      	strh	r3, [r7, #14]
 80030b6:	460b      	mov	r3, r1
 80030b8:	81bb      	strh	r3, [r7, #12]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80030c2:	89ba      	ldrh	r2, [r7, #12]
 80030c4:	89f9      	ldrh	r1, [r7, #14]
 80030c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ca:	9302      	str	r3, [sp, #8]
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	2301      	movs	r3, #1
 80030d6:	480c      	ldr	r0, [pc, #48]	; (8003108 <BSP_I2C1_ReadReg+0x60>)
 80030d8:	f004 fb12 	bl	8007700 <HAL_I2C_Mem_Read>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80030e2:	4809      	ldr	r0, [pc, #36]	; (8003108 <BSP_I2C1_ReadReg+0x60>)
 80030e4:	f004 fd40 	bl	8007b68 <HAL_I2C_GetError>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d103      	bne.n	80030f6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80030ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e002      	b.n	80030fc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80030f6:	f06f 0303 	mvn.w	r3, #3
 80030fa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80030fc:	697b      	ldr	r3, [r7, #20]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000474 	.word	0x20000474

0800310c <BSP_GetTick>:
  return BSP_ERROR_NONE;
}
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */


int32_t BSP_GetTick(void) {
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003110:	f002 f9a6 	bl	8005460 <HAL_GetTick>
 8003114:	4603      	mov	r3, r0
}
 8003116:	4618      	mov	r0, r3
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a14      	ldr	r2, [pc, #80]	; (800317c <MX_I2C1_Init+0x60>)
 800312c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <MX_I2C1_Init+0x64>)
 8003132:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003146:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f003 ff6d 	bl	8007040 <HAL_I2C_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40005400 	.word	0x40005400
 8003180:	00061a80 	.word	0x00061a80

08003184 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	; 0x28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <I2C1_MspInit+0x8c>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	4a1e      	ldr	r2, [pc, #120]	; (8003210 <I2C1_MspInit+0x8c>)
 8003196:	f043 0302 	orr.w	r3, r3, #2
 800319a:	6313      	str	r3, [r2, #48]	; 0x30
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <I2C1_MspInit+0x8c>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80031a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031ae:	2312      	movs	r3, #18
 80031b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031b2:	2301      	movs	r3, #1
 80031b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b6:	2303      	movs	r3, #3
 80031b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80031ba:	2304      	movs	r3, #4
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80031be:	f107 0314 	add.w	r3, r7, #20
 80031c2:	4619      	mov	r1, r3
 80031c4:	4813      	ldr	r0, [pc, #76]	; (8003214 <I2C1_MspInit+0x90>)
 80031c6:	f003 fca5 	bl	8006b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80031ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031d0:	2312      	movs	r3, #18
 80031d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031d4:	2301      	movs	r3, #1
 80031d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d8:	2303      	movs	r3, #3
 80031da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80031dc:	2304      	movs	r3, #4
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	4619      	mov	r1, r3
 80031e6:	480b      	ldr	r0, [pc, #44]	; (8003214 <I2C1_MspInit+0x90>)
 80031e8:	f003 fc94 	bl	8006b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	4b07      	ldr	r3, [pc, #28]	; (8003210 <I2C1_MspInit+0x8c>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	4a06      	ldr	r2, [pc, #24]	; (8003210 <I2C1_MspInit+0x8c>)
 80031f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031fa:	6413      	str	r3, [r2, #64]	; 0x40
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <I2C1_MspInit+0x8c>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8003208:	bf00      	nop
 800320a:	3728      	adds	r7, #40	; 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40023800 	.word	0x40023800
 8003214:	40020400 	.word	0x40020400

08003218 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003220:	4b09      	ldr	r3, [pc, #36]	; (8003248 <I2C1_MspDeInit+0x30>)
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	4a08      	ldr	r2, [pc, #32]	; (8003248 <I2C1_MspDeInit+0x30>)
 8003226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800322a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800322c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003230:	4806      	ldr	r0, [pc, #24]	; (800324c <I2C1_MspDeInit+0x34>)
 8003232:	f003 fdf1 	bl	8006e18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8003236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800323a:	4804      	ldr	r0, [pc, #16]	; (800324c <I2C1_MspDeInit+0x34>)
 800323c:	f003 fdec 	bl	8006e18 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40023800 	.word	0x40023800
 800324c:	40020400 	.word	0x40020400

08003250 <_sbrk>:
 */
static uint8_t *__sbrk_heap_end = NULL;


void *_sbrk(ptrdiff_t incr)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003258:	4a14      	ldr	r2, [pc, #80]	; (80032ac <_sbrk+0x5c>)
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <_sbrk+0x60>)
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <_sbrk+0x64>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800326c:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <_sbrk+0x64>)
 800326e:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <_sbrk+0x68>)
 8003270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <_sbrk+0x64>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	429a      	cmp	r2, r3
 800327e:	d207      	bcs.n	8003290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003280:	f007 f93a 	bl	800a4f8 <__errno>
 8003284:	4602      	mov	r2, r0
 8003286:	230c      	movs	r3, #12
 8003288:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
 800328e:	e009      	b.n	80032a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <_sbrk+0x64>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <_sbrk+0x64>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <_sbrk+0x64>)
 80032a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032a2:	68fb      	ldr	r3, [r7, #12]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20018000 	.word	0x20018000
 80032b0:	00000400 	.word	0x00000400
 80032b4:	20000294 	.word	0x20000294
 80032b8:	200005f8 	.word	0x200005f8

080032bc <SystemInit>:
  static void SystemInit_ExtMemCtl(void); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */


void SystemInit(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <SystemInit+0x28>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	4a07      	ldr	r2, [pc, #28]	; (80032e4 <SystemInit+0x28>)
 80032c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <SystemInit+0x28>)
 80032d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032d6:	609a      	str	r2, [r3, #8]
#endif
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ee:	f107 0308 	add.w	r3, r7, #8
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032fc:	463b      	mov	r3, r7
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <MX_TIM2_Init+0x98>)
 8003306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800330a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 61999;
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <MX_TIM2_Init+0x98>)
 800330e:	f24f 222f 	movw	r2, #61999	; 0xf22f
 8003312:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003314:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <MX_TIM2_Init+0x98>)
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 800331a:	4b19      	ldr	r3, [pc, #100]	; (8003380 <MX_TIM2_Init+0x98>)
 800331c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003320:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <MX_TIM2_Init+0x98>)
 8003324:	2200      	movs	r2, #0
 8003326:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003328:	4b15      	ldr	r3, [pc, #84]	; (8003380 <MX_TIM2_Init+0x98>)
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800332e:	4814      	ldr	r0, [pc, #80]	; (8003380 <MX_TIM2_Init+0x98>)
 8003330:	f005 fc66 	bl	8008c00 <HAL_TIM_Base_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800333a:	f7ff f817 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800333e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003342:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003344:	f107 0308 	add.w	r3, r7, #8
 8003348:	4619      	mov	r1, r3
 800334a:	480d      	ldr	r0, [pc, #52]	; (8003380 <MX_TIM2_Init+0x98>)
 800334c:	f005 ff28 	bl	80091a0 <HAL_TIM_ConfigClockSource>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003356:	f7ff f809 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800335a:	2300      	movs	r3, #0
 800335c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003362:	463b      	mov	r3, r7
 8003364:	4619      	mov	r1, r3
 8003366:	4806      	ldr	r0, [pc, #24]	; (8003380 <MX_TIM2_Init+0x98>)
 8003368:	f006 fac6 	bl	80098f8 <HAL_TIMEx_MasterConfigSynchronization>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003372:	f7fe fffb 	bl	800236c <Error_Handler>
  }

}
 8003376:	bf00      	nop
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000548 	.word	0x20000548

08003384 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08e      	sub	sp, #56	; 0x38
 8003388:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800338a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	609a      	str	r2, [r3, #8]
 8003396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003398:	f107 0320 	add.w	r3, r7, #32
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033a2:	1d3b      	adds	r3, r7, #4
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	611a      	str	r2, [r3, #16]
 80033b0:	615a      	str	r2, [r3, #20]
 80033b2:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80033b4:	4b2c      	ldr	r3, [pc, #176]	; (8003468 <MX_TIM3_Init+0xe4>)
 80033b6:	4a2d      	ldr	r2, [pc, #180]	; (800346c <MX_TIM3_Init+0xe8>)
 80033b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 691;
 80033ba:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <MX_TIM3_Init+0xe4>)
 80033bc:	f240 22b3 	movw	r2, #691	; 0x2b3
 80033c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033c2:	4b29      	ldr	r3, [pc, #164]	; (8003468 <MX_TIM3_Init+0xe4>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 80033c8:	4b27      	ldr	r3, [pc, #156]	; (8003468 <MX_TIM3_Init+0xe4>)
 80033ca:	22fe      	movs	r2, #254	; 0xfe
 80033cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <MX_TIM3_Init+0xe4>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <MX_TIM3_Init+0xe4>)
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033da:	4823      	ldr	r0, [pc, #140]	; (8003468 <MX_TIM3_Init+0xe4>)
 80033dc:	f005 fc10 	bl	8008c00 <HAL_TIM_Base_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80033e6:	f7fe ffc1 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033f4:	4619      	mov	r1, r3
 80033f6:	481c      	ldr	r0, [pc, #112]	; (8003468 <MX_TIM3_Init+0xe4>)
 80033f8:	f005 fed2 	bl	80091a0 <HAL_TIM_ConfigClockSource>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003402:	f7fe ffb3 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003406:	4818      	ldr	r0, [pc, #96]	; (8003468 <MX_TIM3_Init+0xe4>)
 8003408:	f005 fc49 	bl	8008c9e <HAL_TIM_PWM_Init>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003412:	f7fe ffab 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800341a:	2300      	movs	r3, #0
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800341e:	f107 0320 	add.w	r3, r7, #32
 8003422:	4619      	mov	r1, r3
 8003424:	4810      	ldr	r0, [pc, #64]	; (8003468 <MX_TIM3_Init+0xe4>)
 8003426:	f006 fa67 	bl	80098f8 <HAL_TIMEx_MasterConfigSynchronization>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003430:	f7fe ff9c 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003434:	2360      	movs	r3, #96	; 0x60
 8003436:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003444:	1d3b      	adds	r3, r7, #4
 8003446:	2200      	movs	r2, #0
 8003448:	4619      	mov	r1, r3
 800344a:	4807      	ldr	r0, [pc, #28]	; (8003468 <MX_TIM3_Init+0xe4>)
 800344c:	f005 fde2 	bl	8009014 <HAL_TIM_PWM_ConfigChannel>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003456:	f7fe ff89 	bl	800236c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800345a:	4803      	ldr	r0, [pc, #12]	; (8003468 <MX_TIM3_Init+0xe4>)
 800345c:	f000 f886 	bl	800356c <HAL_TIM_MspPostInit>

}
 8003460:	bf00      	nop
 8003462:	3738      	adds	r7, #56	; 0x38
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	200004c8 	.word	0x200004c8
 800346c:	40000400 	.word	0x40000400

08003470 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8003474:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <MX_TIM11_Init+0x40>)
 8003476:	4a0f      	ldr	r2, [pc, #60]	; (80034b4 <MX_TIM11_Init+0x44>)
 8003478:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 7199;
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <MX_TIM11_Init+0x40>)
 800347c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003480:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <MX_TIM11_Init+0x40>)
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 199;
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <MX_TIM11_Init+0x40>)
 800348a:	22c7      	movs	r2, #199	; 0xc7
 800348c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <MX_TIM11_Init+0x40>)
 8003490:	2200      	movs	r2, #0
 8003492:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <MX_TIM11_Init+0x40>)
 8003496:	2280      	movs	r2, #128	; 0x80
 8003498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800349a:	4805      	ldr	r0, [pc, #20]	; (80034b0 <MX_TIM11_Init+0x40>)
 800349c:	f005 fbb0 	bl	8008c00 <HAL_TIM_Base_Init>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80034a6:	f7fe ff61 	bl	800236c <Error_Handler>
  }

}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000508 	.word	0x20000508
 80034b4:	40014800 	.word	0x40014800

080034b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c8:	d116      	bne.n	80034f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_TIM_Base_MspInit+0xa8>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	4a23      	ldr	r2, [pc, #140]	; (8003560 <HAL_TIM_Base_MspInit+0xa8>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6413      	str	r3, [r2, #64]	; 0x40
 80034da:	4b21      	ldr	r3, [pc, #132]	; (8003560 <HAL_TIM_Base_MspInit+0xa8>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2100      	movs	r1, #0
 80034ea:	201c      	movs	r0, #28
 80034ec:	f002 fc97 	bl	8005e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034f0:	201c      	movs	r0, #28
 80034f2:	f002 fcb0 	bl	8005e56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80034f6:	e02e      	b.n	8003556 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a19      	ldr	r2, [pc, #100]	; (8003564 <HAL_TIM_Base_MspInit+0xac>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10e      	bne.n	8003520 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_TIM_Base_MspInit+0xa8>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <HAL_TIM_Base_MspInit+0xa8>)
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <HAL_TIM_Base_MspInit+0xa8>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]
}
 800351e:	e01a      	b.n	8003556 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM11)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a10      	ldr	r2, [pc, #64]	; (8003568 <HAL_TIM_Base_MspInit+0xb0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d115      	bne.n	8003556 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <HAL_TIM_Base_MspInit+0xa8>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	4a0b      	ldr	r2, [pc, #44]	; (8003560 <HAL_TIM_Base_MspInit+0xa8>)
 8003534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003538:	6453      	str	r3, [r2, #68]	; 0x44
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_TIM_Base_MspInit+0xa8>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	2100      	movs	r1, #0
 800354a:	201a      	movs	r0, #26
 800354c:	f002 fc67 	bl	8005e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003550:	201a      	movs	r0, #26
 8003552:	f002 fc80 	bl	8005e56 <HAL_NVIC_EnableIRQ>
}
 8003556:	bf00      	nop
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	40000400 	.word	0x40000400
 8003568:	40014800 	.word	0x40014800

0800356c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 030c 	add.w	r3, r7, #12
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <HAL_TIM_MspPostInit+0x68>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d11d      	bne.n	80035ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <HAL_TIM_MspPostInit+0x6c>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	4a10      	ldr	r2, [pc, #64]	; (80035d8 <HAL_TIM_MspPostInit+0x6c>)
 8003598:	f043 0304 	orr.w	r3, r3, #4
 800359c:	6313      	str	r3, [r2, #48]	; 0x30
 800359e:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <HAL_TIM_MspPostInit+0x6c>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035aa:	2340      	movs	r3, #64	; 0x40
 80035ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035ba:	2302      	movs	r3, #2
 80035bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035be:	f107 030c 	add.w	r3, r7, #12
 80035c2:	4619      	mov	r1, r3
 80035c4:	4805      	ldr	r0, [pc, #20]	; (80035dc <HAL_TIM_MspPostInit+0x70>)
 80035c6:	f003 faa5 	bl	8006b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035ca:	bf00      	nop
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40020800 	.word	0x40020800

080035e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <MX_USART2_UART_Init+0x4c>)
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <MX_USART2_UART_Init+0x50>)
 80035e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <MX_USART2_UART_Init+0x4c>)
 80035ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <MX_USART2_UART_Init+0x4c>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <MX_USART2_UART_Init+0x4c>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <MX_USART2_UART_Init+0x4c>)
 8003600:	2200      	movs	r2, #0
 8003602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <MX_USART2_UART_Init+0x4c>)
 8003606:	220c      	movs	r2, #12
 8003608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <MX_USART2_UART_Init+0x4c>)
 800360c:	2200      	movs	r2, #0
 800360e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <MX_USART2_UART_Init+0x4c>)
 8003612:	2200      	movs	r2, #0
 8003614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003616:	4805      	ldr	r0, [pc, #20]	; (800362c <MX_USART2_UART_Init+0x4c>)
 8003618:	f006 f9f0 	bl	80099fc <HAL_UART_Init>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003622:	f7fe fea3 	bl	800236c <Error_Handler>
  }

}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000588 	.word	0x20000588
 8003630:	40004400 	.word	0x40004400

08003634 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a19      	ldr	r2, [pc, #100]	; (80036b8 <HAL_UART_MspInit+0x84>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d12b      	bne.n	80036ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	4b18      	ldr	r3, [pc, #96]	; (80036bc <HAL_UART_MspInit+0x88>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	4a17      	ldr	r2, [pc, #92]	; (80036bc <HAL_UART_MspInit+0x88>)
 8003660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003664:	6413      	str	r3, [r2, #64]	; 0x40
 8003666:	4b15      	ldr	r3, [pc, #84]	; (80036bc <HAL_UART_MspInit+0x88>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <HAL_UART_MspInit+0x88>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	4a10      	ldr	r2, [pc, #64]	; (80036bc <HAL_UART_MspInit+0x88>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6313      	str	r3, [r2, #48]	; 0x30
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <HAL_UART_MspInit+0x88>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800368e:	230c      	movs	r3, #12
 8003690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003692:	2302      	movs	r3, #2
 8003694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800369a:	2303      	movs	r3, #3
 800369c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800369e:	2307      	movs	r3, #7
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a2:	f107 0314 	add.w	r3, r7, #20
 80036a6:	4619      	mov	r1, r3
 80036a8:	4805      	ldr	r0, [pc, #20]	; (80036c0 <HAL_UART_MspInit+0x8c>)
 80036aa:	f003 fa33 	bl	8006b14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036ae:	bf00      	nop
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40004400 	.word	0x40004400
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40020000 	.word	0x40020000

080036c4 <usart_send_string>:
 * @retval - 0x00U: HAL_OK - data sent correctly
 * 		   - 0x01U: HAL_ERROR - error during UART transmition
 * 		   - 0x02U: HAL_BUSY - UART busy
 * 		   - 0x03U: HAL_TIMEOUT - UART transmition lasted too long
 */
HAL_StatusTypeDef usart_send_string(char *s){
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result = HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), USART_TIMEOUT);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7fc fd87 	bl	80001e0 <strlen>
 80036d2:	4603      	mov	r3, r0
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	2364      	movs	r3, #100	; 0x64
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4805      	ldr	r0, [pc, #20]	; (80036f0 <usart_send_string+0x2c>)
 80036dc:	f006 f9db 	bl	8009a96 <HAL_UART_Transmit>
 80036e0:	4603      	mov	r3, r0
 80036e2:	73fb      	strb	r3, [r7, #15]
	return result;
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000588 	.word	0x20000588

080036f4 <usart_settingEnter>:
/**
 * @brief enter new settings using uart communication
 * @param None.
 * @retval None.1
 */
void usart_settingEnter(){
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b09c      	sub	sp, #112	; 0x70
 80036f8:	af00      	add	r7, sp, #0
	char data[4];
	char buf[100];
	usart_send_string("Setting mode. Please enter data in format xx.x .\r\n");
 80036fa:	4810      	ldr	r0, [pc, #64]	; (800373c <usart_settingEnter+0x48>)
 80036fc:	f7ff ffe2 	bl	80036c4 <usart_send_string>
	usart_send_string("Please enter minimum humidity: ");
 8003700:	480f      	ldr	r0, [pc, #60]	; (8003740 <usart_settingEnter+0x4c>)
 8003702:	f7ff ffdf 	bl	80036c4 <usart_send_string>
	HAL_StatusTypeDef stat = HAL_UART_Receive(&huart2, (uint8_t*)data, 4, 10000);
 8003706:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800370a:	f242 7310 	movw	r3, #10000	; 0x2710
 800370e:	2204      	movs	r2, #4
 8003710:	480c      	ldr	r0, [pc, #48]	; (8003744 <usart_settingEnter+0x50>)
 8003712:	f006 fa59 	bl	8009bc8 <HAL_UART_Receive>
 8003716:	4603      	mov	r3, r0
 8003718:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	float x = strtof(data, NULL);
 800371c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003720:	2100      	movs	r1, #0
 8003722:	4618      	mov	r0, r3
 8003724:	f008 f9bc 	bl	800baa0 <strtof>
 8003728:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
	usart_send_string("\r\n");
 800372c:	4806      	ldr	r0, [pc, #24]	; (8003748 <usart_settingEnter+0x54>)
 800372e:	f7ff ffc9 	bl	80036c4 <usart_send_string>
}
 8003732:	bf00      	nop
 8003734:	3770      	adds	r7, #112	; 0x70
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	0800ea50 	.word	0x0800ea50
 8003740:	0800ea84 	.word	0x0800ea84
 8003744:	20000588 	.word	0x20000588
 8003748:	0800eaa4 	.word	0x0800eaa4

0800374c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800374c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003784 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003750:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003752:	e003      	b.n	800375c <LoopCopyDataInit>

08003754 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003756:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003758:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800375a:	3104      	adds	r1, #4

0800375c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800375c:	480b      	ldr	r0, [pc, #44]	; (800378c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003760:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003762:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003764:	d3f6      	bcc.n	8003754 <CopyDataInit>
  ldr  r2, =_sbss
 8003766:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003768:	e002      	b.n	8003770 <LoopFillZerobss>

0800376a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800376a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800376c:	f842 3b04 	str.w	r3, [r2], #4

08003770 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003772:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003774:	d3f9      	bcc.n	800376a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003776:	f7ff fda1 	bl	80032bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800377a:	f006 fec3 	bl	800a504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800377e:	f7fe fc1f 	bl	8001fc0 <main>
  bx  lr    
 8003782:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003784:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003788:	0800edc4 	.word	0x0800edc4
  ldr  r0, =_sdata
 800378c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003790:	20000268 	.word	0x20000268
  ldr  r2, =_sbss
 8003794:	20000268 	.word	0x20000268
  ldr  r3, = _ebss
 8003798:	200005f8 	.word	0x200005f8

0800379c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800379c:	e7fe      	b.n	800379c <ADC_IRQHandler>
	...

080037a0 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d103      	bne.n	80037b8 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	e030      	b.n	800381a <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	7b1a      	ldrb	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a0c      	ldr	r2, [pc, #48]	; (8003824 <HTS221_RegisterBusIO+0x84>)
 80037f4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <HTS221_RegisterBusIO+0x88>)
 80037fa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4798      	blx	r3
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	e002      	b.n	800381a <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8003814:	f04f 33ff 	mov.w	r3, #4294967295
 8003818:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800381a:	68fb      	ldr	r3, [r7, #12]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	08003ecb 	.word	0x08003ecb
 8003828:	08003f2d 	.word	0x08003f2d

0800382c <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800383a:	2b00      	cmp	r3, #0
 800383c:	d108      	bne.n	8003850 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fade 	bl	8003e00 <HTS221_Initialize>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
 800384e:	e004      	b.n	800385a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003870:	2b01      	cmp	r3, #1
 8003872:	d111      	bne.n	8003898 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f878 	bl	800396a <HTS221_HUM_Disable>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8003880:	f04f 33ff 	mov.w	r3, #4294967295
 8003884:	e00d      	b.n	80038a2 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f97b 	bl	8003b82 <HTS221_TEMP_Disable>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8003892:	f04f 33ff 	mov.w	r3, #4294967295
 8003896:	e004      	b.n	80038a2 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	331c      	adds	r3, #28
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fc3e 	bl	800413c <hts221_device_id_get>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 80038c6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ca:	e000      	b.n	80038ce <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2201      	movs	r2, #1
 80038e6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	4a07      	ldr	r2, [pc, #28]	; (800391c <HTS221_GetCapabilities+0x44>)
 80038fe:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	4a06      	ldr	r2, [pc, #24]	; (800391c <HTS221_GetCapabilities+0x44>)
 8003904:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	41480000 	.word	0x41480000

08003920 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e015      	b.n	8003962 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	331c      	adds	r3, #28
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fc09 	bl	800415e <hts221_power_on_set>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
 8003956:	e004      	b.n	8003962 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e015      	b.n	80039ac <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	331c      	adds	r3, #28
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fbe4 	bl	800415e <hts221_power_on_set>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 800399c:	f04f 33ff 	mov.w	r3, #4294967295
 80039a0:	e004      	b.n	80039ac <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80039be:	6839      	ldr	r1, [r7, #0]
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f9a9 	bl	8003d18 <HTS221_GetOutputDataRate>
 80039c6:	4603      	mov	r3, r0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80039dc:	ed97 0a00 	vldr	s0, [r7]
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f9dd 	bl	8003da0 <HTS221_SetOutputDataRate>
 80039e6:	4603      	mov	r3, r0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  hts221_axis1bit16_t coeff;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	331c      	adds	r3, #28
 80039fe:	f107 0218 	add.w	r2, r7, #24
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fc52 	bl	80042ae <hts221_hum_adc_point_0_get>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003a10:	f04f 33ff 	mov.w	r3, #4294967295
 8003a14:	e088      	b.n	8003b28 <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.x0 = (float)coeff.i16bit;
 8003a16:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a22:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	331c      	adds	r3, #28
 8003a2a:	f107 0218 	add.w	r2, r7, #24
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fbba 	bl	80041aa <hts221_hum_rh_point_0_get>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HTS221_HUM_GetHumidity+0x52>
  {
    return HTS221_ERROR;
 8003a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a40:	e072      	b.n	8003b28 <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.y0 = (float)coeff.u8bit[0];
 8003a42:	7e3b      	ldrb	r3, [r7, #24]
 8003a44:	ee07 3a90 	vmov	s15, r3
 8003a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	331c      	adds	r3, #28
 8003a54:	f107 0218 	add.w	r2, r7, #24
 8003a58:	4611      	mov	r1, r2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fc38 	bl	80042d0 <hts221_hum_adc_point_1_get>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HTS221_HUM_GetHumidity+0x7c>
  {
    return HTS221_ERROR;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	e05d      	b.n	8003b28 <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.x1 = (float)coeff.i16bit;
 8003a6c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003a70:	ee07 3a90 	vmov	s15, r3
 8003a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a78:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	331c      	adds	r3, #28
 8003a80:	f107 0218 	add.w	r2, r7, #24
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fba6 	bl	80041d8 <hts221_hum_rh_point_1_get>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HTS221_HUM_GetHumidity+0xa8>
  {
    return HTS221_ERROR;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	e047      	b.n	8003b28 <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.y1 = (float)coeff.u8bit[0];
 8003a98:	7e3b      	ldrb	r3, [r7, #24]
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa2:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 8003aa6:	f107 031c 	add.w	r3, r7, #28
 8003aaa:	2202      	movs	r2, #2
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f006 fd4c 	bl	800a54c <memset>
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	331c      	adds	r3, #28
 8003ab8:	f107 021c 	add.w	r2, r7, #28
 8003abc:	4611      	mov	r1, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fb1a 	bl	80040f8 <hts221_humidity_raw_get>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HTS221_HUM_GetHumidity+0xe0>
  {
    return HTS221_ERROR;
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ace:	e02b      	b.n	8003b28 <HTS221_HUM_GetHumidity+0x138>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8003ad0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003ad4:	ee07 3a90 	vmov	s15, r3
 8003ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003adc:	f107 0308 	add.w	r3, r7, #8
 8003ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 f9b7 	bl	8003e58 <Linear_Interpolation>
 8003aea:	eef0 7a40 	vmov.f32	s15, s0
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	edd3 7a00 	vldr	s15, [r3]
 8003afa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b02:	d503      	bpl.n	8003b0c <HTS221_HUM_GetHumidity+0x11c>
  {
    *Value = 0.0f;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003b30 <HTS221_HUM_GetHumidity+0x140>
 8003b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1e:	dd02      	ble.n	8003b26 <HTS221_HUM_GetHumidity+0x136>
  {
    *Value = 100.0f;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <HTS221_HUM_GetHumidity+0x144>)
 8003b24:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	42c80000 	.word	0x42c80000
 8003b34:	42c80000 	.word	0x42c80000

08003b38 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e015      	b.n	8003b7a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10b      	bne.n	8003b70 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	331c      	adds	r3, #28
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fafd 	bl	800415e <hts221_power_on_set>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	e004      	b.n	8003b7a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e015      	b.n	8003bc4 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10b      	bne.n	8003bba <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	331c      	adds	r3, #28
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fad8 	bl	800415e <hts221_power_on_set>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb8:	e004      	b.n	8003bc4 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003bd6:	6839      	ldr	r1, [r7, #0]
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f89d 	bl	8003d18 <HTS221_GetOutputDataRate>
 8003bde:	4603      	mov	r3, r0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003bf4:	ed97 0a00 	vldr	s0, [r7]
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f8d1 	bl	8003da0 <HTS221_SetOutputDataRate>
 8003bfe:	4603      	mov	r3, r0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  hts221_axis1bit16_t coeff;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	331c      	adds	r3, #28
 8003c16:	f107 0218 	add.w	r2, r7, #24
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fb68 	bl	80042f2 <hts221_temp_adc_point_0_get>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	e06f      	b.n	8003d0e <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.x0 = (float)coeff.i16bit;
 8003c2e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c3a:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	331c      	adds	r3, #28
 8003c42:	f107 0218 	add.w	r2, r7, #24
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fadc 	bl	8004206 <hts221_temp_deg_point_0_get>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HTS221_TEMP_GetTemperature+0x52>
  {
    return HTS221_ERROR;
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295
 8003c58:	e059      	b.n	8003d0e <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.y0 = (float)coeff.u8bit[0];
 8003c5a:	7e3b      	ldrb	r3, [r7, #24]
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	331c      	adds	r3, #28
 8003c6c:	f107 0218 	add.w	r2, r7, #24
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fb4e 	bl	8004314 <hts221_temp_adc_point_1_get>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HTS221_TEMP_GetTemperature+0x7c>
  {
    return HTS221_ERROR;
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c82:	e044      	b.n	8003d0e <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.x1 = (float)coeff.i16bit;
 8003c84:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c88:	ee07 3a90 	vmov	s15, r3
 8003c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c90:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	331c      	adds	r3, #28
 8003c98:	f107 0218 	add.w	r2, r7, #24
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fadb 	bl	800425a <hts221_temp_deg_point_1_get>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <HTS221_TEMP_GetTemperature+0xa8>
  {
    return HTS221_ERROR;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	e02e      	b.n	8003d0e <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.y1 = (float)coeff.u8bit[0];
 8003cb0:	7e3b      	ldrb	r3, [r7, #24]
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cba:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8003cbe:	f107 031c 	add.w	r3, r7, #28
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f006 fc40 	bl	800a54c <memset>
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	331c      	adds	r3, #28
 8003cd0:	f107 021c 	add.w	r2, r7, #28
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fa1f 	bl	800411a <hts221_temperature_raw_get>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <HTS221_TEMP_GetTemperature+0xe0>
  {
    return HTS221_ERROR;
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce6:	e012      	b.n	8003d0e <HTS221_TEMP_GetTemperature+0x106>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8003ce8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf4:	f107 0308 	add.w	r3, r7, #8
 8003cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f8ab 	bl	8003e58 <Linear_Interpolation>
 8003d02:	eef0 7a40 	vmov.f32	s15, s0
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	331c      	adds	r3, #28
 8003d2a:	f107 020b 	add.w	r2, r7, #11
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 f983 	bl	800403c <hts221_data_rate_get>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d40:	e025      	b.n	8003d8e <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8003d42:	7afb      	ldrb	r3, [r7, #11]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d81d      	bhi.n	8003d84 <HTS221_GetOutputDataRate+0x6c>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <HTS221_GetOutputDataRate+0x38>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d61 	.word	0x08003d61
 8003d54:	08003d6b 	.word	0x08003d6b
 8003d58:	08003d75 	.word	0x08003d75
 8003d5c:	08003d7d 	.word	0x08003d7d
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
      break;
 8003d68:	e010      	b.n	8003d8c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d70:	601a      	str	r2, [r3, #0]
      break;
 8003d72:	e00b      	b.n	8003d8c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <HTS221_GetOutputDataRate+0x80>)
 8003d78:	601a      	str	r2, [r3, #0]
      break;
 8003d7a:	e007      	b.n	8003d8c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4a07      	ldr	r2, [pc, #28]	; (8003d9c <HTS221_GetOutputDataRate+0x84>)
 8003d80:	601a      	str	r2, [r3, #0]
      break;
 8003d82:	e003      	b.n	8003d8c <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	60fb      	str	r3, [r7, #12]
      break;
 8003d8a:	bf00      	nop
  }

  return ret;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40e00000 	.word	0x40e00000
 8003d9c:	41480000 	.word	0x41480000

08003da0 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003dac:	edd7 7a00 	vldr	s15, [r7]
 8003db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dbc:	d801      	bhi.n	8003dc2 <HTS221_SetOutputDataRate+0x22>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e00b      	b.n	8003dda <HTS221_SetOutputDataRate+0x3a>
 8003dc2:	edd7 7a00 	vldr	s15, [r7]
 8003dc6:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd2:	d801      	bhi.n	8003dd8 <HTS221_SetOutputDataRate+0x38>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e000      	b.n	8003dda <HTS221_SetOutputDataRate+0x3a>
 8003dd8:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8003dda:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	331c      	adds	r3, #28
 8003de0:	7bfa      	ldrb	r2, [r7, #15]
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 f902 	bl	8003fee <hts221_data_rate_set>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8003df0:	f04f 33ff 	mov.w	r3, #4294967295
 8003df4:	e000      	b.n	8003df8 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	331c      	adds	r3, #28
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f9a5 	bl	800415e <hts221_power_on_set>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1e:	e017      	b.n	8003e50 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	331c      	adds	r3, #28
 8003e24:	2101      	movs	r1, #1
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f940 	bl	80040ac <hts221_block_data_update_set>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295
 8003e36:	e00b      	b.n	8003e50 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003e38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ffaf 	bl	8003da0 <HTS221_SetOutputDataRate>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003e48:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4c:	e000      	b.n	8003e50 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e74:	edd7 7a00 	vldr	s15, [r7]
 8003e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	ed93 6a00 	vldr	s12, [r3]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003e9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ea0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	edd3 6a02 	vldr	s13, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	edd3 7a00 	vldr	s15, [r3]
 8003eb0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003eb4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003eb8:	eef0 7a66 	vmov.f32	s15, s13
}
 8003ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003eca:	b590      	push	{r4, r7, lr}
 8003ecc:	b087      	sub	sp, #28
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	72fb      	strb	r3, [r7, #11]
 8003eda:	4613      	mov	r3, r2
 8003edc:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10e      	bne.n	8003f08 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	695c      	ldr	r4, [r3, #20]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	7b1b      	ldrb	r3, [r3, #12]
 8003ef2:	b298      	uxth	r0, r3
 8003ef4:	7afb      	ldrb	r3, [r7, #11]
 8003ef6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	b299      	uxth	r1, r3
 8003efe:	893b      	ldrh	r3, [r7, #8]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	47a0      	blx	r4
 8003f04:	4603      	mov	r3, r0
 8003f06:	e00d      	b.n	8003f24 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	695c      	ldr	r4, [r3, #20]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	7b1b      	ldrb	r3, [r3, #12]
 8003f10:	b298      	uxth	r0, r3
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	b299      	uxth	r1, r3
 8003f1c:	893b      	ldrh	r3, [r7, #8]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	47a0      	blx	r4
 8003f22:	4603      	mov	r3, r0
  }
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd90      	pop	{r4, r7, pc}

08003f2c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	461a      	mov	r2, r3
 8003f38:	460b      	mov	r3, r1
 8003f3a:	72fb      	strb	r3, [r7, #11]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10e      	bne.n	8003f6a <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	691c      	ldr	r4, [r3, #16]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	7b1b      	ldrb	r3, [r3, #12]
 8003f54:	b298      	uxth	r0, r3
 8003f56:	7afb      	ldrb	r3, [r7, #11]
 8003f58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	b299      	uxth	r1, r3
 8003f60:	893b      	ldrh	r3, [r7, #8]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	47a0      	blx	r4
 8003f66:	4603      	mov	r3, r0
 8003f68:	e00d      	b.n	8003f86 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	691c      	ldr	r4, [r3, #16]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	7b1b      	ldrb	r3, [r3, #12]
 8003f72:	b298      	uxth	r0, r3
 8003f74:	7afb      	ldrb	r3, [r7, #11]
 8003f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	b299      	uxth	r1, r3
 8003f7e:	893b      	ldrh	r3, [r7, #8]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	47a0      	blx	r4
 8003f84:	4603      	mov	r3, r0
  }
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd90      	pop	{r4, r7, pc}

08003f8e <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 8003f8e:	b590      	push	{r4, r7, lr}
 8003f90:	b087      	sub	sp, #28
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	72fb      	strb	r3, [r7, #11]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685c      	ldr	r4, [r3, #4]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6898      	ldr	r0, [r3, #8]
 8003faa:	893b      	ldrh	r3, [r7, #8]
 8003fac:	7af9      	ldrb	r1, [r7, #11]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	47a0      	blx	r4
 8003fb2:	6178      	str	r0, [r7, #20]
  return ret;
 8003fb4:	697b      	ldr	r3, [r7, #20]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd90      	pop	{r4, r7, pc}

08003fbe <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8003fbe:	b590      	push	{r4, r7, lr}
 8003fc0:	b087      	sub	sp, #28
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	460b      	mov	r3, r1
 8003fcc:	72fb      	strb	r3, [r7, #11]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681c      	ldr	r4, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6898      	ldr	r0, [r3, #8]
 8003fda:	893b      	ldrh	r3, [r7, #8]
 8003fdc:	7af9      	ldrb	r1, [r7, #11]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	47a0      	blx	r4
 8003fe2:	6178      	str	r0, [r7, #20]
  return ret;
 8003fe4:	697b      	ldr	r3, [r7, #20]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd90      	pop	{r4, r7, pc}

08003fee <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003ffa:	f107 0208 	add.w	r2, r7, #8
 8003ffe:	2301      	movs	r3, #1
 8004000:	2120      	movs	r1, #32
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff ffc3 	bl	8003f8e <hts221_read_reg>
 8004008:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10f      	bne.n	8004030 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	b2da      	uxtb	r2, r3
 8004018:	7a3b      	ldrb	r3, [r7, #8]
 800401a:	f362 0301 	bfi	r3, r2, #0, #2
 800401e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8004020:	f107 0208 	add.w	r2, r7, #8
 8004024:	2301      	movs	r3, #1
 8004026:	2120      	movs	r1, #32
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ffc8 	bl	8003fbe <hts221_write_reg>
 800402e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004030:	68fb      	ldr	r3, [r7, #12]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8004046:	f107 0208 	add.w	r2, r7, #8
 800404a:	2301      	movs	r3, #1
 800404c:	2120      	movs	r1, #32
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff ff9d 	bl	8003f8e <hts221_read_reg>
 8004054:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8004056:	7a3b      	ldrb	r3, [r7, #8]
 8004058:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b03      	cmp	r3, #3
 8004060:	d81a      	bhi.n	8004098 <hts221_data_rate_get+0x5c>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <hts221_data_rate_get+0x2c>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	08004079 	.word	0x08004079
 800406c:	08004081 	.word	0x08004081
 8004070:	08004089 	.word	0x08004089
 8004074:	08004091 	.word	0x08004091
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2200      	movs	r2, #0
 800407c:	701a      	strb	r2, [r3, #0]
      break;
 800407e:	e00f      	b.n	80040a0 <hts221_data_rate_get+0x64>
    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2201      	movs	r2, #1
 8004084:	701a      	strb	r2, [r3, #0]
      break;
 8004086:	e00b      	b.n	80040a0 <hts221_data_rate_get+0x64>
    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2202      	movs	r2, #2
 800408c:	701a      	strb	r2, [r3, #0]
      break;
 800408e:	e007      	b.n	80040a0 <hts221_data_rate_get+0x64>
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2203      	movs	r2, #3
 8004094:	701a      	strb	r2, [r3, #0]
      break;
 8004096:	e003      	b.n	80040a0 <hts221_data_rate_get+0x64>
    default:
      *val = HTS221_ODR_ND;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2204      	movs	r2, #4
 800409c:	701a      	strb	r2, [r3, #0]
      break;
 800409e:	bf00      	nop
  }

  return ret;
 80040a0:	68fb      	ldr	r3, [r7, #12]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop

080040ac <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80040b8:	f107 0208 	add.w	r2, r7, #8
 80040bc:	2301      	movs	r3, #1
 80040be:	2120      	movs	r1, #32
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ff64 	bl	8003f8e <hts221_read_reg>
 80040c6:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10f      	bne.n	80040ee <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	7a3b      	ldrb	r3, [r7, #8]
 80040d8:	f362 0382 	bfi	r3, r2, #2, #1
 80040dc:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80040de:	f107 0208 	add.w	r2, r7, #8
 80040e2:	2301      	movs	r3, #1
 80040e4:	2120      	movs	r1, #32
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff ff69 	bl	8003fbe <hts221_write_reg>
 80040ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040ee:	68fb      	ldr	r3, [r7, #12]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8004102:	2302      	movs	r3, #2
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	2128      	movs	r1, #40	; 0x28
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ff40 	bl	8003f8e <hts221_read_reg>
 800410e:	60f8      	str	r0, [r7, #12]
  return ret;
 8004110:	68fb      	ldr	r3, [r7, #12]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8004124:	2302      	movs	r3, #2
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	212a      	movs	r1, #42	; 0x2a
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff ff2f 	bl	8003f8e <hts221_read_reg>
 8004130:	60f8      	str	r0, [r7, #12]
  return ret;
 8004132:	68fb      	ldr	r3, [r7, #12]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8004146:	2301      	movs	r3, #1
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	210f      	movs	r1, #15
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff ff1e 	bl	8003f8e <hts221_read_reg>
 8004152:	60f8      	str	r0, [r7, #12]
  return ret;
 8004154:	68fb      	ldr	r3, [r7, #12]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	460b      	mov	r3, r1
 8004168:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800416a:	f107 0208 	add.w	r2, r7, #8
 800416e:	2301      	movs	r3, #1
 8004170:	2120      	movs	r1, #32
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ff0b 	bl	8003f8e <hts221_read_reg>
 8004178:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10f      	bne.n	80041a0 <hts221_power_on_set+0x42>
    reg.pd = val;
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	b2da      	uxtb	r2, r3
 8004188:	7a3b      	ldrb	r3, [r7, #8]
 800418a:	f362 13c7 	bfi	r3, r2, #7, #1
 800418e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8004190:	f107 0208 	add.w	r2, r7, #8
 8004194:	2301      	movs	r3, #1
 8004196:	2120      	movs	r1, #32
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff ff10 	bl	8003fbe <hts221_write_reg>
 800419e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80041a0:	68fb      	ldr	r3, [r7, #12]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 80041b4:	2301      	movs	r3, #1
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	2130      	movs	r1, #48	; 0x30
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fee7 	bl	8003f8e <hts221_read_reg>
 80041c0:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	701a      	strb	r2, [r3, #0]

  return ret;
 80041ce:	68fb      	ldr	r3, [r7, #12]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 80041e2:	2301      	movs	r3, #1
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	2131      	movs	r1, #49	; 0x31
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff fed0 	bl	8003f8e <hts221_read_reg>
 80041ee:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	701a      	strb	r2, [r3, #0]

  return ret;
 80041fc:	68fb      	ldr	r3, [r7, #12]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8004210:	f107 020f 	add.w	r2, r7, #15
 8004214:	2301      	movs	r3, #1
 8004216:	2132      	movs	r1, #50	; 0x32
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff feb8 	bl	8003f8e <hts221_read_reg>
 800421e:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d114      	bne.n	8004250 <hts221_temp_deg_point_0_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8004226:	f107 0210 	add.w	r2, r7, #16
 800422a:	2301      	movs	r3, #1
 800422c:	2135      	movs	r1, #53	; 0x35
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff fead 	bl	8003f8e <hts221_read_reg>
 8004234:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8004236:	7c3b      	ldrb	r3, [r7, #16]
 8004238:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800423c:	b2db      	uxtb	r3, r3
 800423e:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	7bfa      	ldrb	r2, [r7, #15]
 8004246:	4413      	add	r3, r2
 8004248:	10db      	asrs	r3, r3, #3
 800424a:	b2da      	uxtb	r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004250:	697b      	ldr	r3, [r7, #20]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8004264:	f107 020f 	add.w	r2, r7, #15
 8004268:	2301      	movs	r3, #1
 800426a:	2133      	movs	r1, #51	; 0x33
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff fe8e 	bl	8003f8e <hts221_read_reg>
 8004272:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d114      	bne.n	80042a4 <hts221_temp_deg_point_1_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 800427a:	f107 0210 	add.w	r2, r7, #16
 800427e:	2301      	movs	r3, #1
 8004280:	2135      	movs	r1, #53	; 0x35
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fe83 	bl	8003f8e <hts221_read_reg>
 8004288:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 800428a:	7c3b      	ldrb	r3, [r7, #16]
 800428c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004290:	b2db      	uxtb	r3, r3
 8004292:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	4413      	add	r3, r2
 800429c:	10db      	asrs	r3, r3, #3
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80042a4:	697b      	ldr	r3, [r7, #20]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 80042b8:	2302      	movs	r3, #2
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	2136      	movs	r1, #54	; 0x36
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff fe65 	bl	8003f8e <hts221_read_reg>
 80042c4:	60f8      	str	r0, [r7, #12]
  return ret;
 80042c6:	68fb      	ldr	r3, [r7, #12]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 80042da:	2302      	movs	r3, #2
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	213a      	movs	r1, #58	; 0x3a
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fe54 	bl	8003f8e <hts221_read_reg>
 80042e6:	60f8      	str	r0, [r7, #12]
  return ret;
 80042e8:	68fb      	ldr	r3, [r7, #12]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 80042fc:	2302      	movs	r3, #2
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	213c      	movs	r1, #60	; 0x3c
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fe43 	bl	8003f8e <hts221_read_reg>
 8004308:	60f8      	str	r0, [r7, #12]
  return ret;
 800430a:	68fb      	ldr	r3, [r7, #12]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 800431e:	2302      	movs	r3, #2
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	213e      	movs	r1, #62	; 0x3e
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff fe32 	bl	8003f8e <hts221_read_reg>
 800432a:	60f8      	str	r0, [r7, #12]
  return ret;
 800432c:	68fb      	ldr	r3, [r7, #12]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d103      	bne.n	8004354 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 800434c:	f04f 33ff 	mov.w	r3, #4294967295
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	e04d      	b.n	80043f0 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	7b1a      	ldrb	r2, [r3, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	699a      	ldr	r2, [r3, #24]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <LPS22HB_RegisterBusIO+0xc4>)
 8004390:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <LPS22HB_RegisterBusIO+0xc8>)
 8004396:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	e020      	b.n	80043f0 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4798      	blx	r3
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e016      	b.n	80043f0 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d112      	bne.n	80043f0 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80043d4:	2301      	movs	r3, #1
 80043d6:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 80043d8:	7afb      	ldrb	r3, [r7, #11]
 80043da:	461a      	mov	r2, r3
 80043dc:	2110      	movs	r1, #16
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f9df 	bl	80047a2 <LPS22HB_Write_Reg>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 80043ea:	f04f 33ff 	mov.w	r3, #4294967295
 80043ee:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80043f0:	68fb      	ldr	r3, [r7, #12]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	08004a63 	.word	0x08004a63
 8004400:	08004ae9 	.word	0x08004ae9

08004404 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004412:	2b00      	cmp	r3, #0
 8004414:	d108      	bne.n	8004428 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 faca 	bl	80049b0 <LPS22HB_Initialize>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	e004      	b.n	8004432 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004448:	2b01      	cmp	r3, #1
 800444a:	d111      	bne.n	8004470 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f877 	bl	8004540 <LPS22HB_PRESS_Disable>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8004458:	f04f 33ff 	mov.w	r3, #4294967295
 800445c:	e00d      	b.n	800447a <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f918 	bl	8004694 <LPS22HB_TEMP_Disable>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 800446a:	f04f 33ff 	mov.w	r3, #4294967295
 800446e:	e004      	b.n	800447a <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	331c      	adds	r3, #28
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fca6 	bl	8004de4 <lps22hb_device_id_get>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 800449e:	f04f 33ff 	mov.w	r3, #4294967295
 80044a2:	e000      	b.n	80044a6 <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2200      	movs	r2, #0
 80044be:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2201      	movs	r2, #1
 80044c4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2200      	movs	r2, #0
 80044d0:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	4a05      	ldr	r2, [pc, #20]	; (80044f4 <LPS22HB_GetCapabilities+0x44>)
 80044de:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4a04      	ldr	r2, [pc, #16]	; (80044f4 <LPS22HB_GetCapabilities+0x44>)
 80044e4:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	42960000 	.word	0x42960000

080044f8 <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	e014      	b.n	8004538 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f103 021c 	add.w	r2, r3, #28
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800451a:	4619      	mov	r1, r3
 800451c:	4610      	mov	r0, r2
 800451e:	f000 fbd5 	bl	8004ccc <lps22hb_data_rate_set>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8004528:	f04f 33ff 	mov.w	r3, #4294967295
 800452c:	e004      	b.n	8004538 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	e024      	b.n	80045a0 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800455c:	2b00      	cmp	r3, #0
 800455e:	d11a      	bne.n	8004596 <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f103 021c 	add.w	r2, r3, #28
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	332b      	adds	r3, #43	; 0x2b
 800456a:	4619      	mov	r1, r3
 800456c:	4610      	mov	r0, r2
 800456e:	f000 fbd3 	bl	8004d18 <lps22hb_data_rate_get>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8004578:	f04f 33ff 	mov.w	r3, #4294967295
 800457c:	e010      	b.n	80045a0 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	331c      	adds	r3, #28
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fba1 	bl	8004ccc <lps22hb_data_rate_set>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8004590:	f04f 33ff 	mov.w	r3, #4294967295
 8004594:	e004      	b.n	80045a0 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80045b2:	6839      	ldr	r1, [r7, #0]
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f90f 	bl	80047d8 <LPS22HB_GetOutputDataRate>
 80045ba:	4603      	mov	r3, r0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d106      	bne.n	80045e8 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 80045da:	ed97 0a00 	vldr	s0, [r7]
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f94e 	bl	8004880 <LPS22HB_SetOutputDataRate_When_Enabled>
 80045e4:	4603      	mov	r3, r0
 80045e6:	e005      	b.n	80045f4 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 80045e8:	ed97 0a00 	vldr	s0, [r7]
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f99f 	bl	8004930 <LPS22HB_SetOutputDataRate_When_Disabled>
 80045f2:	4603      	mov	r3, r0
  }
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004606:	f107 030c 	add.w	r3, r7, #12
 800460a:	2204      	movs	r2, #4
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f005 ff9c 	bl	800a54c <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	331c      	adds	r3, #28
 8004618:	f107 020c 	add.w	r2, r7, #12
 800461c:	4611      	mov	r1, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fbbe 	bl	8004da0 <lps22hb_pressure_raw_get>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 800462a:	f04f 33ff 	mov.w	r3, #4294967295
 800462e:	e009      	b.n	8004644 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 facc 	bl	8004bd0 <lps22hb_from_lsb_to_hpa>
 8004638:	eef0 7a40 	vmov.f32	s15, s0
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e014      	b.n	800468c <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f103 021c 	add.w	r2, r3, #28
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f000 fb2b 	bl	8004ccc <lps22hb_data_rate_set>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 800467c:	f04f 33ff 	mov.w	r3, #4294967295
 8004680:	e004      	b.n	800468c <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e024      	b.n	80046f4 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d11a      	bne.n	80046ea <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f103 021c 	add.w	r2, r3, #28
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	332b      	adds	r3, #43	; 0x2b
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f000 fb29 	bl	8004d18 <lps22hb_data_rate_get>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 80046cc:	f04f 33ff 	mov.w	r3, #4294967295
 80046d0:	e010      	b.n	80046f4 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	331c      	adds	r3, #28
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 faf7 	bl	8004ccc <lps22hb_data_rate_set>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 80046e4:	f04f 33ff 	mov.w	r3, #4294967295
 80046e8:	e004      	b.n	80046f4 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f865 	bl	80047d8 <LPS22HB_GetOutputDataRate>
 800470e:	4603      	mov	r3, r0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800472a:	2b01      	cmp	r3, #1
 800472c:	d106      	bne.n	800473c <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 800472e:	ed97 0a00 	vldr	s0, [r7]
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f8a4 	bl	8004880 <LPS22HB_SetOutputDataRate_When_Enabled>
 8004738:	4603      	mov	r3, r0
 800473a:	e005      	b.n	8004748 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 800473c:	ed97 0a00 	vldr	s0, [r7]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f8f5 	bl	8004930 <LPS22HB_SetOutputDataRate_When_Disabled>
 8004746:	4603      	mov	r3, r0
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800475a:	f107 030c 	add.w	r3, r7, #12
 800475e:	2202      	movs	r2, #2
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f005 fef2 	bl	800a54c <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	331c      	adds	r3, #28
 800476c:	f107 020c 	add.w	r2, r7, #12
 8004770:	4611      	mov	r1, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fb25 	bl	8004dc2 <lps22hb_temperature_raw_get>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 800477e:	f04f 33ff 	mov.w	r3, #4294967295
 8004782:	e00a      	b.n	800479a <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8004784:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fa39 	bl	8004c00 <lps22hb_from_lsb_to_degc>
 800478e:	eef0 7a40 	vmov.f32	s15, s0
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	460b      	mov	r3, r1
 80047ac:	70fb      	strb	r3, [r7, #3]
 80047ae:	4613      	mov	r3, r2
 80047b0:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f103 001c 	add.w	r0, r3, #28
 80047b8:	1cba      	adds	r2, r7, #2
 80047ba:	78f9      	ldrb	r1, [r7, #3]
 80047bc:	2301      	movs	r3, #1
 80047be:	f000 f9ee 	bl	8004b9e <lps22hb_write_reg>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 80047c8:	f04f 33ff 	mov.w	r3, #4294967295
 80047cc:	e000      	b.n	80047d0 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	331c      	adds	r3, #28
 80047ea:	f107 020b 	add.w	r2, r7, #11
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fa91 	bl	8004d18 <lps22hb_data_rate_get>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 80047fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004800:	e031      	b.n	8004866 <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8004802:	7afb      	ldrb	r3, [r7, #11]
 8004804:	2b05      	cmp	r3, #5
 8004806:	d829      	bhi.n	800485c <LPS22HB_GetOutputDataRate+0x84>
 8004808:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <LPS22HB_GetOutputDataRate+0x38>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004829 	.word	0x08004829
 8004814:	08004833 	.word	0x08004833
 8004818:	0800483d 	.word	0x0800483d
 800481c:	08004845 	.word	0x08004845
 8004820:	0800484d 	.word	0x0800484d
 8004824:	08004855 	.word	0x08004855
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
      break;
 8004830:	e018      	b.n	8004864 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004838:	601a      	str	r2, [r3, #0]
      break;
 800483a:	e013      	b.n	8004864 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	4a0c      	ldr	r2, [pc, #48]	; (8004870 <LPS22HB_GetOutputDataRate+0x98>)
 8004840:	601a      	str	r2, [r3, #0]
      break;
 8004842:	e00f      	b.n	8004864 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	4a0b      	ldr	r2, [pc, #44]	; (8004874 <LPS22HB_GetOutputDataRate+0x9c>)
 8004848:	601a      	str	r2, [r3, #0]
      break;
 800484a:	e00b      	b.n	8004864 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	4a0a      	ldr	r2, [pc, #40]	; (8004878 <LPS22HB_GetOutputDataRate+0xa0>)
 8004850:	601a      	str	r2, [r3, #0]
      break;
 8004852:	e007      	b.n	8004864 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	4a09      	ldr	r2, [pc, #36]	; (800487c <LPS22HB_GetOutputDataRate+0xa4>)
 8004858:	601a      	str	r2, [r3, #0]
      break;
 800485a:	e003      	b.n	8004864 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 800485c:	f04f 33ff 	mov.w	r3, #4294967295
 8004860:	60fb      	str	r3, [r7, #12]
      break;
 8004862:	bf00      	nop
  }

  return ret;
 8004864:	68fb      	ldr	r3, [r7, #12]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	41200000 	.word	0x41200000
 8004874:	41c80000 	.word	0x41c80000
 8004878:	42480000 	.word	0x42480000
 800487c:	42960000 	.word	0x42960000

08004880 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 800488c:	edd7 7a00 	vldr	s15, [r7]
 8004890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489c:	d801      	bhi.n	80048a2 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 800489e:	2301      	movs	r3, #1
 80048a0:	e021      	b.n	80048e6 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80048a2:	edd7 7a00 	vldr	s15, [r7]
 80048a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80048aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b2:	d801      	bhi.n	80048b8 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e016      	b.n	80048e6 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80048b8:	edd7 7a00 	vldr	s15, [r7]
 80048bc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80048c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c8:	d801      	bhi.n	80048ce <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 80048ca:	2303      	movs	r3, #3
 80048cc:	e00b      	b.n	80048e6 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80048ce:	edd7 7a00 	vldr	s15, [r7]
 80048d2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800492c <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 80048d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048de:	d801      	bhi.n	80048e4 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 80048e0:	2304      	movs	r3, #4
 80048e2:	e000      	b.n	80048e6 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80048e4:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80048e6:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	331c      	adds	r3, #28
 80048ec:	7bfa      	ldrb	r2, [r7, #15]
 80048ee:	4611      	mov	r1, r2
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 f9eb 	bl	8004ccc <lps22hb_data_rate_set>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 80048fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004900:	e00f      	b.n	8004922 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f103 021c 	add.w	r2, r3, #28
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	332b      	adds	r3, #43	; 0x2b
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f000 fa02 	bl	8004d18 <lps22hb_data_rate_get>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 800491a:	f04f 33ff 	mov.w	r3, #4294967295
 800491e:	e000      	b.n	8004922 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	42480000 	.word	0x42480000

08004930 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 800493c:	edd7 7a00 	vldr	s15, [r7]
 8004940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494c:	d801      	bhi.n	8004952 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 800494e:	2301      	movs	r3, #1
 8004950:	e021      	b.n	8004996 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004952:	edd7 7a00 	vldr	s15, [r7]
 8004956:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800495a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800495e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004962:	d801      	bhi.n	8004968 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8004964:	2302      	movs	r3, #2
 8004966:	e016      	b.n	8004996 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004968:	edd7 7a00 	vldr	s15, [r7]
 800496c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004978:	d801      	bhi.n	800497e <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 800497a:	2303      	movs	r3, #3
 800497c:	e00b      	b.n	8004996 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 800497e:	edd7 7a00 	vldr	s15, [r7]
 8004982:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80049ac <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 8004986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800498a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498e:	d801      	bhi.n	8004994 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004990:	2304      	movs	r3, #4
 8004992:	e000      	b.n	8004996 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004994:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	42480000 	.word	0x42480000

080049b0 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	331c      	adds	r3, #28
 80049bc:	2101      	movs	r1, #1
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fa21 	bl	8004e06 <lps22hb_low_power_set>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 80049ca:	f04f 33ff 	mov.w	r3, #4294967295
 80049ce:	e044      	b.n	8004a5a <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	331c      	adds	r3, #28
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f978 	bl	8004ccc <lps22hb_data_rate_set>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 80049e2:	f04f 33ff 	mov.w	r3, #4294967295
 80049e6:	e038      	b.n	8004a5a <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	331c      	adds	r3, #28
 80049ec:	2102      	movs	r1, #2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 f946 	bl	8004c80 <lps22hb_low_pass_filter_mode_set>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 80049fa:	f04f 33ff 	mov.w	r3, #4294967295
 80049fe:	e02c      	b.n	8004a5a <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	331c      	adds	r3, #28
 8004a04:	2101      	movs	r1, #1
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f914 	bl	8004c34 <lps22hb_block_data_update_set>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8004a12:	f04f 33ff 	mov.w	r3, #4294967295
 8004a16:	e020      	b.n	8004a5a <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	331c      	adds	r3, #28
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fa13 	bl	8004e52 <lps22hb_auto_add_inc_set>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00e      	beq.n	8004a50 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004a32:	f04f 33ff 	mov.w	r3, #4294967295
 8004a36:	e010      	b.n	8004a5a <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	331c      	adds	r3, #28
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fa07 	bl	8004e52 <lps22hb_auto_add_inc_set>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4e:	e004      	b.n	8004a5a <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2203      	movs	r2, #3
 8004a54:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a62:	b590      	push	{r4, r7, lr}
 8004a64:	b089      	sub	sp, #36	; 0x24
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	460b      	mov	r3, r1
 8004a70:	72fb      	strb	r3, [r7, #11]
 8004a72:	4613      	mov	r3, r2
 8004a74:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d121      	bne.n	8004aca <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	83fb      	strh	r3, [r7, #30]
 8004a8a:	e018      	b.n	8004abe <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	695c      	ldr	r4, [r3, #20]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	7b1b      	ldrb	r3, [r3, #12]
 8004a94:	b298      	uxth	r0, r3
 8004a96:	7afb      	ldrb	r3, [r7, #11]
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	8bfb      	ldrh	r3, [r7, #30]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	b299      	uxth	r1, r3
 8004aa0:	8bfb      	ldrh	r3, [r7, #30]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	441a      	add	r2, r3
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	47a0      	blx	r4
 8004aaa:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab6:	e013      	b.n	8004ae0 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004ab8:	8bfb      	ldrh	r3, [r7, #30]
 8004aba:	3301      	adds	r3, #1
 8004abc:	83fb      	strh	r3, [r7, #30]
 8004abe:	8bfa      	ldrh	r2, [r7, #30]
 8004ac0:	893b      	ldrh	r3, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d3e2      	bcc.n	8004a8c <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	e00a      	b.n	8004ae0 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	695c      	ldr	r4, [r3, #20]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	7b1b      	ldrb	r3, [r3, #12]
 8004ad2:	b298      	uxth	r0, r3
 8004ad4:	7afb      	ldrb	r3, [r7, #11]
 8004ad6:	b299      	uxth	r1, r3
 8004ad8:	893b      	ldrh	r3, [r7, #8]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	47a0      	blx	r4
 8004ade:	4603      	mov	r3, r0
  }
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3724      	adds	r7, #36	; 0x24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd90      	pop	{r4, r7, pc}

08004ae8 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ae8:	b590      	push	{r4, r7, lr}
 8004aea:	b089      	sub	sp, #36	; 0x24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	461a      	mov	r2, r3
 8004af4:	460b      	mov	r3, r1
 8004af6:	72fb      	strb	r3, [r7, #11]
 8004af8:	4613      	mov	r3, r2
 8004afa:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d121      	bne.n	8004b50 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	83fb      	strh	r3, [r7, #30]
 8004b10:	e018      	b.n	8004b44 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	691c      	ldr	r4, [r3, #16]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	7b1b      	ldrb	r3, [r3, #12]
 8004b1a:	b298      	uxth	r0, r3
 8004b1c:	7afb      	ldrb	r3, [r7, #11]
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	8bfb      	ldrh	r3, [r7, #30]
 8004b22:	4413      	add	r3, r2
 8004b24:	b299      	uxth	r1, r3
 8004b26:	8bfb      	ldrh	r3, [r7, #30]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	441a      	add	r2, r3
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	47a0      	blx	r4
 8004b30:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004b38:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3c:	e013      	b.n	8004b66 <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004b3e:	8bfb      	ldrh	r3, [r7, #30]
 8004b40:	3301      	adds	r3, #1
 8004b42:	83fb      	strh	r3, [r7, #30]
 8004b44:	8bfa      	ldrh	r2, [r7, #30]
 8004b46:	893b      	ldrh	r3, [r7, #8]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d3e2      	bcc.n	8004b12 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	e00a      	b.n	8004b66 <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	691c      	ldr	r4, [r3, #16]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	7b1b      	ldrb	r3, [r3, #12]
 8004b58:	b298      	uxth	r0, r3
 8004b5a:	7afb      	ldrb	r3, [r7, #11]
 8004b5c:	b299      	uxth	r1, r3
 8004b5e:	893b      	ldrh	r3, [r7, #8]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	47a0      	blx	r4
 8004b64:	4603      	mov	r3, r0
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3724      	adds	r7, #36	; 0x24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd90      	pop	{r4, r7, pc}

08004b6e <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004b6e:	b590      	push	{r4, r7, lr}
 8004b70:	b087      	sub	sp, #28
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	72fb      	strb	r3, [r7, #11]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685c      	ldr	r4, [r3, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6898      	ldr	r0, [r3, #8]
 8004b8a:	893b      	ldrh	r3, [r7, #8]
 8004b8c:	7af9      	ldrb	r1, [r7, #11]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	47a0      	blx	r4
 8004b92:	6178      	str	r0, [r7, #20]
  return ret;
 8004b94:	697b      	ldr	r3, [r7, #20]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd90      	pop	{r4, r7, pc}

08004b9e <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004b9e:	b590      	push	{r4, r7, lr}
 8004ba0:	b087      	sub	sp, #28
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	460b      	mov	r3, r1
 8004bac:	72fb      	strb	r3, [r7, #11]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681c      	ldr	r4, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6898      	ldr	r0, [r3, #8]
 8004bba:	893b      	ldrh	r3, [r7, #8]
 8004bbc:	7af9      	ldrb	r1, [r7, #11]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	47a0      	blx	r4
 8004bc2:	6178      	str	r0, [r7, #20]
  return ret;
 8004bc4:	697b      	ldr	r3, [r7, #20]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd90      	pop	{r4, r7, pc}
	...

08004bd0 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 4096.0f );
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004be2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004bfc <lps22hb_from_lsb_to_hpa+0x2c>
 8004be6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004bea:	eef0 7a66 	vmov.f32	s15, s13
}
 8004bee:	eeb0 0a67 	vmov.f32	s0, s15
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	45800000 	.word	0x45800000

08004c00 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 8004c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c16:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004c30 <lps22hb_from_lsb_to_degc+0x30>
 8004c1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c1e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004c22:	eeb0 0a67 	vmov.f32	s0, s15
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	42c80000 	.word	0x42c80000

08004c34 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004c40:	f107 0208 	add.w	r2, r7, #8
 8004c44:	2301      	movs	r3, #1
 8004c46:	2110      	movs	r1, #16
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ff90 	bl	8004b6e <lps22hb_read_reg>
 8004c4e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10f      	bne.n	8004c76 <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 8004c56:	78fb      	ldrb	r3, [r7, #3]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	7a3b      	ldrb	r3, [r7, #8]
 8004c60:	f362 0341 	bfi	r3, r2, #1, #1
 8004c64:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004c66:	f107 0208 	add.w	r2, r7, #8
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	2110      	movs	r1, #16
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff ff95 	bl	8004b9e <lps22hb_write_reg>
 8004c74:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004c76:	68fb      	ldr	r3, [r7, #12]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004c8c:	f107 0208 	add.w	r2, r7, #8
 8004c90:	2301      	movs	r3, #1
 8004c92:	2110      	movs	r1, #16
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff ff6a 	bl	8004b6e <lps22hb_read_reg>
 8004c9a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10f      	bne.n	8004cc2 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	7a3b      	ldrb	r3, [r7, #8]
 8004cac:	f362 0383 	bfi	r3, r2, #2, #2
 8004cb0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004cb2:	f107 0208 	add.w	r2, r7, #8
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	2110      	movs	r1, #16
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff ff6f 	bl	8004b9e <lps22hb_write_reg>
 8004cc0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004cd8:	f107 0208 	add.w	r2, r7, #8
 8004cdc:	2301      	movs	r3, #1
 8004cde:	2110      	movs	r1, #16
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff ff44 	bl	8004b6e <lps22hb_read_reg>
 8004ce6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10f      	bne.n	8004d0e <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	7a3b      	ldrb	r3, [r7, #8]
 8004cf8:	f362 1306 	bfi	r3, r2, #4, #3
 8004cfc:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004cfe:	f107 0208 	add.w	r2, r7, #8
 8004d02:	2301      	movs	r3, #1
 8004d04:	2110      	movs	r1, #16
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff ff49 	bl	8004b9e <lps22hb_write_reg>
 8004d0c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004d22:	f107 0208 	add.w	r2, r7, #8
 8004d26:	2301      	movs	r3, #1
 8004d28:	2110      	movs	r1, #16
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ff1f 	bl	8004b6e <lps22hb_read_reg>
 8004d30:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg1.odr){
 8004d32:	7a3b      	ldrb	r3, [r7, #8]
 8004d34:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b05      	cmp	r3, #5
 8004d3c:	d826      	bhi.n	8004d8c <lps22hb_data_rate_get+0x74>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <lps22hb_data_rate_get+0x2c>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d5d 	.word	0x08004d5d
 8004d48:	08004d65 	.word	0x08004d65
 8004d4c:	08004d6d 	.word	0x08004d6d
 8004d50:	08004d75 	.word	0x08004d75
 8004d54:	08004d7d 	.word	0x08004d7d
 8004d58:	08004d85 	.word	0x08004d85
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
      break;
 8004d62:	e017      	b.n	8004d94 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2201      	movs	r2, #1
 8004d68:	701a      	strb	r2, [r3, #0]
      break;
 8004d6a:	e013      	b.n	8004d94 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	701a      	strb	r2, [r3, #0]
      break;
 8004d72:	e00f      	b.n	8004d94 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2203      	movs	r2, #3
 8004d78:	701a      	strb	r2, [r3, #0]
      break;
 8004d7a:	e00b      	b.n	8004d94 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2204      	movs	r2, #4
 8004d80:	701a      	strb	r2, [r3, #0]
      break;
 8004d82:	e007      	b.n	8004d94 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2205      	movs	r2, #5
 8004d88:	701a      	strb	r2, [r3, #0]
      break;
 8004d8a:	e003      	b.n	8004d94 <lps22hb_data_rate_get+0x7c>
    default:
      *val = LPS22HB_ODR_1_Hz;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
      break;
 8004d92:	bf00      	nop
  }

  return ret;
 8004d94:	68fb      	ldr	r3, [r7, #12]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop

08004da0 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 8004daa:	2303      	movs	r3, #3
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	2128      	movs	r1, #40	; 0x28
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff fedc 	bl	8004b6e <lps22hb_read_reg>
 8004db6:	60f8      	str	r0, [r7, #12]
  return ret;
 8004db8:	68fb      	ldr	r3, [r7, #12]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
 8004dcc:	2302      	movs	r3, #2
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	212b      	movs	r1, #43	; 0x2b
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fecb 	bl	8004b6e <lps22hb_read_reg>
 8004dd8:	60f8      	str	r0, [r7, #12]
  return ret;
 8004dda:	68fb      	ldr	r3, [r7, #12]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 8004dee:	2301      	movs	r3, #1
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	210f      	movs	r1, #15
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff feba 	bl	8004b6e <lps22hb_read_reg>
 8004dfa:	60f8      	str	r0, [r7, #12]
  return ret;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8004e12:	f107 0208 	add.w	r2, r7, #8
 8004e16:	2301      	movs	r3, #1
 8004e18:	211a      	movs	r1, #26
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fea7 	bl	8004b6e <lps22hb_read_reg>
 8004e20:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10f      	bne.n	8004e48 <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	7a3b      	ldrb	r3, [r7, #8]
 8004e32:	f362 0300 	bfi	r3, r2, #0, #1
 8004e36:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8004e38:	f107 0208 	add.w	r2, r7, #8
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	211a      	movs	r1, #26
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff feac 	bl	8004b9e <lps22hb_write_reg>
 8004e46:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004e48:	68fb      	ldr	r3, [r7, #12]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004e5e:	f107 0208 	add.w	r2, r7, #8
 8004e62:	2301      	movs	r3, #1
 8004e64:	2111      	movs	r1, #17
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fe81 	bl	8004b6e <lps22hb_read_reg>
 8004e6c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10f      	bne.n	8004e94 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	7a3b      	ldrb	r3, [r7, #8]
 8004e7e:	f362 1304 	bfi	r3, r2, #4, #1
 8004e82:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004e84:	f107 0208 	add.w	r2, r7, #8
 8004e88:	2301      	movs	r3, #1
 8004e8a:	2111      	movs	r1, #17
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff fe86 	bl	8004b9e <lps22hb_write_reg>
 8004e92:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004e94:	68fb      	ldr	r3, [r7, #12]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	; 0x28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <IKS01A2_ENV_SENSOR_Init+0x22>
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d032      	beq.n	8004f26 <IKS01A2_ENV_SENSOR_Init+0x86>
 8004ec0:	e063      	b.n	8004f8a <IKS01A2_ENV_SENSOR_Init+0xea>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8004ec2:	6838      	ldr	r0, [r7, #0]
 8004ec4:	f000 f8f0 	bl	80050a8 <HTS221_0_Probe>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <IKS01A2_ENV_SENSOR_Init+0x34>
      {
        return BSP_ERROR_NO_INIT;
 8004ece:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed2:	e098      	b.n	8005006 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004ed4:	4a4e      	ldr	r2, [pc, #312]	; (8005010 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	494d      	ldr	r1, [pc, #308]	; (8005014 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004ee6:	f107 0108 	add.w	r1, r7, #8
 8004eea:	4610      	mov	r0, r2
 8004eec:	4798      	blx	r3
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <IKS01A2_ENV_SENSOR_Init+0x5a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004ef4:	f06f 0306 	mvn.w	r3, #6
 8004ef8:	e085      	b.n	8005006 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 8004efa:	7a3b      	ldrb	r3, [r7, #8]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d103      	bne.n	8004f08 <IKS01A2_ENV_SENSOR_Init+0x68>
      {
        component_functions |= ENV_TEMPERATURE;
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8004f08:	7abb      	ldrb	r3, [r7, #10]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d103      	bne.n	8004f16 <IKS01A2_ENV_SENSOR_Init+0x76>
      {
        component_functions |= ENV_HUMIDITY;
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	f043 0304 	orr.w	r3, r3, #4
 8004f14:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8004f16:	7a7b      	ldrb	r3, [r7, #9]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d13a      	bne.n	8004f92 <IKS01A2_ENV_SENSOR_Init+0xf2>
      {
        component_functions |= ENV_PRESSURE;
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f043 0302 	orr.w	r3, r3, #2
 8004f22:	61bb      	str	r3, [r7, #24]
      }
      break;
 8004f24:	e035      	b.n	8004f92 <IKS01A2_ENV_SENSOR_Init+0xf2>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8004f26:	6838      	ldr	r0, [r7, #0]
 8004f28:	f000 f978 	bl	800521c <LPS22HB_0_Probe>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <IKS01A2_ENV_SENSOR_Init+0x98>
      {
        return BSP_ERROR_NO_INIT;
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295
 8004f36:	e066      	b.n	8005006 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004f38:	4a35      	ldr	r2, [pc, #212]	; (8005010 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	4934      	ldr	r1, [pc, #208]	; (8005014 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f4a:	f107 0108 	add.w	r1, r7, #8
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4798      	blx	r3
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <IKS01A2_ENV_SENSOR_Init+0xbe>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004f58:	f06f 0306 	mvn.w	r3, #6
 8004f5c:	e053      	b.n	8005006 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 8004f5e:	7a3b      	ldrb	r3, [r7, #8]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d103      	bne.n	8004f6c <IKS01A2_ENV_SENSOR_Init+0xcc>
      {
        component_functions |= ENV_TEMPERATURE;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8004f6c:	7abb      	ldrb	r3, [r7, #10]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d103      	bne.n	8004f7a <IKS01A2_ENV_SENSOR_Init+0xda>
      {
        component_functions |= ENV_HUMIDITY;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	f043 0304 	orr.w	r3, r3, #4
 8004f78:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8004f7a:	7a7b      	ldrb	r3, [r7, #9]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d10a      	bne.n	8004f96 <IKS01A2_ENV_SENSOR_Init+0xf6>
      {
        component_functions |= ENV_PRESSURE;
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	f043 0302 	orr.w	r3, r3, #2
 8004f86:	61bb      	str	r3, [r7, #24]
      }
      break;
 8004f88:	e005      	b.n	8004f96 <IKS01A2_ENV_SENSOR_Init+0xf6>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004f8a:	f06f 0301 	mvn.w	r3, #1
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004f90:	e002      	b.n	8004f98 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 8004f92:	bf00      	nop
 8004f94:	e000      	b.n	8004f98 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 8004f96:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <IKS01A2_ENV_SENSOR_Init+0x102>
  {
    return ret;
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	e031      	b.n	8005006 <IKS01A2_ENV_SENSOR_Init+0x166>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	e02a      	b.n	8004ffe <IKS01A2_ENV_SENSOR_Init+0x15e>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	4013      	ands	r3, r2
 8004fae:	6a3a      	ldr	r2, [r7, #32]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d11e      	bne.n	8004ff2 <IKS01A2_ENV_SENSOR_Init+0x152>
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	6a3a      	ldr	r2, [r7, #32]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d118      	bne.n	8004ff2 <IKS01A2_ENV_SENSOR_Init+0x152>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8004fc0:	4a15      	ldr	r2, [pc, #84]	; (8005018 <IKS01A2_ENV_SENSOR_Init+0x178>)
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004fc8:	4814      	ldr	r0, [pc, #80]	; (800501c <IKS01A2_ENV_SENSOR_Init+0x17c>)
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4413      	add	r3, r2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	490e      	ldr	r1, [pc, #56]	; (8005014 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4798      	blx	r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <IKS01A2_ENV_SENSOR_Init+0x152>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8004fec:	f06f 0304 	mvn.w	r3, #4
 8004ff0:	e009      	b.n	8005006 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
    }
    function = function << 1;
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d9d1      	bls.n	8004fa8 <IKS01A2_ENV_SENSOR_Init+0x108>
  }

  return ret;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005006:	4618      	mov	r0, r3
 8005008:	3728      	adds	r7, #40	; 0x28
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	200002b0 	.word	0x200002b0
 8005014:	200005c8 	.word	0x200005c8
 8005018:	20000078 	.word	0x20000078
 800501c:	20000298 	.word	0x20000298

08005020 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d903      	bls.n	800503a <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005032:	f06f 0301 	mvn.w	r3, #1
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e029      	b.n	800508e <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800503a:	4a17      	ldr	r2, [pc, #92]	; (8005098 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4013      	ands	r3, r2
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	429a      	cmp	r2, r3
 800504a:	d11d      	bne.n	8005088 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800504c:	4a13      	ldr	r2, [pc, #76]	; (800509c <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005054:	4812      	ldr	r0, [pc, #72]	; (80050a0 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4613      	mov	r3, r2
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	4413      	add	r3, r2
 800505e:	440b      	add	r3, r1
 8005060:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	490f      	ldr	r1, [pc, #60]	; (80050a4 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4610      	mov	r0, r2
 8005072:	4798      	blx	r3
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800507a:	f06f 0304 	mvn.w	r3, #4
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	e005      	b.n	800508e <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	e002      	b.n	800508e <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005088:	f06f 0301 	mvn.w	r3, #1
 800508c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800508e:	697b      	ldr	r3, [r7, #20]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	200002b8 	.word	0x200002b8
 800509c:	20000078 	.word	0x20000078
 80050a0:	20000298 	.word	0x20000298
 80050a4:	200005c8 	.word	0x200005c8

080050a8 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b090      	sub	sp, #64	; 0x40
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 80050b0:	2300      	movs	r3, #0
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80050b4:	2300      	movs	r3, #0
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80050b8:	23bf      	movs	r3, #191	; 0xbf
 80050ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 80050be:	4b49      	ldr	r3, [pc, #292]	; (80051e4 <HTS221_0_Probe+0x13c>)
 80050c0:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80050c2:	4b49      	ldr	r3, [pc, #292]	; (80051e8 <HTS221_0_Probe+0x140>)
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80050c6:	4b49      	ldr	r3, [pc, #292]	; (80051ec <HTS221_0_Probe+0x144>)
 80050c8:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80050ca:	4b49      	ldr	r3, [pc, #292]	; (80051f0 <HTS221_0_Probe+0x148>)
 80050cc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 80050ce:	4b49      	ldr	r3, [pc, #292]	; (80051f4 <HTS221_0_Probe+0x14c>)
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80050d2:	f107 0320 	add.w	r3, r7, #32
 80050d6:	4619      	mov	r1, r3
 80050d8:	4847      	ldr	r0, [pc, #284]	; (80051f8 <HTS221_0_Probe+0x150>)
 80050da:	f7fe fb61 	bl	80037a0 <HTS221_RegisterBusIO>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80050e4:	f06f 0306 	mvn.w	r3, #6
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ea:	e076      	b.n	80051da <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80050ec:	f107 031f 	add.w	r3, r7, #31
 80050f0:	4619      	mov	r1, r3
 80050f2:	4841      	ldr	r0, [pc, #260]	; (80051f8 <HTS221_0_Probe+0x150>)
 80050f4:	f7fe fbd9 	bl	80038aa <HTS221_ReadID>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80050fe:	f06f 0306 	mvn.w	r3, #6
 8005102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005104:	e069      	b.n	80051da <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8005106:	7ffb      	ldrb	r3, [r7, #31]
 8005108:	2bbc      	cmp	r3, #188	; 0xbc
 800510a:	d003      	beq.n	8005114 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800510c:	f06f 0306 	mvn.w	r3, #6
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005112:	e062      	b.n	80051da <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8005114:	f107 030c 	add.w	r3, r7, #12
 8005118:	4619      	mov	r1, r3
 800511a:	4837      	ldr	r0, [pc, #220]	; (80051f8 <HTS221_0_Probe+0x150>)
 800511c:	f7fe fbdc 	bl	80038d8 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005120:	7b3b      	ldrb	r3, [r7, #12]
 8005122:	461a      	mov	r2, r3
 8005124:	7b7b      	ldrb	r3, [r7, #13]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800512a:	7bbb      	ldrb	r3, [r7, #14]
 800512c:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800512e:	4313      	orrs	r3, r2
 8005130:	4a32      	ldr	r2, [pc, #200]	; (80051fc <HTS221_0_Probe+0x154>)
 8005132:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8005134:	4b32      	ldr	r3, [pc, #200]	; (8005200 <HTS221_0_Probe+0x158>)
 8005136:	4a30      	ldr	r2, [pc, #192]	; (80051f8 <HTS221_0_Probe+0x150>)
 8005138:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800513a:	4b32      	ldr	r3, [pc, #200]	; (8005204 <HTS221_0_Probe+0x15c>)
 800513c:	4a32      	ldr	r2, [pc, #200]	; (8005208 <HTS221_0_Probe+0x160>)
 800513e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d11d      	bne.n	8005182 <HTS221_0_Probe+0xda>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d018      	beq.n	8005182 <HTS221_0_Probe+0xda>
 8005150:	7b3b      	ldrb	r3, [r7, #12]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d115      	bne.n	8005182 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8005156:	4b2d      	ldr	r3, [pc, #180]	; (800520c <HTS221_0_Probe+0x164>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	4a2d      	ldr	r2, [pc, #180]	; (8005210 <HTS221_0_Probe+0x168>)
 800515c:	492d      	ldr	r1, [pc, #180]	; (8005214 <HTS221_0_Probe+0x16c>)
 800515e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8005162:	4b28      	ldr	r3, [pc, #160]	; (8005204 <HTS221_0_Probe+0x15c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a25      	ldr	r2, [pc, #148]	; (8005200 <HTS221_0_Probe+0x158>)
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	4610      	mov	r0, r2
 800516e:	4798      	blx	r3
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005176:	f06f 0304 	mvn.w	r3, #4
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800517c:	e001      	b.n	8005182 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800517e:	2300      	movs	r3, #0
 8005180:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8005182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d11d      	bne.n	80051c4 <HTS221_0_Probe+0x11c>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d018      	beq.n	80051c4 <HTS221_0_Probe+0x11c>
 8005192:	7bbb      	ldrb	r3, [r7, #14]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d115      	bne.n	80051c4 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8005198:	4b1c      	ldr	r3, [pc, #112]	; (800520c <HTS221_0_Probe+0x164>)
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	4a1c      	ldr	r2, [pc, #112]	; (8005210 <HTS221_0_Probe+0x168>)
 800519e:	491e      	ldr	r1, [pc, #120]	; (8005218 <HTS221_0_Probe+0x170>)
 80051a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 80051a4:	4b17      	ldr	r3, [pc, #92]	; (8005204 <HTS221_0_Probe+0x15c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a15      	ldr	r2, [pc, #84]	; (8005200 <HTS221_0_Probe+0x158>)
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	4610      	mov	r0, r2
 80051b0:	4798      	blx	r3
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80051b8:	f06f 0304 	mvn.w	r3, #4
 80051bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051be:	e001      	b.n	80051c4 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80051c0:	2300      	movs	r3, #0
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80051c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d107      	bne.n	80051da <HTS221_0_Probe+0x132>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80051d4:	f06f 0304 	mvn.w	r3, #4
 80051d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 80051da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3740      	adds	r7, #64	; 0x40
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	08002f91 	.word	0x08002f91
 80051e8:	08002ff5 	.word	0x08002ff5
 80051ec:	080030a9 	.word	0x080030a9
 80051f0:	08003045 	.word	0x08003045
 80051f4:	0800310d 	.word	0x0800310d
 80051f8:	200002c0 	.word	0x200002c0
 80051fc:	200002b8 	.word	0x200002b8
 8005200:	200005c8 	.word	0x200005c8
 8005204:	200002b0 	.word	0x200002b0
 8005208:	20000008 	.word	0x20000008
 800520c:	20000078 	.word	0x20000078
 8005210:	20000298 	.word	0x20000298
 8005214:	2000002c 	.word	0x2000002c
 8005218:	20000018 	.word	0x20000018

0800521c <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b090      	sub	sp, #64	; 0x40
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8005224:	2300      	movs	r3, #0
 8005226:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 8005228:	2300      	movs	r3, #0
 800522a:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 800522c:	23bb      	movs	r3, #187	; 0xbb
 800522e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005232:	4b4a      	ldr	r3, [pc, #296]	; (800535c <LPS22HB_0_Probe+0x140>)
 8005234:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005236:	4b4a      	ldr	r3, [pc, #296]	; (8005360 <LPS22HB_0_Probe+0x144>)
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800523a:	4b4a      	ldr	r3, [pc, #296]	; (8005364 <LPS22HB_0_Probe+0x148>)
 800523c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800523e:	4b4a      	ldr	r3, [pc, #296]	; (8005368 <LPS22HB_0_Probe+0x14c>)
 8005240:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005242:	4b4a      	ldr	r3, [pc, #296]	; (800536c <LPS22HB_0_Probe+0x150>)
 8005244:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8005246:	f107 0320 	add.w	r3, r7, #32
 800524a:	4619      	mov	r1, r3
 800524c:	4848      	ldr	r0, [pc, #288]	; (8005370 <LPS22HB_0_Probe+0x154>)
 800524e:	f7ff f873 	bl	8004338 <LPS22HB_RegisterBusIO>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005258:	f06f 0306 	mvn.w	r3, #6
 800525c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800525e:	e078      	b.n	8005352 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8005260:	f107 031f 	add.w	r3, r7, #31
 8005264:	4619      	mov	r1, r3
 8005266:	4842      	ldr	r0, [pc, #264]	; (8005370 <LPS22HB_0_Probe+0x154>)
 8005268:	f7ff f90b 	bl	8004482 <LPS22HB_ReadID>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005272:	f06f 0306 	mvn.w	r3, #6
 8005276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005278:	e06b      	b.n	8005352 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 800527a:	7ffb      	ldrb	r3, [r7, #31]
 800527c:	2bb1      	cmp	r3, #177	; 0xb1
 800527e:	d003      	beq.n	8005288 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005280:	f06f 0306 	mvn.w	r3, #6
 8005284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005286:	e064      	b.n	8005352 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8005288:	f107 030c 	add.w	r3, r7, #12
 800528c:	4619      	mov	r1, r3
 800528e:	4838      	ldr	r0, [pc, #224]	; (8005370 <LPS22HB_0_Probe+0x154>)
 8005290:	f7ff f90e 	bl	80044b0 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005294:	7b3b      	ldrb	r3, [r7, #12]
 8005296:	461a      	mov	r2, r3
 8005298:	7b7b      	ldrb	r3, [r7, #13]
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800529e:	7bbb      	ldrb	r3, [r7, #14]
 80052a0:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80052a2:	4313      	orrs	r3, r2
 80052a4:	4a33      	ldr	r2, [pc, #204]	; (8005374 <LPS22HB_0_Probe+0x158>)
 80052a6:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 80052a8:	4b33      	ldr	r3, [pc, #204]	; (8005378 <LPS22HB_0_Probe+0x15c>)
 80052aa:	4a31      	ldr	r2, [pc, #196]	; (8005370 <LPS22HB_0_Probe+0x154>)
 80052ac:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 80052ae:	4b33      	ldr	r3, [pc, #204]	; (800537c <LPS22HB_0_Probe+0x160>)
 80052b0:	4a33      	ldr	r2, [pc, #204]	; (8005380 <LPS22HB_0_Probe+0x164>)
 80052b2:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80052b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d11e      	bne.n	80052f8 <LPS22HB_0_Probe+0xdc>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d019      	beq.n	80052f8 <LPS22HB_0_Probe+0xdc>
 80052c4:	7b3b      	ldrb	r3, [r7, #12]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d116      	bne.n	80052f8 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 80052ca:	4b2e      	ldr	r3, [pc, #184]	; (8005384 <LPS22HB_0_Probe+0x168>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	4a2e      	ldr	r2, [pc, #184]	; (8005388 <LPS22HB_0_Probe+0x16c>)
 80052d0:	3303      	adds	r3, #3
 80052d2:	492e      	ldr	r1, [pc, #184]	; (800538c <LPS22HB_0_Probe+0x170>)
 80052d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80052d8:	4b28      	ldr	r3, [pc, #160]	; (800537c <LPS22HB_0_Probe+0x160>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a26      	ldr	r2, [pc, #152]	; (8005378 <LPS22HB_0_Probe+0x15c>)
 80052e0:	6852      	ldr	r2, [r2, #4]
 80052e2:	4610      	mov	r0, r2
 80052e4:	4798      	blx	r3
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80052ec:	f06f 0304 	mvn.w	r3, #4
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f2:	e001      	b.n	80052f8 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80052f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d11e      	bne.n	800533c <LPS22HB_0_Probe+0x120>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d019      	beq.n	800533c <LPS22HB_0_Probe+0x120>
 8005308:	7b7b      	ldrb	r3, [r7, #13]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d116      	bne.n	800533c <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 800530e:	4b1d      	ldr	r3, [pc, #116]	; (8005384 <LPS22HB_0_Probe+0x168>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	4a1d      	ldr	r2, [pc, #116]	; (8005388 <LPS22HB_0_Probe+0x16c>)
 8005314:	3303      	adds	r3, #3
 8005316:	491e      	ldr	r1, [pc, #120]	; (8005390 <LPS22HB_0_Probe+0x174>)
 8005318:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800531c:	4b17      	ldr	r3, [pc, #92]	; (800537c <LPS22HB_0_Probe+0x160>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a15      	ldr	r2, [pc, #84]	; (8005378 <LPS22HB_0_Probe+0x15c>)
 8005324:	6852      	ldr	r2, [r2, #4]
 8005326:	4610      	mov	r0, r2
 8005328:	4798      	blx	r3
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005330:	f06f 0304 	mvn.w	r3, #4
 8005334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005336:	e001      	b.n	800533c <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005338:	2300      	movs	r3, #0
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800533c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d107      	bne.n	8005352 <LPS22HB_0_Probe+0x136>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800534c:	f06f 0304 	mvn.w	r3, #4
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8005352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005354:	4618      	mov	r0, r3
 8005356:	3740      	adds	r7, #64	; 0x40
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	08002f91 	.word	0x08002f91
 8005360:	08002ff5 	.word	0x08002ff5
 8005364:	080030a9 	.word	0x080030a9
 8005368:	08003045 	.word	0x08003045
 800536c:	0800310d 	.word	0x0800310d
 8005370:	200002ec 	.word	0x200002ec
 8005374:	200002b8 	.word	0x200002b8
 8005378:	200005c8 	.word	0x200005c8
 800537c:	200002b0 	.word	0x200002b0
 8005380:	20000040 	.word	0x20000040
 8005384:	20000078 	.word	0x20000078
 8005388:	20000298 	.word	0x20000298
 800538c:	20000064 	.word	0x20000064
 8005390:	20000050 	.word	0x20000050

08005394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005398:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <HAL_Init+0x40>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a0d      	ldr	r2, [pc, #52]	; (80053d4 <HAL_Init+0x40>)
 800539e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <HAL_Init+0x40>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a0a      	ldr	r2, [pc, #40]	; (80053d4 <HAL_Init+0x40>)
 80053aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053b0:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <HAL_Init+0x40>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a07      	ldr	r2, [pc, #28]	; (80053d4 <HAL_Init+0x40>)
 80053b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053bc:	2003      	movs	r0, #3
 80053be:	f000 fd23 	bl	8005e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053c2:	2000      	movs	r0, #0
 80053c4:	f000 f808 	bl	80053d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053c8:	f7fd fd5a 	bl	8002e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40023c00 	.word	0x40023c00

080053d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053e0:	4b12      	ldr	r3, [pc, #72]	; (800542c <HAL_InitTick+0x54>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_InitTick+0x58>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	4619      	mov	r1, r3
 80053ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fd3b 	bl	8005e72 <HAL_SYSTICK_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e00e      	b.n	8005424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b0f      	cmp	r3, #15
 800540a:	d80a      	bhi.n	8005422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800540c:	2200      	movs	r2, #0
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	f000 fd03 	bl	8005e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005418:	4a06      	ldr	r2, [pc, #24]	; (8005434 <HAL_InitTick+0x5c>)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e000      	b.n	8005424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20000004 	.word	0x20000004
 8005430:	20000090 	.word	0x20000090
 8005434:	2000008c 	.word	0x2000008c

08005438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <HAL_IncTick+0x20>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	4b06      	ldr	r3, [pc, #24]	; (800545c <HAL_IncTick+0x24>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4413      	add	r3, r2
 8005448:	4a04      	ldr	r2, [pc, #16]	; (800545c <HAL_IncTick+0x24>)
 800544a:	6013      	str	r3, [r2, #0]
}
 800544c:	bf00      	nop
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20000090 	.word	0x20000090
 800545c:	200005d0 	.word	0x200005d0

08005460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  return uwTick;
 8005464:	4b03      	ldr	r3, [pc, #12]	; (8005474 <HAL_GetTick+0x14>)
 8005466:	681b      	ldr	r3, [r3, #0]
}
 8005468:	4618      	mov	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	200005d0 	.word	0x200005d0

08005478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005480:	f7ff ffee 	bl	8005460 <HAL_GetTick>
 8005484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005490:	d005      	beq.n	800549e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005492:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <HAL_Delay+0x40>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800549e:	bf00      	nop
 80054a0:	f7ff ffde 	bl	8005460 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d8f7      	bhi.n	80054a0 <HAL_Delay+0x28>
  {
  }
}
 80054b0:	bf00      	nop
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000090 	.word	0x20000090

080054bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e033      	b.n	800553a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d109      	bne.n	80054ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fb fdb0 	bl	8001040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d118      	bne.n	800552c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005502:	f023 0302 	bic.w	r3, r3, #2
 8005506:	f043 0202 	orr.w	r2, r3, #2
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa2c 	bl	800596c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	f023 0303 	bic.w	r3, r3, #3
 8005522:	f043 0201 	orr.w	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	641a      	str	r2, [r3, #64]	; 0x40
 800552a:	e001      	b.n	8005530 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_ADC_Start_DMA+0x1e>
 800555e:	2302      	movs	r3, #2
 8005560:	e0b1      	b.n	80056c6 <HAL_ADC_Start_DMA+0x182>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b01      	cmp	r3, #1
 8005576:	d018      	beq.n	80055aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005588:	4b51      	ldr	r3, [pc, #324]	; (80056d0 <HAL_ADC_Start_DMA+0x18c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a51      	ldr	r2, [pc, #324]	; (80056d4 <HAL_ADC_Start_DMA+0x190>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	0c9a      	lsrs	r2, r3, #18
 8005594:	4613      	mov	r3, r2
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	4413      	add	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800559c:	e002      	b.n	80055a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f9      	bne.n	800559e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	f040 8085 	bne.w	80056c4 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80055c2:	f023 0301 	bic.w	r3, r3, #1
 80055c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f8:	d106      	bne.n	8005608 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fe:	f023 0206 	bic.w	r2, r3, #6
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	645a      	str	r2, [r3, #68]	; 0x44
 8005606:	e002      	b.n	800560e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005616:	4b30      	ldr	r3, [pc, #192]	; (80056d8 <HAL_ADC_Start_DMA+0x194>)
 8005618:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	4a2f      	ldr	r2, [pc, #188]	; (80056dc <HAL_ADC_Start_DMA+0x198>)
 8005620:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	4a2e      	ldr	r2, [pc, #184]	; (80056e0 <HAL_ADC_Start_DMA+0x19c>)
 8005628:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	4a2d      	ldr	r2, [pc, #180]	; (80056e4 <HAL_ADC_Start_DMA+0x1a0>)
 8005630:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800563a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800564a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800565a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	334c      	adds	r3, #76	; 0x4c
 8005666:	4619      	mov	r1, r3
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f000 fcbc 	bl	8005fe8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10f      	bne.n	800569c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d11c      	bne.n	80056c4 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005698:	609a      	str	r2, [r3, #8]
 800569a:	e013      	b.n	80056c4 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a11      	ldr	r2, [pc, #68]	; (80056e8 <HAL_ADC_Start_DMA+0x1a4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d10e      	bne.n	80056c4 <HAL_ADC_Start_DMA+0x180>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d107      	bne.n	80056c4 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056c2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20000004 	.word	0x20000004
 80056d4:	431bde83 	.word	0x431bde83
 80056d8:	40012300 	.word	0x40012300
 80056dc:	08005b65 	.word	0x08005b65
 80056e0:	08005c1f 	.word	0x08005c1f
 80056e4:	08005c3b 	.word	0x08005c3b
 80056e8:	40012000 	.word	0x40012000

080056ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_ADC_ConfigChannel+0x1c>
 8005740:	2302      	movs	r3, #2
 8005742:	e105      	b.n	8005950 <HAL_ADC_ConfigChannel+0x228>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b09      	cmp	r3, #9
 8005752:	d925      	bls.n	80057a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68d9      	ldr	r1, [r3, #12]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	b29b      	uxth	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	4613      	mov	r3, r2
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	4413      	add	r3, r2
 8005768:	3b1e      	subs	r3, #30
 800576a:	2207      	movs	r2, #7
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	43da      	mvns	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	400a      	ands	r2, r1
 8005778:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68d9      	ldr	r1, [r3, #12]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	4618      	mov	r0, r3
 800578c:	4603      	mov	r3, r0
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	4403      	add	r3, r0
 8005792:	3b1e      	subs	r3, #30
 8005794:	409a      	lsls	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	e022      	b.n	80057e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6919      	ldr	r1, [r3, #16]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	4613      	mov	r3, r2
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	4413      	add	r3, r2
 80057b4:	2207      	movs	r2, #7
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	43da      	mvns	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	400a      	ands	r2, r1
 80057c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6919      	ldr	r1, [r3, #16]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	4618      	mov	r0, r3
 80057d6:	4603      	mov	r3, r0
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	4403      	add	r3, r0
 80057dc:	409a      	lsls	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b06      	cmp	r3, #6
 80057ec:	d824      	bhi.n	8005838 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	3b05      	subs	r3, #5
 8005800:	221f      	movs	r2, #31
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43da      	mvns	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	400a      	ands	r2, r1
 800580e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	4618      	mov	r0, r3
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	3b05      	subs	r3, #5
 800582a:	fa00 f203 	lsl.w	r2, r0, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	635a      	str	r2, [r3, #52]	; 0x34
 8005836:	e04c      	b.n	80058d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b0c      	cmp	r3, #12
 800583e:	d824      	bhi.n	800588a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	3b23      	subs	r3, #35	; 0x23
 8005852:	221f      	movs	r2, #31
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	43da      	mvns	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	400a      	ands	r2, r1
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	4618      	mov	r0, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	3b23      	subs	r3, #35	; 0x23
 800587c:	fa00 f203 	lsl.w	r2, r0, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
 8005888:	e023      	b.n	80058d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	3b41      	subs	r3, #65	; 0x41
 800589c:	221f      	movs	r2, #31
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43da      	mvns	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	400a      	ands	r2, r1
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	4618      	mov	r0, r3
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	3b41      	subs	r3, #65	; 0x41
 80058c6:	fa00 f203 	lsl.w	r2, r0, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058d2:	4b22      	ldr	r3, [pc, #136]	; (800595c <HAL_ADC_ConfigChannel+0x234>)
 80058d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a21      	ldr	r2, [pc, #132]	; (8005960 <HAL_ADC_ConfigChannel+0x238>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d109      	bne.n	80058f4 <HAL_ADC_ConfigChannel+0x1cc>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b12      	cmp	r3, #18
 80058e6:	d105      	bne.n	80058f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a19      	ldr	r2, [pc, #100]	; (8005960 <HAL_ADC_ConfigChannel+0x238>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d123      	bne.n	8005946 <HAL_ADC_ConfigChannel+0x21e>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b10      	cmp	r3, #16
 8005904:	d003      	beq.n	800590e <HAL_ADC_ConfigChannel+0x1e6>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b11      	cmp	r3, #17
 800590c:	d11b      	bne.n	8005946 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b10      	cmp	r3, #16
 8005920:	d111      	bne.n	8005946 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005922:	4b10      	ldr	r3, [pc, #64]	; (8005964 <HAL_ADC_ConfigChannel+0x23c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a10      	ldr	r2, [pc, #64]	; (8005968 <HAL_ADC_ConfigChannel+0x240>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	0c9a      	lsrs	r2, r3, #18
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005938:	e002      	b.n	8005940 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	3b01      	subs	r3, #1
 800593e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f9      	bne.n	800593a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	40012300 	.word	0x40012300
 8005960:	40012000 	.word	0x40012000
 8005964:	20000004 	.word	0x20000004
 8005968:	431bde83 	.word	0x431bde83

0800596c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005974:	4b79      	ldr	r3, [pc, #484]	; (8005b5c <ADC_Init+0x1f0>)
 8005976:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	431a      	orrs	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6859      	ldr	r1, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	021a      	lsls	r2, r3, #8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80059c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6859      	ldr	r1, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6899      	ldr	r1, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	4a58      	ldr	r2, [pc, #352]	; (8005b60 <ADC_Init+0x1f4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d022      	beq.n	8005a4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6899      	ldr	r1, [r3, #8]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6899      	ldr	r1, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	609a      	str	r2, [r3, #8]
 8005a48:	e00f      	b.n	8005a6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0202 	bic.w	r2, r2, #2
 8005a78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6899      	ldr	r1, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	7e1b      	ldrb	r3, [r3, #24]
 8005a84:	005a      	lsls	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01b      	beq.n	8005ad0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005ab6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6859      	ldr	r1, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	035a      	lsls	r2, r3, #13
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
 8005ace:	e007      	b.n	8005ae0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ade:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	051a      	lsls	r2, r3, #20
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6899      	ldr	r1, [r3, #8]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b22:	025a      	lsls	r2, r3, #9
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6899      	ldr	r1, [r3, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	029a      	lsls	r2, r3, #10
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	609a      	str	r2, [r3, #8]
}
 8005b50:	bf00      	nop
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	40012300 	.word	0x40012300
 8005b60:	0f000001 	.word	0x0f000001

08005b64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d13c      	bne.n	8005bf8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d12b      	bne.n	8005bf0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d127      	bne.n	8005bf0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d006      	beq.n	8005bbc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d119      	bne.n	8005bf0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0220 	bic.w	r2, r2, #32
 8005bca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	f043 0201 	orr.w	r2, r3, #1
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7ff fd7b 	bl	80056ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005bf6:	e00e      	b.n	8005c16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff fd85 	bl	8005714 <HAL_ADC_ErrorCallback>
}
 8005c0a:	e004      	b.n	8005c16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	4798      	blx	r3
}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7ff fd67 	bl	8005700 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c46:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2240      	movs	r2, #64	; 0x40
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c52:	f043 0204 	orr.w	r2, r3, #4
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f7ff fd5a 	bl	8005714 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c78:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <__NVIC_SetPriorityGrouping+0x44>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c84:	4013      	ands	r3, r2
 8005c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c9a:	4a04      	ldr	r2, [pc, #16]	; (8005cac <__NVIC_SetPriorityGrouping+0x44>)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	60d3      	str	r3, [r2, #12]
}
 8005ca0:	bf00      	nop
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	e000ed00 	.word	0xe000ed00

08005cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cb4:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	0a1b      	lsrs	r3, r3, #8
 8005cba:	f003 0307 	and.w	r3, r3, #7
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	e000ed00 	.word	0xe000ed00

08005ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	db0b      	blt.n	8005cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cde:	79fb      	ldrb	r3, [r7, #7]
 8005ce0:	f003 021f 	and.w	r2, r3, #31
 8005ce4:	4907      	ldr	r1, [pc, #28]	; (8005d04 <__NVIC_EnableIRQ+0x38>)
 8005ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	2001      	movs	r0, #1
 8005cee:	fa00 f202 	lsl.w	r2, r0, r2
 8005cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	e000e100 	.word	0xe000e100

08005d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	6039      	str	r1, [r7, #0]
 8005d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	db0a      	blt.n	8005d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	490c      	ldr	r1, [pc, #48]	; (8005d54 <__NVIC_SetPriority+0x4c>)
 8005d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d26:	0112      	lsls	r2, r2, #4
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d30:	e00a      	b.n	8005d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	4908      	ldr	r1, [pc, #32]	; (8005d58 <__NVIC_SetPriority+0x50>)
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	3b04      	subs	r3, #4
 8005d40:	0112      	lsls	r2, r2, #4
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	440b      	add	r3, r1
 8005d46:	761a      	strb	r2, [r3, #24]
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	e000e100 	.word	0xe000e100
 8005d58:	e000ed00 	.word	0xe000ed00

08005d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b089      	sub	sp, #36	; 0x24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f1c3 0307 	rsb	r3, r3, #7
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	bf28      	it	cs
 8005d7a:	2304      	movcs	r3, #4
 8005d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	3304      	adds	r3, #4
 8005d82:	2b06      	cmp	r3, #6
 8005d84:	d902      	bls.n	8005d8c <NVIC_EncodePriority+0x30>
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	3b03      	subs	r3, #3
 8005d8a:	e000      	b.n	8005d8e <NVIC_EncodePriority+0x32>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d90:	f04f 32ff 	mov.w	r2, #4294967295
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9a:	43da      	mvns	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	401a      	ands	r2, r3
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005da4:	f04f 31ff 	mov.w	r1, #4294967295
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	fa01 f303 	lsl.w	r3, r1, r3
 8005dae:	43d9      	mvns	r1, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005db4:	4313      	orrs	r3, r2
         );
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3724      	adds	r7, #36	; 0x24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dd4:	d301      	bcc.n	8005dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e00f      	b.n	8005dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dda:	4a0a      	ldr	r2, [pc, #40]	; (8005e04 <SysTick_Config+0x40>)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005de2:	210f      	movs	r1, #15
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295
 8005de8:	f7ff ff8e 	bl	8005d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dec:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <SysTick_Config+0x40>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005df2:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <SysTick_Config+0x40>)
 8005df4:	2207      	movs	r2, #7
 8005df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	e000e010 	.word	0xe000e010

08005e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff ff29 	bl	8005c68 <__NVIC_SetPriorityGrouping>
}
 8005e16:	bf00      	nop
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b086      	sub	sp, #24
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	4603      	mov	r3, r0
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	607a      	str	r2, [r7, #4]
 8005e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e30:	f7ff ff3e 	bl	8005cb0 <__NVIC_GetPriorityGrouping>
 8005e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	6978      	ldr	r0, [r7, #20]
 8005e3c:	f7ff ff8e 	bl	8005d5c <NVIC_EncodePriority>
 8005e40:	4602      	mov	r2, r0
 8005e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e46:	4611      	mov	r1, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff ff5d 	bl	8005d08 <__NVIC_SetPriority>
}
 8005e4e:	bf00      	nop
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b082      	sub	sp, #8
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff ff31 	bl	8005ccc <__NVIC_EnableIRQ>
}
 8005e6a:	bf00      	nop
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b082      	sub	sp, #8
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff ffa2 	bl	8005dc4 <SysTick_Config>
 8005e80:	4603      	mov	r3, r0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005e98:	f7ff fae2 	bl	8005460 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e099      	b.n	8005fdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0201 	bic.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ec8:	e00f      	b.n	8005eea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eca:	f7ff fac9 	bl	8005460 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b05      	cmp	r3, #5
 8005ed6:	d908      	bls.n	8005eea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e078      	b.n	8005fdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e8      	bne.n	8005eca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4b38      	ldr	r3, [pc, #224]	; (8005fe4 <HAL_DMA_Init+0x158>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d107      	bne.n	8005f54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f023 0307 	bic.w	r3, r3, #7
 8005f6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d117      	bne.n	8005fae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00e      	beq.n	8005fae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fa6f 	bl	8006474 <DMA_CheckFifoParam>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2240      	movs	r2, #64	; 0x40
 8005fa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005faa:	2301      	movs	r3, #1
 8005fac:	e016      	b.n	8005fdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fa26 	bl	8006408 <DMA_CalcBaseAndBitshift>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc4:	223f      	movs	r2, #63	; 0x3f
 8005fc6:	409a      	lsls	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	f010803f 	.word	0xf010803f

08005fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_DMA_Start_IT+0x26>
 800600a:	2302      	movs	r3, #2
 800600c:	e040      	b.n	8006090 <HAL_DMA_Start_IT+0xa8>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b01      	cmp	r3, #1
 8006020:	d12f      	bne.n	8006082 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2202      	movs	r2, #2
 8006026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f9b8 	bl	80063ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006040:	223f      	movs	r2, #63	; 0x3f
 8006042:	409a      	lsls	r2, r3
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0216 	orr.w	r2, r2, #22
 8006056:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d007      	beq.n	8006070 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0208 	orr.w	r2, r2, #8
 800606e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0201 	orr.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e005      	b.n	800608e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800608a:	2302      	movs	r3, #2
 800608c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800608e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060a4:	4b92      	ldr	r3, [pc, #584]	; (80062f0 <HAL_DMA_IRQHandler+0x258>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a92      	ldr	r2, [pc, #584]	; (80062f4 <HAL_DMA_IRQHandler+0x25c>)
 80060aa:	fba2 2303 	umull	r2, r3, r2, r3
 80060ae:	0a9b      	lsrs	r3, r3, #10
 80060b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c2:	2208      	movs	r2, #8
 80060c4:	409a      	lsls	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4013      	ands	r3, r2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d01a      	beq.n	8006104 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d013      	beq.n	8006104 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0204 	bic.w	r2, r2, #4
 80060ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f0:	2208      	movs	r2, #8
 80060f2:	409a      	lsls	r2, r3
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fc:	f043 0201 	orr.w	r2, r3, #1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006108:	2201      	movs	r2, #1
 800610a:	409a      	lsls	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4013      	ands	r3, r2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d012      	beq.n	800613a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006126:	2201      	movs	r2, #1
 8006128:	409a      	lsls	r2, r3
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006132:	f043 0202 	orr.w	r2, r3, #2
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613e:	2204      	movs	r2, #4
 8006140:	409a      	lsls	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4013      	ands	r3, r2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d012      	beq.n	8006170 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615c:	2204      	movs	r2, #4
 800615e:	409a      	lsls	r2, r3
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006168:	f043 0204 	orr.w	r2, r3, #4
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006174:	2210      	movs	r2, #16
 8006176:	409a      	lsls	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d043      	beq.n	8006208 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d03c      	beq.n	8006208 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006192:	2210      	movs	r2, #16
 8006194:	409a      	lsls	r2, r3
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d018      	beq.n	80061da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d108      	bne.n	80061c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d024      	beq.n	8006208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
 80061c6:	e01f      	b.n	8006208 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01b      	beq.n	8006208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
 80061d8:	e016      	b.n	8006208 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d107      	bne.n	80061f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0208 	bic.w	r2, r2, #8
 80061f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620c:	2220      	movs	r2, #32
 800620e:	409a      	lsls	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4013      	ands	r3, r2
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 808e 	beq.w	8006336 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8086 	beq.w	8006336 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622e:	2220      	movs	r2, #32
 8006230:	409a      	lsls	r2, r3
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b05      	cmp	r3, #5
 8006240:	d136      	bne.n	80062b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0216 	bic.w	r2, r2, #22
 8006250:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695a      	ldr	r2, [r3, #20]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006260:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	d103      	bne.n	8006272 <HAL_DMA_IRQHandler+0x1da>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0208 	bic.w	r2, r2, #8
 8006280:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006286:	223f      	movs	r2, #63	; 0x3f
 8006288:	409a      	lsls	r2, r3
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d07d      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	4798      	blx	r3
        }
        return;
 80062ae:	e078      	b.n	80063a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01c      	beq.n	80062f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d108      	bne.n	80062de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d030      	beq.n	8006336 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4798      	blx	r3
 80062dc:	e02b      	b.n	8006336 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d027      	beq.n	8006336 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
 80062ee:	e022      	b.n	8006336 <HAL_DMA_IRQHandler+0x29e>
 80062f0:	20000004 	.word	0x20000004
 80062f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10f      	bne.n	8006326 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0210 	bic.w	r2, r2, #16
 8006314:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633a:	2b00      	cmp	r3, #0
 800633c:	d032      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d022      	beq.n	8006390 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2205      	movs	r2, #5
 800634e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0201 	bic.w	r2, r2, #1
 8006360:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	3301      	adds	r3, #1
 8006366:	60bb      	str	r3, [r7, #8]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	429a      	cmp	r2, r3
 800636c:	d307      	bcc.n	800637e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f2      	bne.n	8006362 <HAL_DMA_IRQHandler+0x2ca>
 800637c:	e000      	b.n	8006380 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800637e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	4798      	blx	r3
 80063a0:	e000      	b.n	80063a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80063a2:	bf00      	nop
    }
  }
}
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop

080063ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b40      	cmp	r3, #64	; 0x40
 80063d8:	d108      	bne.n	80063ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80063ea:	e007      	b.n	80063fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	60da      	str	r2, [r3, #12]
}
 80063fc:	bf00      	nop
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	3b10      	subs	r3, #16
 8006418:	4a14      	ldr	r2, [pc, #80]	; (800646c <DMA_CalcBaseAndBitshift+0x64>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	091b      	lsrs	r3, r3, #4
 8006420:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006422:	4a13      	ldr	r2, [pc, #76]	; (8006470 <DMA_CalcBaseAndBitshift+0x68>)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b03      	cmp	r3, #3
 8006434:	d909      	bls.n	800644a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	1d1a      	adds	r2, r3, #4
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	659a      	str	r2, [r3, #88]	; 0x58
 8006448:	e007      	b.n	800645a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006452:	f023 0303 	bic.w	r3, r3, #3
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	aaaaaaab 	.word	0xaaaaaaab
 8006470:	0800eadc 	.word	0x0800eadc

08006474 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d11f      	bne.n	80064ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b03      	cmp	r3, #3
 8006492:	d855      	bhi.n	8006540 <DMA_CheckFifoParam+0xcc>
 8006494:	a201      	add	r2, pc, #4	; (adr r2, 800649c <DMA_CheckFifoParam+0x28>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064ad 	.word	0x080064ad
 80064a0:	080064bf 	.word	0x080064bf
 80064a4:	080064ad 	.word	0x080064ad
 80064a8:	08006541 	.word	0x08006541
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d045      	beq.n	8006544 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064bc:	e042      	b.n	8006544 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064c6:	d13f      	bne.n	8006548 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064cc:	e03c      	b.n	8006548 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d6:	d121      	bne.n	800651c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d836      	bhi.n	800654c <DMA_CheckFifoParam+0xd8>
 80064de:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <DMA_CheckFifoParam+0x70>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	080064f5 	.word	0x080064f5
 80064e8:	080064fb 	.word	0x080064fb
 80064ec:	080064f5 	.word	0x080064f5
 80064f0:	0800650d 	.word	0x0800650d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	73fb      	strb	r3, [r7, #15]
      break;
 80064f8:	e02f      	b.n	800655a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d024      	beq.n	8006550 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800650a:	e021      	b.n	8006550 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006514:	d11e      	bne.n	8006554 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800651a:	e01b      	b.n	8006554 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d902      	bls.n	8006528 <DMA_CheckFifoParam+0xb4>
 8006522:	2b03      	cmp	r3, #3
 8006524:	d003      	beq.n	800652e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006526:	e018      	b.n	800655a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]
      break;
 800652c:	e015      	b.n	800655a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00e      	beq.n	8006558 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	73fb      	strb	r3, [r7, #15]
      break;
 800653e:	e00b      	b.n	8006558 <DMA_CheckFifoParam+0xe4>
      break;
 8006540:	bf00      	nop
 8006542:	e00a      	b.n	800655a <DMA_CheckFifoParam+0xe6>
      break;
 8006544:	bf00      	nop
 8006546:	e008      	b.n	800655a <DMA_CheckFifoParam+0xe6>
      break;
 8006548:	bf00      	nop
 800654a:	e006      	b.n	800655a <DMA_CheckFifoParam+0xe6>
      break;
 800654c:	bf00      	nop
 800654e:	e004      	b.n	800655a <DMA_CheckFifoParam+0xe6>
      break;
 8006550:	bf00      	nop
 8006552:	e002      	b.n	800655a <DMA_CheckFifoParam+0xe6>
      break;   
 8006554:	bf00      	nop
 8006556:	e000      	b.n	800655a <DMA_CheckFifoParam+0xe6>
      break;
 8006558:	bf00      	nop
    }
  } 
  
  return status; 
 800655a:	7bfb      	ldrb	r3, [r7, #15]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800657a:	4b23      	ldr	r3, [pc, #140]	; (8006608 <HAL_FLASH_Program+0xa0>)
 800657c:	7e1b      	ldrb	r3, [r3, #24]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_FLASH_Program+0x1e>
 8006582:	2302      	movs	r3, #2
 8006584:	e03b      	b.n	80065fe <HAL_FLASH_Program+0x96>
 8006586:	4b20      	ldr	r3, [pc, #128]	; (8006608 <HAL_FLASH_Program+0xa0>)
 8006588:	2201      	movs	r2, #1
 800658a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800658c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006590:	f000 f860 	bl	8006654 <FLASH_WaitForLastOperation>
 8006594:	4603      	mov	r3, r0
 8006596:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006598:	7dfb      	ldrb	r3, [r7, #23]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d12b      	bne.n	80065f6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d105      	bne.n	80065b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80065a4:	783b      	ldrb	r3, [r7, #0]
 80065a6:	4619      	mov	r1, r3
 80065a8:	68b8      	ldr	r0, [r7, #8]
 80065aa:	f000 f909 	bl	80067c0 <FLASH_Program_Byte>
 80065ae:	e016      	b.n	80065de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d105      	bne.n	80065c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80065b6:	883b      	ldrh	r3, [r7, #0]
 80065b8:	4619      	mov	r1, r3
 80065ba:	68b8      	ldr	r0, [r7, #8]
 80065bc:	f000 f8dc 	bl	8006778 <FLASH_Program_HalfWord>
 80065c0:	e00d      	b.n	80065de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d105      	bne.n	80065d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	4619      	mov	r1, r3
 80065cc:	68b8      	ldr	r0, [r7, #8]
 80065ce:	f000 f8b1 	bl	8006734 <FLASH_Program_Word>
 80065d2:	e004      	b.n	80065de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80065d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065d8:	68b8      	ldr	r0, [r7, #8]
 80065da:	f000 f87b 	bl	80066d4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80065de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80065e2:	f000 f837 	bl	8006654 <FLASH_WaitForLastOperation>
 80065e6:	4603      	mov	r3, r0
 80065e8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80065ea:	4b08      	ldr	r3, [pc, #32]	; (800660c <HAL_FLASH_Program+0xa4>)
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	4a07      	ldr	r2, [pc, #28]	; (800660c <HAL_FLASH_Program+0xa4>)
 80065f0:	f023 0301 	bic.w	r3, r3, #1
 80065f4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80065f6:	4b04      	ldr	r3, [pc, #16]	; (8006608 <HAL_FLASH_Program+0xa0>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	200005d4 	.word	0x200005d4
 800660c:	40023c00 	.word	0x40023c00

08006610 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800661a:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <HAL_FLASH_Unlock+0x38>)
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	da0b      	bge.n	800663a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <HAL_FLASH_Unlock+0x38>)
 8006624:	4a09      	ldr	r2, [pc, #36]	; (800664c <HAL_FLASH_Unlock+0x3c>)
 8006626:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006628:	4b07      	ldr	r3, [pc, #28]	; (8006648 <HAL_FLASH_Unlock+0x38>)
 800662a:	4a09      	ldr	r2, [pc, #36]	; (8006650 <HAL_FLASH_Unlock+0x40>)
 800662c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800662e:	4b06      	ldr	r3, [pc, #24]	; (8006648 <HAL_FLASH_Unlock+0x38>)
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	da01      	bge.n	800663a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800663a:	79fb      	ldrb	r3, [r7, #7]
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	40023c00 	.word	0x40023c00
 800664c:	45670123 	.word	0x45670123
 8006650:	cdef89ab 	.word	0xcdef89ab

08006654 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006660:	4b1a      	ldr	r3, [pc, #104]	; (80066cc <FLASH_WaitForLastOperation+0x78>)
 8006662:	2200      	movs	r2, #0
 8006664:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006666:	f7fe fefb 	bl	8005460 <HAL_GetTick>
 800666a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800666c:	e010      	b.n	8006690 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006674:	d00c      	beq.n	8006690 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <FLASH_WaitForLastOperation+0x38>
 800667c:	f7fe fef0 	bl	8005460 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	d201      	bcs.n	8006690 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e019      	b.n	80066c4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006690:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <FLASH_WaitForLastOperation+0x7c>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e8      	bne.n	800666e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800669c:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <FLASH_WaitForLastOperation+0x7c>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80066a8:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <FLASH_WaitForLastOperation+0x7c>)
 80066aa:	2201      	movs	r2, #1
 80066ac:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80066ae:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <FLASH_WaitForLastOperation+0x7c>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80066ba:	f000 f8a3 	bl	8006804 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e000      	b.n	80066c4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
  
}  
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	200005d4 	.word	0x200005d4
 80066d0:	40023c00 	.word	0x40023c00

080066d4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80066d4:	b490      	push	{r4, r7}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80066e0:	4b13      	ldr	r3, [pc, #76]	; (8006730 <FLASH_Program_DoubleWord+0x5c>)
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	4a12      	ldr	r2, [pc, #72]	; (8006730 <FLASH_Program_DoubleWord+0x5c>)
 80066e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80066ec:	4b10      	ldr	r3, [pc, #64]	; (8006730 <FLASH_Program_DoubleWord+0x5c>)
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	4a0f      	ldr	r2, [pc, #60]	; (8006730 <FLASH_Program_DoubleWord+0x5c>)
 80066f2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80066f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80066f8:	4b0d      	ldr	r3, [pc, #52]	; (8006730 <FLASH_Program_DoubleWord+0x5c>)
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	4a0c      	ldr	r2, [pc, #48]	; (8006730 <FLASH_Program_DoubleWord+0x5c>)
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800670a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800670e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	f04f 0400 	mov.w	r4, #0
 800671a:	0013      	movs	r3, r2
 800671c:	2400      	movs	r4, #0
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	3204      	adds	r2, #4
 8006722:	6013      	str	r3, [r2, #0]
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bc90      	pop	{r4, r7}
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40023c00 	.word	0x40023c00

08006734 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800673e:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <FLASH_Program_Word+0x40>)
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	4a0c      	ldr	r2, [pc, #48]	; (8006774 <FLASH_Program_Word+0x40>)
 8006744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006748:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800674a:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <FLASH_Program_Word+0x40>)
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	4a09      	ldr	r2, [pc, #36]	; (8006774 <FLASH_Program_Word+0x40>)
 8006750:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006754:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006756:	4b07      	ldr	r3, [pc, #28]	; (8006774 <FLASH_Program_Word+0x40>)
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	4a06      	ldr	r2, [pc, #24]	; (8006774 <FLASH_Program_Word+0x40>)
 800675c:	f043 0301 	orr.w	r3, r3, #1
 8006760:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	601a      	str	r2, [r3, #0]
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	40023c00 	.word	0x40023c00

08006778 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006784:	4b0d      	ldr	r3, [pc, #52]	; (80067bc <FLASH_Program_HalfWord+0x44>)
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	4a0c      	ldr	r2, [pc, #48]	; (80067bc <FLASH_Program_HalfWord+0x44>)
 800678a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800678e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006790:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <FLASH_Program_HalfWord+0x44>)
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	4a09      	ldr	r2, [pc, #36]	; (80067bc <FLASH_Program_HalfWord+0x44>)
 8006796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800679a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800679c:	4b07      	ldr	r3, [pc, #28]	; (80067bc <FLASH_Program_HalfWord+0x44>)
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	4a06      	ldr	r2, [pc, #24]	; (80067bc <FLASH_Program_HalfWord+0x44>)
 80067a2:	f043 0301 	orr.w	r3, r3, #1
 80067a6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	887a      	ldrh	r2, [r7, #2]
 80067ac:	801a      	strh	r2, [r3, #0]
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	40023c00 	.word	0x40023c00

080067c0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80067cc:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <FLASH_Program_Byte+0x40>)
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	4a0b      	ldr	r2, [pc, #44]	; (8006800 <FLASH_Program_Byte+0x40>)
 80067d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80067d8:	4b09      	ldr	r3, [pc, #36]	; (8006800 <FLASH_Program_Byte+0x40>)
 80067da:	4a09      	ldr	r2, [pc, #36]	; (8006800 <FLASH_Program_Byte+0x40>)
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80067e0:	4b07      	ldr	r3, [pc, #28]	; (8006800 <FLASH_Program_Byte+0x40>)
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	4a06      	ldr	r2, [pc, #24]	; (8006800 <FLASH_Program_Byte+0x40>)
 80067e6:	f043 0301 	orr.w	r3, r3, #1
 80067ea:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	78fa      	ldrb	r2, [r7, #3]
 80067f0:	701a      	strb	r2, [r3, #0]
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40023c00 	.word	0x40023c00

08006804 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006808:	4b2f      	ldr	r3, [pc, #188]	; (80068c8 <FLASH_SetErrorCode+0xc4>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f003 0310 	and.w	r3, r3, #16
 8006810:	2b00      	cmp	r3, #0
 8006812:	d008      	beq.n	8006826 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006814:	4b2d      	ldr	r3, [pc, #180]	; (80068cc <FLASH_SetErrorCode+0xc8>)
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	f043 0310 	orr.w	r3, r3, #16
 800681c:	4a2b      	ldr	r2, [pc, #172]	; (80068cc <FLASH_SetErrorCode+0xc8>)
 800681e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006820:	4b29      	ldr	r3, [pc, #164]	; (80068c8 <FLASH_SetErrorCode+0xc4>)
 8006822:	2210      	movs	r2, #16
 8006824:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006826:	4b28      	ldr	r3, [pc, #160]	; (80068c8 <FLASH_SetErrorCode+0xc4>)
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d008      	beq.n	8006844 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006832:	4b26      	ldr	r3, [pc, #152]	; (80068cc <FLASH_SetErrorCode+0xc8>)
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	f043 0308 	orr.w	r3, r3, #8
 800683a:	4a24      	ldr	r2, [pc, #144]	; (80068cc <FLASH_SetErrorCode+0xc8>)
 800683c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800683e:	4b22      	ldr	r3, [pc, #136]	; (80068c8 <FLASH_SetErrorCode+0xc4>)
 8006840:	2220      	movs	r2, #32
 8006842:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006844:	4b20      	ldr	r3, [pc, #128]	; (80068c8 <FLASH_SetErrorCode+0xc4>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d008      	beq.n	8006862 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006850:	4b1e      	ldr	r3, [pc, #120]	; (80068cc <FLASH_SetErrorCode+0xc8>)
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	f043 0304 	orr.w	r3, r3, #4
 8006858:	4a1c      	ldr	r2, [pc, #112]	; (80068cc <FLASH_SetErrorCode+0xc8>)
 800685a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800685c:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <FLASH_SetErrorCode+0xc4>)
 800685e:	2240      	movs	r2, #64	; 0x40
 8006860:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006862:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <FLASH_SetErrorCode+0xc4>)
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686a:	2b00      	cmp	r3, #0
 800686c:	d008      	beq.n	8006880 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800686e:	4b17      	ldr	r3, [pc, #92]	; (80068cc <FLASH_SetErrorCode+0xc8>)
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f043 0302 	orr.w	r3, r3, #2
 8006876:	4a15      	ldr	r2, [pc, #84]	; (80068cc <FLASH_SetErrorCode+0xc8>)
 8006878:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800687a:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <FLASH_SetErrorCode+0xc4>)
 800687c:	2280      	movs	r2, #128	; 0x80
 800687e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006880:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <FLASH_SetErrorCode+0xc4>)
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006888:	2b00      	cmp	r3, #0
 800688a:	d009      	beq.n	80068a0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800688c:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <FLASH_SetErrorCode+0xc8>)
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f043 0301 	orr.w	r3, r3, #1
 8006894:	4a0d      	ldr	r2, [pc, #52]	; (80068cc <FLASH_SetErrorCode+0xc8>)
 8006896:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <FLASH_SetErrorCode+0xc4>)
 800689a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800689e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80068a0:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <FLASH_SetErrorCode+0xc4>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80068ac:	4b07      	ldr	r3, [pc, #28]	; (80068cc <FLASH_SetErrorCode+0xc8>)
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f043 0320 	orr.w	r3, r3, #32
 80068b4:	4a05      	ldr	r2, [pc, #20]	; (80068cc <FLASH_SetErrorCode+0xc8>)
 80068b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80068b8:	4b03      	ldr	r3, [pc, #12]	; (80068c8 <FLASH_SetErrorCode+0xc4>)
 80068ba:	2202      	movs	r2, #2
 80068bc:	60da      	str	r2, [r3, #12]
  }
}
 80068be:	bf00      	nop
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	40023c00 	.word	0x40023c00
 80068cc:	200005d4 	.word	0x200005d4

080068d0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80068e2:	4b31      	ldr	r3, [pc, #196]	; (80069a8 <HAL_FLASHEx_Erase+0xd8>)
 80068e4:	7e1b      	ldrb	r3, [r3, #24]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_FLASHEx_Erase+0x1e>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e058      	b.n	80069a0 <HAL_FLASHEx_Erase+0xd0>
 80068ee:	4b2e      	ldr	r3, [pc, #184]	; (80069a8 <HAL_FLASHEx_Erase+0xd8>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80068f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80068f8:	f7ff feac 	bl	8006654 <FLASH_WaitForLastOperation>
 80068fc:	4603      	mov	r3, r0
 80068fe:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d148      	bne.n	8006998 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	f04f 32ff 	mov.w	r2, #4294967295
 800690c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d115      	bne.n	8006942 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f000 f844 	bl	80069b0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006928:	f24c 3050 	movw	r0, #50000	; 0xc350
 800692c:	f7ff fe92 	bl	8006654 <FLASH_WaitForLastOperation>
 8006930:	4603      	mov	r3, r0
 8006932:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006934:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <HAL_FLASHEx_Erase+0xdc>)
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <HAL_FLASHEx_Erase+0xdc>)
 800693a:	f023 0304 	bic.w	r3, r3, #4
 800693e:	6113      	str	r3, [r2, #16]
 8006940:	e028      	b.n	8006994 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	60bb      	str	r3, [r7, #8]
 8006948:	e01c      	b.n	8006984 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	4619      	mov	r1, r3
 8006952:	68b8      	ldr	r0, [r7, #8]
 8006954:	f000 f850 	bl	80069f8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006958:	f24c 3050 	movw	r0, #50000	; 0xc350
 800695c:	f7ff fe7a 	bl	8006654 <FLASH_WaitForLastOperation>
 8006960:	4603      	mov	r3, r0
 8006962:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006964:	4b11      	ldr	r3, [pc, #68]	; (80069ac <HAL_FLASHEx_Erase+0xdc>)
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	4a10      	ldr	r2, [pc, #64]	; (80069ac <HAL_FLASHEx_Erase+0xdc>)
 800696a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800696e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	601a      	str	r2, [r3, #0]
          break;
 800697c:	e00a      	b.n	8006994 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	3301      	adds	r3, #1
 8006982:	60bb      	str	r3, [r7, #8]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	4413      	add	r3, r2
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	429a      	cmp	r2, r3
 8006992:	d3da      	bcc.n	800694a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8006994:	f000 f878 	bl	8006a88 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006998:	4b03      	ldr	r3, [pc, #12]	; (80069a8 <HAL_FLASHEx_Erase+0xd8>)
 800699a:	2200      	movs	r2, #0
 800699c:	761a      	strb	r2, [r3, #24]

  return status;
 800699e:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	200005d4 	.word	0x200005d4
 80069ac:	40023c00 	.word	0x40023c00

080069b0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	6039      	str	r1, [r7, #0]
 80069ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80069bc:	4b0d      	ldr	r3, [pc, #52]	; (80069f4 <FLASH_MassErase+0x44>)
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	4a0c      	ldr	r2, [pc, #48]	; (80069f4 <FLASH_MassErase+0x44>)
 80069c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80069c8:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <FLASH_MassErase+0x44>)
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	4a09      	ldr	r2, [pc, #36]	; (80069f4 <FLASH_MassErase+0x44>)
 80069ce:	f043 0304 	orr.w	r3, r3, #4
 80069d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80069d4:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <FLASH_MassErase+0x44>)
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	79fb      	ldrb	r3, [r7, #7]
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	4313      	orrs	r3, r2
 80069de:	4a05      	ldr	r2, [pc, #20]	; (80069f4 <FLASH_MassErase+0x44>)
 80069e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e4:	6113      	str	r3, [r2, #16]
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40023c00 	.word	0x40023c00

080069f8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d102      	bne.n	8006a14 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	e010      	b.n	8006a36 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d103      	bne.n	8006a22 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	e009      	b.n	8006a36 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d103      	bne.n	8006a30 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	e002      	b.n	8006a36 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006a30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a34:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006a36:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <FLASH_Erase_Sector+0x8c>)
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	4a12      	ldr	r2, [pc, #72]	; (8006a84 <FLASH_Erase_Sector+0x8c>)
 8006a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006a42:	4b10      	ldr	r3, [pc, #64]	; (8006a84 <FLASH_Erase_Sector+0x8c>)
 8006a44:	691a      	ldr	r2, [r3, #16]
 8006a46:	490f      	ldr	r1, [pc, #60]	; (8006a84 <FLASH_Erase_Sector+0x8c>)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <FLASH_Erase_Sector+0x8c>)
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	4a0c      	ldr	r2, [pc, #48]	; (8006a84 <FLASH_Erase_Sector+0x8c>)
 8006a54:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006a58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <FLASH_Erase_Sector+0x8c>)
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	4313      	orrs	r3, r2
 8006a64:	4a07      	ldr	r2, [pc, #28]	; (8006a84 <FLASH_Erase_Sector+0x8c>)
 8006a66:	f043 0302 	orr.w	r3, r3, #2
 8006a6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006a6c:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <FLASH_Erase_Sector+0x8c>)
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <FLASH_Erase_Sector+0x8c>)
 8006a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a76:	6113      	str	r3, [r2, #16]
}
 8006a78:	bf00      	nop
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	40023c00 	.word	0x40023c00

08006a88 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8006a8c:	4b20      	ldr	r3, [pc, #128]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d017      	beq.n	8006ac8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006a98:	4b1d      	ldr	r3, [pc, #116]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1c      	ldr	r2, [pc, #112]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006a9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aa2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006aa4:	4b1a      	ldr	r3, [pc, #104]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a19      	ldr	r2, [pc, #100]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006aaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	4b17      	ldr	r3, [pc, #92]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a16      	ldr	r2, [pc, #88]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006abc:	4b14      	ldr	r3, [pc, #80]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a13      	ldr	r2, [pc, #76]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ac6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006ac8:	4b11      	ldr	r3, [pc, #68]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d017      	beq.n	8006b04 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006ad4:	4b0e      	ldr	r3, [pc, #56]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a0d      	ldr	r2, [pc, #52]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ade:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a0a      	ldr	r2, [pc, #40]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006ae6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a07      	ldr	r2, [pc, #28]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006af2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006af6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006af8:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a04      	ldr	r2, [pc, #16]	; (8006b10 <FLASH_FlushCaches+0x88>)
 8006afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b02:	6013      	str	r3, [r2, #0]
  }
}
 8006b04:	bf00      	nop
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40023c00 	.word	0x40023c00

08006b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b089      	sub	sp, #36	; 0x24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	e159      	b.n	8006de4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b30:	2201      	movs	r2, #1
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4013      	ands	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	f040 8148 	bne.w	8006dde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d00b      	beq.n	8006b6e <HAL_GPIO_Init+0x5a>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d007      	beq.n	8006b6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b62:	2b11      	cmp	r3, #17
 8006b64:	d003      	beq.n	8006b6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b12      	cmp	r3, #18
 8006b6c:	d130      	bne.n	8006bd0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	2203      	movs	r2, #3
 8006b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7e:	43db      	mvns	r3, r3
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	4013      	ands	r3, r2
 8006b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bac:	43db      	mvns	r3, r3
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	091b      	lsrs	r3, r3, #4
 8006bba:	f003 0201 	and.w	r2, r3, #1
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	2203      	movs	r2, #3
 8006bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006be0:	43db      	mvns	r3, r3
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	4013      	ands	r3, r2
 8006be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d003      	beq.n	8006c10 <HAL_GPIO_Init+0xfc>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b12      	cmp	r3, #18
 8006c0e:	d123      	bne.n	8006c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	08da      	lsrs	r2, r3, #3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3208      	adds	r2, #8
 8006c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	220f      	movs	r2, #15
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	4013      	ands	r3, r2
 8006c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	fa02 f303 	lsl.w	r3, r2, r3
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	08da      	lsrs	r2, r3, #3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3208      	adds	r2, #8
 8006c52:	69b9      	ldr	r1, [r7, #24]
 8006c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	2203      	movs	r2, #3
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f003 0203 	and.w	r2, r3, #3
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80a2 	beq.w	8006dde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	4b56      	ldr	r3, [pc, #344]	; (8006df8 <HAL_GPIO_Init+0x2e4>)
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	4a55      	ldr	r2, [pc, #340]	; (8006df8 <HAL_GPIO_Init+0x2e4>)
 8006ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8006caa:	4b53      	ldr	r3, [pc, #332]	; (8006df8 <HAL_GPIO_Init+0x2e4>)
 8006cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006cb6:	4a51      	ldr	r2, [pc, #324]	; (8006dfc <HAL_GPIO_Init+0x2e8>)
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	089b      	lsrs	r3, r3, #2
 8006cbc:	3302      	adds	r3, #2
 8006cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	220f      	movs	r2, #15
 8006cce:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a48      	ldr	r2, [pc, #288]	; (8006e00 <HAL_GPIO_Init+0x2ec>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d019      	beq.n	8006d16 <HAL_GPIO_Init+0x202>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a47      	ldr	r2, [pc, #284]	; (8006e04 <HAL_GPIO_Init+0x2f0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d013      	beq.n	8006d12 <HAL_GPIO_Init+0x1fe>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a46      	ldr	r2, [pc, #280]	; (8006e08 <HAL_GPIO_Init+0x2f4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00d      	beq.n	8006d0e <HAL_GPIO_Init+0x1fa>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a45      	ldr	r2, [pc, #276]	; (8006e0c <HAL_GPIO_Init+0x2f8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d007      	beq.n	8006d0a <HAL_GPIO_Init+0x1f6>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a44      	ldr	r2, [pc, #272]	; (8006e10 <HAL_GPIO_Init+0x2fc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d101      	bne.n	8006d06 <HAL_GPIO_Init+0x1f2>
 8006d02:	2304      	movs	r3, #4
 8006d04:	e008      	b.n	8006d18 <HAL_GPIO_Init+0x204>
 8006d06:	2307      	movs	r3, #7
 8006d08:	e006      	b.n	8006d18 <HAL_GPIO_Init+0x204>
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e004      	b.n	8006d18 <HAL_GPIO_Init+0x204>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e002      	b.n	8006d18 <HAL_GPIO_Init+0x204>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e000      	b.n	8006d18 <HAL_GPIO_Init+0x204>
 8006d16:	2300      	movs	r3, #0
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	f002 0203 	and.w	r2, r2, #3
 8006d1e:	0092      	lsls	r2, r2, #2
 8006d20:	4093      	lsls	r3, r2
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d28:	4934      	ldr	r1, [pc, #208]	; (8006dfc <HAL_GPIO_Init+0x2e8>)
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	089b      	lsrs	r3, r3, #2
 8006d2e:	3302      	adds	r3, #2
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d36:	4b37      	ldr	r3, [pc, #220]	; (8006e14 <HAL_GPIO_Init+0x300>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	43db      	mvns	r3, r3
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	4013      	ands	r3, r2
 8006d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d5a:	4a2e      	ldr	r2, [pc, #184]	; (8006e14 <HAL_GPIO_Init+0x300>)
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006d60:	4b2c      	ldr	r3, [pc, #176]	; (8006e14 <HAL_GPIO_Init+0x300>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d84:	4a23      	ldr	r2, [pc, #140]	; (8006e14 <HAL_GPIO_Init+0x300>)
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d8a:	4b22      	ldr	r3, [pc, #136]	; (8006e14 <HAL_GPIO_Init+0x300>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	43db      	mvns	r3, r3
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	4013      	ands	r3, r2
 8006d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006dae:	4a19      	ldr	r2, [pc, #100]	; (8006e14 <HAL_GPIO_Init+0x300>)
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006db4:	4b17      	ldr	r3, [pc, #92]	; (8006e14 <HAL_GPIO_Init+0x300>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	69ba      	ldr	r2, [r7, #24]
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006dd8:	4a0e      	ldr	r2, [pc, #56]	; (8006e14 <HAL_GPIO_Init+0x300>)
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	3301      	adds	r3, #1
 8006de2:	61fb      	str	r3, [r7, #28]
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	2b0f      	cmp	r3, #15
 8006de8:	f67f aea2 	bls.w	8006b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006dec:	bf00      	nop
 8006dee:	3724      	adds	r7, #36	; 0x24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	40013800 	.word	0x40013800
 8006e00:	40020000 	.word	0x40020000
 8006e04:	40020400 	.word	0x40020400
 8006e08:	40020800 	.word	0x40020800
 8006e0c:	40020c00 	.word	0x40020c00
 8006e10:	40021000 	.word	0x40021000
 8006e14:	40013c00 	.word	0x40013c00

08006e18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	e0bb      	b.n	8006fac <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e34:	2201      	movs	r2, #1
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4013      	ands	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	f040 80ab 	bne.w	8006fa6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006e50:	4a5b      	ldr	r2, [pc, #364]	; (8006fc0 <HAL_GPIO_DeInit+0x1a8>)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	089b      	lsrs	r3, r3, #2
 8006e56:	3302      	adds	r3, #2
 8006e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e5c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f003 0303 	and.w	r3, r3, #3
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	220f      	movs	r2, #15
 8006e68:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a53      	ldr	r2, [pc, #332]	; (8006fc4 <HAL_GPIO_DeInit+0x1ac>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d019      	beq.n	8006eae <HAL_GPIO_DeInit+0x96>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a52      	ldr	r2, [pc, #328]	; (8006fc8 <HAL_GPIO_DeInit+0x1b0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d013      	beq.n	8006eaa <HAL_GPIO_DeInit+0x92>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a51      	ldr	r2, [pc, #324]	; (8006fcc <HAL_GPIO_DeInit+0x1b4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d00d      	beq.n	8006ea6 <HAL_GPIO_DeInit+0x8e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a50      	ldr	r2, [pc, #320]	; (8006fd0 <HAL_GPIO_DeInit+0x1b8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d007      	beq.n	8006ea2 <HAL_GPIO_DeInit+0x8a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a4f      	ldr	r2, [pc, #316]	; (8006fd4 <HAL_GPIO_DeInit+0x1bc>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d101      	bne.n	8006e9e <HAL_GPIO_DeInit+0x86>
 8006e9a:	2304      	movs	r3, #4
 8006e9c:	e008      	b.n	8006eb0 <HAL_GPIO_DeInit+0x98>
 8006e9e:	2307      	movs	r3, #7
 8006ea0:	e006      	b.n	8006eb0 <HAL_GPIO_DeInit+0x98>
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e004      	b.n	8006eb0 <HAL_GPIO_DeInit+0x98>
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	e002      	b.n	8006eb0 <HAL_GPIO_DeInit+0x98>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <HAL_GPIO_DeInit+0x98>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	f002 0203 	and.w	r2, r2, #3
 8006eb6:	0092      	lsls	r2, r2, #2
 8006eb8:	4093      	lsls	r3, r2
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d132      	bne.n	8006f26 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006ec0:	4b45      	ldr	r3, [pc, #276]	; (8006fd8 <HAL_GPIO_DeInit+0x1c0>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	43db      	mvns	r3, r3
 8006ec8:	4943      	ldr	r1, [pc, #268]	; (8006fd8 <HAL_GPIO_DeInit+0x1c0>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006ece:	4b42      	ldr	r3, [pc, #264]	; (8006fd8 <HAL_GPIO_DeInit+0x1c0>)
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	4940      	ldr	r1, [pc, #256]	; (8006fd8 <HAL_GPIO_DeInit+0x1c0>)
 8006ed8:	4013      	ands	r3, r2
 8006eda:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006edc:	4b3e      	ldr	r3, [pc, #248]	; (8006fd8 <HAL_GPIO_DeInit+0x1c0>)
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	43db      	mvns	r3, r3
 8006ee4:	493c      	ldr	r1, [pc, #240]	; (8006fd8 <HAL_GPIO_DeInit+0x1c0>)
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006eea:	4b3b      	ldr	r3, [pc, #236]	; (8006fd8 <HAL_GPIO_DeInit+0x1c0>)
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	43db      	mvns	r3, r3
 8006ef2:	4939      	ldr	r1, [pc, #228]	; (8006fd8 <HAL_GPIO_DeInit+0x1c0>)
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	220f      	movs	r2, #15
 8006f02:	fa02 f303 	lsl.w	r3, r2, r3
 8006f06:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006f08:	4a2d      	ldr	r2, [pc, #180]	; (8006fc0 <HAL_GPIO_DeInit+0x1a8>)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	089b      	lsrs	r3, r3, #2
 8006f0e:	3302      	adds	r3, #2
 8006f10:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	43da      	mvns	r2, r3
 8006f18:	4829      	ldr	r0, [pc, #164]	; (8006fc0 <HAL_GPIO_DeInit+0x1a8>)
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	089b      	lsrs	r3, r3, #2
 8006f1e:	400a      	ands	r2, r1
 8006f20:	3302      	adds	r3, #2
 8006f22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	2103      	movs	r1, #3
 8006f30:	fa01 f303 	lsl.w	r3, r1, r3
 8006f34:	43db      	mvns	r3, r3
 8006f36:	401a      	ands	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	08da      	lsrs	r2, r3, #3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3208      	adds	r2, #8
 8006f44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	220f      	movs	r2, #15
 8006f52:	fa02 f303 	lsl.w	r3, r2, r3
 8006f56:	43db      	mvns	r3, r3
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	08d2      	lsrs	r2, r2, #3
 8006f5c:	4019      	ands	r1, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3208      	adds	r2, #8
 8006f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	2103      	movs	r1, #3
 8006f70:	fa01 f303 	lsl.w	r3, r1, r3
 8006f74:	43db      	mvns	r3, r3
 8006f76:	401a      	ands	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	2101      	movs	r1, #1
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	fa01 f303 	lsl.w	r3, r1, r3
 8006f88:	43db      	mvns	r3, r3
 8006f8a:	401a      	ands	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	2103      	movs	r1, #3
 8006f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9e:	43db      	mvns	r3, r3
 8006fa0:	401a      	ands	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2b0f      	cmp	r3, #15
 8006fb0:	f67f af40 	bls.w	8006e34 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006fb4:	bf00      	nop
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	40013800 	.word	0x40013800
 8006fc4:	40020000 	.word	0x40020000
 8006fc8:	40020400 	.word	0x40020400
 8006fcc:	40020800 	.word	0x40020800
 8006fd0:	40020c00 	.word	0x40020c00
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	40013c00 	.word	0x40013c00

08006fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	887b      	ldrh	r3, [r7, #2]
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	73fb      	strb	r3, [r7, #15]
 8006ff8:	e001      	b.n	8006ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	807b      	strh	r3, [r7, #2]
 8007018:	4613      	mov	r3, r2
 800701a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800701c:	787b      	ldrb	r3, [r7, #1]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007022:	887a      	ldrh	r2, [r7, #2]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007028:	e003      	b.n	8007032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800702a:	887b      	ldrh	r3, [r7, #2]
 800702c:	041a      	lsls	r2, r3, #16
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	619a      	str	r2, [r3, #24]
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
	...

08007040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e11f      	b.n	8007292 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fa fd90 	bl	8001b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2224      	movs	r2, #36	; 0x24
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0201 	bic.w	r2, r2, #1
 8007082:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007092:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80070a4:	f001 fd84 	bl	8008bb0 <HAL_RCC_GetPCLK1Freq>
 80070a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	4a7b      	ldr	r2, [pc, #492]	; (800729c <HAL_I2C_Init+0x25c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d807      	bhi.n	80070c4 <HAL_I2C_Init+0x84>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4a7a      	ldr	r2, [pc, #488]	; (80072a0 <HAL_I2C_Init+0x260>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	bf94      	ite	ls
 80070bc:	2301      	movls	r3, #1
 80070be:	2300      	movhi	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	e006      	b.n	80070d2 <HAL_I2C_Init+0x92>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4a77      	ldr	r2, [pc, #476]	; (80072a4 <HAL_I2C_Init+0x264>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	bf94      	ite	ls
 80070cc:	2301      	movls	r3, #1
 80070ce:	2300      	movhi	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e0db      	b.n	8007292 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4a72      	ldr	r2, [pc, #456]	; (80072a8 <HAL_I2C_Init+0x268>)
 80070de:	fba2 2303 	umull	r2, r3, r2, r3
 80070e2:	0c9b      	lsrs	r3, r3, #18
 80070e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	4a64      	ldr	r2, [pc, #400]	; (800729c <HAL_I2C_Init+0x25c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d802      	bhi.n	8007114 <HAL_I2C_Init+0xd4>
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	3301      	adds	r3, #1
 8007112:	e009      	b.n	8007128 <HAL_I2C_Init+0xe8>
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800711a:	fb02 f303 	mul.w	r3, r2, r3
 800711e:	4a63      	ldr	r2, [pc, #396]	; (80072ac <HAL_I2C_Init+0x26c>)
 8007120:	fba2 2303 	umull	r2, r3, r2, r3
 8007124:	099b      	lsrs	r3, r3, #6
 8007126:	3301      	adds	r3, #1
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6812      	ldr	r2, [r2, #0]
 800712c:	430b      	orrs	r3, r1
 800712e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800713a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	4956      	ldr	r1, [pc, #344]	; (800729c <HAL_I2C_Init+0x25c>)
 8007144:	428b      	cmp	r3, r1
 8007146:	d80d      	bhi.n	8007164 <HAL_I2C_Init+0x124>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	1e59      	subs	r1, r3, #1
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	fbb1 f3f3 	udiv	r3, r1, r3
 8007156:	3301      	adds	r3, #1
 8007158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800715c:	2b04      	cmp	r3, #4
 800715e:	bf38      	it	cc
 8007160:	2304      	movcc	r3, #4
 8007162:	e04f      	b.n	8007204 <HAL_I2C_Init+0x1c4>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d111      	bne.n	8007190 <HAL_I2C_Init+0x150>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	1e58      	subs	r0, r3, #1
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6859      	ldr	r1, [r3, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	440b      	add	r3, r1
 800717a:	fbb0 f3f3 	udiv	r3, r0, r3
 800717e:	3301      	adds	r3, #1
 8007180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007184:	2b00      	cmp	r3, #0
 8007186:	bf0c      	ite	eq
 8007188:	2301      	moveq	r3, #1
 800718a:	2300      	movne	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	e012      	b.n	80071b6 <HAL_I2C_Init+0x176>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	1e58      	subs	r0, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6859      	ldr	r1, [r3, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	0099      	lsls	r1, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80071a6:	3301      	adds	r3, #1
 80071a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf0c      	ite	eq
 80071b0:	2301      	moveq	r3, #1
 80071b2:	2300      	movne	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <HAL_I2C_Init+0x17e>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e022      	b.n	8007204 <HAL_I2C_Init+0x1c4>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10e      	bne.n	80071e4 <HAL_I2C_Init+0x1a4>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	1e58      	subs	r0, r3, #1
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6859      	ldr	r1, [r3, #4]
 80071ce:	460b      	mov	r3, r1
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	440b      	add	r3, r1
 80071d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80071d8:	3301      	adds	r3, #1
 80071da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e2:	e00f      	b.n	8007204 <HAL_I2C_Init+0x1c4>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	1e58      	subs	r0, r3, #1
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6859      	ldr	r1, [r3, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	440b      	add	r3, r1
 80071f2:	0099      	lsls	r1, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80071fa:	3301      	adds	r3, #1
 80071fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	6809      	ldr	r1, [r1, #0]
 8007208:	4313      	orrs	r3, r2
 800720a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	69da      	ldr	r2, [r3, #28]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6911      	ldr	r1, [r2, #16]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	68d2      	ldr	r2, [r2, #12]
 800723e:	4311      	orrs	r1, r2
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6812      	ldr	r2, [r2, #0]
 8007244:	430b      	orrs	r3, r1
 8007246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695a      	ldr	r2, [r3, #20]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0201 	orr.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	000186a0 	.word	0x000186a0
 80072a0:	001e847f 	.word	0x001e847f
 80072a4:	003d08ff 	.word	0x003d08ff
 80072a8:	431bde83 	.word	0x431bde83
 80072ac:	10624dd3 	.word	0x10624dd3

080072b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e021      	b.n	8007306 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2224      	movs	r2, #36	; 0x24
 80072c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0201 	bic.w	r2, r2, #1
 80072d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7fa fcc0 	bl	8001c60 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af02      	add	r7, sp, #8
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	607a      	str	r2, [r7, #4]
 800731a:	461a      	mov	r2, r3
 800731c:	460b      	mov	r3, r1
 800731e:	817b      	strh	r3, [r7, #10]
 8007320:	4613      	mov	r3, r2
 8007322:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007324:	f7fe f89c 	bl	8005460 <HAL_GetTick>
 8007328:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b20      	cmp	r3, #32
 8007334:	f040 80e0 	bne.w	80074f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	2319      	movs	r3, #25
 800733e:	2201      	movs	r2, #1
 8007340:	4970      	ldr	r1, [pc, #448]	; (8007504 <HAL_I2C_Master_Transmit+0x1f4>)
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 fe1c 	bl	8007f80 <I2C_WaitOnFlagUntilTimeout>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800734e:	2302      	movs	r3, #2
 8007350:	e0d3      	b.n	80074fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007358:	2b01      	cmp	r3, #1
 800735a:	d101      	bne.n	8007360 <HAL_I2C_Master_Transmit+0x50>
 800735c:	2302      	movs	r3, #2
 800735e:	e0cc      	b.n	80074fa <HAL_I2C_Master_Transmit+0x1ea>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b01      	cmp	r3, #1
 8007374:	d007      	beq.n	8007386 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f042 0201 	orr.w	r2, r2, #1
 8007384:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007394:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2221      	movs	r2, #33	; 0x21
 800739a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2210      	movs	r2, #16
 80073a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	893a      	ldrh	r2, [r7, #8]
 80073b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4a50      	ldr	r2, [pc, #320]	; (8007508 <HAL_I2C_Master_Transmit+0x1f8>)
 80073c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80073c8:	8979      	ldrh	r1, [r7, #10]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	6a3a      	ldr	r2, [r7, #32]
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 fbd6 	bl	8007b80 <I2C_MasterRequestWrite>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e08d      	b.n	80074fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	613b      	str	r3, [r7, #16]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	613b      	str	r3, [r7, #16]
 80073f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80073f4:	e066      	b.n	80074c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	6a39      	ldr	r1, [r7, #32]
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 fe96 	bl	800812c <I2C_WaitOnTXEFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00d      	beq.n	8007422 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	2b04      	cmp	r3, #4
 800740c:	d107      	bne.n	800741e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800741c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e06b      	b.n	80074fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	781a      	ldrb	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800743c:	b29b      	uxth	r3, r3
 800743e:	3b01      	subs	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800744a:	3b01      	subs	r3, #1
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b04      	cmp	r3, #4
 800745e:	d11b      	bne.n	8007498 <HAL_I2C_Master_Transmit+0x188>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007464:	2b00      	cmp	r3, #0
 8007466:	d017      	beq.n	8007498 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	781a      	ldrb	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	6a39      	ldr	r1, [r7, #32]
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 fe86 	bl	80081ae <I2C_WaitOnBTFFlagUntilTimeout>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00d      	beq.n	80074c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	d107      	bne.n	80074c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e01a      	b.n	80074fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d194      	bne.n	80073f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2220      	movs	r2, #32
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	e000      	b.n	80074fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80074f8:	2302      	movs	r3, #2
  }
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	00100002 	.word	0x00100002
 8007508:	ffff0000 	.word	0xffff0000

0800750c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af02      	add	r7, sp, #8
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	4608      	mov	r0, r1
 8007516:	4611      	mov	r1, r2
 8007518:	461a      	mov	r2, r3
 800751a:	4603      	mov	r3, r0
 800751c:	817b      	strh	r3, [r7, #10]
 800751e:	460b      	mov	r3, r1
 8007520:	813b      	strh	r3, [r7, #8]
 8007522:	4613      	mov	r3, r2
 8007524:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007526:	f7fd ff9b 	bl	8005460 <HAL_GetTick>
 800752a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b20      	cmp	r3, #32
 8007536:	f040 80d9 	bne.w	80076ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	2319      	movs	r3, #25
 8007540:	2201      	movs	r2, #1
 8007542:	496d      	ldr	r1, [pc, #436]	; (80076f8 <HAL_I2C_Mem_Write+0x1ec>)
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fd1b 	bl	8007f80 <I2C_WaitOnFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007550:	2302      	movs	r3, #2
 8007552:	e0cc      	b.n	80076ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800755a:	2b01      	cmp	r3, #1
 800755c:	d101      	bne.n	8007562 <HAL_I2C_Mem_Write+0x56>
 800755e:	2302      	movs	r3, #2
 8007560:	e0c5      	b.n	80076ee <HAL_I2C_Mem_Write+0x1e2>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b01      	cmp	r3, #1
 8007576:	d007      	beq.n	8007588 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0201 	orr.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007596:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2221      	movs	r2, #33	; 0x21
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2240      	movs	r2, #64	; 0x40
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a3a      	ldr	r2, [r7, #32]
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4a4d      	ldr	r2, [pc, #308]	; (80076fc <HAL_I2C_Mem_Write+0x1f0>)
 80075c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075ca:	88f8      	ldrh	r0, [r7, #6]
 80075cc:	893a      	ldrh	r2, [r7, #8]
 80075ce:	8979      	ldrh	r1, [r7, #10]
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	4603      	mov	r3, r0
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 fb52 	bl	8007c84 <I2C_RequestMemoryWrite>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d052      	beq.n	800768c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e081      	b.n	80076ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fd9c 	bl	800812c <I2C_WaitOnTXEFlagUntilTimeout>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00d      	beq.n	8007616 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d107      	bne.n	8007612 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007610:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e06b      	b.n	80076ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	781a      	ldrb	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b01      	subs	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b04      	cmp	r3, #4
 8007652:	d11b      	bne.n	800768c <HAL_I2C_Mem_Write+0x180>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007658:	2b00      	cmp	r3, #0
 800765a:	d017      	beq.n	800768c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	781a      	ldrb	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007682:	b29b      	uxth	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1aa      	bne.n	80075ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 fd88 	bl	80081ae <I2C_WaitOnBTFFlagUntilTimeout>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00d      	beq.n	80076c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	d107      	bne.n	80076bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e016      	b.n	80076ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	e000      	b.n	80076ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80076ec:	2302      	movs	r3, #2
  }
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	00100002 	.word	0x00100002
 80076fc:	ffff0000 	.word	0xffff0000

08007700 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08c      	sub	sp, #48	; 0x30
 8007704:	af02      	add	r7, sp, #8
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	4608      	mov	r0, r1
 800770a:	4611      	mov	r1, r2
 800770c:	461a      	mov	r2, r3
 800770e:	4603      	mov	r3, r0
 8007710:	817b      	strh	r3, [r7, #10]
 8007712:	460b      	mov	r3, r1
 8007714:	813b      	strh	r3, [r7, #8]
 8007716:	4613      	mov	r3, r2
 8007718:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800771a:	f7fd fea1 	bl	8005460 <HAL_GetTick>
 800771e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b20      	cmp	r3, #32
 800772a:	f040 8208 	bne.w	8007b3e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	2319      	movs	r3, #25
 8007734:	2201      	movs	r2, #1
 8007736:	497b      	ldr	r1, [pc, #492]	; (8007924 <HAL_I2C_Mem_Read+0x224>)
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 fc21 	bl	8007f80 <I2C_WaitOnFlagUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007744:	2302      	movs	r3, #2
 8007746:	e1fb      	b.n	8007b40 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_I2C_Mem_Read+0x56>
 8007752:	2302      	movs	r3, #2
 8007754:	e1f4      	b.n	8007b40 <HAL_I2C_Mem_Read+0x440>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b01      	cmp	r3, #1
 800776a:	d007      	beq.n	800777c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0201 	orr.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800778a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2222      	movs	r2, #34	; 0x22
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2240      	movs	r2, #64	; 0x40
 8007798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80077ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4a5b      	ldr	r2, [pc, #364]	; (8007928 <HAL_I2C_Mem_Read+0x228>)
 80077bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077be:	88f8      	ldrh	r0, [r7, #6]
 80077c0:	893a      	ldrh	r2, [r7, #8]
 80077c2:	8979      	ldrh	r1, [r7, #10]
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	4603      	mov	r3, r0
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 faee 	bl	8007db0 <I2C_RequestMemoryRead>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e1b0      	b.n	8007b40 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d113      	bne.n	800780e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e6:	2300      	movs	r3, #0
 80077e8:	623b      	str	r3, [r7, #32]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	623b      	str	r3, [r7, #32]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	623b      	str	r3, [r7, #32]
 80077fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	e184      	b.n	8007b18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007812:	2b01      	cmp	r3, #1
 8007814:	d11b      	bne.n	800784e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007824:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007826:	2300      	movs	r3, #0
 8007828:	61fb      	str	r3, [r7, #28]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	61fb      	str	r3, [r7, #28]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	61fb      	str	r3, [r7, #28]
 800783a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	e164      	b.n	8007b18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007852:	2b02      	cmp	r3, #2
 8007854:	d11b      	bne.n	800788e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007864:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007874:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007876:	2300      	movs	r3, #0
 8007878:	61bb      	str	r3, [r7, #24]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	61bb      	str	r3, [r7, #24]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	61bb      	str	r3, [r7, #24]
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	e144      	b.n	8007b18 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800788e:	2300      	movs	r3, #0
 8007890:	617b      	str	r3, [r7, #20]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	617b      	str	r3, [r7, #20]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80078a4:	e138      	b.n	8007b18 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	f200 80f1 	bhi.w	8007a92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d123      	bne.n	8007900 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 fcb7 	bl	8008230 <I2C_WaitOnRXNEFlagUntilTimeout>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e139      	b.n	8007b40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691a      	ldr	r2, [r3, #16]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e8:	3b01      	subs	r3, #1
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	3b01      	subs	r3, #1
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078fe:	e10b      	b.n	8007b18 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007904:	2b02      	cmp	r3, #2
 8007906:	d14e      	bne.n	80079a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	2200      	movs	r2, #0
 8007910:	4906      	ldr	r1, [pc, #24]	; (800792c <HAL_I2C_Mem_Read+0x22c>)
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 fb34 	bl	8007f80 <I2C_WaitOnFlagUntilTimeout>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d008      	beq.n	8007930 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e10e      	b.n	8007b40 <HAL_I2C_Mem_Read+0x440>
 8007922:	bf00      	nop
 8007924:	00100002 	.word	0x00100002
 8007928:	ffff0000 	.word	0xffff0000
 800792c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800793e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	691a      	ldr	r2, [r3, #16]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	b2d2      	uxtb	r2, r2
 800794c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007952:	1c5a      	adds	r2, r3, #1
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	691a      	ldr	r2, [r3, #16]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	b2d2      	uxtb	r2, r2
 800797e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798e:	3b01      	subs	r3, #1
 8007990:	b29a      	uxth	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799a:	b29b      	uxth	r3, r3
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079a4:	e0b8      	b.n	8007b18 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ac:	2200      	movs	r2, #0
 80079ae:	4966      	ldr	r1, [pc, #408]	; (8007b48 <HAL_I2C_Mem_Read+0x448>)
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 fae5 	bl	8007f80 <I2C_WaitOnFlagUntilTimeout>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e0bf      	b.n	8007b40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691a      	ldr	r2, [r3, #16]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	2200      	movs	r2, #0
 8007a0a:	494f      	ldr	r1, [pc, #316]	; (8007b48 <HAL_I2C_Mem_Read+0x448>)
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 fab7 	bl	8007f80 <I2C_WaitOnFlagUntilTimeout>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e091      	b.n	8007b40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691a      	ldr	r2, [r3, #16]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	b2d2      	uxtb	r2, r2
 8007a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a90:	e042      	b.n	8007b18 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fbca 	bl	8008230 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e04c      	b.n	8007b40 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	b2d2      	uxtb	r2, r2
 8007ab2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	f003 0304 	and.w	r3, r3, #4
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	d118      	bne.n	8007b18 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	691a      	ldr	r2, [r3, #16]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	b2d2      	uxtb	r2, r2
 8007af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f47f aec2 	bne.w	80078a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	e000      	b.n	8007b40 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007b3e:	2302      	movs	r3, #2
  }
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3728      	adds	r7, #40	; 0x28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	00010004 	.word	0x00010004

08007b4c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5a:	b2db      	uxtb	r3, r3
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	607a      	str	r2, [r7, #4]
 8007b8a:	603b      	str	r3, [r7, #0]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d006      	beq.n	8007baa <I2C_MasterRequestWrite+0x2a>
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d003      	beq.n	8007baa <I2C_MasterRequestWrite+0x2a>
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ba8:	d108      	bne.n	8007bbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	e00b      	b.n	8007bd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc0:	2b12      	cmp	r3, #18
 8007bc2:	d107      	bne.n	8007bd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f9cd 	bl	8007f80 <I2C_WaitOnFlagUntilTimeout>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00d      	beq.n	8007c08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bfa:	d103      	bne.n	8007c04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e035      	b.n	8007c74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c10:	d108      	bne.n	8007c24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c12:	897b      	ldrh	r3, [r7, #10]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	461a      	mov	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c20:	611a      	str	r2, [r3, #16]
 8007c22:	e01b      	b.n	8007c5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007c24:	897b      	ldrh	r3, [r7, #10]
 8007c26:	11db      	asrs	r3, r3, #7
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	f003 0306 	and.w	r3, r3, #6
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	f063 030f 	orn	r3, r3, #15
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	490e      	ldr	r1, [pc, #56]	; (8007c7c <I2C_MasterRequestWrite+0xfc>)
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 f9f3 	bl	800802e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e010      	b.n	8007c74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007c52:	897b      	ldrh	r3, [r7, #10]
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	4907      	ldr	r1, [pc, #28]	; (8007c80 <I2C_MasterRequestWrite+0x100>)
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 f9e3 	bl	800802e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e000      	b.n	8007c74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	00010008 	.word	0x00010008
 8007c80:	00010002 	.word	0x00010002

08007c84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af02      	add	r7, sp, #8
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	4611      	mov	r1, r2
 8007c90:	461a      	mov	r2, r3
 8007c92:	4603      	mov	r3, r0
 8007c94:	817b      	strh	r3, [r7, #10]
 8007c96:	460b      	mov	r3, r1
 8007c98:	813b      	strh	r3, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 f960 	bl	8007f80 <I2C_WaitOnFlagUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00d      	beq.n	8007ce2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd4:	d103      	bne.n	8007cde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e05f      	b.n	8007da2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ce2:	897b      	ldrh	r3, [r7, #10]
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	6a3a      	ldr	r2, [r7, #32]
 8007cf6:	492d      	ldr	r1, [pc, #180]	; (8007dac <I2C_RequestMemoryWrite+0x128>)
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f998 	bl	800802e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e04c      	b.n	8007da2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d08:	2300      	movs	r3, #0
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	617b      	str	r3, [r7, #20]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d20:	6a39      	ldr	r1, [r7, #32]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 fa02 	bl	800812c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00d      	beq.n	8007d4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d107      	bne.n	8007d46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e02b      	b.n	8007da2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d4a:	88fb      	ldrh	r3, [r7, #6]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d105      	bne.n	8007d5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d50:	893b      	ldrh	r3, [r7, #8]
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	611a      	str	r2, [r3, #16]
 8007d5a:	e021      	b.n	8007da0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d5c:	893b      	ldrh	r3, [r7, #8]
 8007d5e:	0a1b      	lsrs	r3, r3, #8
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6c:	6a39      	ldr	r1, [r7, #32]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 f9dc 	bl	800812c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00d      	beq.n	8007d96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d107      	bne.n	8007d92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e005      	b.n	8007da2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d96:	893b      	ldrh	r3, [r7, #8]
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	00010002 	.word	0x00010002

08007db0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af02      	add	r7, sp, #8
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	4608      	mov	r0, r1
 8007dba:	4611      	mov	r1, r2
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	817b      	strh	r3, [r7, #10]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	813b      	strh	r3, [r7, #8]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007de8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 f8c2 	bl	8007f80 <I2C_WaitOnFlagUntilTimeout>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00d      	beq.n	8007e1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e10:	d103      	bne.n	8007e1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e0aa      	b.n	8007f74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e1e:	897b      	ldrh	r3, [r7, #10]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	461a      	mov	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	6a3a      	ldr	r2, [r7, #32]
 8007e32:	4952      	ldr	r1, [pc, #328]	; (8007f7c <I2C_RequestMemoryRead+0x1cc>)
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 f8fa 	bl	800802e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e097      	b.n	8007f74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e44:	2300      	movs	r3, #0
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5c:	6a39      	ldr	r1, [r7, #32]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 f964 	bl	800812c <I2C_WaitOnTXEFlagUntilTimeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00d      	beq.n	8007e86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d107      	bne.n	8007e82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e076      	b.n	8007f74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d105      	bne.n	8007e98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e8c:	893b      	ldrh	r3, [r7, #8]
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	611a      	str	r2, [r3, #16]
 8007e96:	e021      	b.n	8007edc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e98:	893b      	ldrh	r3, [r7, #8]
 8007e9a:	0a1b      	lsrs	r3, r3, #8
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea8:	6a39      	ldr	r1, [r7, #32]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 f93e 	bl	800812c <I2C_WaitOnTXEFlagUntilTimeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00d      	beq.n	8007ed2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d107      	bne.n	8007ece <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ecc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e050      	b.n	8007f74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ed2:	893b      	ldrh	r3, [r7, #8]
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ede:	6a39      	ldr	r1, [r7, #32]
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 f923 	bl	800812c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00d      	beq.n	8007f08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	d107      	bne.n	8007f04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e035      	b.n	8007f74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 f82b 	bl	8007f80 <I2C_WaitOnFlagUntilTimeout>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00d      	beq.n	8007f4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f3e:	d103      	bne.n	8007f48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e013      	b.n	8007f74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007f4c:	897b      	ldrh	r3, [r7, #10]
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	f043 0301 	orr.w	r3, r3, #1
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	6a3a      	ldr	r2, [r7, #32]
 8007f60:	4906      	ldr	r1, [pc, #24]	; (8007f7c <I2C_RequestMemoryRead+0x1cc>)
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 f863 	bl	800802e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e000      	b.n	8007f74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	00010002 	.word	0x00010002

08007f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f90:	e025      	b.n	8007fde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f98:	d021      	beq.n	8007fde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f9a:	f7fd fa61 	bl	8005460 <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d302      	bcc.n	8007fb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d116      	bne.n	8007fde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fca:	f043 0220 	orr.w	r2, r3, #32
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e023      	b.n	8008026 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	0c1b      	lsrs	r3, r3, #16
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d10d      	bne.n	8008004 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	43da      	mvns	r2, r3
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	bf0c      	ite	eq
 8007ffa:	2301      	moveq	r3, #1
 8007ffc:	2300      	movne	r3, #0
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	461a      	mov	r2, r3
 8008002:	e00c      	b.n	800801e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	43da      	mvns	r2, r3
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	4013      	ands	r3, r2
 8008010:	b29b      	uxth	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	bf0c      	ite	eq
 8008016:	2301      	moveq	r3, #1
 8008018:	2300      	movne	r3, #0
 800801a:	b2db      	uxtb	r3, r3
 800801c:	461a      	mov	r2, r3
 800801e:	79fb      	ldrb	r3, [r7, #7]
 8008020:	429a      	cmp	r2, r3
 8008022:	d0b6      	beq.n	8007f92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	60b9      	str	r1, [r7, #8]
 8008038:	607a      	str	r2, [r7, #4]
 800803a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800803c:	e051      	b.n	80080e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800804c:	d123      	bne.n	8008096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800805c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008066:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2220      	movs	r2, #32
 8008072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	f043 0204 	orr.w	r2, r3, #4
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e046      	b.n	8008124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809c:	d021      	beq.n	80080e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800809e:	f7fd f9df 	bl	8005460 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d302      	bcc.n	80080b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d116      	bne.n	80080e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2220      	movs	r2, #32
 80080be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ce:	f043 0220 	orr.w	r2, r3, #32
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e020      	b.n	8008124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	0c1b      	lsrs	r3, r3, #16
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d10c      	bne.n	8008106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	43da      	mvns	r2, r3
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4013      	ands	r3, r2
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bf14      	ite	ne
 80080fe:	2301      	movne	r3, #1
 8008100:	2300      	moveq	r3, #0
 8008102:	b2db      	uxtb	r3, r3
 8008104:	e00b      	b.n	800811e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	43da      	mvns	r2, r3
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	4013      	ands	r3, r2
 8008112:	b29b      	uxth	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	bf14      	ite	ne
 8008118:	2301      	movne	r3, #1
 800811a:	2300      	moveq	r3, #0
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d18d      	bne.n	800803e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008138:	e02d      	b.n	8008196 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 f8ce 	bl	80082dc <I2C_IsAcknowledgeFailed>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e02d      	b.n	80081a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008150:	d021      	beq.n	8008196 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008152:	f7fd f985 	bl	8005460 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	429a      	cmp	r2, r3
 8008160:	d302      	bcc.n	8008168 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d116      	bne.n	8008196 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	f043 0220 	orr.w	r2, r3, #32
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e007      	b.n	80081a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a0:	2b80      	cmp	r3, #128	; 0x80
 80081a2:	d1ca      	bne.n	800813a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081ba:	e02d      	b.n	8008218 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 f88d 	bl	80082dc <I2C_IsAcknowledgeFailed>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e02d      	b.n	8008228 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d2:	d021      	beq.n	8008218 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d4:	f7fd f944 	bl	8005460 <HAL_GetTick>
 80081d8:	4602      	mov	r2, r0
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d302      	bcc.n	80081ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d116      	bne.n	8008218 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008204:	f043 0220 	orr.w	r2, r3, #32
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e007      	b.n	8008228 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	f003 0304 	and.w	r3, r3, #4
 8008222:	2b04      	cmp	r3, #4
 8008224:	d1ca      	bne.n	80081bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800823c:	e042      	b.n	80082c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	f003 0310 	and.w	r3, r3, #16
 8008248:	2b10      	cmp	r3, #16
 800824a:	d119      	bne.n	8008280 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f06f 0210 	mvn.w	r2, #16
 8008254:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2220      	movs	r2, #32
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e029      	b.n	80082d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008280:	f7fd f8ee 	bl	8005460 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	429a      	cmp	r2, r3
 800828e:	d302      	bcc.n	8008296 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d116      	bne.n	80082c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2220      	movs	r2, #32
 80082a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b0:	f043 0220 	orr.w	r2, r3, #32
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e007      	b.n	80082d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ce:	2b40      	cmp	r3, #64	; 0x40
 80082d0:	d1b5      	bne.n	800823e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f2:	d11b      	bne.n	800832c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2220      	movs	r2, #32
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008318:	f043 0204 	orr.w	r2, r3, #4
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e000      	b.n	800832e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
	...

0800833c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e25b      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d075      	beq.n	8008446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800835a:	4ba3      	ldr	r3, [pc, #652]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f003 030c 	and.w	r3, r3, #12
 8008362:	2b04      	cmp	r3, #4
 8008364:	d00c      	beq.n	8008380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008366:	4ba0      	ldr	r3, [pc, #640]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800836e:	2b08      	cmp	r3, #8
 8008370:	d112      	bne.n	8008398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008372:	4b9d      	ldr	r3, [pc, #628]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800837a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800837e:	d10b      	bne.n	8008398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008380:	4b99      	ldr	r3, [pc, #612]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d05b      	beq.n	8008444 <HAL_RCC_OscConfig+0x108>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d157      	bne.n	8008444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e236      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083a0:	d106      	bne.n	80083b0 <HAL_RCC_OscConfig+0x74>
 80083a2:	4b91      	ldr	r3, [pc, #580]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a90      	ldr	r2, [pc, #576]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80083a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	e01d      	b.n	80083ec <HAL_RCC_OscConfig+0xb0>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083b8:	d10c      	bne.n	80083d4 <HAL_RCC_OscConfig+0x98>
 80083ba:	4b8b      	ldr	r3, [pc, #556]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a8a      	ldr	r2, [pc, #552]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80083c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	4b88      	ldr	r3, [pc, #544]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a87      	ldr	r2, [pc, #540]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80083cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	e00b      	b.n	80083ec <HAL_RCC_OscConfig+0xb0>
 80083d4:	4b84      	ldr	r3, [pc, #528]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a83      	ldr	r2, [pc, #524]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80083da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	4b81      	ldr	r3, [pc, #516]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a80      	ldr	r2, [pc, #512]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80083e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d013      	beq.n	800841c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083f4:	f7fd f834 	bl	8005460 <HAL_GetTick>
 80083f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083fa:	e008      	b.n	800840e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083fc:	f7fd f830 	bl	8005460 <HAL_GetTick>
 8008400:	4602      	mov	r2, r0
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	2b64      	cmp	r3, #100	; 0x64
 8008408:	d901      	bls.n	800840e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e1fb      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800840e:	4b76      	ldr	r3, [pc, #472]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0f0      	beq.n	80083fc <HAL_RCC_OscConfig+0xc0>
 800841a:	e014      	b.n	8008446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800841c:	f7fd f820 	bl	8005460 <HAL_GetTick>
 8008420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008422:	e008      	b.n	8008436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008424:	f7fd f81c 	bl	8005460 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b64      	cmp	r3, #100	; 0x64
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e1e7      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008436:	4b6c      	ldr	r3, [pc, #432]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1f0      	bne.n	8008424 <HAL_RCC_OscConfig+0xe8>
 8008442:	e000      	b.n	8008446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d063      	beq.n	800851a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008452:	4b65      	ldr	r3, [pc, #404]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f003 030c 	and.w	r3, r3, #12
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00b      	beq.n	8008476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800845e:	4b62      	ldr	r3, [pc, #392]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008466:	2b08      	cmp	r3, #8
 8008468:	d11c      	bne.n	80084a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800846a:	4b5f      	ldr	r3, [pc, #380]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d116      	bne.n	80084a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008476:	4b5c      	ldr	r3, [pc, #368]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0302 	and.w	r3, r3, #2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d005      	beq.n	800848e <HAL_RCC_OscConfig+0x152>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d001      	beq.n	800848e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e1bb      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800848e:	4b56      	ldr	r3, [pc, #344]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	4952      	ldr	r1, [pc, #328]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084a2:	e03a      	b.n	800851a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d020      	beq.n	80084ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084ac:	4b4f      	ldr	r3, [pc, #316]	; (80085ec <HAL_RCC_OscConfig+0x2b0>)
 80084ae:	2201      	movs	r2, #1
 80084b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b2:	f7fc ffd5 	bl	8005460 <HAL_GetTick>
 80084b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084b8:	e008      	b.n	80084cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084ba:	f7fc ffd1 	bl	8005460 <HAL_GetTick>
 80084be:	4602      	mov	r2, r0
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d901      	bls.n	80084cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e19c      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084cc:	4b46      	ldr	r3, [pc, #280]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d0f0      	beq.n	80084ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084d8:	4b43      	ldr	r3, [pc, #268]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	4940      	ldr	r1, [pc, #256]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	600b      	str	r3, [r1, #0]
 80084ec:	e015      	b.n	800851a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084ee:	4b3f      	ldr	r3, [pc, #252]	; (80085ec <HAL_RCC_OscConfig+0x2b0>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f4:	f7fc ffb4 	bl	8005460 <HAL_GetTick>
 80084f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084fa:	e008      	b.n	800850e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084fc:	f7fc ffb0 	bl	8005460 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b02      	cmp	r3, #2
 8008508:	d901      	bls.n	800850e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e17b      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800850e:	4b36      	ldr	r3, [pc, #216]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0302 	and.w	r3, r3, #2
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1f0      	bne.n	80084fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0308 	and.w	r3, r3, #8
 8008522:	2b00      	cmp	r3, #0
 8008524:	d030      	beq.n	8008588 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d016      	beq.n	800855c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800852e:	4b30      	ldr	r3, [pc, #192]	; (80085f0 <HAL_RCC_OscConfig+0x2b4>)
 8008530:	2201      	movs	r2, #1
 8008532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008534:	f7fc ff94 	bl	8005460 <HAL_GetTick>
 8008538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800853a:	e008      	b.n	800854e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800853c:	f7fc ff90 	bl	8005460 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	2b02      	cmp	r3, #2
 8008548:	d901      	bls.n	800854e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e15b      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800854e:	4b26      	ldr	r3, [pc, #152]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 8008550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0f0      	beq.n	800853c <HAL_RCC_OscConfig+0x200>
 800855a:	e015      	b.n	8008588 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800855c:	4b24      	ldr	r3, [pc, #144]	; (80085f0 <HAL_RCC_OscConfig+0x2b4>)
 800855e:	2200      	movs	r2, #0
 8008560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008562:	f7fc ff7d 	bl	8005460 <HAL_GetTick>
 8008566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008568:	e008      	b.n	800857c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800856a:	f7fc ff79 	bl	8005460 <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	2b02      	cmp	r3, #2
 8008576:	d901      	bls.n	800857c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e144      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800857c:	4b1a      	ldr	r3, [pc, #104]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 800857e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1f0      	bne.n	800856a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 80a0 	beq.w	80086d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800859a:	4b13      	ldr	r3, [pc, #76]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 800859c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10f      	bne.n	80085c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085a6:	2300      	movs	r3, #0
 80085a8:	60bb      	str	r3, [r7, #8]
 80085aa:	4b0f      	ldr	r3, [pc, #60]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80085ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ae:	4a0e      	ldr	r2, [pc, #56]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80085b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085b4:	6413      	str	r3, [r2, #64]	; 0x40
 80085b6:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <HAL_RCC_OscConfig+0x2ac>)
 80085b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085be:	60bb      	str	r3, [r7, #8]
 80085c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085c2:	2301      	movs	r3, #1
 80085c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085c6:	4b0b      	ldr	r3, [pc, #44]	; (80085f4 <HAL_RCC_OscConfig+0x2b8>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d121      	bne.n	8008616 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085d2:	4b08      	ldr	r3, [pc, #32]	; (80085f4 <HAL_RCC_OscConfig+0x2b8>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a07      	ldr	r2, [pc, #28]	; (80085f4 <HAL_RCC_OscConfig+0x2b8>)
 80085d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085de:	f7fc ff3f 	bl	8005460 <HAL_GetTick>
 80085e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085e4:	e011      	b.n	800860a <HAL_RCC_OscConfig+0x2ce>
 80085e6:	bf00      	nop
 80085e8:	40023800 	.word	0x40023800
 80085ec:	42470000 	.word	0x42470000
 80085f0:	42470e80 	.word	0x42470e80
 80085f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085f8:	f7fc ff32 	bl	8005460 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b02      	cmp	r3, #2
 8008604:	d901      	bls.n	800860a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e0fd      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800860a:	4b81      	ldr	r3, [pc, #516]	; (8008810 <HAL_RCC_OscConfig+0x4d4>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0f0      	beq.n	80085f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d106      	bne.n	800862c <HAL_RCC_OscConfig+0x2f0>
 800861e:	4b7d      	ldr	r3, [pc, #500]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 8008620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008622:	4a7c      	ldr	r2, [pc, #496]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 8008624:	f043 0301 	orr.w	r3, r3, #1
 8008628:	6713      	str	r3, [r2, #112]	; 0x70
 800862a:	e01c      	b.n	8008666 <HAL_RCC_OscConfig+0x32a>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	2b05      	cmp	r3, #5
 8008632:	d10c      	bne.n	800864e <HAL_RCC_OscConfig+0x312>
 8008634:	4b77      	ldr	r3, [pc, #476]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 8008636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008638:	4a76      	ldr	r2, [pc, #472]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 800863a:	f043 0304 	orr.w	r3, r3, #4
 800863e:	6713      	str	r3, [r2, #112]	; 0x70
 8008640:	4b74      	ldr	r3, [pc, #464]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 8008642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008644:	4a73      	ldr	r2, [pc, #460]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 8008646:	f043 0301 	orr.w	r3, r3, #1
 800864a:	6713      	str	r3, [r2, #112]	; 0x70
 800864c:	e00b      	b.n	8008666 <HAL_RCC_OscConfig+0x32a>
 800864e:	4b71      	ldr	r3, [pc, #452]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 8008650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008652:	4a70      	ldr	r2, [pc, #448]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 8008654:	f023 0301 	bic.w	r3, r3, #1
 8008658:	6713      	str	r3, [r2, #112]	; 0x70
 800865a:	4b6e      	ldr	r3, [pc, #440]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 800865c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800865e:	4a6d      	ldr	r2, [pc, #436]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 8008660:	f023 0304 	bic.w	r3, r3, #4
 8008664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d015      	beq.n	800869a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800866e:	f7fc fef7 	bl	8005460 <HAL_GetTick>
 8008672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008674:	e00a      	b.n	800868c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008676:	f7fc fef3 	bl	8005460 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	f241 3288 	movw	r2, #5000	; 0x1388
 8008684:	4293      	cmp	r3, r2
 8008686:	d901      	bls.n	800868c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e0bc      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800868c:	4b61      	ldr	r3, [pc, #388]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 800868e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0ee      	beq.n	8008676 <HAL_RCC_OscConfig+0x33a>
 8008698:	e014      	b.n	80086c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800869a:	f7fc fee1 	bl	8005460 <HAL_GetTick>
 800869e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086a0:	e00a      	b.n	80086b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086a2:	f7fc fedd 	bl	8005460 <HAL_GetTick>
 80086a6:	4602      	mov	r2, r0
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d901      	bls.n	80086b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e0a6      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086b8:	4b56      	ldr	r3, [pc, #344]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 80086ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086bc:	f003 0302 	and.w	r3, r3, #2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1ee      	bne.n	80086a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d105      	bne.n	80086d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086ca:	4b52      	ldr	r3, [pc, #328]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	4a51      	ldr	r2, [pc, #324]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 80086d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 8092 	beq.w	8008804 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80086e0:	4b4c      	ldr	r3, [pc, #304]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f003 030c 	and.w	r3, r3, #12
 80086e8:	2b08      	cmp	r3, #8
 80086ea:	d05c      	beq.n	80087a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d141      	bne.n	8008778 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086f4:	4b48      	ldr	r3, [pc, #288]	; (8008818 <HAL_RCC_OscConfig+0x4dc>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086fa:	f7fc feb1 	bl	8005460 <HAL_GetTick>
 80086fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008700:	e008      	b.n	8008714 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008702:	f7fc fead 	bl	8005460 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b02      	cmp	r3, #2
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e078      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008714:	4b3f      	ldr	r3, [pc, #252]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1f0      	bne.n	8008702 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	69da      	ldr	r2, [r3, #28]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	431a      	orrs	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	019b      	lsls	r3, r3, #6
 8008730:	431a      	orrs	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	085b      	lsrs	r3, r3, #1
 8008738:	3b01      	subs	r3, #1
 800873a:	041b      	lsls	r3, r3, #16
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008742:	061b      	lsls	r3, r3, #24
 8008744:	4933      	ldr	r1, [pc, #204]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 8008746:	4313      	orrs	r3, r2
 8008748:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800874a:	4b33      	ldr	r3, [pc, #204]	; (8008818 <HAL_RCC_OscConfig+0x4dc>)
 800874c:	2201      	movs	r2, #1
 800874e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008750:	f7fc fe86 	bl	8005460 <HAL_GetTick>
 8008754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008758:	f7fc fe82 	bl	8005460 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e04d      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800876a:	4b2a      	ldr	r3, [pc, #168]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0f0      	beq.n	8008758 <HAL_RCC_OscConfig+0x41c>
 8008776:	e045      	b.n	8008804 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008778:	4b27      	ldr	r3, [pc, #156]	; (8008818 <HAL_RCC_OscConfig+0x4dc>)
 800877a:	2200      	movs	r2, #0
 800877c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800877e:	f7fc fe6f 	bl	8005460 <HAL_GetTick>
 8008782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008784:	e008      	b.n	8008798 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008786:	f7fc fe6b 	bl	8005460 <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	2b02      	cmp	r3, #2
 8008792:	d901      	bls.n	8008798 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e036      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008798:	4b1e      	ldr	r3, [pc, #120]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1f0      	bne.n	8008786 <HAL_RCC_OscConfig+0x44a>
 80087a4:	e02e      	b.n	8008804 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d101      	bne.n	80087b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e029      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80087b2:	4b18      	ldr	r3, [pc, #96]	; (8008814 <HAL_RCC_OscConfig+0x4d8>)
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d11c      	bne.n	8008800 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d115      	bne.n	8008800 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087da:	4013      	ands	r3, r2
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d10d      	bne.n	8008800 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d106      	bne.n	8008800 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d001      	beq.n	8008804 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e000      	b.n	8008806 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	40007000 	.word	0x40007000
 8008814:	40023800 	.word	0x40023800
 8008818:	42470060 	.word	0x42470060

0800881c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e0cc      	b.n	80089ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008830:	4b68      	ldr	r3, [pc, #416]	; (80089d4 <HAL_RCC_ClockConfig+0x1b8>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	429a      	cmp	r2, r3
 800883c:	d90c      	bls.n	8008858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800883e:	4b65      	ldr	r3, [pc, #404]	; (80089d4 <HAL_RCC_ClockConfig+0x1b8>)
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	b2d2      	uxtb	r2, r2
 8008844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008846:	4b63      	ldr	r3, [pc, #396]	; (80089d4 <HAL_RCC_ClockConfig+0x1b8>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 030f 	and.w	r3, r3, #15
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	429a      	cmp	r2, r3
 8008852:	d001      	beq.n	8008858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e0b8      	b.n	80089ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d020      	beq.n	80088a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0304 	and.w	r3, r3, #4
 800886c:	2b00      	cmp	r3, #0
 800886e:	d005      	beq.n	800887c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008870:	4b59      	ldr	r3, [pc, #356]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	4a58      	ldr	r2, [pc, #352]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800887a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0308 	and.w	r3, r3, #8
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008888:	4b53      	ldr	r3, [pc, #332]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	4a52      	ldr	r2, [pc, #328]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 800888e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008894:	4b50      	ldr	r3, [pc, #320]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	494d      	ldr	r1, [pc, #308]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d044      	beq.n	800893c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d107      	bne.n	80088ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088ba:	4b47      	ldr	r3, [pc, #284]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d119      	bne.n	80088fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e07f      	b.n	80089ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d003      	beq.n	80088da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	d107      	bne.n	80088ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088da:	4b3f      	ldr	r3, [pc, #252]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d109      	bne.n	80088fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e06f      	b.n	80089ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088ea:	4b3b      	ldr	r3, [pc, #236]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e067      	b.n	80089ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088fa:	4b37      	ldr	r3, [pc, #220]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	f023 0203 	bic.w	r2, r3, #3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	4934      	ldr	r1, [pc, #208]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008908:	4313      	orrs	r3, r2
 800890a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800890c:	f7fc fda8 	bl	8005460 <HAL_GetTick>
 8008910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008912:	e00a      	b.n	800892a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008914:	f7fc fda4 	bl	8005460 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008922:	4293      	cmp	r3, r2
 8008924:	d901      	bls.n	800892a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e04f      	b.n	80089ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800892a:	4b2b      	ldr	r3, [pc, #172]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f003 020c 	and.w	r2, r3, #12
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	429a      	cmp	r2, r3
 800893a:	d1eb      	bne.n	8008914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800893c:	4b25      	ldr	r3, [pc, #148]	; (80089d4 <HAL_RCC_ClockConfig+0x1b8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 030f 	and.w	r3, r3, #15
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	429a      	cmp	r2, r3
 8008948:	d20c      	bcs.n	8008964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800894a:	4b22      	ldr	r3, [pc, #136]	; (80089d4 <HAL_RCC_ClockConfig+0x1b8>)
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	b2d2      	uxtb	r2, r2
 8008950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008952:	4b20      	ldr	r3, [pc, #128]	; (80089d4 <HAL_RCC_ClockConfig+0x1b8>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 030f 	and.w	r3, r3, #15
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	429a      	cmp	r2, r3
 800895e:	d001      	beq.n	8008964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e032      	b.n	80089ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0304 	and.w	r3, r3, #4
 800896c:	2b00      	cmp	r3, #0
 800896e:	d008      	beq.n	8008982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008970:	4b19      	ldr	r3, [pc, #100]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	4916      	ldr	r1, [pc, #88]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 800897e:	4313      	orrs	r3, r2
 8008980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0308 	and.w	r3, r3, #8
 800898a:	2b00      	cmp	r3, #0
 800898c:	d009      	beq.n	80089a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800898e:	4b12      	ldr	r3, [pc, #72]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	490e      	ldr	r1, [pc, #56]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80089a2:	f000 f821 	bl	80089e8 <HAL_RCC_GetSysClockFreq>
 80089a6:	4601      	mov	r1, r0
 80089a8:	4b0b      	ldr	r3, [pc, #44]	; (80089d8 <HAL_RCC_ClockConfig+0x1bc>)
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	091b      	lsrs	r3, r3, #4
 80089ae:	f003 030f 	and.w	r3, r3, #15
 80089b2:	4a0a      	ldr	r2, [pc, #40]	; (80089dc <HAL_RCC_ClockConfig+0x1c0>)
 80089b4:	5cd3      	ldrb	r3, [r2, r3]
 80089b6:	fa21 f303 	lsr.w	r3, r1, r3
 80089ba:	4a09      	ldr	r2, [pc, #36]	; (80089e0 <HAL_RCC_ClockConfig+0x1c4>)
 80089bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80089be:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <HAL_RCC_ClockConfig+0x1c8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fc fd08 	bl	80053d8 <HAL_InitTick>

  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	40023c00 	.word	0x40023c00
 80089d8:	40023800 	.word	0x40023800
 80089dc:	0800eac4 	.word	0x0800eac4
 80089e0:	20000004 	.word	0x20000004
 80089e4:	2000008c 	.word	0x2000008c

080089e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	607b      	str	r3, [r7, #4]
 80089f2:	2300      	movs	r3, #0
 80089f4:	60fb      	str	r3, [r7, #12]
 80089f6:	2300      	movs	r3, #0
 80089f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089fe:	4b63      	ldr	r3, [pc, #396]	; (8008b8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f003 030c 	and.w	r3, r3, #12
 8008a06:	2b04      	cmp	r3, #4
 8008a08:	d007      	beq.n	8008a1a <HAL_RCC_GetSysClockFreq+0x32>
 8008a0a:	2b08      	cmp	r3, #8
 8008a0c:	d008      	beq.n	8008a20 <HAL_RCC_GetSysClockFreq+0x38>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 80b4 	bne.w	8008b7c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a14:	4b5e      	ldr	r3, [pc, #376]	; (8008b90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008a16:	60bb      	str	r3, [r7, #8]
       break;
 8008a18:	e0b3      	b.n	8008b82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a1a:	4b5e      	ldr	r3, [pc, #376]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008a1c:	60bb      	str	r3, [r7, #8]
      break;
 8008a1e:	e0b0      	b.n	8008b82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a20:	4b5a      	ldr	r3, [pc, #360]	; (8008b8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a2a:	4b58      	ldr	r3, [pc, #352]	; (8008b8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d04a      	beq.n	8008acc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a36:	4b55      	ldr	r3, [pc, #340]	; (8008b8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	099b      	lsrs	r3, r3, #6
 8008a3c:	f04f 0400 	mov.w	r4, #0
 8008a40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	ea03 0501 	and.w	r5, r3, r1
 8008a4c:	ea04 0602 	and.w	r6, r4, r2
 8008a50:	4629      	mov	r1, r5
 8008a52:	4632      	mov	r2, r6
 8008a54:	f04f 0300 	mov.w	r3, #0
 8008a58:	f04f 0400 	mov.w	r4, #0
 8008a5c:	0154      	lsls	r4, r2, #5
 8008a5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008a62:	014b      	lsls	r3, r1, #5
 8008a64:	4619      	mov	r1, r3
 8008a66:	4622      	mov	r2, r4
 8008a68:	1b49      	subs	r1, r1, r5
 8008a6a:	eb62 0206 	sbc.w	r2, r2, r6
 8008a6e:	f04f 0300 	mov.w	r3, #0
 8008a72:	f04f 0400 	mov.w	r4, #0
 8008a76:	0194      	lsls	r4, r2, #6
 8008a78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008a7c:	018b      	lsls	r3, r1, #6
 8008a7e:	1a5b      	subs	r3, r3, r1
 8008a80:	eb64 0402 	sbc.w	r4, r4, r2
 8008a84:	f04f 0100 	mov.w	r1, #0
 8008a88:	f04f 0200 	mov.w	r2, #0
 8008a8c:	00e2      	lsls	r2, r4, #3
 8008a8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008a92:	00d9      	lsls	r1, r3, #3
 8008a94:	460b      	mov	r3, r1
 8008a96:	4614      	mov	r4, r2
 8008a98:	195b      	adds	r3, r3, r5
 8008a9a:	eb44 0406 	adc.w	r4, r4, r6
 8008a9e:	f04f 0100 	mov.w	r1, #0
 8008aa2:	f04f 0200 	mov.w	r2, #0
 8008aa6:	0262      	lsls	r2, r4, #9
 8008aa8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008aac:	0259      	lsls	r1, r3, #9
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f04f 0400 	mov.w	r4, #0
 8008abc:	461a      	mov	r2, r3
 8008abe:	4623      	mov	r3, r4
 8008ac0:	f7f8 f8ea 	bl	8000c98 <__aeabi_uldivmod>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	e049      	b.n	8008b60 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008acc:	4b2f      	ldr	r3, [pc, #188]	; (8008b8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	099b      	lsrs	r3, r3, #6
 8008ad2:	f04f 0400 	mov.w	r4, #0
 8008ad6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008ada:	f04f 0200 	mov.w	r2, #0
 8008ade:	ea03 0501 	and.w	r5, r3, r1
 8008ae2:	ea04 0602 	and.w	r6, r4, r2
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	4632      	mov	r2, r6
 8008aea:	f04f 0300 	mov.w	r3, #0
 8008aee:	f04f 0400 	mov.w	r4, #0
 8008af2:	0154      	lsls	r4, r2, #5
 8008af4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008af8:	014b      	lsls	r3, r1, #5
 8008afa:	4619      	mov	r1, r3
 8008afc:	4622      	mov	r2, r4
 8008afe:	1b49      	subs	r1, r1, r5
 8008b00:	eb62 0206 	sbc.w	r2, r2, r6
 8008b04:	f04f 0300 	mov.w	r3, #0
 8008b08:	f04f 0400 	mov.w	r4, #0
 8008b0c:	0194      	lsls	r4, r2, #6
 8008b0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008b12:	018b      	lsls	r3, r1, #6
 8008b14:	1a5b      	subs	r3, r3, r1
 8008b16:	eb64 0402 	sbc.w	r4, r4, r2
 8008b1a:	f04f 0100 	mov.w	r1, #0
 8008b1e:	f04f 0200 	mov.w	r2, #0
 8008b22:	00e2      	lsls	r2, r4, #3
 8008b24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008b28:	00d9      	lsls	r1, r3, #3
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	195b      	adds	r3, r3, r5
 8008b30:	eb44 0406 	adc.w	r4, r4, r6
 8008b34:	f04f 0100 	mov.w	r1, #0
 8008b38:	f04f 0200 	mov.w	r2, #0
 8008b3c:	02a2      	lsls	r2, r4, #10
 8008b3e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008b42:	0299      	lsls	r1, r3, #10
 8008b44:	460b      	mov	r3, r1
 8008b46:	4614      	mov	r4, r2
 8008b48:	4618      	mov	r0, r3
 8008b4a:	4621      	mov	r1, r4
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f04f 0400 	mov.w	r4, #0
 8008b52:	461a      	mov	r2, r3
 8008b54:	4623      	mov	r3, r4
 8008b56:	f7f8 f89f 	bl	8000c98 <__aeabi_uldivmod>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b60:	4b0a      	ldr	r3, [pc, #40]	; (8008b8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	0c1b      	lsrs	r3, r3, #16
 8008b66:	f003 0303 	and.w	r3, r3, #3
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b78:	60bb      	str	r3, [r7, #8]
      break;
 8008b7a:	e002      	b.n	8008b82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b7c:	4b04      	ldr	r3, [pc, #16]	; (8008b90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008b7e:	60bb      	str	r3, [r7, #8]
      break;
 8008b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b82:	68bb      	ldr	r3, [r7, #8]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b8c:	40023800 	.word	0x40023800
 8008b90:	00f42400 	.word	0x00f42400
 8008b94:	007a1200 	.word	0x007a1200

08008b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b9c:	4b03      	ldr	r3, [pc, #12]	; (8008bac <HAL_RCC_GetHCLKFreq+0x14>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	20000004 	.word	0x20000004

08008bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008bb4:	f7ff fff0 	bl	8008b98 <HAL_RCC_GetHCLKFreq>
 8008bb8:	4601      	mov	r1, r0
 8008bba:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	0a9b      	lsrs	r3, r3, #10
 8008bc0:	f003 0307 	and.w	r3, r3, #7
 8008bc4:	4a03      	ldr	r2, [pc, #12]	; (8008bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bc6:	5cd3      	ldrb	r3, [r2, r3]
 8008bc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	40023800 	.word	0x40023800
 8008bd4:	0800ead4 	.word	0x0800ead4

08008bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008bdc:	f7ff ffdc 	bl	8008b98 <HAL_RCC_GetHCLKFreq>
 8008be0:	4601      	mov	r1, r0
 8008be2:	4b05      	ldr	r3, [pc, #20]	; (8008bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	0b5b      	lsrs	r3, r3, #13
 8008be8:	f003 0307 	and.w	r3, r3, #7
 8008bec:	4a03      	ldr	r2, [pc, #12]	; (8008bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bee:	5cd3      	ldrb	r3, [r2, r3]
 8008bf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	40023800 	.word	0x40023800
 8008bfc:	0800ead4 	.word	0x0800ead4

08008c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e01d      	b.n	8008c4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d106      	bne.n	8008c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7fa fc46 	bl	80034b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4610      	mov	r0, r2
 8008c40:	f000 fb8e 	bl	8009360 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b085      	sub	sp, #20
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68da      	ldr	r2, [r3, #12]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f042 0201 	orr.w	r2, r2, #1
 8008c6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f003 0307 	and.w	r3, r3, #7
 8008c78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b06      	cmp	r3, #6
 8008c7e:	d007      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f042 0201 	orr.w	r2, r2, #1
 8008c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e01d      	b.n	8008cec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d106      	bne.n	8008cca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f815 	bl	8008cf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f000 fb3f 	bl	8009360 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2201      	movs	r2, #1
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 fdc6 	bl	80098ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a10      	ldr	r2, [pc, #64]	; (8008d68 <HAL_TIM_PWM_Start+0x60>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d107      	bne.n	8008d3a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b06      	cmp	r3, #6
 8008d4a:	d007      	beq.n	8008d5c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f042 0201 	orr.w	r2, r2, #1
 8008d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	40010000 	.word	0x40010000

08008d6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fd94 	bl	80098ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a1d      	ldr	r2, [pc, #116]	; (8008e00 <HAL_TIM_PWM_Stop+0x94>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d117      	bne.n	8008dbe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6a1a      	ldr	r2, [r3, #32]
 8008d94:	f241 1311 	movw	r3, #4369	; 0x1111
 8008d98:	4013      	ands	r3, r2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10f      	bne.n	8008dbe <HAL_TIM_PWM_Stop+0x52>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6a1a      	ldr	r2, [r3, #32]
 8008da4:	f240 4344 	movw	r3, #1092	; 0x444
 8008da8:	4013      	ands	r3, r2
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d107      	bne.n	8008dbe <HAL_TIM_PWM_Stop+0x52>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008dbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6a1a      	ldr	r2, [r3, #32]
 8008dc4:	f241 1311 	movw	r3, #4369	; 0x1111
 8008dc8:	4013      	ands	r3, r2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10f      	bne.n	8008dee <HAL_TIM_PWM_Stop+0x82>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6a1a      	ldr	r2, [r3, #32]
 8008dd4:	f240 4344 	movw	r3, #1092	; 0x444
 8008dd8:	4013      	ands	r3, r2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d107      	bne.n	8008dee <HAL_TIM_PWM_Stop+0x82>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 0201 	bic.w	r2, r2, #1
 8008dec:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	40010000 	.word	0x40010000

08008e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d122      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f003 0302 	and.w	r3, r3, #2
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d11b      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f06f 0202 	mvn.w	r2, #2
 8008e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	f003 0303 	and.w	r3, r3, #3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa6b 	bl	8009322 <HAL_TIM_IC_CaptureCallback>
 8008e4c:	e005      	b.n	8008e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fa5d 	bl	800930e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fa6e 	bl	8009336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	f003 0304 	and.w	r3, r3, #4
 8008e6a:	2b04      	cmp	r3, #4
 8008e6c:	d122      	bne.n	8008eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f003 0304 	and.w	r3, r3, #4
 8008e78:	2b04      	cmp	r3, #4
 8008e7a:	d11b      	bne.n	8008eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f06f 0204 	mvn.w	r2, #4
 8008e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa41 	bl	8009322 <HAL_TIM_IC_CaptureCallback>
 8008ea0:	e005      	b.n	8008eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fa33 	bl	800930e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fa44 	bl	8009336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	f003 0308 	and.w	r3, r3, #8
 8008ebe:	2b08      	cmp	r3, #8
 8008ec0:	d122      	bne.n	8008f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f003 0308 	and.w	r3, r3, #8
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d11b      	bne.n	8008f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f06f 0208 	mvn.w	r2, #8
 8008ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2204      	movs	r2, #4
 8008ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	f003 0303 	and.w	r3, r3, #3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa17 	bl	8009322 <HAL_TIM_IC_CaptureCallback>
 8008ef4:	e005      	b.n	8008f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fa09 	bl	800930e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa1a 	bl	8009336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	f003 0310 	and.w	r3, r3, #16
 8008f12:	2b10      	cmp	r3, #16
 8008f14:	d122      	bne.n	8008f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f003 0310 	and.w	r3, r3, #16
 8008f20:	2b10      	cmp	r3, #16
 8008f22:	d11b      	bne.n	8008f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f06f 0210 	mvn.w	r2, #16
 8008f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2208      	movs	r2, #8
 8008f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d003      	beq.n	8008f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f9ed 	bl	8009322 <HAL_TIM_IC_CaptureCallback>
 8008f48:	e005      	b.n	8008f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f9df 	bl	800930e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f9f0 	bl	8009336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d10e      	bne.n	8008f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d107      	bne.n	8008f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f06f 0201 	mvn.w	r2, #1
 8008f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7f9 f964 	bl	8002250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f92:	2b80      	cmp	r3, #128	; 0x80
 8008f94:	d10e      	bne.n	8008fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa0:	2b80      	cmp	r3, #128	; 0x80
 8008fa2:	d107      	bne.n	8008fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fd1a 	bl	80099e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbe:	2b40      	cmp	r3, #64	; 0x40
 8008fc0:	d10e      	bne.n	8008fe0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fcc:	2b40      	cmp	r3, #64	; 0x40
 8008fce:	d107      	bne.n	8008fe0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f9b5 	bl	800934a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	f003 0320 	and.w	r3, r3, #32
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	d10e      	bne.n	800900c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f003 0320 	and.w	r3, r3, #32
 8008ff8:	2b20      	cmp	r3, #32
 8008ffa:	d107      	bne.n	800900c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f06f 0220 	mvn.w	r2, #32
 8009004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fce4 	bl	80099d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009026:	2b01      	cmp	r3, #1
 8009028:	d101      	bne.n	800902e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800902a:	2302      	movs	r3, #2
 800902c:	e0b4      	b.n	8009198 <HAL_TIM_PWM_ConfigChannel+0x184>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2202      	movs	r2, #2
 800903a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b0c      	cmp	r3, #12
 8009042:	f200 809f 	bhi.w	8009184 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009046:	a201      	add	r2, pc, #4	; (adr r2, 800904c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	08009081 	.word	0x08009081
 8009050:	08009185 	.word	0x08009185
 8009054:	08009185 	.word	0x08009185
 8009058:	08009185 	.word	0x08009185
 800905c:	080090c1 	.word	0x080090c1
 8009060:	08009185 	.word	0x08009185
 8009064:	08009185 	.word	0x08009185
 8009068:	08009185 	.word	0x08009185
 800906c:	08009103 	.word	0x08009103
 8009070:	08009185 	.word	0x08009185
 8009074:	08009185 	.word	0x08009185
 8009078:	08009185 	.word	0x08009185
 800907c:	08009143 	.word	0x08009143
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68b9      	ldr	r1, [r7, #8]
 8009086:	4618      	mov	r0, r3
 8009088:	f000 f9ea 	bl	8009460 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	699a      	ldr	r2, [r3, #24]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f042 0208 	orr.w	r2, r2, #8
 800909a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	699a      	ldr	r2, [r3, #24]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f022 0204 	bic.w	r2, r2, #4
 80090aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6999      	ldr	r1, [r3, #24]
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	691a      	ldr	r2, [r3, #16]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	619a      	str	r2, [r3, #24]
      break;
 80090be:	e062      	b.n	8009186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68b9      	ldr	r1, [r7, #8]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 fa30 	bl	800952c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	699a      	ldr	r2, [r3, #24]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	699a      	ldr	r2, [r3, #24]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6999      	ldr	r1, [r3, #24]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	021a      	lsls	r2, r3, #8
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	430a      	orrs	r2, r1
 80090fe:	619a      	str	r2, [r3, #24]
      break;
 8009100:	e041      	b.n	8009186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68b9      	ldr	r1, [r7, #8]
 8009108:	4618      	mov	r0, r3
 800910a:	f000 fa7b 	bl	8009604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	69da      	ldr	r2, [r3, #28]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f042 0208 	orr.w	r2, r2, #8
 800911c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	69da      	ldr	r2, [r3, #28]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 0204 	bic.w	r2, r2, #4
 800912c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69d9      	ldr	r1, [r3, #28]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	691a      	ldr	r2, [r3, #16]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	430a      	orrs	r2, r1
 800913e:	61da      	str	r2, [r3, #28]
      break;
 8009140:	e021      	b.n	8009186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68b9      	ldr	r1, [r7, #8]
 8009148:	4618      	mov	r0, r3
 800914a:	f000 fac5 	bl	80096d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	69da      	ldr	r2, [r3, #28]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800915c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69da      	ldr	r2, [r3, #28]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800916c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69d9      	ldr	r1, [r3, #28]
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	021a      	lsls	r2, r3, #8
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	430a      	orrs	r2, r1
 8009180:	61da      	str	r2, [r3, #28]
      break;
 8009182:	e000      	b.n	8009186 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009184:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d101      	bne.n	80091b8 <HAL_TIM_ConfigClockSource+0x18>
 80091b4:	2302      	movs	r3, #2
 80091b6:	e0a6      	b.n	8009306 <HAL_TIM_ConfigClockSource+0x166>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2202      	movs	r2, #2
 80091c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80091d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b40      	cmp	r3, #64	; 0x40
 80091ee:	d067      	beq.n	80092c0 <HAL_TIM_ConfigClockSource+0x120>
 80091f0:	2b40      	cmp	r3, #64	; 0x40
 80091f2:	d80b      	bhi.n	800920c <HAL_TIM_ConfigClockSource+0x6c>
 80091f4:	2b10      	cmp	r3, #16
 80091f6:	d073      	beq.n	80092e0 <HAL_TIM_ConfigClockSource+0x140>
 80091f8:	2b10      	cmp	r3, #16
 80091fa:	d802      	bhi.n	8009202 <HAL_TIM_ConfigClockSource+0x62>
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d06f      	beq.n	80092e0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009200:	e078      	b.n	80092f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009202:	2b20      	cmp	r3, #32
 8009204:	d06c      	beq.n	80092e0 <HAL_TIM_ConfigClockSource+0x140>
 8009206:	2b30      	cmp	r3, #48	; 0x30
 8009208:	d06a      	beq.n	80092e0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800920a:	e073      	b.n	80092f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800920c:	2b70      	cmp	r3, #112	; 0x70
 800920e:	d00d      	beq.n	800922c <HAL_TIM_ConfigClockSource+0x8c>
 8009210:	2b70      	cmp	r3, #112	; 0x70
 8009212:	d804      	bhi.n	800921e <HAL_TIM_ConfigClockSource+0x7e>
 8009214:	2b50      	cmp	r3, #80	; 0x50
 8009216:	d033      	beq.n	8009280 <HAL_TIM_ConfigClockSource+0xe0>
 8009218:	2b60      	cmp	r3, #96	; 0x60
 800921a:	d041      	beq.n	80092a0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800921c:	e06a      	b.n	80092f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800921e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009222:	d066      	beq.n	80092f2 <HAL_TIM_ConfigClockSource+0x152>
 8009224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009228:	d017      	beq.n	800925a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800922a:	e063      	b.n	80092f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6818      	ldr	r0, [r3, #0]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	6899      	ldr	r1, [r3, #8]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f000 fb16 	bl	800986c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800924e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	609a      	str	r2, [r3, #8]
      break;
 8009258:	e04c      	b.n	80092f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6818      	ldr	r0, [r3, #0]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	6899      	ldr	r1, [r3, #8]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	f000 faff 	bl	800986c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689a      	ldr	r2, [r3, #8]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800927c:	609a      	str	r2, [r3, #8]
      break;
 800927e:	e039      	b.n	80092f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6818      	ldr	r0, [r3, #0]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	6859      	ldr	r1, [r3, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	461a      	mov	r2, r3
 800928e:	f000 fa73 	bl	8009778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2150      	movs	r1, #80	; 0x50
 8009298:	4618      	mov	r0, r3
 800929a:	f000 facc 	bl	8009836 <TIM_ITRx_SetConfig>
      break;
 800929e:	e029      	b.n	80092f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6818      	ldr	r0, [r3, #0]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	6859      	ldr	r1, [r3, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	461a      	mov	r2, r3
 80092ae:	f000 fa92 	bl	80097d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2160      	movs	r1, #96	; 0x60
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 fabc 	bl	8009836 <TIM_ITRx_SetConfig>
      break;
 80092be:	e019      	b.n	80092f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6818      	ldr	r0, [r3, #0]
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	6859      	ldr	r1, [r3, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	461a      	mov	r2, r3
 80092ce:	f000 fa53 	bl	8009778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2140      	movs	r1, #64	; 0x40
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 faac 	bl	8009836 <TIM_ITRx_SetConfig>
      break;
 80092de:	e009      	b.n	80092f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f000 faa3 	bl	8009836 <TIM_ITRx_SetConfig>
      break;
 80092f0:	e000      	b.n	80092f4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80092f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009316:	bf00      	nop
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009322:	b480      	push	{r7}
 8009324:	b083      	sub	sp, #12
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800932a:	bf00      	nop
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800933e:	bf00      	nop
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009352:	bf00      	nop
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
	...

08009360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a34      	ldr	r2, [pc, #208]	; (8009444 <TIM_Base_SetConfig+0xe4>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d00f      	beq.n	8009398 <TIM_Base_SetConfig+0x38>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800937e:	d00b      	beq.n	8009398 <TIM_Base_SetConfig+0x38>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a31      	ldr	r2, [pc, #196]	; (8009448 <TIM_Base_SetConfig+0xe8>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d007      	beq.n	8009398 <TIM_Base_SetConfig+0x38>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a30      	ldr	r2, [pc, #192]	; (800944c <TIM_Base_SetConfig+0xec>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d003      	beq.n	8009398 <TIM_Base_SetConfig+0x38>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a2f      	ldr	r2, [pc, #188]	; (8009450 <TIM_Base_SetConfig+0xf0>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d108      	bne.n	80093aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800939e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a25      	ldr	r2, [pc, #148]	; (8009444 <TIM_Base_SetConfig+0xe4>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d01b      	beq.n	80093ea <TIM_Base_SetConfig+0x8a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b8:	d017      	beq.n	80093ea <TIM_Base_SetConfig+0x8a>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a22      	ldr	r2, [pc, #136]	; (8009448 <TIM_Base_SetConfig+0xe8>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d013      	beq.n	80093ea <TIM_Base_SetConfig+0x8a>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a21      	ldr	r2, [pc, #132]	; (800944c <TIM_Base_SetConfig+0xec>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d00f      	beq.n	80093ea <TIM_Base_SetConfig+0x8a>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a20      	ldr	r2, [pc, #128]	; (8009450 <TIM_Base_SetConfig+0xf0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d00b      	beq.n	80093ea <TIM_Base_SetConfig+0x8a>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a1f      	ldr	r2, [pc, #124]	; (8009454 <TIM_Base_SetConfig+0xf4>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d007      	beq.n	80093ea <TIM_Base_SetConfig+0x8a>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a1e      	ldr	r2, [pc, #120]	; (8009458 <TIM_Base_SetConfig+0xf8>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d003      	beq.n	80093ea <TIM_Base_SetConfig+0x8a>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a1d      	ldr	r2, [pc, #116]	; (800945c <TIM_Base_SetConfig+0xfc>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d108      	bne.n	80093fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	695b      	ldr	r3, [r3, #20]
 8009406:	4313      	orrs	r3, r2
 8009408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	689a      	ldr	r2, [r3, #8]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a08      	ldr	r2, [pc, #32]	; (8009444 <TIM_Base_SetConfig+0xe4>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d103      	bne.n	8009430 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	691a      	ldr	r2, [r3, #16]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	615a      	str	r2, [r3, #20]
}
 8009436:	bf00      	nop
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	40010000 	.word	0x40010000
 8009448:	40000400 	.word	0x40000400
 800944c:	40000800 	.word	0x40000800
 8009450:	40000c00 	.word	0x40000c00
 8009454:	40014000 	.word	0x40014000
 8009458:	40014400 	.word	0x40014400
 800945c:	40014800 	.word	0x40014800

08009460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009460:	b480      	push	{r7}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	f023 0201 	bic.w	r2, r3, #1
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800948e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 0303 	bic.w	r3, r3, #3
 8009496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	4313      	orrs	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	f023 0302 	bic.w	r3, r3, #2
 80094a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a1c      	ldr	r2, [pc, #112]	; (8009528 <TIM_OC1_SetConfig+0xc8>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d10c      	bne.n	80094d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f023 0308 	bic.w	r3, r3, #8
 80094c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f023 0304 	bic.w	r3, r3, #4
 80094d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a13      	ldr	r2, [pc, #76]	; (8009528 <TIM_OC1_SetConfig+0xc8>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d111      	bne.n	8009502 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4313      	orrs	r3, r2
 8009500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	621a      	str	r2, [r3, #32]
}
 800951c:	bf00      	nop
 800951e:	371c      	adds	r7, #28
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	40010000 	.word	0x40010000

0800952c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800952c:	b480      	push	{r7}
 800952e:	b087      	sub	sp, #28
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	f023 0210 	bic.w	r2, r3, #16
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800955a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	021b      	lsls	r3, r3, #8
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	4313      	orrs	r3, r2
 800956e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f023 0320 	bic.w	r3, r3, #32
 8009576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	011b      	lsls	r3, r3, #4
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	4313      	orrs	r3, r2
 8009582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a1e      	ldr	r2, [pc, #120]	; (8009600 <TIM_OC2_SetConfig+0xd4>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d10d      	bne.n	80095a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	011b      	lsls	r3, r3, #4
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	4313      	orrs	r3, r2
 800959e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a15      	ldr	r2, [pc, #84]	; (8009600 <TIM_OC2_SetConfig+0xd4>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d113      	bne.n	80095d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	621a      	str	r2, [r3, #32]
}
 80095f2:	bf00      	nop
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	40010000 	.word	0x40010000

08009604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f023 0303 	bic.w	r3, r3, #3
 800963a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	4313      	orrs	r3, r2
 8009644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800964c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	021b      	lsls	r3, r3, #8
 8009654:	697a      	ldr	r2, [r7, #20]
 8009656:	4313      	orrs	r3, r2
 8009658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a1d      	ldr	r2, [pc, #116]	; (80096d4 <TIM_OC3_SetConfig+0xd0>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d10d      	bne.n	800967e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	021b      	lsls	r3, r3, #8
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	4313      	orrs	r3, r2
 8009674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800967c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a14      	ldr	r2, [pc, #80]	; (80096d4 <TIM_OC3_SetConfig+0xd0>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d113      	bne.n	80096ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800968c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	4313      	orrs	r3, r2
 80096a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	011b      	lsls	r3, r3, #4
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	621a      	str	r2, [r3, #32]
}
 80096c8:	bf00      	nop
 80096ca:	371c      	adds	r7, #28
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	40010000 	.word	0x40010000

080096d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096d8:	b480      	push	{r7}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800970e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	021b      	lsls	r3, r3, #8
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	4313      	orrs	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	031b      	lsls	r3, r3, #12
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	4313      	orrs	r3, r2
 800972e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a10      	ldr	r2, [pc, #64]	; (8009774 <TIM_OC4_SetConfig+0x9c>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d109      	bne.n	800974c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800973e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	019b      	lsls	r3, r3, #6
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	4313      	orrs	r3, r2
 800974a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	621a      	str	r2, [r3, #32]
}
 8009766:	bf00      	nop
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	40010000 	.word	0x40010000

08009778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6a1b      	ldr	r3, [r3, #32]
 8009788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	f023 0201 	bic.w	r2, r3, #1
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f023 030a 	bic.w	r3, r3, #10
 80097b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	621a      	str	r2, [r3, #32]
}
 80097ca:	bf00      	nop
 80097cc:	371c      	adds	r7, #28
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b087      	sub	sp, #28
 80097da:	af00      	add	r7, sp, #0
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	60b9      	str	r1, [r7, #8]
 80097e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	f023 0210 	bic.w	r2, r3, #16
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6a1b      	ldr	r3, [r3, #32]
 80097f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	031b      	lsls	r3, r3, #12
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	4313      	orrs	r3, r2
 800980a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009812:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	011b      	lsls	r3, r3, #4
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	4313      	orrs	r3, r2
 800981c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	621a      	str	r2, [r3, #32]
}
 800982a:	bf00      	nop
 800982c:	371c      	adds	r7, #28
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009836:	b480      	push	{r7}
 8009838:	b085      	sub	sp, #20
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4313      	orrs	r3, r2
 8009854:	f043 0307 	orr.w	r3, r3, #7
 8009858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	609a      	str	r2, [r3, #8]
}
 8009860:	bf00      	nop
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	021a      	lsls	r2, r3, #8
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	431a      	orrs	r2, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4313      	orrs	r3, r2
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	4313      	orrs	r3, r2
 8009898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	609a      	str	r2, [r3, #8]
}
 80098a0:	bf00      	nop
 80098a2:	371c      	adds	r7, #28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f003 031f 	and.w	r3, r3, #31
 80098be:	2201      	movs	r2, #1
 80098c0:	fa02 f303 	lsl.w	r3, r2, r3
 80098c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6a1a      	ldr	r2, [r3, #32]
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	43db      	mvns	r3, r3
 80098ce:	401a      	ands	r2, r3
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6a1a      	ldr	r2, [r3, #32]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	f003 031f 	and.w	r3, r3, #31
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	fa01 f303 	lsl.w	r3, r1, r3
 80098e4:	431a      	orrs	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	621a      	str	r2, [r3, #32]
}
 80098ea:	bf00      	nop
 80098ec:	371c      	adds	r7, #28
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
	...

080098f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009908:	2b01      	cmp	r3, #1
 800990a:	d101      	bne.n	8009910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800990c:	2302      	movs	r3, #2
 800990e:	e050      	b.n	80099b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a1c      	ldr	r2, [pc, #112]	; (80099c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d018      	beq.n	8009986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800995c:	d013      	beq.n	8009986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a18      	ldr	r2, [pc, #96]	; (80099c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d00e      	beq.n	8009986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a16      	ldr	r2, [pc, #88]	; (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d009      	beq.n	8009986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a15      	ldr	r2, [pc, #84]	; (80099cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d004      	beq.n	8009986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a13      	ldr	r2, [pc, #76]	; (80099d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d10c      	bne.n	80099a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800998c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	4313      	orrs	r3, r2
 8009996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	40010000 	.word	0x40010000
 80099c4:	40000400 	.word	0x40000400
 80099c8:	40000800 	.word	0x40000800
 80099cc:	40000c00 	.word	0x40000c00
 80099d0:	40014000 	.word	0x40014000

080099d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e03f      	b.n	8009a8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d106      	bne.n	8009a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7f9 fe06 	bl	8003634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2224      	movs	r2, #36	; 0x24
 8009a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68da      	ldr	r2, [r3, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f9b1 	bl	8009da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	691a      	ldr	r2, [r3, #16]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	695a      	ldr	r2, [r3, #20]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68da      	ldr	r2, [r3, #12]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2220      	movs	r2, #32
 8009a88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b088      	sub	sp, #32
 8009a9a:	af02      	add	r7, sp, #8
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	60b9      	str	r1, [r7, #8]
 8009aa0:	603b      	str	r3, [r7, #0]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b20      	cmp	r3, #32
 8009ab4:	f040 8083 	bne.w	8009bbe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d002      	beq.n	8009ac4 <HAL_UART_Transmit+0x2e>
 8009abe:	88fb      	ldrh	r3, [r7, #6]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e07b      	b.n	8009bc0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d101      	bne.n	8009ad6 <HAL_UART_Transmit+0x40>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	e074      	b.n	8009bc0 <HAL_UART_Transmit+0x12a>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2221      	movs	r2, #33	; 0x21
 8009ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009aec:	f7fb fcb8 	bl	8005460 <HAL_GetTick>
 8009af0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	88fa      	ldrh	r2, [r7, #6]
 8009af6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	88fa      	ldrh	r2, [r7, #6]
 8009afc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009b06:	e042      	b.n	8009b8e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b1e:	d122      	bne.n	8009b66 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2200      	movs	r2, #0
 8009b28:	2180      	movs	r1, #128	; 0x80
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f000 f8f2 	bl	8009d14 <UART_WaitOnFlagUntilTimeout>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8009b36:	2303      	movs	r3, #3
 8009b38:	e042      	b.n	8009bc0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	881b      	ldrh	r3, [r3, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b4c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d103      	bne.n	8009b5e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	3302      	adds	r3, #2
 8009b5a:	60bb      	str	r3, [r7, #8]
 8009b5c:	e017      	b.n	8009b8e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	3301      	adds	r3, #1
 8009b62:	60bb      	str	r3, [r7, #8]
 8009b64:	e013      	b.n	8009b8e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2180      	movs	r1, #128	; 0x80
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f000 f8cf 	bl	8009d14 <UART_WaitOnFlagUntilTimeout>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d001      	beq.n	8009b80 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	e01f      	b.n	8009bc0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	60ba      	str	r2, [r7, #8]
 8009b86:	781a      	ldrb	r2, [r3, #0]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1b7      	bne.n	8009b08 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2140      	movs	r1, #64	; 0x40
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 f8b6 	bl	8009d14 <UART_WaitOnFlagUntilTimeout>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e006      	b.n	8009bc0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	e000      	b.n	8009bc0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009bbe:	2302      	movs	r3, #2
  }
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3718      	adds	r7, #24
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b088      	sub	sp, #32
 8009bcc:	af02      	add	r7, sp, #8
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	603b      	str	r3, [r7, #0]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b20      	cmp	r3, #32
 8009be6:	f040 8090 	bne.w	8009d0a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d002      	beq.n	8009bf6 <HAL_UART_Receive+0x2e>
 8009bf0:	88fb      	ldrh	r3, [r7, #6]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d101      	bne.n	8009bfa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e088      	b.n	8009d0c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d101      	bne.n	8009c08 <HAL_UART_Receive+0x40>
 8009c04:	2302      	movs	r3, #2
 8009c06:	e081      	b.n	8009d0c <HAL_UART_Receive+0x144>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2222      	movs	r2, #34	; 0x22
 8009c1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009c1e:	f7fb fc1f 	bl	8005460 <HAL_GetTick>
 8009c22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	88fa      	ldrh	r2, [r7, #6]
 8009c28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	88fa      	ldrh	r2, [r7, #6]
 8009c2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009c38:	e05c      	b.n	8009cf4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	3b01      	subs	r3, #1
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c50:	d12b      	bne.n	8009caa <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2120      	movs	r1, #32
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f000 f859 	bl	8009d14 <UART_WaitOnFlagUntilTimeout>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	e04f      	b.n	8009d0c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10c      	bne.n	8009c92 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	3302      	adds	r3, #2
 8009c8e:	60bb      	str	r3, [r7, #8]
 8009c90:	e030      	b.n	8009cf4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	60bb      	str	r3, [r7, #8]
 8009ca8:	e024      	b.n	8009cf4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2120      	movs	r1, #32
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f000 f82d 	bl	8009d14 <UART_WaitOnFlagUntilTimeout>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d001      	beq.n	8009cc4 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e023      	b.n	8009d0c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d108      	bne.n	8009cde <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6859      	ldr	r1, [r3, #4]
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	60ba      	str	r2, [r7, #8]
 8009cd8:	b2ca      	uxtb	r2, r1
 8009cda:	701a      	strb	r2, [r3, #0]
 8009cdc:	e00a      	b.n	8009cf4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	1c59      	adds	r1, r3, #1
 8009cea:	60b9      	str	r1, [r7, #8]
 8009cec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009cf0:	b2d2      	uxtb	r2, r2
 8009cf2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d19d      	bne.n	8009c3a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2220      	movs	r2, #32
 8009d02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	e000      	b.n	8009d0c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009d0a:	2302      	movs	r3, #2
  }
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3718      	adds	r7, #24
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	603b      	str	r3, [r7, #0]
 8009d20:	4613      	mov	r3, r2
 8009d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d24:	e02c      	b.n	8009d80 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2c:	d028      	beq.n	8009d80 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d007      	beq.n	8009d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d34:	f7fb fb94 	bl	8005460 <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	69ba      	ldr	r2, [r7, #24]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d21d      	bcs.n	8009d80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68da      	ldr	r2, [r3, #12]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009d52:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	695a      	ldr	r2, [r3, #20]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f022 0201 	bic.w	r2, r2, #1
 8009d62:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2220      	movs	r2, #32
 8009d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2220      	movs	r2, #32
 8009d70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e00f      	b.n	8009da0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	4013      	ands	r3, r2
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	bf0c      	ite	eq
 8009d90:	2301      	moveq	r3, #1
 8009d92:	2300      	movne	r3, #0
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	461a      	mov	r2, r3
 8009d98:	79fb      	ldrb	r3, [r7, #7]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d0c3      	beq.n	8009d26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dac:	b085      	sub	sp, #20
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68da      	ldr	r2, [r3, #12]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	430a      	orrs	r2, r1
 8009dc6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689a      	ldr	r2, [r3, #8]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	431a      	orrs	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	695b      	ldr	r3, [r3, #20]
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	69db      	ldr	r3, [r3, #28]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009dea:	f023 030c 	bic.w	r3, r3, #12
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	6812      	ldr	r2, [r2, #0]
 8009df2:	68f9      	ldr	r1, [r7, #12]
 8009df4:	430b      	orrs	r3, r1
 8009df6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	699a      	ldr	r2, [r3, #24]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	69db      	ldr	r3, [r3, #28]
 8009e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e16:	f040 818b 	bne.w	800a130 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4ac1      	ldr	r2, [pc, #772]	; (800a124 <UART_SetConfig+0x37c>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d005      	beq.n	8009e30 <UART_SetConfig+0x88>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4abf      	ldr	r2, [pc, #764]	; (800a128 <UART_SetConfig+0x380>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	f040 80bd 	bne.w	8009faa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e30:	f7fe fed2 	bl	8008bd8 <HAL_RCC_GetPCLK2Freq>
 8009e34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	461d      	mov	r5, r3
 8009e3a:	f04f 0600 	mov.w	r6, #0
 8009e3e:	46a8      	mov	r8, r5
 8009e40:	46b1      	mov	r9, r6
 8009e42:	eb18 0308 	adds.w	r3, r8, r8
 8009e46:	eb49 0409 	adc.w	r4, r9, r9
 8009e4a:	4698      	mov	r8, r3
 8009e4c:	46a1      	mov	r9, r4
 8009e4e:	eb18 0805 	adds.w	r8, r8, r5
 8009e52:	eb49 0906 	adc.w	r9, r9, r6
 8009e56:	f04f 0100 	mov.w	r1, #0
 8009e5a:	f04f 0200 	mov.w	r2, #0
 8009e5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009e62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009e66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009e6a:	4688      	mov	r8, r1
 8009e6c:	4691      	mov	r9, r2
 8009e6e:	eb18 0005 	adds.w	r0, r8, r5
 8009e72:	eb49 0106 	adc.w	r1, r9, r6
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	461d      	mov	r5, r3
 8009e7c:	f04f 0600 	mov.w	r6, #0
 8009e80:	196b      	adds	r3, r5, r5
 8009e82:	eb46 0406 	adc.w	r4, r6, r6
 8009e86:	461a      	mov	r2, r3
 8009e88:	4623      	mov	r3, r4
 8009e8a:	f7f6 ff05 	bl	8000c98 <__aeabi_uldivmod>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	460c      	mov	r4, r1
 8009e92:	461a      	mov	r2, r3
 8009e94:	4ba5      	ldr	r3, [pc, #660]	; (800a12c <UART_SetConfig+0x384>)
 8009e96:	fba3 2302 	umull	r2, r3, r3, r2
 8009e9a:	095b      	lsrs	r3, r3, #5
 8009e9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	461d      	mov	r5, r3
 8009ea4:	f04f 0600 	mov.w	r6, #0
 8009ea8:	46a9      	mov	r9, r5
 8009eaa:	46b2      	mov	sl, r6
 8009eac:	eb19 0309 	adds.w	r3, r9, r9
 8009eb0:	eb4a 040a 	adc.w	r4, sl, sl
 8009eb4:	4699      	mov	r9, r3
 8009eb6:	46a2      	mov	sl, r4
 8009eb8:	eb19 0905 	adds.w	r9, r9, r5
 8009ebc:	eb4a 0a06 	adc.w	sl, sl, r6
 8009ec0:	f04f 0100 	mov.w	r1, #0
 8009ec4:	f04f 0200 	mov.w	r2, #0
 8009ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ecc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009ed0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009ed4:	4689      	mov	r9, r1
 8009ed6:	4692      	mov	sl, r2
 8009ed8:	eb19 0005 	adds.w	r0, r9, r5
 8009edc:	eb4a 0106 	adc.w	r1, sl, r6
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	461d      	mov	r5, r3
 8009ee6:	f04f 0600 	mov.w	r6, #0
 8009eea:	196b      	adds	r3, r5, r5
 8009eec:	eb46 0406 	adc.w	r4, r6, r6
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	4623      	mov	r3, r4
 8009ef4:	f7f6 fed0 	bl	8000c98 <__aeabi_uldivmod>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	461a      	mov	r2, r3
 8009efe:	4b8b      	ldr	r3, [pc, #556]	; (800a12c <UART_SetConfig+0x384>)
 8009f00:	fba3 1302 	umull	r1, r3, r3, r2
 8009f04:	095b      	lsrs	r3, r3, #5
 8009f06:	2164      	movs	r1, #100	; 0x64
 8009f08:	fb01 f303 	mul.w	r3, r1, r3
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	00db      	lsls	r3, r3, #3
 8009f10:	3332      	adds	r3, #50	; 0x32
 8009f12:	4a86      	ldr	r2, [pc, #536]	; (800a12c <UART_SetConfig+0x384>)
 8009f14:	fba2 2303 	umull	r2, r3, r2, r3
 8009f18:	095b      	lsrs	r3, r3, #5
 8009f1a:	005b      	lsls	r3, r3, #1
 8009f1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f20:	4498      	add	r8, r3
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	461d      	mov	r5, r3
 8009f26:	f04f 0600 	mov.w	r6, #0
 8009f2a:	46a9      	mov	r9, r5
 8009f2c:	46b2      	mov	sl, r6
 8009f2e:	eb19 0309 	adds.w	r3, r9, r9
 8009f32:	eb4a 040a 	adc.w	r4, sl, sl
 8009f36:	4699      	mov	r9, r3
 8009f38:	46a2      	mov	sl, r4
 8009f3a:	eb19 0905 	adds.w	r9, r9, r5
 8009f3e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009f42:	f04f 0100 	mov.w	r1, #0
 8009f46:	f04f 0200 	mov.w	r2, #0
 8009f4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f56:	4689      	mov	r9, r1
 8009f58:	4692      	mov	sl, r2
 8009f5a:	eb19 0005 	adds.w	r0, r9, r5
 8009f5e:	eb4a 0106 	adc.w	r1, sl, r6
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	461d      	mov	r5, r3
 8009f68:	f04f 0600 	mov.w	r6, #0
 8009f6c:	196b      	adds	r3, r5, r5
 8009f6e:	eb46 0406 	adc.w	r4, r6, r6
 8009f72:	461a      	mov	r2, r3
 8009f74:	4623      	mov	r3, r4
 8009f76:	f7f6 fe8f 	bl	8000c98 <__aeabi_uldivmod>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4b6a      	ldr	r3, [pc, #424]	; (800a12c <UART_SetConfig+0x384>)
 8009f82:	fba3 1302 	umull	r1, r3, r3, r2
 8009f86:	095b      	lsrs	r3, r3, #5
 8009f88:	2164      	movs	r1, #100	; 0x64
 8009f8a:	fb01 f303 	mul.w	r3, r1, r3
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	00db      	lsls	r3, r3, #3
 8009f92:	3332      	adds	r3, #50	; 0x32
 8009f94:	4a65      	ldr	r2, [pc, #404]	; (800a12c <UART_SetConfig+0x384>)
 8009f96:	fba2 2303 	umull	r2, r3, r2, r3
 8009f9a:	095b      	lsrs	r3, r3, #5
 8009f9c:	f003 0207 	and.w	r2, r3, #7
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4442      	add	r2, r8
 8009fa6:	609a      	str	r2, [r3, #8]
 8009fa8:	e26f      	b.n	800a48a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009faa:	f7fe fe01 	bl	8008bb0 <HAL_RCC_GetPCLK1Freq>
 8009fae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	461d      	mov	r5, r3
 8009fb4:	f04f 0600 	mov.w	r6, #0
 8009fb8:	46a8      	mov	r8, r5
 8009fba:	46b1      	mov	r9, r6
 8009fbc:	eb18 0308 	adds.w	r3, r8, r8
 8009fc0:	eb49 0409 	adc.w	r4, r9, r9
 8009fc4:	4698      	mov	r8, r3
 8009fc6:	46a1      	mov	r9, r4
 8009fc8:	eb18 0805 	adds.w	r8, r8, r5
 8009fcc:	eb49 0906 	adc.w	r9, r9, r6
 8009fd0:	f04f 0100 	mov.w	r1, #0
 8009fd4:	f04f 0200 	mov.w	r2, #0
 8009fd8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009fdc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009fe0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009fe4:	4688      	mov	r8, r1
 8009fe6:	4691      	mov	r9, r2
 8009fe8:	eb18 0005 	adds.w	r0, r8, r5
 8009fec:	eb49 0106 	adc.w	r1, r9, r6
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	461d      	mov	r5, r3
 8009ff6:	f04f 0600 	mov.w	r6, #0
 8009ffa:	196b      	adds	r3, r5, r5
 8009ffc:	eb46 0406 	adc.w	r4, r6, r6
 800a000:	461a      	mov	r2, r3
 800a002:	4623      	mov	r3, r4
 800a004:	f7f6 fe48 	bl	8000c98 <__aeabi_uldivmod>
 800a008:	4603      	mov	r3, r0
 800a00a:	460c      	mov	r4, r1
 800a00c:	461a      	mov	r2, r3
 800a00e:	4b47      	ldr	r3, [pc, #284]	; (800a12c <UART_SetConfig+0x384>)
 800a010:	fba3 2302 	umull	r2, r3, r3, r2
 800a014:	095b      	lsrs	r3, r3, #5
 800a016:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	461d      	mov	r5, r3
 800a01e:	f04f 0600 	mov.w	r6, #0
 800a022:	46a9      	mov	r9, r5
 800a024:	46b2      	mov	sl, r6
 800a026:	eb19 0309 	adds.w	r3, r9, r9
 800a02a:	eb4a 040a 	adc.w	r4, sl, sl
 800a02e:	4699      	mov	r9, r3
 800a030:	46a2      	mov	sl, r4
 800a032:	eb19 0905 	adds.w	r9, r9, r5
 800a036:	eb4a 0a06 	adc.w	sl, sl, r6
 800a03a:	f04f 0100 	mov.w	r1, #0
 800a03e:	f04f 0200 	mov.w	r2, #0
 800a042:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a046:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a04a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a04e:	4689      	mov	r9, r1
 800a050:	4692      	mov	sl, r2
 800a052:	eb19 0005 	adds.w	r0, r9, r5
 800a056:	eb4a 0106 	adc.w	r1, sl, r6
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	461d      	mov	r5, r3
 800a060:	f04f 0600 	mov.w	r6, #0
 800a064:	196b      	adds	r3, r5, r5
 800a066:	eb46 0406 	adc.w	r4, r6, r6
 800a06a:	461a      	mov	r2, r3
 800a06c:	4623      	mov	r3, r4
 800a06e:	f7f6 fe13 	bl	8000c98 <__aeabi_uldivmod>
 800a072:	4603      	mov	r3, r0
 800a074:	460c      	mov	r4, r1
 800a076:	461a      	mov	r2, r3
 800a078:	4b2c      	ldr	r3, [pc, #176]	; (800a12c <UART_SetConfig+0x384>)
 800a07a:	fba3 1302 	umull	r1, r3, r3, r2
 800a07e:	095b      	lsrs	r3, r3, #5
 800a080:	2164      	movs	r1, #100	; 0x64
 800a082:	fb01 f303 	mul.w	r3, r1, r3
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	00db      	lsls	r3, r3, #3
 800a08a:	3332      	adds	r3, #50	; 0x32
 800a08c:	4a27      	ldr	r2, [pc, #156]	; (800a12c <UART_SetConfig+0x384>)
 800a08e:	fba2 2303 	umull	r2, r3, r2, r3
 800a092:	095b      	lsrs	r3, r3, #5
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a09a:	4498      	add	r8, r3
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	461d      	mov	r5, r3
 800a0a0:	f04f 0600 	mov.w	r6, #0
 800a0a4:	46a9      	mov	r9, r5
 800a0a6:	46b2      	mov	sl, r6
 800a0a8:	eb19 0309 	adds.w	r3, r9, r9
 800a0ac:	eb4a 040a 	adc.w	r4, sl, sl
 800a0b0:	4699      	mov	r9, r3
 800a0b2:	46a2      	mov	sl, r4
 800a0b4:	eb19 0905 	adds.w	r9, r9, r5
 800a0b8:	eb4a 0a06 	adc.w	sl, sl, r6
 800a0bc:	f04f 0100 	mov.w	r1, #0
 800a0c0:	f04f 0200 	mov.w	r2, #0
 800a0c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a0cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a0d0:	4689      	mov	r9, r1
 800a0d2:	4692      	mov	sl, r2
 800a0d4:	eb19 0005 	adds.w	r0, r9, r5
 800a0d8:	eb4a 0106 	adc.w	r1, sl, r6
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	461d      	mov	r5, r3
 800a0e2:	f04f 0600 	mov.w	r6, #0
 800a0e6:	196b      	adds	r3, r5, r5
 800a0e8:	eb46 0406 	adc.w	r4, r6, r6
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	4623      	mov	r3, r4
 800a0f0:	f7f6 fdd2 	bl	8000c98 <__aeabi_uldivmod>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	4b0c      	ldr	r3, [pc, #48]	; (800a12c <UART_SetConfig+0x384>)
 800a0fc:	fba3 1302 	umull	r1, r3, r3, r2
 800a100:	095b      	lsrs	r3, r3, #5
 800a102:	2164      	movs	r1, #100	; 0x64
 800a104:	fb01 f303 	mul.w	r3, r1, r3
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	00db      	lsls	r3, r3, #3
 800a10c:	3332      	adds	r3, #50	; 0x32
 800a10e:	4a07      	ldr	r2, [pc, #28]	; (800a12c <UART_SetConfig+0x384>)
 800a110:	fba2 2303 	umull	r2, r3, r2, r3
 800a114:	095b      	lsrs	r3, r3, #5
 800a116:	f003 0207 	and.w	r2, r3, #7
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4442      	add	r2, r8
 800a120:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a122:	e1b2      	b.n	800a48a <UART_SetConfig+0x6e2>
 800a124:	40011000 	.word	0x40011000
 800a128:	40011400 	.word	0x40011400
 800a12c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4ad7      	ldr	r2, [pc, #860]	; (800a494 <UART_SetConfig+0x6ec>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d005      	beq.n	800a146 <UART_SetConfig+0x39e>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4ad6      	ldr	r2, [pc, #856]	; (800a498 <UART_SetConfig+0x6f0>)
 800a140:	4293      	cmp	r3, r2
 800a142:	f040 80d1 	bne.w	800a2e8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a146:	f7fe fd47 	bl	8008bd8 <HAL_RCC_GetPCLK2Freq>
 800a14a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	469a      	mov	sl, r3
 800a150:	f04f 0b00 	mov.w	fp, #0
 800a154:	46d0      	mov	r8, sl
 800a156:	46d9      	mov	r9, fp
 800a158:	eb18 0308 	adds.w	r3, r8, r8
 800a15c:	eb49 0409 	adc.w	r4, r9, r9
 800a160:	4698      	mov	r8, r3
 800a162:	46a1      	mov	r9, r4
 800a164:	eb18 080a 	adds.w	r8, r8, sl
 800a168:	eb49 090b 	adc.w	r9, r9, fp
 800a16c:	f04f 0100 	mov.w	r1, #0
 800a170:	f04f 0200 	mov.w	r2, #0
 800a174:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a178:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a17c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a180:	4688      	mov	r8, r1
 800a182:	4691      	mov	r9, r2
 800a184:	eb1a 0508 	adds.w	r5, sl, r8
 800a188:	eb4b 0609 	adc.w	r6, fp, r9
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	4619      	mov	r1, r3
 800a192:	f04f 0200 	mov.w	r2, #0
 800a196:	f04f 0300 	mov.w	r3, #0
 800a19a:	f04f 0400 	mov.w	r4, #0
 800a19e:	0094      	lsls	r4, r2, #2
 800a1a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a1a4:	008b      	lsls	r3, r1, #2
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	4623      	mov	r3, r4
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	4631      	mov	r1, r6
 800a1ae:	f7f6 fd73 	bl	8000c98 <__aeabi_uldivmod>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	4bb8      	ldr	r3, [pc, #736]	; (800a49c <UART_SetConfig+0x6f4>)
 800a1ba:	fba3 2302 	umull	r2, r3, r3, r2
 800a1be:	095b      	lsrs	r3, r3, #5
 800a1c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	469b      	mov	fp, r3
 800a1c8:	f04f 0c00 	mov.w	ip, #0
 800a1cc:	46d9      	mov	r9, fp
 800a1ce:	46e2      	mov	sl, ip
 800a1d0:	eb19 0309 	adds.w	r3, r9, r9
 800a1d4:	eb4a 040a 	adc.w	r4, sl, sl
 800a1d8:	4699      	mov	r9, r3
 800a1da:	46a2      	mov	sl, r4
 800a1dc:	eb19 090b 	adds.w	r9, r9, fp
 800a1e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a1e4:	f04f 0100 	mov.w	r1, #0
 800a1e8:	f04f 0200 	mov.w	r2, #0
 800a1ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a1f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a1f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a1f8:	4689      	mov	r9, r1
 800a1fa:	4692      	mov	sl, r2
 800a1fc:	eb1b 0509 	adds.w	r5, fp, r9
 800a200:	eb4c 060a 	adc.w	r6, ip, sl
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	4619      	mov	r1, r3
 800a20a:	f04f 0200 	mov.w	r2, #0
 800a20e:	f04f 0300 	mov.w	r3, #0
 800a212:	f04f 0400 	mov.w	r4, #0
 800a216:	0094      	lsls	r4, r2, #2
 800a218:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a21c:	008b      	lsls	r3, r1, #2
 800a21e:	461a      	mov	r2, r3
 800a220:	4623      	mov	r3, r4
 800a222:	4628      	mov	r0, r5
 800a224:	4631      	mov	r1, r6
 800a226:	f7f6 fd37 	bl	8000c98 <__aeabi_uldivmod>
 800a22a:	4603      	mov	r3, r0
 800a22c:	460c      	mov	r4, r1
 800a22e:	461a      	mov	r2, r3
 800a230:	4b9a      	ldr	r3, [pc, #616]	; (800a49c <UART_SetConfig+0x6f4>)
 800a232:	fba3 1302 	umull	r1, r3, r3, r2
 800a236:	095b      	lsrs	r3, r3, #5
 800a238:	2164      	movs	r1, #100	; 0x64
 800a23a:	fb01 f303 	mul.w	r3, r1, r3
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	011b      	lsls	r3, r3, #4
 800a242:	3332      	adds	r3, #50	; 0x32
 800a244:	4a95      	ldr	r2, [pc, #596]	; (800a49c <UART_SetConfig+0x6f4>)
 800a246:	fba2 2303 	umull	r2, r3, r2, r3
 800a24a:	095b      	lsrs	r3, r3, #5
 800a24c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a250:	4498      	add	r8, r3
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	469b      	mov	fp, r3
 800a256:	f04f 0c00 	mov.w	ip, #0
 800a25a:	46d9      	mov	r9, fp
 800a25c:	46e2      	mov	sl, ip
 800a25e:	eb19 0309 	adds.w	r3, r9, r9
 800a262:	eb4a 040a 	adc.w	r4, sl, sl
 800a266:	4699      	mov	r9, r3
 800a268:	46a2      	mov	sl, r4
 800a26a:	eb19 090b 	adds.w	r9, r9, fp
 800a26e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a272:	f04f 0100 	mov.w	r1, #0
 800a276:	f04f 0200 	mov.w	r2, #0
 800a27a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a27e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a282:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a286:	4689      	mov	r9, r1
 800a288:	4692      	mov	sl, r2
 800a28a:	eb1b 0509 	adds.w	r5, fp, r9
 800a28e:	eb4c 060a 	adc.w	r6, ip, sl
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	4619      	mov	r1, r3
 800a298:	f04f 0200 	mov.w	r2, #0
 800a29c:	f04f 0300 	mov.w	r3, #0
 800a2a0:	f04f 0400 	mov.w	r4, #0
 800a2a4:	0094      	lsls	r4, r2, #2
 800a2a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a2aa:	008b      	lsls	r3, r1, #2
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	4623      	mov	r3, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	f7f6 fcf0 	bl	8000c98 <__aeabi_uldivmod>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	461a      	mov	r2, r3
 800a2be:	4b77      	ldr	r3, [pc, #476]	; (800a49c <UART_SetConfig+0x6f4>)
 800a2c0:	fba3 1302 	umull	r1, r3, r3, r2
 800a2c4:	095b      	lsrs	r3, r3, #5
 800a2c6:	2164      	movs	r1, #100	; 0x64
 800a2c8:	fb01 f303 	mul.w	r3, r1, r3
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	011b      	lsls	r3, r3, #4
 800a2d0:	3332      	adds	r3, #50	; 0x32
 800a2d2:	4a72      	ldr	r2, [pc, #456]	; (800a49c <UART_SetConfig+0x6f4>)
 800a2d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a2d8:	095b      	lsrs	r3, r3, #5
 800a2da:	f003 020f 	and.w	r2, r3, #15
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4442      	add	r2, r8
 800a2e4:	609a      	str	r2, [r3, #8]
 800a2e6:	e0d0      	b.n	800a48a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2e8:	f7fe fc62 	bl	8008bb0 <HAL_RCC_GetPCLK1Freq>
 800a2ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	469a      	mov	sl, r3
 800a2f2:	f04f 0b00 	mov.w	fp, #0
 800a2f6:	46d0      	mov	r8, sl
 800a2f8:	46d9      	mov	r9, fp
 800a2fa:	eb18 0308 	adds.w	r3, r8, r8
 800a2fe:	eb49 0409 	adc.w	r4, r9, r9
 800a302:	4698      	mov	r8, r3
 800a304:	46a1      	mov	r9, r4
 800a306:	eb18 080a 	adds.w	r8, r8, sl
 800a30a:	eb49 090b 	adc.w	r9, r9, fp
 800a30e:	f04f 0100 	mov.w	r1, #0
 800a312:	f04f 0200 	mov.w	r2, #0
 800a316:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a31a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a31e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a322:	4688      	mov	r8, r1
 800a324:	4691      	mov	r9, r2
 800a326:	eb1a 0508 	adds.w	r5, sl, r8
 800a32a:	eb4b 0609 	adc.w	r6, fp, r9
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	4619      	mov	r1, r3
 800a334:	f04f 0200 	mov.w	r2, #0
 800a338:	f04f 0300 	mov.w	r3, #0
 800a33c:	f04f 0400 	mov.w	r4, #0
 800a340:	0094      	lsls	r4, r2, #2
 800a342:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a346:	008b      	lsls	r3, r1, #2
 800a348:	461a      	mov	r2, r3
 800a34a:	4623      	mov	r3, r4
 800a34c:	4628      	mov	r0, r5
 800a34e:	4631      	mov	r1, r6
 800a350:	f7f6 fca2 	bl	8000c98 <__aeabi_uldivmod>
 800a354:	4603      	mov	r3, r0
 800a356:	460c      	mov	r4, r1
 800a358:	461a      	mov	r2, r3
 800a35a:	4b50      	ldr	r3, [pc, #320]	; (800a49c <UART_SetConfig+0x6f4>)
 800a35c:	fba3 2302 	umull	r2, r3, r3, r2
 800a360:	095b      	lsrs	r3, r3, #5
 800a362:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	469b      	mov	fp, r3
 800a36a:	f04f 0c00 	mov.w	ip, #0
 800a36e:	46d9      	mov	r9, fp
 800a370:	46e2      	mov	sl, ip
 800a372:	eb19 0309 	adds.w	r3, r9, r9
 800a376:	eb4a 040a 	adc.w	r4, sl, sl
 800a37a:	4699      	mov	r9, r3
 800a37c:	46a2      	mov	sl, r4
 800a37e:	eb19 090b 	adds.w	r9, r9, fp
 800a382:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a386:	f04f 0100 	mov.w	r1, #0
 800a38a:	f04f 0200 	mov.w	r2, #0
 800a38e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a392:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a396:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a39a:	4689      	mov	r9, r1
 800a39c:	4692      	mov	sl, r2
 800a39e:	eb1b 0509 	adds.w	r5, fp, r9
 800a3a2:	eb4c 060a 	adc.w	r6, ip, sl
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	f04f 0200 	mov.w	r2, #0
 800a3b0:	f04f 0300 	mov.w	r3, #0
 800a3b4:	f04f 0400 	mov.w	r4, #0
 800a3b8:	0094      	lsls	r4, r2, #2
 800a3ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a3be:	008b      	lsls	r3, r1, #2
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	4623      	mov	r3, r4
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	f7f6 fc66 	bl	8000c98 <__aeabi_uldivmod>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	4b32      	ldr	r3, [pc, #200]	; (800a49c <UART_SetConfig+0x6f4>)
 800a3d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a3d8:	095b      	lsrs	r3, r3, #5
 800a3da:	2164      	movs	r1, #100	; 0x64
 800a3dc:	fb01 f303 	mul.w	r3, r1, r3
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	011b      	lsls	r3, r3, #4
 800a3e4:	3332      	adds	r3, #50	; 0x32
 800a3e6:	4a2d      	ldr	r2, [pc, #180]	; (800a49c <UART_SetConfig+0x6f4>)
 800a3e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ec:	095b      	lsrs	r3, r3, #5
 800a3ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3f2:	4498      	add	r8, r3
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	469b      	mov	fp, r3
 800a3f8:	f04f 0c00 	mov.w	ip, #0
 800a3fc:	46d9      	mov	r9, fp
 800a3fe:	46e2      	mov	sl, ip
 800a400:	eb19 0309 	adds.w	r3, r9, r9
 800a404:	eb4a 040a 	adc.w	r4, sl, sl
 800a408:	4699      	mov	r9, r3
 800a40a:	46a2      	mov	sl, r4
 800a40c:	eb19 090b 	adds.w	r9, r9, fp
 800a410:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a414:	f04f 0100 	mov.w	r1, #0
 800a418:	f04f 0200 	mov.w	r2, #0
 800a41c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a420:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a424:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a428:	4689      	mov	r9, r1
 800a42a:	4692      	mov	sl, r2
 800a42c:	eb1b 0509 	adds.w	r5, fp, r9
 800a430:	eb4c 060a 	adc.w	r6, ip, sl
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	4619      	mov	r1, r3
 800a43a:	f04f 0200 	mov.w	r2, #0
 800a43e:	f04f 0300 	mov.w	r3, #0
 800a442:	f04f 0400 	mov.w	r4, #0
 800a446:	0094      	lsls	r4, r2, #2
 800a448:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a44c:	008b      	lsls	r3, r1, #2
 800a44e:	461a      	mov	r2, r3
 800a450:	4623      	mov	r3, r4
 800a452:	4628      	mov	r0, r5
 800a454:	4631      	mov	r1, r6
 800a456:	f7f6 fc1f 	bl	8000c98 <__aeabi_uldivmod>
 800a45a:	4603      	mov	r3, r0
 800a45c:	460c      	mov	r4, r1
 800a45e:	461a      	mov	r2, r3
 800a460:	4b0e      	ldr	r3, [pc, #56]	; (800a49c <UART_SetConfig+0x6f4>)
 800a462:	fba3 1302 	umull	r1, r3, r3, r2
 800a466:	095b      	lsrs	r3, r3, #5
 800a468:	2164      	movs	r1, #100	; 0x64
 800a46a:	fb01 f303 	mul.w	r3, r1, r3
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	011b      	lsls	r3, r3, #4
 800a472:	3332      	adds	r3, #50	; 0x32
 800a474:	4a09      	ldr	r2, [pc, #36]	; (800a49c <UART_SetConfig+0x6f4>)
 800a476:	fba2 2303 	umull	r2, r3, r2, r3
 800a47a:	095b      	lsrs	r3, r3, #5
 800a47c:	f003 020f 	and.w	r2, r3, #15
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4442      	add	r2, r8
 800a486:	609a      	str	r2, [r3, #8]
}
 800a488:	e7ff      	b.n	800a48a <UART_SetConfig+0x6e2>
 800a48a:	bf00      	nop
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a494:	40011000 	.word	0x40011000
 800a498:	40011400 	.word	0x40011400
 800a49c:	51eb851f 	.word	0x51eb851f

0800a4a0 <gcvt>:
 800a4a0:	b530      	push	{r4, r5, lr}
 800a4a2:	ed2d 8b02 	vpush	{d8}
 800a4a6:	eeb0 8a40 	vmov.f32	s16, s0
 800a4aa:	eef0 8a60 	vmov.f32	s17, s1
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	ec51 0b10 	vmov	r0, r1, d0
 800a4bc:	f7f6 fb16 	bl	8000aec <__aeabi_dcmplt>
 800a4c0:	4622      	mov	r2, r4
 800a4c2:	b118      	cbz	r0, 800a4cc <gcvt+0x2c>
 800a4c4:	232d      	movs	r3, #45	; 0x2d
 800a4c6:	f802 3b01 	strb.w	r3, [r2], #1
 800a4ca:	3d01      	subs	r5, #1
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	4809      	ldr	r0, [pc, #36]	; (800a4f4 <gcvt+0x54>)
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	2367      	movs	r3, #103	; 0x67
 800a4d6:	eeb0 0a48 	vmov.f32	s0, s16
 800a4da:	eef0 0a68 	vmov.f32	s1, s17
 800a4de:	6800      	ldr	r0, [r0, #0]
 800a4e0:	f002 f9ea 	bl	800c8b8 <_gcvt>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	bf14      	ite	ne
 800a4e8:	4620      	movne	r0, r4
 800a4ea:	2000      	moveq	r0, #0
 800a4ec:	b003      	add	sp, #12
 800a4ee:	ecbd 8b02 	vpop	{d8}
 800a4f2:	bd30      	pop	{r4, r5, pc}
 800a4f4:	20000094 	.word	0x20000094

0800a4f8 <__errno>:
 800a4f8:	4b01      	ldr	r3, [pc, #4]	; (800a500 <__errno+0x8>)
 800a4fa:	6818      	ldr	r0, [r3, #0]
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	20000094 	.word	0x20000094

0800a504 <__libc_init_array>:
 800a504:	b570      	push	{r4, r5, r6, lr}
 800a506:	4e0d      	ldr	r6, [pc, #52]	; (800a53c <__libc_init_array+0x38>)
 800a508:	4c0d      	ldr	r4, [pc, #52]	; (800a540 <__libc_init_array+0x3c>)
 800a50a:	1ba4      	subs	r4, r4, r6
 800a50c:	10a4      	asrs	r4, r4, #2
 800a50e:	2500      	movs	r5, #0
 800a510:	42a5      	cmp	r5, r4
 800a512:	d109      	bne.n	800a528 <__libc_init_array+0x24>
 800a514:	4e0b      	ldr	r6, [pc, #44]	; (800a544 <__libc_init_array+0x40>)
 800a516:	4c0c      	ldr	r4, [pc, #48]	; (800a548 <__libc_init_array+0x44>)
 800a518:	f004 f99e 	bl	800e858 <_init>
 800a51c:	1ba4      	subs	r4, r4, r6
 800a51e:	10a4      	asrs	r4, r4, #2
 800a520:	2500      	movs	r5, #0
 800a522:	42a5      	cmp	r5, r4
 800a524:	d105      	bne.n	800a532 <__libc_init_array+0x2e>
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a52c:	4798      	blx	r3
 800a52e:	3501      	adds	r5, #1
 800a530:	e7ee      	b.n	800a510 <__libc_init_array+0xc>
 800a532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a536:	4798      	blx	r3
 800a538:	3501      	adds	r5, #1
 800a53a:	e7f2      	b.n	800a522 <__libc_init_array+0x1e>
 800a53c:	0800edbc 	.word	0x0800edbc
 800a540:	0800edbc 	.word	0x0800edbc
 800a544:	0800edbc 	.word	0x0800edbc
 800a548:	0800edc0 	.word	0x0800edc0

0800a54c <memset>:
 800a54c:	4402      	add	r2, r0
 800a54e:	4603      	mov	r3, r0
 800a550:	4293      	cmp	r3, r2
 800a552:	d100      	bne.n	800a556 <memset+0xa>
 800a554:	4770      	bx	lr
 800a556:	f803 1b01 	strb.w	r1, [r3], #1
 800a55a:	e7f9      	b.n	800a550 <memset+0x4>

0800a55c <__cvt>:
 800a55c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a560:	ec55 4b10 	vmov	r4, r5, d0
 800a564:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a566:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a56a:	2d00      	cmp	r5, #0
 800a56c:	460e      	mov	r6, r1
 800a56e:	4691      	mov	r9, r2
 800a570:	4619      	mov	r1, r3
 800a572:	bfb8      	it	lt
 800a574:	4622      	movlt	r2, r4
 800a576:	462b      	mov	r3, r5
 800a578:	f027 0720 	bic.w	r7, r7, #32
 800a57c:	bfbb      	ittet	lt
 800a57e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a582:	461d      	movlt	r5, r3
 800a584:	2300      	movge	r3, #0
 800a586:	232d      	movlt	r3, #45	; 0x2d
 800a588:	bfb8      	it	lt
 800a58a:	4614      	movlt	r4, r2
 800a58c:	2f46      	cmp	r7, #70	; 0x46
 800a58e:	700b      	strb	r3, [r1, #0]
 800a590:	d004      	beq.n	800a59c <__cvt+0x40>
 800a592:	2f45      	cmp	r7, #69	; 0x45
 800a594:	d100      	bne.n	800a598 <__cvt+0x3c>
 800a596:	3601      	adds	r6, #1
 800a598:	2102      	movs	r1, #2
 800a59a:	e000      	b.n	800a59e <__cvt+0x42>
 800a59c:	2103      	movs	r1, #3
 800a59e:	ab03      	add	r3, sp, #12
 800a5a0:	9301      	str	r3, [sp, #4]
 800a5a2:	ab02      	add	r3, sp, #8
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	4632      	mov	r2, r6
 800a5a8:	4653      	mov	r3, sl
 800a5aa:	ec45 4b10 	vmov	d0, r4, r5
 800a5ae:	f001 fb57 	bl	800bc60 <_dtoa_r>
 800a5b2:	2f47      	cmp	r7, #71	; 0x47
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	d102      	bne.n	800a5be <__cvt+0x62>
 800a5b8:	f019 0f01 	tst.w	r9, #1
 800a5bc:	d026      	beq.n	800a60c <__cvt+0xb0>
 800a5be:	2f46      	cmp	r7, #70	; 0x46
 800a5c0:	eb08 0906 	add.w	r9, r8, r6
 800a5c4:	d111      	bne.n	800a5ea <__cvt+0x8e>
 800a5c6:	f898 3000 	ldrb.w	r3, [r8]
 800a5ca:	2b30      	cmp	r3, #48	; 0x30
 800a5cc:	d10a      	bne.n	800a5e4 <__cvt+0x88>
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	f7f6 fa7f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5da:	b918      	cbnz	r0, 800a5e4 <__cvt+0x88>
 800a5dc:	f1c6 0601 	rsb	r6, r6, #1
 800a5e0:	f8ca 6000 	str.w	r6, [sl]
 800a5e4:	f8da 3000 	ldr.w	r3, [sl]
 800a5e8:	4499      	add	r9, r3
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	f7f6 fa71 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5f6:	b938      	cbnz	r0, 800a608 <__cvt+0xac>
 800a5f8:	2230      	movs	r2, #48	; 0x30
 800a5fa:	9b03      	ldr	r3, [sp, #12]
 800a5fc:	454b      	cmp	r3, r9
 800a5fe:	d205      	bcs.n	800a60c <__cvt+0xb0>
 800a600:	1c59      	adds	r1, r3, #1
 800a602:	9103      	str	r1, [sp, #12]
 800a604:	701a      	strb	r2, [r3, #0]
 800a606:	e7f8      	b.n	800a5fa <__cvt+0x9e>
 800a608:	f8cd 900c 	str.w	r9, [sp, #12]
 800a60c:	9b03      	ldr	r3, [sp, #12]
 800a60e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a610:	eba3 0308 	sub.w	r3, r3, r8
 800a614:	4640      	mov	r0, r8
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	b004      	add	sp, #16
 800a61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a61e <__exponent>:
 800a61e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a620:	2900      	cmp	r1, #0
 800a622:	4604      	mov	r4, r0
 800a624:	bfba      	itte	lt
 800a626:	4249      	neglt	r1, r1
 800a628:	232d      	movlt	r3, #45	; 0x2d
 800a62a:	232b      	movge	r3, #43	; 0x2b
 800a62c:	2909      	cmp	r1, #9
 800a62e:	f804 2b02 	strb.w	r2, [r4], #2
 800a632:	7043      	strb	r3, [r0, #1]
 800a634:	dd20      	ble.n	800a678 <__exponent+0x5a>
 800a636:	f10d 0307 	add.w	r3, sp, #7
 800a63a:	461f      	mov	r7, r3
 800a63c:	260a      	movs	r6, #10
 800a63e:	fb91 f5f6 	sdiv	r5, r1, r6
 800a642:	fb06 1115 	mls	r1, r6, r5, r1
 800a646:	3130      	adds	r1, #48	; 0x30
 800a648:	2d09      	cmp	r5, #9
 800a64a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a64e:	f103 32ff 	add.w	r2, r3, #4294967295
 800a652:	4629      	mov	r1, r5
 800a654:	dc09      	bgt.n	800a66a <__exponent+0x4c>
 800a656:	3130      	adds	r1, #48	; 0x30
 800a658:	3b02      	subs	r3, #2
 800a65a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a65e:	42bb      	cmp	r3, r7
 800a660:	4622      	mov	r2, r4
 800a662:	d304      	bcc.n	800a66e <__exponent+0x50>
 800a664:	1a10      	subs	r0, r2, r0
 800a666:	b003      	add	sp, #12
 800a668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a66a:	4613      	mov	r3, r2
 800a66c:	e7e7      	b.n	800a63e <__exponent+0x20>
 800a66e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a672:	f804 2b01 	strb.w	r2, [r4], #1
 800a676:	e7f2      	b.n	800a65e <__exponent+0x40>
 800a678:	2330      	movs	r3, #48	; 0x30
 800a67a:	4419      	add	r1, r3
 800a67c:	7083      	strb	r3, [r0, #2]
 800a67e:	1d02      	adds	r2, r0, #4
 800a680:	70c1      	strb	r1, [r0, #3]
 800a682:	e7ef      	b.n	800a664 <__exponent+0x46>

0800a684 <_printf_float>:
 800a684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a688:	b08d      	sub	sp, #52	; 0x34
 800a68a:	460c      	mov	r4, r1
 800a68c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a690:	4616      	mov	r6, r2
 800a692:	461f      	mov	r7, r3
 800a694:	4605      	mov	r5, r0
 800a696:	f002 fd01 	bl	800d09c <_localeconv_r>
 800a69a:	6803      	ldr	r3, [r0, #0]
 800a69c:	9304      	str	r3, [sp, #16]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7f5 fd9e 	bl	80001e0 <strlen>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a6a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a6ac:	9005      	str	r0, [sp, #20]
 800a6ae:	3307      	adds	r3, #7
 800a6b0:	f023 0307 	bic.w	r3, r3, #7
 800a6b4:	f103 0208 	add.w	r2, r3, #8
 800a6b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a6bc:	f8d4 b000 	ldr.w	fp, [r4]
 800a6c0:	f8c8 2000 	str.w	r2, [r8]
 800a6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a6cc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a6d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6d4:	9307      	str	r3, [sp, #28]
 800a6d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a6da:	f04f 32ff 	mov.w	r2, #4294967295
 800a6de:	4ba7      	ldr	r3, [pc, #668]	; (800a97c <_printf_float+0x2f8>)
 800a6e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6e4:	f7f6 fa2a 	bl	8000b3c <__aeabi_dcmpun>
 800a6e8:	bb70      	cbnz	r0, 800a748 <_printf_float+0xc4>
 800a6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ee:	4ba3      	ldr	r3, [pc, #652]	; (800a97c <_printf_float+0x2f8>)
 800a6f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6f4:	f7f6 fa04 	bl	8000b00 <__aeabi_dcmple>
 800a6f8:	bb30      	cbnz	r0, 800a748 <_printf_float+0xc4>
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4640      	mov	r0, r8
 800a700:	4649      	mov	r1, r9
 800a702:	f7f6 f9f3 	bl	8000aec <__aeabi_dcmplt>
 800a706:	b110      	cbz	r0, 800a70e <_printf_float+0x8a>
 800a708:	232d      	movs	r3, #45	; 0x2d
 800a70a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a70e:	4a9c      	ldr	r2, [pc, #624]	; (800a980 <_printf_float+0x2fc>)
 800a710:	4b9c      	ldr	r3, [pc, #624]	; (800a984 <_printf_float+0x300>)
 800a712:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a716:	bf8c      	ite	hi
 800a718:	4690      	movhi	r8, r2
 800a71a:	4698      	movls	r8, r3
 800a71c:	2303      	movs	r3, #3
 800a71e:	f02b 0204 	bic.w	r2, fp, #4
 800a722:	6123      	str	r3, [r4, #16]
 800a724:	6022      	str	r2, [r4, #0]
 800a726:	f04f 0900 	mov.w	r9, #0
 800a72a:	9700      	str	r7, [sp, #0]
 800a72c:	4633      	mov	r3, r6
 800a72e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a730:	4621      	mov	r1, r4
 800a732:	4628      	mov	r0, r5
 800a734:	f000 f9e6 	bl	800ab04 <_printf_common>
 800a738:	3001      	adds	r0, #1
 800a73a:	f040 808d 	bne.w	800a858 <_printf_float+0x1d4>
 800a73e:	f04f 30ff 	mov.w	r0, #4294967295
 800a742:	b00d      	add	sp, #52	; 0x34
 800a744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a748:	4642      	mov	r2, r8
 800a74a:	464b      	mov	r3, r9
 800a74c:	4640      	mov	r0, r8
 800a74e:	4649      	mov	r1, r9
 800a750:	f7f6 f9f4 	bl	8000b3c <__aeabi_dcmpun>
 800a754:	b110      	cbz	r0, 800a75c <_printf_float+0xd8>
 800a756:	4a8c      	ldr	r2, [pc, #560]	; (800a988 <_printf_float+0x304>)
 800a758:	4b8c      	ldr	r3, [pc, #560]	; (800a98c <_printf_float+0x308>)
 800a75a:	e7da      	b.n	800a712 <_printf_float+0x8e>
 800a75c:	6861      	ldr	r1, [r4, #4]
 800a75e:	1c4b      	adds	r3, r1, #1
 800a760:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a764:	a80a      	add	r0, sp, #40	; 0x28
 800a766:	d13e      	bne.n	800a7e6 <_printf_float+0x162>
 800a768:	2306      	movs	r3, #6
 800a76a:	6063      	str	r3, [r4, #4]
 800a76c:	2300      	movs	r3, #0
 800a76e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a772:	ab09      	add	r3, sp, #36	; 0x24
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	ec49 8b10 	vmov	d0, r8, r9
 800a77a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a77e:	6022      	str	r2, [r4, #0]
 800a780:	f8cd a004 	str.w	sl, [sp, #4]
 800a784:	6861      	ldr	r1, [r4, #4]
 800a786:	4628      	mov	r0, r5
 800a788:	f7ff fee8 	bl	800a55c <__cvt>
 800a78c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a790:	2b47      	cmp	r3, #71	; 0x47
 800a792:	4680      	mov	r8, r0
 800a794:	d109      	bne.n	800a7aa <_printf_float+0x126>
 800a796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a798:	1cd8      	adds	r0, r3, #3
 800a79a:	db02      	blt.n	800a7a2 <_printf_float+0x11e>
 800a79c:	6862      	ldr	r2, [r4, #4]
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	dd47      	ble.n	800a832 <_printf_float+0x1ae>
 800a7a2:	f1aa 0a02 	sub.w	sl, sl, #2
 800a7a6:	fa5f fa8a 	uxtb.w	sl, sl
 800a7aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a7ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7b0:	d824      	bhi.n	800a7fc <_printf_float+0x178>
 800a7b2:	3901      	subs	r1, #1
 800a7b4:	4652      	mov	r2, sl
 800a7b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a7ba:	9109      	str	r1, [sp, #36]	; 0x24
 800a7bc:	f7ff ff2f 	bl	800a61e <__exponent>
 800a7c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7c2:	1813      	adds	r3, r2, r0
 800a7c4:	2a01      	cmp	r2, #1
 800a7c6:	4681      	mov	r9, r0
 800a7c8:	6123      	str	r3, [r4, #16]
 800a7ca:	dc02      	bgt.n	800a7d2 <_printf_float+0x14e>
 800a7cc:	6822      	ldr	r2, [r4, #0]
 800a7ce:	07d1      	lsls	r1, r2, #31
 800a7d0:	d501      	bpl.n	800a7d6 <_printf_float+0x152>
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	6123      	str	r3, [r4, #16]
 800a7d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0a5      	beq.n	800a72a <_printf_float+0xa6>
 800a7de:	232d      	movs	r3, #45	; 0x2d
 800a7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7e4:	e7a1      	b.n	800a72a <_printf_float+0xa6>
 800a7e6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a7ea:	f000 8177 	beq.w	800aadc <_printf_float+0x458>
 800a7ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a7f2:	d1bb      	bne.n	800a76c <_printf_float+0xe8>
 800a7f4:	2900      	cmp	r1, #0
 800a7f6:	d1b9      	bne.n	800a76c <_printf_float+0xe8>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e7b6      	b.n	800a76a <_printf_float+0xe6>
 800a7fc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a800:	d119      	bne.n	800a836 <_printf_float+0x1b2>
 800a802:	2900      	cmp	r1, #0
 800a804:	6863      	ldr	r3, [r4, #4]
 800a806:	dd0c      	ble.n	800a822 <_printf_float+0x19e>
 800a808:	6121      	str	r1, [r4, #16]
 800a80a:	b913      	cbnz	r3, 800a812 <_printf_float+0x18e>
 800a80c:	6822      	ldr	r2, [r4, #0]
 800a80e:	07d2      	lsls	r2, r2, #31
 800a810:	d502      	bpl.n	800a818 <_printf_float+0x194>
 800a812:	3301      	adds	r3, #1
 800a814:	440b      	add	r3, r1
 800a816:	6123      	str	r3, [r4, #16]
 800a818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a81a:	65a3      	str	r3, [r4, #88]	; 0x58
 800a81c:	f04f 0900 	mov.w	r9, #0
 800a820:	e7d9      	b.n	800a7d6 <_printf_float+0x152>
 800a822:	b913      	cbnz	r3, 800a82a <_printf_float+0x1a6>
 800a824:	6822      	ldr	r2, [r4, #0]
 800a826:	07d0      	lsls	r0, r2, #31
 800a828:	d501      	bpl.n	800a82e <_printf_float+0x1aa>
 800a82a:	3302      	adds	r3, #2
 800a82c:	e7f3      	b.n	800a816 <_printf_float+0x192>
 800a82e:	2301      	movs	r3, #1
 800a830:	e7f1      	b.n	800a816 <_printf_float+0x192>
 800a832:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a836:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a83a:	4293      	cmp	r3, r2
 800a83c:	db05      	blt.n	800a84a <_printf_float+0x1c6>
 800a83e:	6822      	ldr	r2, [r4, #0]
 800a840:	6123      	str	r3, [r4, #16]
 800a842:	07d1      	lsls	r1, r2, #31
 800a844:	d5e8      	bpl.n	800a818 <_printf_float+0x194>
 800a846:	3301      	adds	r3, #1
 800a848:	e7e5      	b.n	800a816 <_printf_float+0x192>
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	bfd4      	ite	le
 800a84e:	f1c3 0302 	rsble	r3, r3, #2
 800a852:	2301      	movgt	r3, #1
 800a854:	4413      	add	r3, r2
 800a856:	e7de      	b.n	800a816 <_printf_float+0x192>
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	055a      	lsls	r2, r3, #21
 800a85c:	d407      	bmi.n	800a86e <_printf_float+0x1ea>
 800a85e:	6923      	ldr	r3, [r4, #16]
 800a860:	4642      	mov	r2, r8
 800a862:	4631      	mov	r1, r6
 800a864:	4628      	mov	r0, r5
 800a866:	47b8      	blx	r7
 800a868:	3001      	adds	r0, #1
 800a86a:	d12b      	bne.n	800a8c4 <_printf_float+0x240>
 800a86c:	e767      	b.n	800a73e <_printf_float+0xba>
 800a86e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a872:	f240 80dc 	bls.w	800aa2e <_printf_float+0x3aa>
 800a876:	2200      	movs	r2, #0
 800a878:	2300      	movs	r3, #0
 800a87a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a87e:	f7f6 f92b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a882:	2800      	cmp	r0, #0
 800a884:	d033      	beq.n	800a8ee <_printf_float+0x26a>
 800a886:	2301      	movs	r3, #1
 800a888:	4a41      	ldr	r2, [pc, #260]	; (800a990 <_printf_float+0x30c>)
 800a88a:	4631      	mov	r1, r6
 800a88c:	4628      	mov	r0, r5
 800a88e:	47b8      	blx	r7
 800a890:	3001      	adds	r0, #1
 800a892:	f43f af54 	beq.w	800a73e <_printf_float+0xba>
 800a896:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a89a:	429a      	cmp	r2, r3
 800a89c:	db02      	blt.n	800a8a4 <_printf_float+0x220>
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	07d8      	lsls	r0, r3, #31
 800a8a2:	d50f      	bpl.n	800a8c4 <_printf_float+0x240>
 800a8a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	47b8      	blx	r7
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	f43f af45 	beq.w	800a73e <_printf_float+0xba>
 800a8b4:	f04f 0800 	mov.w	r8, #0
 800a8b8:	f104 091a 	add.w	r9, r4, #26
 800a8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	4543      	cmp	r3, r8
 800a8c2:	dc09      	bgt.n	800a8d8 <_printf_float+0x254>
 800a8c4:	6823      	ldr	r3, [r4, #0]
 800a8c6:	079b      	lsls	r3, r3, #30
 800a8c8:	f100 8103 	bmi.w	800aad2 <_printf_float+0x44e>
 800a8cc:	68e0      	ldr	r0, [r4, #12]
 800a8ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8d0:	4298      	cmp	r0, r3
 800a8d2:	bfb8      	it	lt
 800a8d4:	4618      	movlt	r0, r3
 800a8d6:	e734      	b.n	800a742 <_printf_float+0xbe>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	464a      	mov	r2, r9
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4628      	mov	r0, r5
 800a8e0:	47b8      	blx	r7
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	f43f af2b 	beq.w	800a73e <_printf_float+0xba>
 800a8e8:	f108 0801 	add.w	r8, r8, #1
 800a8ec:	e7e6      	b.n	800a8bc <_printf_float+0x238>
 800a8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	dc2b      	bgt.n	800a94c <_printf_float+0x2c8>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	4a26      	ldr	r2, [pc, #152]	; (800a990 <_printf_float+0x30c>)
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	47b8      	blx	r7
 800a8fe:	3001      	adds	r0, #1
 800a900:	f43f af1d 	beq.w	800a73e <_printf_float+0xba>
 800a904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a906:	b923      	cbnz	r3, 800a912 <_printf_float+0x28e>
 800a908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a90a:	b913      	cbnz	r3, 800a912 <_printf_float+0x28e>
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	07d9      	lsls	r1, r3, #31
 800a910:	d5d8      	bpl.n	800a8c4 <_printf_float+0x240>
 800a912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a916:	4631      	mov	r1, r6
 800a918:	4628      	mov	r0, r5
 800a91a:	47b8      	blx	r7
 800a91c:	3001      	adds	r0, #1
 800a91e:	f43f af0e 	beq.w	800a73e <_printf_float+0xba>
 800a922:	f04f 0900 	mov.w	r9, #0
 800a926:	f104 0a1a 	add.w	sl, r4, #26
 800a92a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a92c:	425b      	negs	r3, r3
 800a92e:	454b      	cmp	r3, r9
 800a930:	dc01      	bgt.n	800a936 <_printf_float+0x2b2>
 800a932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a934:	e794      	b.n	800a860 <_printf_float+0x1dc>
 800a936:	2301      	movs	r3, #1
 800a938:	4652      	mov	r2, sl
 800a93a:	4631      	mov	r1, r6
 800a93c:	4628      	mov	r0, r5
 800a93e:	47b8      	blx	r7
 800a940:	3001      	adds	r0, #1
 800a942:	f43f aefc 	beq.w	800a73e <_printf_float+0xba>
 800a946:	f109 0901 	add.w	r9, r9, #1
 800a94a:	e7ee      	b.n	800a92a <_printf_float+0x2a6>
 800a94c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a94e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a950:	429a      	cmp	r2, r3
 800a952:	bfa8      	it	ge
 800a954:	461a      	movge	r2, r3
 800a956:	2a00      	cmp	r2, #0
 800a958:	4691      	mov	r9, r2
 800a95a:	dd07      	ble.n	800a96c <_printf_float+0x2e8>
 800a95c:	4613      	mov	r3, r2
 800a95e:	4631      	mov	r1, r6
 800a960:	4642      	mov	r2, r8
 800a962:	4628      	mov	r0, r5
 800a964:	47b8      	blx	r7
 800a966:	3001      	adds	r0, #1
 800a968:	f43f aee9 	beq.w	800a73e <_printf_float+0xba>
 800a96c:	f104 031a 	add.w	r3, r4, #26
 800a970:	f04f 0b00 	mov.w	fp, #0
 800a974:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a978:	9306      	str	r3, [sp, #24]
 800a97a:	e015      	b.n	800a9a8 <_printf_float+0x324>
 800a97c:	7fefffff 	.word	0x7fefffff
 800a980:	0800eae8 	.word	0x0800eae8
 800a984:	0800eae4 	.word	0x0800eae4
 800a988:	0800eaf0 	.word	0x0800eaf0
 800a98c:	0800eaec 	.word	0x0800eaec
 800a990:	0800eaf4 	.word	0x0800eaf4
 800a994:	2301      	movs	r3, #1
 800a996:	9a06      	ldr	r2, [sp, #24]
 800a998:	4631      	mov	r1, r6
 800a99a:	4628      	mov	r0, r5
 800a99c:	47b8      	blx	r7
 800a99e:	3001      	adds	r0, #1
 800a9a0:	f43f aecd 	beq.w	800a73e <_printf_float+0xba>
 800a9a4:	f10b 0b01 	add.w	fp, fp, #1
 800a9a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a9ac:	ebaa 0309 	sub.w	r3, sl, r9
 800a9b0:	455b      	cmp	r3, fp
 800a9b2:	dcef      	bgt.n	800a994 <_printf_float+0x310>
 800a9b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	44d0      	add	r8, sl
 800a9bc:	db15      	blt.n	800a9ea <_printf_float+0x366>
 800a9be:	6823      	ldr	r3, [r4, #0]
 800a9c0:	07da      	lsls	r2, r3, #31
 800a9c2:	d412      	bmi.n	800a9ea <_printf_float+0x366>
 800a9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9c8:	eba3 020a 	sub.w	r2, r3, sl
 800a9cc:	eba3 0a01 	sub.w	sl, r3, r1
 800a9d0:	4592      	cmp	sl, r2
 800a9d2:	bfa8      	it	ge
 800a9d4:	4692      	movge	sl, r2
 800a9d6:	f1ba 0f00 	cmp.w	sl, #0
 800a9da:	dc0e      	bgt.n	800a9fa <_printf_float+0x376>
 800a9dc:	f04f 0800 	mov.w	r8, #0
 800a9e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9e4:	f104 091a 	add.w	r9, r4, #26
 800a9e8:	e019      	b.n	800aa1e <_printf_float+0x39a>
 800a9ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ee:	4631      	mov	r1, r6
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	47b8      	blx	r7
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	d1e5      	bne.n	800a9c4 <_printf_float+0x340>
 800a9f8:	e6a1      	b.n	800a73e <_printf_float+0xba>
 800a9fa:	4653      	mov	r3, sl
 800a9fc:	4642      	mov	r2, r8
 800a9fe:	4631      	mov	r1, r6
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b8      	blx	r7
 800aa04:	3001      	adds	r0, #1
 800aa06:	d1e9      	bne.n	800a9dc <_printf_float+0x358>
 800aa08:	e699      	b.n	800a73e <_printf_float+0xba>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	464a      	mov	r2, r9
 800aa0e:	4631      	mov	r1, r6
 800aa10:	4628      	mov	r0, r5
 800aa12:	47b8      	blx	r7
 800aa14:	3001      	adds	r0, #1
 800aa16:	f43f ae92 	beq.w	800a73e <_printf_float+0xba>
 800aa1a:	f108 0801 	add.w	r8, r8, #1
 800aa1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa22:	1a9b      	subs	r3, r3, r2
 800aa24:	eba3 030a 	sub.w	r3, r3, sl
 800aa28:	4543      	cmp	r3, r8
 800aa2a:	dcee      	bgt.n	800aa0a <_printf_float+0x386>
 800aa2c:	e74a      	b.n	800a8c4 <_printf_float+0x240>
 800aa2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa30:	2a01      	cmp	r2, #1
 800aa32:	dc01      	bgt.n	800aa38 <_printf_float+0x3b4>
 800aa34:	07db      	lsls	r3, r3, #31
 800aa36:	d53a      	bpl.n	800aaae <_printf_float+0x42a>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	4642      	mov	r2, r8
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4628      	mov	r0, r5
 800aa40:	47b8      	blx	r7
 800aa42:	3001      	adds	r0, #1
 800aa44:	f43f ae7b 	beq.w	800a73e <_printf_float+0xba>
 800aa48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa4c:	4631      	mov	r1, r6
 800aa4e:	4628      	mov	r0, r5
 800aa50:	47b8      	blx	r7
 800aa52:	3001      	adds	r0, #1
 800aa54:	f108 0801 	add.w	r8, r8, #1
 800aa58:	f43f ae71 	beq.w	800a73e <_printf_float+0xba>
 800aa5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f103 3aff 	add.w	sl, r3, #4294967295
 800aa64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa68:	2300      	movs	r3, #0
 800aa6a:	f7f6 f835 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa6e:	b9c8      	cbnz	r0, 800aaa4 <_printf_float+0x420>
 800aa70:	4653      	mov	r3, sl
 800aa72:	4642      	mov	r2, r8
 800aa74:	4631      	mov	r1, r6
 800aa76:	4628      	mov	r0, r5
 800aa78:	47b8      	blx	r7
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	d10e      	bne.n	800aa9c <_printf_float+0x418>
 800aa7e:	e65e      	b.n	800a73e <_printf_float+0xba>
 800aa80:	2301      	movs	r3, #1
 800aa82:	4652      	mov	r2, sl
 800aa84:	4631      	mov	r1, r6
 800aa86:	4628      	mov	r0, r5
 800aa88:	47b8      	blx	r7
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	f43f ae57 	beq.w	800a73e <_printf_float+0xba>
 800aa90:	f108 0801 	add.w	r8, r8, #1
 800aa94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa96:	3b01      	subs	r3, #1
 800aa98:	4543      	cmp	r3, r8
 800aa9a:	dcf1      	bgt.n	800aa80 <_printf_float+0x3fc>
 800aa9c:	464b      	mov	r3, r9
 800aa9e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aaa2:	e6de      	b.n	800a862 <_printf_float+0x1de>
 800aaa4:	f04f 0800 	mov.w	r8, #0
 800aaa8:	f104 0a1a 	add.w	sl, r4, #26
 800aaac:	e7f2      	b.n	800aa94 <_printf_float+0x410>
 800aaae:	2301      	movs	r3, #1
 800aab0:	e7df      	b.n	800aa72 <_printf_float+0x3ee>
 800aab2:	2301      	movs	r3, #1
 800aab4:	464a      	mov	r2, r9
 800aab6:	4631      	mov	r1, r6
 800aab8:	4628      	mov	r0, r5
 800aaba:	47b8      	blx	r7
 800aabc:	3001      	adds	r0, #1
 800aabe:	f43f ae3e 	beq.w	800a73e <_printf_float+0xba>
 800aac2:	f108 0801 	add.w	r8, r8, #1
 800aac6:	68e3      	ldr	r3, [r4, #12]
 800aac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aaca:	1a9b      	subs	r3, r3, r2
 800aacc:	4543      	cmp	r3, r8
 800aace:	dcf0      	bgt.n	800aab2 <_printf_float+0x42e>
 800aad0:	e6fc      	b.n	800a8cc <_printf_float+0x248>
 800aad2:	f04f 0800 	mov.w	r8, #0
 800aad6:	f104 0919 	add.w	r9, r4, #25
 800aada:	e7f4      	b.n	800aac6 <_printf_float+0x442>
 800aadc:	2900      	cmp	r1, #0
 800aade:	f43f ae8b 	beq.w	800a7f8 <_printf_float+0x174>
 800aae2:	2300      	movs	r3, #0
 800aae4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800aae8:	ab09      	add	r3, sp, #36	; 0x24
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	ec49 8b10 	vmov	d0, r8, r9
 800aaf0:	6022      	str	r2, [r4, #0]
 800aaf2:	f8cd a004 	str.w	sl, [sp, #4]
 800aaf6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aafa:	4628      	mov	r0, r5
 800aafc:	f7ff fd2e 	bl	800a55c <__cvt>
 800ab00:	4680      	mov	r8, r0
 800ab02:	e648      	b.n	800a796 <_printf_float+0x112>

0800ab04 <_printf_common>:
 800ab04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab08:	4691      	mov	r9, r2
 800ab0a:	461f      	mov	r7, r3
 800ab0c:	688a      	ldr	r2, [r1, #8]
 800ab0e:	690b      	ldr	r3, [r1, #16]
 800ab10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab14:	4293      	cmp	r3, r2
 800ab16:	bfb8      	it	lt
 800ab18:	4613      	movlt	r3, r2
 800ab1a:	f8c9 3000 	str.w	r3, [r9]
 800ab1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab22:	4606      	mov	r6, r0
 800ab24:	460c      	mov	r4, r1
 800ab26:	b112      	cbz	r2, 800ab2e <_printf_common+0x2a>
 800ab28:	3301      	adds	r3, #1
 800ab2a:	f8c9 3000 	str.w	r3, [r9]
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	0699      	lsls	r1, r3, #26
 800ab32:	bf42      	ittt	mi
 800ab34:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ab38:	3302      	addmi	r3, #2
 800ab3a:	f8c9 3000 	strmi.w	r3, [r9]
 800ab3e:	6825      	ldr	r5, [r4, #0]
 800ab40:	f015 0506 	ands.w	r5, r5, #6
 800ab44:	d107      	bne.n	800ab56 <_printf_common+0x52>
 800ab46:	f104 0a19 	add.w	sl, r4, #25
 800ab4a:	68e3      	ldr	r3, [r4, #12]
 800ab4c:	f8d9 2000 	ldr.w	r2, [r9]
 800ab50:	1a9b      	subs	r3, r3, r2
 800ab52:	42ab      	cmp	r3, r5
 800ab54:	dc28      	bgt.n	800aba8 <_printf_common+0xa4>
 800ab56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ab5a:	6822      	ldr	r2, [r4, #0]
 800ab5c:	3300      	adds	r3, #0
 800ab5e:	bf18      	it	ne
 800ab60:	2301      	movne	r3, #1
 800ab62:	0692      	lsls	r2, r2, #26
 800ab64:	d42d      	bmi.n	800abc2 <_printf_common+0xbe>
 800ab66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab6a:	4639      	mov	r1, r7
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	47c0      	blx	r8
 800ab70:	3001      	adds	r0, #1
 800ab72:	d020      	beq.n	800abb6 <_printf_common+0xb2>
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	68e5      	ldr	r5, [r4, #12]
 800ab78:	f8d9 2000 	ldr.w	r2, [r9]
 800ab7c:	f003 0306 	and.w	r3, r3, #6
 800ab80:	2b04      	cmp	r3, #4
 800ab82:	bf08      	it	eq
 800ab84:	1aad      	subeq	r5, r5, r2
 800ab86:	68a3      	ldr	r3, [r4, #8]
 800ab88:	6922      	ldr	r2, [r4, #16]
 800ab8a:	bf0c      	ite	eq
 800ab8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab90:	2500      	movne	r5, #0
 800ab92:	4293      	cmp	r3, r2
 800ab94:	bfc4      	itt	gt
 800ab96:	1a9b      	subgt	r3, r3, r2
 800ab98:	18ed      	addgt	r5, r5, r3
 800ab9a:	f04f 0900 	mov.w	r9, #0
 800ab9e:	341a      	adds	r4, #26
 800aba0:	454d      	cmp	r5, r9
 800aba2:	d11a      	bne.n	800abda <_printf_common+0xd6>
 800aba4:	2000      	movs	r0, #0
 800aba6:	e008      	b.n	800abba <_printf_common+0xb6>
 800aba8:	2301      	movs	r3, #1
 800abaa:	4652      	mov	r2, sl
 800abac:	4639      	mov	r1, r7
 800abae:	4630      	mov	r0, r6
 800abb0:	47c0      	blx	r8
 800abb2:	3001      	adds	r0, #1
 800abb4:	d103      	bne.n	800abbe <_printf_common+0xba>
 800abb6:	f04f 30ff 	mov.w	r0, #4294967295
 800abba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abbe:	3501      	adds	r5, #1
 800abc0:	e7c3      	b.n	800ab4a <_printf_common+0x46>
 800abc2:	18e1      	adds	r1, r4, r3
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	2030      	movs	r0, #48	; 0x30
 800abc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abcc:	4422      	add	r2, r4
 800abce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abd6:	3302      	adds	r3, #2
 800abd8:	e7c5      	b.n	800ab66 <_printf_common+0x62>
 800abda:	2301      	movs	r3, #1
 800abdc:	4622      	mov	r2, r4
 800abde:	4639      	mov	r1, r7
 800abe0:	4630      	mov	r0, r6
 800abe2:	47c0      	blx	r8
 800abe4:	3001      	adds	r0, #1
 800abe6:	d0e6      	beq.n	800abb6 <_printf_common+0xb2>
 800abe8:	f109 0901 	add.w	r9, r9, #1
 800abec:	e7d8      	b.n	800aba0 <_printf_common+0x9c>
	...

0800abf0 <_printf_i>:
 800abf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abf4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800abf8:	460c      	mov	r4, r1
 800abfa:	7e09      	ldrb	r1, [r1, #24]
 800abfc:	b085      	sub	sp, #20
 800abfe:	296e      	cmp	r1, #110	; 0x6e
 800ac00:	4617      	mov	r7, r2
 800ac02:	4606      	mov	r6, r0
 800ac04:	4698      	mov	r8, r3
 800ac06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac08:	f000 80b3 	beq.w	800ad72 <_printf_i+0x182>
 800ac0c:	d822      	bhi.n	800ac54 <_printf_i+0x64>
 800ac0e:	2963      	cmp	r1, #99	; 0x63
 800ac10:	d036      	beq.n	800ac80 <_printf_i+0x90>
 800ac12:	d80a      	bhi.n	800ac2a <_printf_i+0x3a>
 800ac14:	2900      	cmp	r1, #0
 800ac16:	f000 80b9 	beq.w	800ad8c <_printf_i+0x19c>
 800ac1a:	2958      	cmp	r1, #88	; 0x58
 800ac1c:	f000 8083 	beq.w	800ad26 <_printf_i+0x136>
 800ac20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ac28:	e032      	b.n	800ac90 <_printf_i+0xa0>
 800ac2a:	2964      	cmp	r1, #100	; 0x64
 800ac2c:	d001      	beq.n	800ac32 <_printf_i+0x42>
 800ac2e:	2969      	cmp	r1, #105	; 0x69
 800ac30:	d1f6      	bne.n	800ac20 <_printf_i+0x30>
 800ac32:	6820      	ldr	r0, [r4, #0]
 800ac34:	6813      	ldr	r3, [r2, #0]
 800ac36:	0605      	lsls	r5, r0, #24
 800ac38:	f103 0104 	add.w	r1, r3, #4
 800ac3c:	d52a      	bpl.n	800ac94 <_printf_i+0xa4>
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6011      	str	r1, [r2, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	da03      	bge.n	800ac4e <_printf_i+0x5e>
 800ac46:	222d      	movs	r2, #45	; 0x2d
 800ac48:	425b      	negs	r3, r3
 800ac4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ac4e:	486f      	ldr	r0, [pc, #444]	; (800ae0c <_printf_i+0x21c>)
 800ac50:	220a      	movs	r2, #10
 800ac52:	e039      	b.n	800acc8 <_printf_i+0xd8>
 800ac54:	2973      	cmp	r1, #115	; 0x73
 800ac56:	f000 809d 	beq.w	800ad94 <_printf_i+0x1a4>
 800ac5a:	d808      	bhi.n	800ac6e <_printf_i+0x7e>
 800ac5c:	296f      	cmp	r1, #111	; 0x6f
 800ac5e:	d020      	beq.n	800aca2 <_printf_i+0xb2>
 800ac60:	2970      	cmp	r1, #112	; 0x70
 800ac62:	d1dd      	bne.n	800ac20 <_printf_i+0x30>
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	f043 0320 	orr.w	r3, r3, #32
 800ac6a:	6023      	str	r3, [r4, #0]
 800ac6c:	e003      	b.n	800ac76 <_printf_i+0x86>
 800ac6e:	2975      	cmp	r1, #117	; 0x75
 800ac70:	d017      	beq.n	800aca2 <_printf_i+0xb2>
 800ac72:	2978      	cmp	r1, #120	; 0x78
 800ac74:	d1d4      	bne.n	800ac20 <_printf_i+0x30>
 800ac76:	2378      	movs	r3, #120	; 0x78
 800ac78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac7c:	4864      	ldr	r0, [pc, #400]	; (800ae10 <_printf_i+0x220>)
 800ac7e:	e055      	b.n	800ad2c <_printf_i+0x13c>
 800ac80:	6813      	ldr	r3, [r2, #0]
 800ac82:	1d19      	adds	r1, r3, #4
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6011      	str	r1, [r2, #0]
 800ac88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac90:	2301      	movs	r3, #1
 800ac92:	e08c      	b.n	800adae <_printf_i+0x1be>
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6011      	str	r1, [r2, #0]
 800ac98:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac9c:	bf18      	it	ne
 800ac9e:	b21b      	sxthne	r3, r3
 800aca0:	e7cf      	b.n	800ac42 <_printf_i+0x52>
 800aca2:	6813      	ldr	r3, [r2, #0]
 800aca4:	6825      	ldr	r5, [r4, #0]
 800aca6:	1d18      	adds	r0, r3, #4
 800aca8:	6010      	str	r0, [r2, #0]
 800acaa:	0628      	lsls	r0, r5, #24
 800acac:	d501      	bpl.n	800acb2 <_printf_i+0xc2>
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	e002      	b.n	800acb8 <_printf_i+0xc8>
 800acb2:	0668      	lsls	r0, r5, #25
 800acb4:	d5fb      	bpl.n	800acae <_printf_i+0xbe>
 800acb6:	881b      	ldrh	r3, [r3, #0]
 800acb8:	4854      	ldr	r0, [pc, #336]	; (800ae0c <_printf_i+0x21c>)
 800acba:	296f      	cmp	r1, #111	; 0x6f
 800acbc:	bf14      	ite	ne
 800acbe:	220a      	movne	r2, #10
 800acc0:	2208      	moveq	r2, #8
 800acc2:	2100      	movs	r1, #0
 800acc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acc8:	6865      	ldr	r5, [r4, #4]
 800acca:	60a5      	str	r5, [r4, #8]
 800accc:	2d00      	cmp	r5, #0
 800acce:	f2c0 8095 	blt.w	800adfc <_printf_i+0x20c>
 800acd2:	6821      	ldr	r1, [r4, #0]
 800acd4:	f021 0104 	bic.w	r1, r1, #4
 800acd8:	6021      	str	r1, [r4, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d13d      	bne.n	800ad5a <_printf_i+0x16a>
 800acde:	2d00      	cmp	r5, #0
 800ace0:	f040 808e 	bne.w	800ae00 <_printf_i+0x210>
 800ace4:	4665      	mov	r5, ip
 800ace6:	2a08      	cmp	r2, #8
 800ace8:	d10b      	bne.n	800ad02 <_printf_i+0x112>
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	07db      	lsls	r3, r3, #31
 800acee:	d508      	bpl.n	800ad02 <_printf_i+0x112>
 800acf0:	6923      	ldr	r3, [r4, #16]
 800acf2:	6862      	ldr	r2, [r4, #4]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	bfde      	ittt	le
 800acf8:	2330      	movle	r3, #48	; 0x30
 800acfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad02:	ebac 0305 	sub.w	r3, ip, r5
 800ad06:	6123      	str	r3, [r4, #16]
 800ad08:	f8cd 8000 	str.w	r8, [sp]
 800ad0c:	463b      	mov	r3, r7
 800ad0e:	aa03      	add	r2, sp, #12
 800ad10:	4621      	mov	r1, r4
 800ad12:	4630      	mov	r0, r6
 800ad14:	f7ff fef6 	bl	800ab04 <_printf_common>
 800ad18:	3001      	adds	r0, #1
 800ad1a:	d14d      	bne.n	800adb8 <_printf_i+0x1c8>
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	b005      	add	sp, #20
 800ad22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad26:	4839      	ldr	r0, [pc, #228]	; (800ae0c <_printf_i+0x21c>)
 800ad28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ad2c:	6813      	ldr	r3, [r2, #0]
 800ad2e:	6821      	ldr	r1, [r4, #0]
 800ad30:	1d1d      	adds	r5, r3, #4
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6015      	str	r5, [r2, #0]
 800ad36:	060a      	lsls	r2, r1, #24
 800ad38:	d50b      	bpl.n	800ad52 <_printf_i+0x162>
 800ad3a:	07ca      	lsls	r2, r1, #31
 800ad3c:	bf44      	itt	mi
 800ad3e:	f041 0120 	orrmi.w	r1, r1, #32
 800ad42:	6021      	strmi	r1, [r4, #0]
 800ad44:	b91b      	cbnz	r3, 800ad4e <_printf_i+0x15e>
 800ad46:	6822      	ldr	r2, [r4, #0]
 800ad48:	f022 0220 	bic.w	r2, r2, #32
 800ad4c:	6022      	str	r2, [r4, #0]
 800ad4e:	2210      	movs	r2, #16
 800ad50:	e7b7      	b.n	800acc2 <_printf_i+0xd2>
 800ad52:	064d      	lsls	r5, r1, #25
 800ad54:	bf48      	it	mi
 800ad56:	b29b      	uxthmi	r3, r3
 800ad58:	e7ef      	b.n	800ad3a <_printf_i+0x14a>
 800ad5a:	4665      	mov	r5, ip
 800ad5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad60:	fb02 3311 	mls	r3, r2, r1, r3
 800ad64:	5cc3      	ldrb	r3, [r0, r3]
 800ad66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	2900      	cmp	r1, #0
 800ad6e:	d1f5      	bne.n	800ad5c <_printf_i+0x16c>
 800ad70:	e7b9      	b.n	800ace6 <_printf_i+0xf6>
 800ad72:	6813      	ldr	r3, [r2, #0]
 800ad74:	6825      	ldr	r5, [r4, #0]
 800ad76:	6961      	ldr	r1, [r4, #20]
 800ad78:	1d18      	adds	r0, r3, #4
 800ad7a:	6010      	str	r0, [r2, #0]
 800ad7c:	0628      	lsls	r0, r5, #24
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	d501      	bpl.n	800ad86 <_printf_i+0x196>
 800ad82:	6019      	str	r1, [r3, #0]
 800ad84:	e002      	b.n	800ad8c <_printf_i+0x19c>
 800ad86:	066a      	lsls	r2, r5, #25
 800ad88:	d5fb      	bpl.n	800ad82 <_printf_i+0x192>
 800ad8a:	8019      	strh	r1, [r3, #0]
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	6123      	str	r3, [r4, #16]
 800ad90:	4665      	mov	r5, ip
 800ad92:	e7b9      	b.n	800ad08 <_printf_i+0x118>
 800ad94:	6813      	ldr	r3, [r2, #0]
 800ad96:	1d19      	adds	r1, r3, #4
 800ad98:	6011      	str	r1, [r2, #0]
 800ad9a:	681d      	ldr	r5, [r3, #0]
 800ad9c:	6862      	ldr	r2, [r4, #4]
 800ad9e:	2100      	movs	r1, #0
 800ada0:	4628      	mov	r0, r5
 800ada2:	f7f5 fa25 	bl	80001f0 <memchr>
 800ada6:	b108      	cbz	r0, 800adac <_printf_i+0x1bc>
 800ada8:	1b40      	subs	r0, r0, r5
 800adaa:	6060      	str	r0, [r4, #4]
 800adac:	6863      	ldr	r3, [r4, #4]
 800adae:	6123      	str	r3, [r4, #16]
 800adb0:	2300      	movs	r3, #0
 800adb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adb6:	e7a7      	b.n	800ad08 <_printf_i+0x118>
 800adb8:	6923      	ldr	r3, [r4, #16]
 800adba:	462a      	mov	r2, r5
 800adbc:	4639      	mov	r1, r7
 800adbe:	4630      	mov	r0, r6
 800adc0:	47c0      	blx	r8
 800adc2:	3001      	adds	r0, #1
 800adc4:	d0aa      	beq.n	800ad1c <_printf_i+0x12c>
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	079b      	lsls	r3, r3, #30
 800adca:	d413      	bmi.n	800adf4 <_printf_i+0x204>
 800adcc:	68e0      	ldr	r0, [r4, #12]
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	4298      	cmp	r0, r3
 800add2:	bfb8      	it	lt
 800add4:	4618      	movlt	r0, r3
 800add6:	e7a3      	b.n	800ad20 <_printf_i+0x130>
 800add8:	2301      	movs	r3, #1
 800adda:	464a      	mov	r2, r9
 800addc:	4639      	mov	r1, r7
 800adde:	4630      	mov	r0, r6
 800ade0:	47c0      	blx	r8
 800ade2:	3001      	adds	r0, #1
 800ade4:	d09a      	beq.n	800ad1c <_printf_i+0x12c>
 800ade6:	3501      	adds	r5, #1
 800ade8:	68e3      	ldr	r3, [r4, #12]
 800adea:	9a03      	ldr	r2, [sp, #12]
 800adec:	1a9b      	subs	r3, r3, r2
 800adee:	42ab      	cmp	r3, r5
 800adf0:	dcf2      	bgt.n	800add8 <_printf_i+0x1e8>
 800adf2:	e7eb      	b.n	800adcc <_printf_i+0x1dc>
 800adf4:	2500      	movs	r5, #0
 800adf6:	f104 0919 	add.w	r9, r4, #25
 800adfa:	e7f5      	b.n	800ade8 <_printf_i+0x1f8>
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1ac      	bne.n	800ad5a <_printf_i+0x16a>
 800ae00:	7803      	ldrb	r3, [r0, #0]
 800ae02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae0a:	e76c      	b.n	800ace6 <_printf_i+0xf6>
 800ae0c:	0800eaf6 	.word	0x0800eaf6
 800ae10:	0800eb07 	.word	0x0800eb07

0800ae14 <siprintf>:
 800ae14:	b40e      	push	{r1, r2, r3}
 800ae16:	b500      	push	{lr}
 800ae18:	b09c      	sub	sp, #112	; 0x70
 800ae1a:	ab1d      	add	r3, sp, #116	; 0x74
 800ae1c:	9002      	str	r0, [sp, #8]
 800ae1e:	9006      	str	r0, [sp, #24]
 800ae20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae24:	4809      	ldr	r0, [pc, #36]	; (800ae4c <siprintf+0x38>)
 800ae26:	9107      	str	r1, [sp, #28]
 800ae28:	9104      	str	r1, [sp, #16]
 800ae2a:	4909      	ldr	r1, [pc, #36]	; (800ae50 <siprintf+0x3c>)
 800ae2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae30:	9105      	str	r1, [sp, #20]
 800ae32:	6800      	ldr	r0, [r0, #0]
 800ae34:	9301      	str	r3, [sp, #4]
 800ae36:	a902      	add	r1, sp, #8
 800ae38:	f002 feb6 	bl	800dba8 <_svfiprintf_r>
 800ae3c:	9b02      	ldr	r3, [sp, #8]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	701a      	strb	r2, [r3, #0]
 800ae42:	b01c      	add	sp, #112	; 0x70
 800ae44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae48:	b003      	add	sp, #12
 800ae4a:	4770      	bx	lr
 800ae4c:	20000094 	.word	0x20000094
 800ae50:	ffff0208 	.word	0xffff0208

0800ae54 <strncat>:
 800ae54:	b530      	push	{r4, r5, lr}
 800ae56:	4603      	mov	r3, r0
 800ae58:	781c      	ldrb	r4, [r3, #0]
 800ae5a:	1c5d      	adds	r5, r3, #1
 800ae5c:	b944      	cbnz	r4, 800ae70 <strncat+0x1c>
 800ae5e:	f112 32ff 	adds.w	r2, r2, #4294967295
 800ae62:	d304      	bcc.n	800ae6e <strncat+0x1a>
 800ae64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae68:	f803 4b01 	strb.w	r4, [r3], #1
 800ae6c:	b914      	cbnz	r4, 800ae74 <strncat+0x20>
 800ae6e:	bd30      	pop	{r4, r5, pc}
 800ae70:	462b      	mov	r3, r5
 800ae72:	e7f1      	b.n	800ae58 <strncat+0x4>
 800ae74:	2a00      	cmp	r2, #0
 800ae76:	d1f2      	bne.n	800ae5e <strncat+0xa>
 800ae78:	701a      	strb	r2, [r3, #0]
 800ae7a:	e7f0      	b.n	800ae5e <strncat+0xa>

0800ae7c <sulp>:
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	4604      	mov	r4, r0
 800ae80:	460d      	mov	r5, r1
 800ae82:	ec45 4b10 	vmov	d0, r4, r5
 800ae86:	4616      	mov	r6, r2
 800ae88:	f002 fc06 	bl	800d698 <__ulp>
 800ae8c:	ec51 0b10 	vmov	r0, r1, d0
 800ae90:	b17e      	cbz	r6, 800aeb2 <sulp+0x36>
 800ae92:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae96:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	dd09      	ble.n	800aeb2 <sulp+0x36>
 800ae9e:	051b      	lsls	r3, r3, #20
 800aea0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aea4:	2400      	movs	r4, #0
 800aea6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aeaa:	4622      	mov	r2, r4
 800aeac:	462b      	mov	r3, r5
 800aeae:	f7f5 fbab 	bl	8000608 <__aeabi_dmul>
 800aeb2:	bd70      	pop	{r4, r5, r6, pc}
 800aeb4:	0000      	movs	r0, r0
	...

0800aeb8 <_strtod_l>:
 800aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebc:	461f      	mov	r7, r3
 800aebe:	b0a1      	sub	sp, #132	; 0x84
 800aec0:	2300      	movs	r3, #0
 800aec2:	4681      	mov	r9, r0
 800aec4:	4638      	mov	r0, r7
 800aec6:	460e      	mov	r6, r1
 800aec8:	9217      	str	r2, [sp, #92]	; 0x5c
 800aeca:	931c      	str	r3, [sp, #112]	; 0x70
 800aecc:	f002 f8e4 	bl	800d098 <__localeconv_l>
 800aed0:	4680      	mov	r8, r0
 800aed2:	6800      	ldr	r0, [r0, #0]
 800aed4:	f7f5 f984 	bl	80001e0 <strlen>
 800aed8:	f04f 0a00 	mov.w	sl, #0
 800aedc:	4604      	mov	r4, r0
 800aede:	f04f 0b00 	mov.w	fp, #0
 800aee2:	961b      	str	r6, [sp, #108]	; 0x6c
 800aee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aee6:	781a      	ldrb	r2, [r3, #0]
 800aee8:	2a0d      	cmp	r2, #13
 800aeea:	d832      	bhi.n	800af52 <_strtod_l+0x9a>
 800aeec:	2a09      	cmp	r2, #9
 800aeee:	d236      	bcs.n	800af5e <_strtod_l+0xa6>
 800aef0:	2a00      	cmp	r2, #0
 800aef2:	d03e      	beq.n	800af72 <_strtod_l+0xba>
 800aef4:	2300      	movs	r3, #0
 800aef6:	930d      	str	r3, [sp, #52]	; 0x34
 800aef8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800aefa:	782b      	ldrb	r3, [r5, #0]
 800aefc:	2b30      	cmp	r3, #48	; 0x30
 800aefe:	f040 80ac 	bne.w	800b05a <_strtod_l+0x1a2>
 800af02:	786b      	ldrb	r3, [r5, #1]
 800af04:	2b58      	cmp	r3, #88	; 0x58
 800af06:	d001      	beq.n	800af0c <_strtod_l+0x54>
 800af08:	2b78      	cmp	r3, #120	; 0x78
 800af0a:	d167      	bne.n	800afdc <_strtod_l+0x124>
 800af0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af0e:	9301      	str	r3, [sp, #4]
 800af10:	ab1c      	add	r3, sp, #112	; 0x70
 800af12:	9300      	str	r3, [sp, #0]
 800af14:	9702      	str	r7, [sp, #8]
 800af16:	ab1d      	add	r3, sp, #116	; 0x74
 800af18:	4a88      	ldr	r2, [pc, #544]	; (800b13c <_strtod_l+0x284>)
 800af1a:	a91b      	add	r1, sp, #108	; 0x6c
 800af1c:	4648      	mov	r0, r9
 800af1e:	f001 fde4 	bl	800caea <__gethex>
 800af22:	f010 0407 	ands.w	r4, r0, #7
 800af26:	4606      	mov	r6, r0
 800af28:	d005      	beq.n	800af36 <_strtod_l+0x7e>
 800af2a:	2c06      	cmp	r4, #6
 800af2c:	d12b      	bne.n	800af86 <_strtod_l+0xce>
 800af2e:	3501      	adds	r5, #1
 800af30:	2300      	movs	r3, #0
 800af32:	951b      	str	r5, [sp, #108]	; 0x6c
 800af34:	930d      	str	r3, [sp, #52]	; 0x34
 800af36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f040 859a 	bne.w	800ba72 <_strtod_l+0xbba>
 800af3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af40:	b1e3      	cbz	r3, 800af7c <_strtod_l+0xc4>
 800af42:	4652      	mov	r2, sl
 800af44:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af48:	ec43 2b10 	vmov	d0, r2, r3
 800af4c:	b021      	add	sp, #132	; 0x84
 800af4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af52:	2a2b      	cmp	r2, #43	; 0x2b
 800af54:	d015      	beq.n	800af82 <_strtod_l+0xca>
 800af56:	2a2d      	cmp	r2, #45	; 0x2d
 800af58:	d004      	beq.n	800af64 <_strtod_l+0xac>
 800af5a:	2a20      	cmp	r2, #32
 800af5c:	d1ca      	bne.n	800aef4 <_strtod_l+0x3c>
 800af5e:	3301      	adds	r3, #1
 800af60:	931b      	str	r3, [sp, #108]	; 0x6c
 800af62:	e7bf      	b.n	800aee4 <_strtod_l+0x2c>
 800af64:	2201      	movs	r2, #1
 800af66:	920d      	str	r2, [sp, #52]	; 0x34
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	921b      	str	r2, [sp, #108]	; 0x6c
 800af6c:	785b      	ldrb	r3, [r3, #1]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1c2      	bne.n	800aef8 <_strtod_l+0x40>
 800af72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af74:	961b      	str	r6, [sp, #108]	; 0x6c
 800af76:	2b00      	cmp	r3, #0
 800af78:	f040 8579 	bne.w	800ba6e <_strtod_l+0xbb6>
 800af7c:	4652      	mov	r2, sl
 800af7e:	465b      	mov	r3, fp
 800af80:	e7e2      	b.n	800af48 <_strtod_l+0x90>
 800af82:	2200      	movs	r2, #0
 800af84:	e7ef      	b.n	800af66 <_strtod_l+0xae>
 800af86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800af88:	b13a      	cbz	r2, 800af9a <_strtod_l+0xe2>
 800af8a:	2135      	movs	r1, #53	; 0x35
 800af8c:	a81e      	add	r0, sp, #120	; 0x78
 800af8e:	f002 fc99 	bl	800d8c4 <__copybits>
 800af92:	991c      	ldr	r1, [sp, #112]	; 0x70
 800af94:	4648      	mov	r0, r9
 800af96:	f002 f8e8 	bl	800d16a <_Bfree>
 800af9a:	3c01      	subs	r4, #1
 800af9c:	2c04      	cmp	r4, #4
 800af9e:	d806      	bhi.n	800afae <_strtod_l+0xf6>
 800afa0:	e8df f004 	tbb	[pc, r4]
 800afa4:	1714030a 	.word	0x1714030a
 800afa8:	0a          	.byte	0x0a
 800afa9:	00          	.byte	0x00
 800afaa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800afae:	0730      	lsls	r0, r6, #28
 800afb0:	d5c1      	bpl.n	800af36 <_strtod_l+0x7e>
 800afb2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800afb6:	e7be      	b.n	800af36 <_strtod_l+0x7e>
 800afb8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800afbc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800afbe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800afc2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800afc6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800afca:	e7f0      	b.n	800afae <_strtod_l+0xf6>
 800afcc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b140 <_strtod_l+0x288>
 800afd0:	e7ed      	b.n	800afae <_strtod_l+0xf6>
 800afd2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800afd6:	f04f 3aff 	mov.w	sl, #4294967295
 800afda:	e7e8      	b.n	800afae <_strtod_l+0xf6>
 800afdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afde:	1c5a      	adds	r2, r3, #1
 800afe0:	921b      	str	r2, [sp, #108]	; 0x6c
 800afe2:	785b      	ldrb	r3, [r3, #1]
 800afe4:	2b30      	cmp	r3, #48	; 0x30
 800afe6:	d0f9      	beq.n	800afdc <_strtod_l+0x124>
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d0a4      	beq.n	800af36 <_strtod_l+0x7e>
 800afec:	2301      	movs	r3, #1
 800afee:	2500      	movs	r5, #0
 800aff0:	9306      	str	r3, [sp, #24]
 800aff2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aff4:	9308      	str	r3, [sp, #32]
 800aff6:	9507      	str	r5, [sp, #28]
 800aff8:	9505      	str	r5, [sp, #20]
 800affa:	220a      	movs	r2, #10
 800affc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800affe:	7807      	ldrb	r7, [r0, #0]
 800b000:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b004:	b2d9      	uxtb	r1, r3
 800b006:	2909      	cmp	r1, #9
 800b008:	d929      	bls.n	800b05e <_strtod_l+0x1a6>
 800b00a:	4622      	mov	r2, r4
 800b00c:	f8d8 1000 	ldr.w	r1, [r8]
 800b010:	f002 fee0 	bl	800ddd4 <strncmp>
 800b014:	2800      	cmp	r0, #0
 800b016:	d031      	beq.n	800b07c <_strtod_l+0x1c4>
 800b018:	2000      	movs	r0, #0
 800b01a:	9c05      	ldr	r4, [sp, #20]
 800b01c:	9004      	str	r0, [sp, #16]
 800b01e:	463b      	mov	r3, r7
 800b020:	4602      	mov	r2, r0
 800b022:	2b65      	cmp	r3, #101	; 0x65
 800b024:	d001      	beq.n	800b02a <_strtod_l+0x172>
 800b026:	2b45      	cmp	r3, #69	; 0x45
 800b028:	d114      	bne.n	800b054 <_strtod_l+0x19c>
 800b02a:	b924      	cbnz	r4, 800b036 <_strtod_l+0x17e>
 800b02c:	b910      	cbnz	r0, 800b034 <_strtod_l+0x17c>
 800b02e:	9b06      	ldr	r3, [sp, #24]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d09e      	beq.n	800af72 <_strtod_l+0xba>
 800b034:	2400      	movs	r4, #0
 800b036:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b038:	1c73      	adds	r3, r6, #1
 800b03a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b03c:	7873      	ldrb	r3, [r6, #1]
 800b03e:	2b2b      	cmp	r3, #43	; 0x2b
 800b040:	d078      	beq.n	800b134 <_strtod_l+0x27c>
 800b042:	2b2d      	cmp	r3, #45	; 0x2d
 800b044:	d070      	beq.n	800b128 <_strtod_l+0x270>
 800b046:	f04f 0c00 	mov.w	ip, #0
 800b04a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b04e:	2f09      	cmp	r7, #9
 800b050:	d97c      	bls.n	800b14c <_strtod_l+0x294>
 800b052:	961b      	str	r6, [sp, #108]	; 0x6c
 800b054:	f04f 0e00 	mov.w	lr, #0
 800b058:	e09a      	b.n	800b190 <_strtod_l+0x2d8>
 800b05a:	2300      	movs	r3, #0
 800b05c:	e7c7      	b.n	800afee <_strtod_l+0x136>
 800b05e:	9905      	ldr	r1, [sp, #20]
 800b060:	2908      	cmp	r1, #8
 800b062:	bfdd      	ittte	le
 800b064:	9907      	ldrle	r1, [sp, #28]
 800b066:	fb02 3301 	mlale	r3, r2, r1, r3
 800b06a:	9307      	strle	r3, [sp, #28]
 800b06c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b070:	9b05      	ldr	r3, [sp, #20]
 800b072:	3001      	adds	r0, #1
 800b074:	3301      	adds	r3, #1
 800b076:	9305      	str	r3, [sp, #20]
 800b078:	901b      	str	r0, [sp, #108]	; 0x6c
 800b07a:	e7bf      	b.n	800affc <_strtod_l+0x144>
 800b07c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b07e:	191a      	adds	r2, r3, r4
 800b080:	921b      	str	r2, [sp, #108]	; 0x6c
 800b082:	9a05      	ldr	r2, [sp, #20]
 800b084:	5d1b      	ldrb	r3, [r3, r4]
 800b086:	2a00      	cmp	r2, #0
 800b088:	d037      	beq.n	800b0fa <_strtod_l+0x242>
 800b08a:	9c05      	ldr	r4, [sp, #20]
 800b08c:	4602      	mov	r2, r0
 800b08e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b092:	2909      	cmp	r1, #9
 800b094:	d913      	bls.n	800b0be <_strtod_l+0x206>
 800b096:	2101      	movs	r1, #1
 800b098:	9104      	str	r1, [sp, #16]
 800b09a:	e7c2      	b.n	800b022 <_strtod_l+0x16a>
 800b09c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b09e:	1c5a      	adds	r2, r3, #1
 800b0a0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b0a2:	785b      	ldrb	r3, [r3, #1]
 800b0a4:	3001      	adds	r0, #1
 800b0a6:	2b30      	cmp	r3, #48	; 0x30
 800b0a8:	d0f8      	beq.n	800b09c <_strtod_l+0x1e4>
 800b0aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b0ae:	2a08      	cmp	r2, #8
 800b0b0:	f200 84e4 	bhi.w	800ba7c <_strtod_l+0xbc4>
 800b0b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b0b6:	9208      	str	r2, [sp, #32]
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	4604      	mov	r4, r0
 800b0be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b0c2:	f100 0101 	add.w	r1, r0, #1
 800b0c6:	d012      	beq.n	800b0ee <_strtod_l+0x236>
 800b0c8:	440a      	add	r2, r1
 800b0ca:	eb00 0c04 	add.w	ip, r0, r4
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	270a      	movs	r7, #10
 800b0d2:	458c      	cmp	ip, r1
 800b0d4:	d113      	bne.n	800b0fe <_strtod_l+0x246>
 800b0d6:	1821      	adds	r1, r4, r0
 800b0d8:	2908      	cmp	r1, #8
 800b0da:	f104 0401 	add.w	r4, r4, #1
 800b0de:	4404      	add	r4, r0
 800b0e0:	dc19      	bgt.n	800b116 <_strtod_l+0x25e>
 800b0e2:	9b07      	ldr	r3, [sp, #28]
 800b0e4:	210a      	movs	r1, #10
 800b0e6:	fb01 e303 	mla	r3, r1, r3, lr
 800b0ea:	9307      	str	r3, [sp, #28]
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0f0:	1c58      	adds	r0, r3, #1
 800b0f2:	901b      	str	r0, [sp, #108]	; 0x6c
 800b0f4:	785b      	ldrb	r3, [r3, #1]
 800b0f6:	4608      	mov	r0, r1
 800b0f8:	e7c9      	b.n	800b08e <_strtod_l+0x1d6>
 800b0fa:	9805      	ldr	r0, [sp, #20]
 800b0fc:	e7d3      	b.n	800b0a6 <_strtod_l+0x1ee>
 800b0fe:	2908      	cmp	r1, #8
 800b100:	f101 0101 	add.w	r1, r1, #1
 800b104:	dc03      	bgt.n	800b10e <_strtod_l+0x256>
 800b106:	9b07      	ldr	r3, [sp, #28]
 800b108:	437b      	muls	r3, r7
 800b10a:	9307      	str	r3, [sp, #28]
 800b10c:	e7e1      	b.n	800b0d2 <_strtod_l+0x21a>
 800b10e:	2910      	cmp	r1, #16
 800b110:	bfd8      	it	le
 800b112:	437d      	mulle	r5, r7
 800b114:	e7dd      	b.n	800b0d2 <_strtod_l+0x21a>
 800b116:	2c10      	cmp	r4, #16
 800b118:	bfdc      	itt	le
 800b11a:	210a      	movle	r1, #10
 800b11c:	fb01 e505 	mlale	r5, r1, r5, lr
 800b120:	e7e4      	b.n	800b0ec <_strtod_l+0x234>
 800b122:	2301      	movs	r3, #1
 800b124:	9304      	str	r3, [sp, #16]
 800b126:	e781      	b.n	800b02c <_strtod_l+0x174>
 800b128:	f04f 0c01 	mov.w	ip, #1
 800b12c:	1cb3      	adds	r3, r6, #2
 800b12e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b130:	78b3      	ldrb	r3, [r6, #2]
 800b132:	e78a      	b.n	800b04a <_strtod_l+0x192>
 800b134:	f04f 0c00 	mov.w	ip, #0
 800b138:	e7f8      	b.n	800b12c <_strtod_l+0x274>
 800b13a:	bf00      	nop
 800b13c:	0800eb18 	.word	0x0800eb18
 800b140:	7ff00000 	.word	0x7ff00000
 800b144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b146:	1c5f      	adds	r7, r3, #1
 800b148:	971b      	str	r7, [sp, #108]	; 0x6c
 800b14a:	785b      	ldrb	r3, [r3, #1]
 800b14c:	2b30      	cmp	r3, #48	; 0x30
 800b14e:	d0f9      	beq.n	800b144 <_strtod_l+0x28c>
 800b150:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b154:	2f08      	cmp	r7, #8
 800b156:	f63f af7d 	bhi.w	800b054 <_strtod_l+0x19c>
 800b15a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b15e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b160:	930a      	str	r3, [sp, #40]	; 0x28
 800b162:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b164:	1c5f      	adds	r7, r3, #1
 800b166:	971b      	str	r7, [sp, #108]	; 0x6c
 800b168:	785b      	ldrb	r3, [r3, #1]
 800b16a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b16e:	f1b8 0f09 	cmp.w	r8, #9
 800b172:	d937      	bls.n	800b1e4 <_strtod_l+0x32c>
 800b174:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b176:	1a7f      	subs	r7, r7, r1
 800b178:	2f08      	cmp	r7, #8
 800b17a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b17e:	dc37      	bgt.n	800b1f0 <_strtod_l+0x338>
 800b180:	45be      	cmp	lr, r7
 800b182:	bfa8      	it	ge
 800b184:	46be      	movge	lr, r7
 800b186:	f1bc 0f00 	cmp.w	ip, #0
 800b18a:	d001      	beq.n	800b190 <_strtod_l+0x2d8>
 800b18c:	f1ce 0e00 	rsb	lr, lr, #0
 800b190:	2c00      	cmp	r4, #0
 800b192:	d151      	bne.n	800b238 <_strtod_l+0x380>
 800b194:	2800      	cmp	r0, #0
 800b196:	f47f aece 	bne.w	800af36 <_strtod_l+0x7e>
 800b19a:	9a06      	ldr	r2, [sp, #24]
 800b19c:	2a00      	cmp	r2, #0
 800b19e:	f47f aeca 	bne.w	800af36 <_strtod_l+0x7e>
 800b1a2:	9a04      	ldr	r2, [sp, #16]
 800b1a4:	2a00      	cmp	r2, #0
 800b1a6:	f47f aee4 	bne.w	800af72 <_strtod_l+0xba>
 800b1aa:	2b4e      	cmp	r3, #78	; 0x4e
 800b1ac:	d027      	beq.n	800b1fe <_strtod_l+0x346>
 800b1ae:	dc21      	bgt.n	800b1f4 <_strtod_l+0x33c>
 800b1b0:	2b49      	cmp	r3, #73	; 0x49
 800b1b2:	f47f aede 	bne.w	800af72 <_strtod_l+0xba>
 800b1b6:	49a0      	ldr	r1, [pc, #640]	; (800b438 <_strtod_l+0x580>)
 800b1b8:	a81b      	add	r0, sp, #108	; 0x6c
 800b1ba:	f001 fec9 	bl	800cf50 <__match>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	f43f aed7 	beq.w	800af72 <_strtod_l+0xba>
 800b1c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1c6:	499d      	ldr	r1, [pc, #628]	; (800b43c <_strtod_l+0x584>)
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	a81b      	add	r0, sp, #108	; 0x6c
 800b1cc:	931b      	str	r3, [sp, #108]	; 0x6c
 800b1ce:	f001 febf 	bl	800cf50 <__match>
 800b1d2:	b910      	cbnz	r0, 800b1da <_strtod_l+0x322>
 800b1d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b1da:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b450 <_strtod_l+0x598>
 800b1de:	f04f 0a00 	mov.w	sl, #0
 800b1e2:	e6a8      	b.n	800af36 <_strtod_l+0x7e>
 800b1e4:	210a      	movs	r1, #10
 800b1e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b1ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b1ee:	e7b8      	b.n	800b162 <_strtod_l+0x2aa>
 800b1f0:	46be      	mov	lr, r7
 800b1f2:	e7c8      	b.n	800b186 <_strtod_l+0x2ce>
 800b1f4:	2b69      	cmp	r3, #105	; 0x69
 800b1f6:	d0de      	beq.n	800b1b6 <_strtod_l+0x2fe>
 800b1f8:	2b6e      	cmp	r3, #110	; 0x6e
 800b1fa:	f47f aeba 	bne.w	800af72 <_strtod_l+0xba>
 800b1fe:	4990      	ldr	r1, [pc, #576]	; (800b440 <_strtod_l+0x588>)
 800b200:	a81b      	add	r0, sp, #108	; 0x6c
 800b202:	f001 fea5 	bl	800cf50 <__match>
 800b206:	2800      	cmp	r0, #0
 800b208:	f43f aeb3 	beq.w	800af72 <_strtod_l+0xba>
 800b20c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	2b28      	cmp	r3, #40	; 0x28
 800b212:	d10e      	bne.n	800b232 <_strtod_l+0x37a>
 800b214:	aa1e      	add	r2, sp, #120	; 0x78
 800b216:	498b      	ldr	r1, [pc, #556]	; (800b444 <_strtod_l+0x58c>)
 800b218:	a81b      	add	r0, sp, #108	; 0x6c
 800b21a:	f001 fead 	bl	800cf78 <__hexnan>
 800b21e:	2805      	cmp	r0, #5
 800b220:	d107      	bne.n	800b232 <_strtod_l+0x37a>
 800b222:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b224:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b228:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b22c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b230:	e681      	b.n	800af36 <_strtod_l+0x7e>
 800b232:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b458 <_strtod_l+0x5a0>
 800b236:	e7d2      	b.n	800b1de <_strtod_l+0x326>
 800b238:	ebae 0302 	sub.w	r3, lr, r2
 800b23c:	9306      	str	r3, [sp, #24]
 800b23e:	9b05      	ldr	r3, [sp, #20]
 800b240:	9807      	ldr	r0, [sp, #28]
 800b242:	2b00      	cmp	r3, #0
 800b244:	bf08      	it	eq
 800b246:	4623      	moveq	r3, r4
 800b248:	2c10      	cmp	r4, #16
 800b24a:	9305      	str	r3, [sp, #20]
 800b24c:	46a0      	mov	r8, r4
 800b24e:	bfa8      	it	ge
 800b250:	f04f 0810 	movge.w	r8, #16
 800b254:	f7f5 f95e 	bl	8000514 <__aeabi_ui2d>
 800b258:	2c09      	cmp	r4, #9
 800b25a:	4682      	mov	sl, r0
 800b25c:	468b      	mov	fp, r1
 800b25e:	dc13      	bgt.n	800b288 <_strtod_l+0x3d0>
 800b260:	9b06      	ldr	r3, [sp, #24]
 800b262:	2b00      	cmp	r3, #0
 800b264:	f43f ae67 	beq.w	800af36 <_strtod_l+0x7e>
 800b268:	9b06      	ldr	r3, [sp, #24]
 800b26a:	dd7a      	ble.n	800b362 <_strtod_l+0x4aa>
 800b26c:	2b16      	cmp	r3, #22
 800b26e:	dc61      	bgt.n	800b334 <_strtod_l+0x47c>
 800b270:	4a75      	ldr	r2, [pc, #468]	; (800b448 <_strtod_l+0x590>)
 800b272:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b276:	e9de 0100 	ldrd	r0, r1, [lr]
 800b27a:	4652      	mov	r2, sl
 800b27c:	465b      	mov	r3, fp
 800b27e:	f7f5 f9c3 	bl	8000608 <__aeabi_dmul>
 800b282:	4682      	mov	sl, r0
 800b284:	468b      	mov	fp, r1
 800b286:	e656      	b.n	800af36 <_strtod_l+0x7e>
 800b288:	4b6f      	ldr	r3, [pc, #444]	; (800b448 <_strtod_l+0x590>)
 800b28a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b28e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b292:	f7f5 f9b9 	bl	8000608 <__aeabi_dmul>
 800b296:	4606      	mov	r6, r0
 800b298:	4628      	mov	r0, r5
 800b29a:	460f      	mov	r7, r1
 800b29c:	f7f5 f93a 	bl	8000514 <__aeabi_ui2d>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	4639      	mov	r1, r7
 800b2a8:	f7f4 fff8 	bl	800029c <__adddf3>
 800b2ac:	2c0f      	cmp	r4, #15
 800b2ae:	4682      	mov	sl, r0
 800b2b0:	468b      	mov	fp, r1
 800b2b2:	ddd5      	ble.n	800b260 <_strtod_l+0x3a8>
 800b2b4:	9b06      	ldr	r3, [sp, #24]
 800b2b6:	eba4 0808 	sub.w	r8, r4, r8
 800b2ba:	4498      	add	r8, r3
 800b2bc:	f1b8 0f00 	cmp.w	r8, #0
 800b2c0:	f340 8096 	ble.w	800b3f0 <_strtod_l+0x538>
 800b2c4:	f018 030f 	ands.w	r3, r8, #15
 800b2c8:	d00a      	beq.n	800b2e0 <_strtod_l+0x428>
 800b2ca:	495f      	ldr	r1, [pc, #380]	; (800b448 <_strtod_l+0x590>)
 800b2cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2d0:	4652      	mov	r2, sl
 800b2d2:	465b      	mov	r3, fp
 800b2d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2d8:	f7f5 f996 	bl	8000608 <__aeabi_dmul>
 800b2dc:	4682      	mov	sl, r0
 800b2de:	468b      	mov	fp, r1
 800b2e0:	f038 080f 	bics.w	r8, r8, #15
 800b2e4:	d073      	beq.n	800b3ce <_strtod_l+0x516>
 800b2e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b2ea:	dd47      	ble.n	800b37c <_strtod_l+0x4c4>
 800b2ec:	2400      	movs	r4, #0
 800b2ee:	46a0      	mov	r8, r4
 800b2f0:	9407      	str	r4, [sp, #28]
 800b2f2:	9405      	str	r4, [sp, #20]
 800b2f4:	2322      	movs	r3, #34	; 0x22
 800b2f6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b450 <_strtod_l+0x598>
 800b2fa:	f8c9 3000 	str.w	r3, [r9]
 800b2fe:	f04f 0a00 	mov.w	sl, #0
 800b302:	9b07      	ldr	r3, [sp, #28]
 800b304:	2b00      	cmp	r3, #0
 800b306:	f43f ae16 	beq.w	800af36 <_strtod_l+0x7e>
 800b30a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b30c:	4648      	mov	r0, r9
 800b30e:	f001 ff2c 	bl	800d16a <_Bfree>
 800b312:	9905      	ldr	r1, [sp, #20]
 800b314:	4648      	mov	r0, r9
 800b316:	f001 ff28 	bl	800d16a <_Bfree>
 800b31a:	4641      	mov	r1, r8
 800b31c:	4648      	mov	r0, r9
 800b31e:	f001 ff24 	bl	800d16a <_Bfree>
 800b322:	9907      	ldr	r1, [sp, #28]
 800b324:	4648      	mov	r0, r9
 800b326:	f001 ff20 	bl	800d16a <_Bfree>
 800b32a:	4621      	mov	r1, r4
 800b32c:	4648      	mov	r0, r9
 800b32e:	f001 ff1c 	bl	800d16a <_Bfree>
 800b332:	e600      	b.n	800af36 <_strtod_l+0x7e>
 800b334:	9a06      	ldr	r2, [sp, #24]
 800b336:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b33a:	4293      	cmp	r3, r2
 800b33c:	dbba      	blt.n	800b2b4 <_strtod_l+0x3fc>
 800b33e:	4d42      	ldr	r5, [pc, #264]	; (800b448 <_strtod_l+0x590>)
 800b340:	f1c4 040f 	rsb	r4, r4, #15
 800b344:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b348:	4652      	mov	r2, sl
 800b34a:	465b      	mov	r3, fp
 800b34c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b350:	f7f5 f95a 	bl	8000608 <__aeabi_dmul>
 800b354:	9b06      	ldr	r3, [sp, #24]
 800b356:	1b1c      	subs	r4, r3, r4
 800b358:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b35c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b360:	e78d      	b.n	800b27e <_strtod_l+0x3c6>
 800b362:	f113 0f16 	cmn.w	r3, #22
 800b366:	dba5      	blt.n	800b2b4 <_strtod_l+0x3fc>
 800b368:	4a37      	ldr	r2, [pc, #220]	; (800b448 <_strtod_l+0x590>)
 800b36a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b36e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b372:	4650      	mov	r0, sl
 800b374:	4659      	mov	r1, fp
 800b376:	f7f5 fa71 	bl	800085c <__aeabi_ddiv>
 800b37a:	e782      	b.n	800b282 <_strtod_l+0x3ca>
 800b37c:	2300      	movs	r3, #0
 800b37e:	4e33      	ldr	r6, [pc, #204]	; (800b44c <_strtod_l+0x594>)
 800b380:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b384:	4650      	mov	r0, sl
 800b386:	4659      	mov	r1, fp
 800b388:	461d      	mov	r5, r3
 800b38a:	f1b8 0f01 	cmp.w	r8, #1
 800b38e:	dc21      	bgt.n	800b3d4 <_strtod_l+0x51c>
 800b390:	b10b      	cbz	r3, 800b396 <_strtod_l+0x4de>
 800b392:	4682      	mov	sl, r0
 800b394:	468b      	mov	fp, r1
 800b396:	4b2d      	ldr	r3, [pc, #180]	; (800b44c <_strtod_l+0x594>)
 800b398:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b39c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b3a0:	4652      	mov	r2, sl
 800b3a2:	465b      	mov	r3, fp
 800b3a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b3a8:	f7f5 f92e 	bl	8000608 <__aeabi_dmul>
 800b3ac:	4b28      	ldr	r3, [pc, #160]	; (800b450 <_strtod_l+0x598>)
 800b3ae:	460a      	mov	r2, r1
 800b3b0:	400b      	ands	r3, r1
 800b3b2:	4928      	ldr	r1, [pc, #160]	; (800b454 <_strtod_l+0x59c>)
 800b3b4:	428b      	cmp	r3, r1
 800b3b6:	4682      	mov	sl, r0
 800b3b8:	d898      	bhi.n	800b2ec <_strtod_l+0x434>
 800b3ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b3be:	428b      	cmp	r3, r1
 800b3c0:	bf86      	itte	hi
 800b3c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b45c <_strtod_l+0x5a4>
 800b3c6:	f04f 3aff 	movhi.w	sl, #4294967295
 800b3ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	9304      	str	r3, [sp, #16]
 800b3d2:	e077      	b.n	800b4c4 <_strtod_l+0x60c>
 800b3d4:	f018 0f01 	tst.w	r8, #1
 800b3d8:	d006      	beq.n	800b3e8 <_strtod_l+0x530>
 800b3da:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e2:	f7f5 f911 	bl	8000608 <__aeabi_dmul>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	3501      	adds	r5, #1
 800b3ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b3ee:	e7cc      	b.n	800b38a <_strtod_l+0x4d2>
 800b3f0:	d0ed      	beq.n	800b3ce <_strtod_l+0x516>
 800b3f2:	f1c8 0800 	rsb	r8, r8, #0
 800b3f6:	f018 020f 	ands.w	r2, r8, #15
 800b3fa:	d00a      	beq.n	800b412 <_strtod_l+0x55a>
 800b3fc:	4b12      	ldr	r3, [pc, #72]	; (800b448 <_strtod_l+0x590>)
 800b3fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b402:	4650      	mov	r0, sl
 800b404:	4659      	mov	r1, fp
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	f7f5 fa27 	bl	800085c <__aeabi_ddiv>
 800b40e:	4682      	mov	sl, r0
 800b410:	468b      	mov	fp, r1
 800b412:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b416:	d0da      	beq.n	800b3ce <_strtod_l+0x516>
 800b418:	f1b8 0f1f 	cmp.w	r8, #31
 800b41c:	dd20      	ble.n	800b460 <_strtod_l+0x5a8>
 800b41e:	2400      	movs	r4, #0
 800b420:	46a0      	mov	r8, r4
 800b422:	9407      	str	r4, [sp, #28]
 800b424:	9405      	str	r4, [sp, #20]
 800b426:	2322      	movs	r3, #34	; 0x22
 800b428:	f04f 0a00 	mov.w	sl, #0
 800b42c:	f04f 0b00 	mov.w	fp, #0
 800b430:	f8c9 3000 	str.w	r3, [r9]
 800b434:	e765      	b.n	800b302 <_strtod_l+0x44a>
 800b436:	bf00      	nop
 800b438:	0800eae9 	.word	0x0800eae9
 800b43c:	0800eb6b 	.word	0x0800eb6b
 800b440:	0800eaf1 	.word	0x0800eaf1
 800b444:	0800eb2c 	.word	0x0800eb2c
 800b448:	0800eba8 	.word	0x0800eba8
 800b44c:	0800eb80 	.word	0x0800eb80
 800b450:	7ff00000 	.word	0x7ff00000
 800b454:	7ca00000 	.word	0x7ca00000
 800b458:	fff80000 	.word	0xfff80000
 800b45c:	7fefffff 	.word	0x7fefffff
 800b460:	f018 0310 	ands.w	r3, r8, #16
 800b464:	bf18      	it	ne
 800b466:	236a      	movne	r3, #106	; 0x6a
 800b468:	4da0      	ldr	r5, [pc, #640]	; (800b6ec <_strtod_l+0x834>)
 800b46a:	9304      	str	r3, [sp, #16]
 800b46c:	4650      	mov	r0, sl
 800b46e:	4659      	mov	r1, fp
 800b470:	2300      	movs	r3, #0
 800b472:	f1b8 0f00 	cmp.w	r8, #0
 800b476:	f300 810a 	bgt.w	800b68e <_strtod_l+0x7d6>
 800b47a:	b10b      	cbz	r3, 800b480 <_strtod_l+0x5c8>
 800b47c:	4682      	mov	sl, r0
 800b47e:	468b      	mov	fp, r1
 800b480:	9b04      	ldr	r3, [sp, #16]
 800b482:	b1bb      	cbz	r3, 800b4b4 <_strtod_l+0x5fc>
 800b484:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b488:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	4659      	mov	r1, fp
 800b490:	dd10      	ble.n	800b4b4 <_strtod_l+0x5fc>
 800b492:	2b1f      	cmp	r3, #31
 800b494:	f340 8107 	ble.w	800b6a6 <_strtod_l+0x7ee>
 800b498:	2b34      	cmp	r3, #52	; 0x34
 800b49a:	bfde      	ittt	le
 800b49c:	3b20      	suble	r3, #32
 800b49e:	f04f 32ff 	movle.w	r2, #4294967295
 800b4a2:	fa02 f303 	lslle.w	r3, r2, r3
 800b4a6:	f04f 0a00 	mov.w	sl, #0
 800b4aa:	bfcc      	ite	gt
 800b4ac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b4b0:	ea03 0b01 	andle.w	fp, r3, r1
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	4650      	mov	r0, sl
 800b4ba:	4659      	mov	r1, fp
 800b4bc:	f7f5 fb0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d1ac      	bne.n	800b41e <_strtod_l+0x566>
 800b4c4:	9b07      	ldr	r3, [sp, #28]
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	9a05      	ldr	r2, [sp, #20]
 800b4ca:	9908      	ldr	r1, [sp, #32]
 800b4cc:	4623      	mov	r3, r4
 800b4ce:	4648      	mov	r0, r9
 800b4d0:	f001 fe9d 	bl	800d20e <__s2b>
 800b4d4:	9007      	str	r0, [sp, #28]
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	f43f af08 	beq.w	800b2ec <_strtod_l+0x434>
 800b4dc:	9a06      	ldr	r2, [sp, #24]
 800b4de:	9b06      	ldr	r3, [sp, #24]
 800b4e0:	2a00      	cmp	r2, #0
 800b4e2:	f1c3 0300 	rsb	r3, r3, #0
 800b4e6:	bfa8      	it	ge
 800b4e8:	2300      	movge	r3, #0
 800b4ea:	930e      	str	r3, [sp, #56]	; 0x38
 800b4ec:	2400      	movs	r4, #0
 800b4ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b4f2:	9316      	str	r3, [sp, #88]	; 0x58
 800b4f4:	46a0      	mov	r8, r4
 800b4f6:	9b07      	ldr	r3, [sp, #28]
 800b4f8:	4648      	mov	r0, r9
 800b4fa:	6859      	ldr	r1, [r3, #4]
 800b4fc:	f001 fe01 	bl	800d102 <_Balloc>
 800b500:	9005      	str	r0, [sp, #20]
 800b502:	2800      	cmp	r0, #0
 800b504:	f43f aef6 	beq.w	800b2f4 <_strtod_l+0x43c>
 800b508:	9b07      	ldr	r3, [sp, #28]
 800b50a:	691a      	ldr	r2, [r3, #16]
 800b50c:	3202      	adds	r2, #2
 800b50e:	f103 010c 	add.w	r1, r3, #12
 800b512:	0092      	lsls	r2, r2, #2
 800b514:	300c      	adds	r0, #12
 800b516:	f001 fde9 	bl	800d0ec <memcpy>
 800b51a:	aa1e      	add	r2, sp, #120	; 0x78
 800b51c:	a91d      	add	r1, sp, #116	; 0x74
 800b51e:	ec4b ab10 	vmov	d0, sl, fp
 800b522:	4648      	mov	r0, r9
 800b524:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b528:	f002 f92c 	bl	800d784 <__d2b>
 800b52c:	901c      	str	r0, [sp, #112]	; 0x70
 800b52e:	2800      	cmp	r0, #0
 800b530:	f43f aee0 	beq.w	800b2f4 <_strtod_l+0x43c>
 800b534:	2101      	movs	r1, #1
 800b536:	4648      	mov	r0, r9
 800b538:	f001 fef5 	bl	800d326 <__i2b>
 800b53c:	4680      	mov	r8, r0
 800b53e:	2800      	cmp	r0, #0
 800b540:	f43f aed8 	beq.w	800b2f4 <_strtod_l+0x43c>
 800b544:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b546:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b548:	2e00      	cmp	r6, #0
 800b54a:	bfab      	itete	ge
 800b54c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b54e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b550:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b552:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b554:	bfac      	ite	ge
 800b556:	18f7      	addge	r7, r6, r3
 800b558:	1b9d      	sublt	r5, r3, r6
 800b55a:	9b04      	ldr	r3, [sp, #16]
 800b55c:	1af6      	subs	r6, r6, r3
 800b55e:	4416      	add	r6, r2
 800b560:	4b63      	ldr	r3, [pc, #396]	; (800b6f0 <_strtod_l+0x838>)
 800b562:	3e01      	subs	r6, #1
 800b564:	429e      	cmp	r6, r3
 800b566:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b56a:	f280 80af 	bge.w	800b6cc <_strtod_l+0x814>
 800b56e:	1b9b      	subs	r3, r3, r6
 800b570:	2b1f      	cmp	r3, #31
 800b572:	eba2 0203 	sub.w	r2, r2, r3
 800b576:	f04f 0101 	mov.w	r1, #1
 800b57a:	f300 809b 	bgt.w	800b6b4 <_strtod_l+0x7fc>
 800b57e:	fa01 f303 	lsl.w	r3, r1, r3
 800b582:	930f      	str	r3, [sp, #60]	; 0x3c
 800b584:	2300      	movs	r3, #0
 800b586:	930a      	str	r3, [sp, #40]	; 0x28
 800b588:	18be      	adds	r6, r7, r2
 800b58a:	9b04      	ldr	r3, [sp, #16]
 800b58c:	42b7      	cmp	r7, r6
 800b58e:	4415      	add	r5, r2
 800b590:	441d      	add	r5, r3
 800b592:	463b      	mov	r3, r7
 800b594:	bfa8      	it	ge
 800b596:	4633      	movge	r3, r6
 800b598:	42ab      	cmp	r3, r5
 800b59a:	bfa8      	it	ge
 800b59c:	462b      	movge	r3, r5
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	bfc2      	ittt	gt
 800b5a2:	1af6      	subgt	r6, r6, r3
 800b5a4:	1aed      	subgt	r5, r5, r3
 800b5a6:	1aff      	subgt	r7, r7, r3
 800b5a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5aa:	b1bb      	cbz	r3, 800b5dc <_strtod_l+0x724>
 800b5ac:	4641      	mov	r1, r8
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	4648      	mov	r0, r9
 800b5b2:	f001 ff57 	bl	800d464 <__pow5mult>
 800b5b6:	4680      	mov	r8, r0
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	f43f ae9b 	beq.w	800b2f4 <_strtod_l+0x43c>
 800b5be:	4601      	mov	r1, r0
 800b5c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b5c2:	4648      	mov	r0, r9
 800b5c4:	f001 feb8 	bl	800d338 <__multiply>
 800b5c8:	900c      	str	r0, [sp, #48]	; 0x30
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	f43f ae92 	beq.w	800b2f4 <_strtod_l+0x43c>
 800b5d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b5d2:	4648      	mov	r0, r9
 800b5d4:	f001 fdc9 	bl	800d16a <_Bfree>
 800b5d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5da:	931c      	str	r3, [sp, #112]	; 0x70
 800b5dc:	2e00      	cmp	r6, #0
 800b5de:	dc7a      	bgt.n	800b6d6 <_strtod_l+0x81e>
 800b5e0:	9b06      	ldr	r3, [sp, #24]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	dd08      	ble.n	800b5f8 <_strtod_l+0x740>
 800b5e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b5e8:	9905      	ldr	r1, [sp, #20]
 800b5ea:	4648      	mov	r0, r9
 800b5ec:	f001 ff3a 	bl	800d464 <__pow5mult>
 800b5f0:	9005      	str	r0, [sp, #20]
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f43f ae7e 	beq.w	800b2f4 <_strtod_l+0x43c>
 800b5f8:	2d00      	cmp	r5, #0
 800b5fa:	dd08      	ble.n	800b60e <_strtod_l+0x756>
 800b5fc:	462a      	mov	r2, r5
 800b5fe:	9905      	ldr	r1, [sp, #20]
 800b600:	4648      	mov	r0, r9
 800b602:	f001 ff7d 	bl	800d500 <__lshift>
 800b606:	9005      	str	r0, [sp, #20]
 800b608:	2800      	cmp	r0, #0
 800b60a:	f43f ae73 	beq.w	800b2f4 <_strtod_l+0x43c>
 800b60e:	2f00      	cmp	r7, #0
 800b610:	dd08      	ble.n	800b624 <_strtod_l+0x76c>
 800b612:	4641      	mov	r1, r8
 800b614:	463a      	mov	r2, r7
 800b616:	4648      	mov	r0, r9
 800b618:	f001 ff72 	bl	800d500 <__lshift>
 800b61c:	4680      	mov	r8, r0
 800b61e:	2800      	cmp	r0, #0
 800b620:	f43f ae68 	beq.w	800b2f4 <_strtod_l+0x43c>
 800b624:	9a05      	ldr	r2, [sp, #20]
 800b626:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b628:	4648      	mov	r0, r9
 800b62a:	f001 ffd7 	bl	800d5dc <__mdiff>
 800b62e:	4604      	mov	r4, r0
 800b630:	2800      	cmp	r0, #0
 800b632:	f43f ae5f 	beq.w	800b2f4 <_strtod_l+0x43c>
 800b636:	68c3      	ldr	r3, [r0, #12]
 800b638:	930c      	str	r3, [sp, #48]	; 0x30
 800b63a:	2300      	movs	r3, #0
 800b63c:	60c3      	str	r3, [r0, #12]
 800b63e:	4641      	mov	r1, r8
 800b640:	f001 ffb2 	bl	800d5a8 <__mcmp>
 800b644:	2800      	cmp	r0, #0
 800b646:	da55      	bge.n	800b6f4 <_strtod_l+0x83c>
 800b648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b64a:	b9e3      	cbnz	r3, 800b686 <_strtod_l+0x7ce>
 800b64c:	f1ba 0f00 	cmp.w	sl, #0
 800b650:	d119      	bne.n	800b686 <_strtod_l+0x7ce>
 800b652:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b656:	b9b3      	cbnz	r3, 800b686 <_strtod_l+0x7ce>
 800b658:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b65c:	0d1b      	lsrs	r3, r3, #20
 800b65e:	051b      	lsls	r3, r3, #20
 800b660:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b664:	d90f      	bls.n	800b686 <_strtod_l+0x7ce>
 800b666:	6963      	ldr	r3, [r4, #20]
 800b668:	b913      	cbnz	r3, 800b670 <_strtod_l+0x7b8>
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	dd0a      	ble.n	800b686 <_strtod_l+0x7ce>
 800b670:	4621      	mov	r1, r4
 800b672:	2201      	movs	r2, #1
 800b674:	4648      	mov	r0, r9
 800b676:	f001 ff43 	bl	800d500 <__lshift>
 800b67a:	4641      	mov	r1, r8
 800b67c:	4604      	mov	r4, r0
 800b67e:	f001 ff93 	bl	800d5a8 <__mcmp>
 800b682:	2800      	cmp	r0, #0
 800b684:	dc67      	bgt.n	800b756 <_strtod_l+0x89e>
 800b686:	9b04      	ldr	r3, [sp, #16]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d171      	bne.n	800b770 <_strtod_l+0x8b8>
 800b68c:	e63d      	b.n	800b30a <_strtod_l+0x452>
 800b68e:	f018 0f01 	tst.w	r8, #1
 800b692:	d004      	beq.n	800b69e <_strtod_l+0x7e6>
 800b694:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b698:	f7f4 ffb6 	bl	8000608 <__aeabi_dmul>
 800b69c:	2301      	movs	r3, #1
 800b69e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b6a2:	3508      	adds	r5, #8
 800b6a4:	e6e5      	b.n	800b472 <_strtod_l+0x5ba>
 800b6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ae:	ea03 0a0a 	and.w	sl, r3, sl
 800b6b2:	e6ff      	b.n	800b4b4 <_strtod_l+0x5fc>
 800b6b4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b6b8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b6bc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b6c0:	36e2      	adds	r6, #226	; 0xe2
 800b6c2:	fa01 f306 	lsl.w	r3, r1, r6
 800b6c6:	930a      	str	r3, [sp, #40]	; 0x28
 800b6c8:	910f      	str	r1, [sp, #60]	; 0x3c
 800b6ca:	e75d      	b.n	800b588 <_strtod_l+0x6d0>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6d4:	e758      	b.n	800b588 <_strtod_l+0x6d0>
 800b6d6:	4632      	mov	r2, r6
 800b6d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b6da:	4648      	mov	r0, r9
 800b6dc:	f001 ff10 	bl	800d500 <__lshift>
 800b6e0:	901c      	str	r0, [sp, #112]	; 0x70
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	f47f af7c 	bne.w	800b5e0 <_strtod_l+0x728>
 800b6e8:	e604      	b.n	800b2f4 <_strtod_l+0x43c>
 800b6ea:	bf00      	nop
 800b6ec:	0800eb40 	.word	0x0800eb40
 800b6f0:	fffffc02 	.word	0xfffffc02
 800b6f4:	465d      	mov	r5, fp
 800b6f6:	f040 8086 	bne.w	800b806 <_strtod_l+0x94e>
 800b6fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b700:	b32a      	cbz	r2, 800b74e <_strtod_l+0x896>
 800b702:	4aaf      	ldr	r2, [pc, #700]	; (800b9c0 <_strtod_l+0xb08>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d153      	bne.n	800b7b0 <_strtod_l+0x8f8>
 800b708:	9b04      	ldr	r3, [sp, #16]
 800b70a:	4650      	mov	r0, sl
 800b70c:	b1d3      	cbz	r3, 800b744 <_strtod_l+0x88c>
 800b70e:	4aad      	ldr	r2, [pc, #692]	; (800b9c4 <_strtod_l+0xb0c>)
 800b710:	402a      	ands	r2, r5
 800b712:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b716:	f04f 31ff 	mov.w	r1, #4294967295
 800b71a:	d816      	bhi.n	800b74a <_strtod_l+0x892>
 800b71c:	0d12      	lsrs	r2, r2, #20
 800b71e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b722:	fa01 f303 	lsl.w	r3, r1, r3
 800b726:	4298      	cmp	r0, r3
 800b728:	d142      	bne.n	800b7b0 <_strtod_l+0x8f8>
 800b72a:	4ba7      	ldr	r3, [pc, #668]	; (800b9c8 <_strtod_l+0xb10>)
 800b72c:	429d      	cmp	r5, r3
 800b72e:	d102      	bne.n	800b736 <_strtod_l+0x87e>
 800b730:	3001      	adds	r0, #1
 800b732:	f43f addf 	beq.w	800b2f4 <_strtod_l+0x43c>
 800b736:	4ba3      	ldr	r3, [pc, #652]	; (800b9c4 <_strtod_l+0xb0c>)
 800b738:	402b      	ands	r3, r5
 800b73a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b73e:	f04f 0a00 	mov.w	sl, #0
 800b742:	e7a0      	b.n	800b686 <_strtod_l+0x7ce>
 800b744:	f04f 33ff 	mov.w	r3, #4294967295
 800b748:	e7ed      	b.n	800b726 <_strtod_l+0x86e>
 800b74a:	460b      	mov	r3, r1
 800b74c:	e7eb      	b.n	800b726 <_strtod_l+0x86e>
 800b74e:	bb7b      	cbnz	r3, 800b7b0 <_strtod_l+0x8f8>
 800b750:	f1ba 0f00 	cmp.w	sl, #0
 800b754:	d12c      	bne.n	800b7b0 <_strtod_l+0x8f8>
 800b756:	9904      	ldr	r1, [sp, #16]
 800b758:	4a9a      	ldr	r2, [pc, #616]	; (800b9c4 <_strtod_l+0xb0c>)
 800b75a:	465b      	mov	r3, fp
 800b75c:	b1f1      	cbz	r1, 800b79c <_strtod_l+0x8e4>
 800b75e:	ea02 010b 	and.w	r1, r2, fp
 800b762:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b766:	dc19      	bgt.n	800b79c <_strtod_l+0x8e4>
 800b768:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b76c:	f77f ae5b 	ble.w	800b426 <_strtod_l+0x56e>
 800b770:	4a96      	ldr	r2, [pc, #600]	; (800b9cc <_strtod_l+0xb14>)
 800b772:	2300      	movs	r3, #0
 800b774:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b778:	4650      	mov	r0, sl
 800b77a:	4659      	mov	r1, fp
 800b77c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b780:	f7f4 ff42 	bl	8000608 <__aeabi_dmul>
 800b784:	4682      	mov	sl, r0
 800b786:	468b      	mov	fp, r1
 800b788:	2900      	cmp	r1, #0
 800b78a:	f47f adbe 	bne.w	800b30a <_strtod_l+0x452>
 800b78e:	2800      	cmp	r0, #0
 800b790:	f47f adbb 	bne.w	800b30a <_strtod_l+0x452>
 800b794:	2322      	movs	r3, #34	; 0x22
 800b796:	f8c9 3000 	str.w	r3, [r9]
 800b79a:	e5b6      	b.n	800b30a <_strtod_l+0x452>
 800b79c:	4013      	ands	r3, r2
 800b79e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b7a2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b7a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b7aa:	f04f 3aff 	mov.w	sl, #4294967295
 800b7ae:	e76a      	b.n	800b686 <_strtod_l+0x7ce>
 800b7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7b2:	b193      	cbz	r3, 800b7da <_strtod_l+0x922>
 800b7b4:	422b      	tst	r3, r5
 800b7b6:	f43f af66 	beq.w	800b686 <_strtod_l+0x7ce>
 800b7ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7bc:	9a04      	ldr	r2, [sp, #16]
 800b7be:	4650      	mov	r0, sl
 800b7c0:	4659      	mov	r1, fp
 800b7c2:	b173      	cbz	r3, 800b7e2 <_strtod_l+0x92a>
 800b7c4:	f7ff fb5a 	bl	800ae7c <sulp>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7d0:	f7f4 fd64 	bl	800029c <__adddf3>
 800b7d4:	4682      	mov	sl, r0
 800b7d6:	468b      	mov	fp, r1
 800b7d8:	e755      	b.n	800b686 <_strtod_l+0x7ce>
 800b7da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7dc:	ea13 0f0a 	tst.w	r3, sl
 800b7e0:	e7e9      	b.n	800b7b6 <_strtod_l+0x8fe>
 800b7e2:	f7ff fb4b 	bl	800ae7c <sulp>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7ee:	f7f4 fd53 	bl	8000298 <__aeabi_dsub>
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4682      	mov	sl, r0
 800b7f8:	468b      	mov	fp, r1
 800b7fa:	f7f5 f96d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	f47f ae11 	bne.w	800b426 <_strtod_l+0x56e>
 800b804:	e73f      	b.n	800b686 <_strtod_l+0x7ce>
 800b806:	4641      	mov	r1, r8
 800b808:	4620      	mov	r0, r4
 800b80a:	f002 f80a 	bl	800d822 <__ratio>
 800b80e:	ec57 6b10 	vmov	r6, r7, d0
 800b812:	2200      	movs	r2, #0
 800b814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b818:	ee10 0a10 	vmov	r0, s0
 800b81c:	4639      	mov	r1, r7
 800b81e:	f7f5 f96f 	bl	8000b00 <__aeabi_dcmple>
 800b822:	2800      	cmp	r0, #0
 800b824:	d077      	beq.n	800b916 <_strtod_l+0xa5e>
 800b826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d04a      	beq.n	800b8c2 <_strtod_l+0xa0a>
 800b82c:	4b68      	ldr	r3, [pc, #416]	; (800b9d0 <_strtod_l+0xb18>)
 800b82e:	2200      	movs	r2, #0
 800b830:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b834:	4f66      	ldr	r7, [pc, #408]	; (800b9d0 <_strtod_l+0xb18>)
 800b836:	2600      	movs	r6, #0
 800b838:	4b62      	ldr	r3, [pc, #392]	; (800b9c4 <_strtod_l+0xb0c>)
 800b83a:	402b      	ands	r3, r5
 800b83c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b83e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b840:	4b64      	ldr	r3, [pc, #400]	; (800b9d4 <_strtod_l+0xb1c>)
 800b842:	429a      	cmp	r2, r3
 800b844:	f040 80ce 	bne.w	800b9e4 <_strtod_l+0xb2c>
 800b848:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b84c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b850:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b854:	ec4b ab10 	vmov	d0, sl, fp
 800b858:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b85c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b860:	f001 ff1a 	bl	800d698 <__ulp>
 800b864:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b868:	ec53 2b10 	vmov	r2, r3, d0
 800b86c:	f7f4 fecc 	bl	8000608 <__aeabi_dmul>
 800b870:	4652      	mov	r2, sl
 800b872:	465b      	mov	r3, fp
 800b874:	f7f4 fd12 	bl	800029c <__adddf3>
 800b878:	460b      	mov	r3, r1
 800b87a:	4952      	ldr	r1, [pc, #328]	; (800b9c4 <_strtod_l+0xb0c>)
 800b87c:	4a56      	ldr	r2, [pc, #344]	; (800b9d8 <_strtod_l+0xb20>)
 800b87e:	4019      	ands	r1, r3
 800b880:	4291      	cmp	r1, r2
 800b882:	4682      	mov	sl, r0
 800b884:	d95b      	bls.n	800b93e <_strtod_l+0xa86>
 800b886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b888:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d103      	bne.n	800b898 <_strtod_l+0x9e0>
 800b890:	9b08      	ldr	r3, [sp, #32]
 800b892:	3301      	adds	r3, #1
 800b894:	f43f ad2e 	beq.w	800b2f4 <_strtod_l+0x43c>
 800b898:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b9c8 <_strtod_l+0xb10>
 800b89c:	f04f 3aff 	mov.w	sl, #4294967295
 800b8a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b8a2:	4648      	mov	r0, r9
 800b8a4:	f001 fc61 	bl	800d16a <_Bfree>
 800b8a8:	9905      	ldr	r1, [sp, #20]
 800b8aa:	4648      	mov	r0, r9
 800b8ac:	f001 fc5d 	bl	800d16a <_Bfree>
 800b8b0:	4641      	mov	r1, r8
 800b8b2:	4648      	mov	r0, r9
 800b8b4:	f001 fc59 	bl	800d16a <_Bfree>
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	4648      	mov	r0, r9
 800b8bc:	f001 fc55 	bl	800d16a <_Bfree>
 800b8c0:	e619      	b.n	800b4f6 <_strtod_l+0x63e>
 800b8c2:	f1ba 0f00 	cmp.w	sl, #0
 800b8c6:	d11a      	bne.n	800b8fe <_strtod_l+0xa46>
 800b8c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8cc:	b9eb      	cbnz	r3, 800b90a <_strtod_l+0xa52>
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	4b3f      	ldr	r3, [pc, #252]	; (800b9d0 <_strtod_l+0xb18>)
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	4639      	mov	r1, r7
 800b8d6:	f7f5 f909 	bl	8000aec <__aeabi_dcmplt>
 800b8da:	b9c8      	cbnz	r0, 800b910 <_strtod_l+0xa58>
 800b8dc:	4630      	mov	r0, r6
 800b8de:	4639      	mov	r1, r7
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	4b3e      	ldr	r3, [pc, #248]	; (800b9dc <_strtod_l+0xb24>)
 800b8e4:	f7f4 fe90 	bl	8000608 <__aeabi_dmul>
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	460f      	mov	r7, r1
 800b8ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b8f0:	9618      	str	r6, [sp, #96]	; 0x60
 800b8f2:	9319      	str	r3, [sp, #100]	; 0x64
 800b8f4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b8f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b8fc:	e79c      	b.n	800b838 <_strtod_l+0x980>
 800b8fe:	f1ba 0f01 	cmp.w	sl, #1
 800b902:	d102      	bne.n	800b90a <_strtod_l+0xa52>
 800b904:	2d00      	cmp	r5, #0
 800b906:	f43f ad8e 	beq.w	800b426 <_strtod_l+0x56e>
 800b90a:	2200      	movs	r2, #0
 800b90c:	4b34      	ldr	r3, [pc, #208]	; (800b9e0 <_strtod_l+0xb28>)
 800b90e:	e78f      	b.n	800b830 <_strtod_l+0x978>
 800b910:	2600      	movs	r6, #0
 800b912:	4f32      	ldr	r7, [pc, #200]	; (800b9dc <_strtod_l+0xb24>)
 800b914:	e7ea      	b.n	800b8ec <_strtod_l+0xa34>
 800b916:	4b31      	ldr	r3, [pc, #196]	; (800b9dc <_strtod_l+0xb24>)
 800b918:	4630      	mov	r0, r6
 800b91a:	4639      	mov	r1, r7
 800b91c:	2200      	movs	r2, #0
 800b91e:	f7f4 fe73 	bl	8000608 <__aeabi_dmul>
 800b922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b924:	4606      	mov	r6, r0
 800b926:	460f      	mov	r7, r1
 800b928:	b933      	cbnz	r3, 800b938 <_strtod_l+0xa80>
 800b92a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b92e:	9010      	str	r0, [sp, #64]	; 0x40
 800b930:	9311      	str	r3, [sp, #68]	; 0x44
 800b932:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b936:	e7df      	b.n	800b8f8 <_strtod_l+0xa40>
 800b938:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b93c:	e7f9      	b.n	800b932 <_strtod_l+0xa7a>
 800b93e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b942:	9b04      	ldr	r3, [sp, #16]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1ab      	bne.n	800b8a0 <_strtod_l+0x9e8>
 800b948:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b94c:	0d1b      	lsrs	r3, r3, #20
 800b94e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b950:	051b      	lsls	r3, r3, #20
 800b952:	429a      	cmp	r2, r3
 800b954:	465d      	mov	r5, fp
 800b956:	d1a3      	bne.n	800b8a0 <_strtod_l+0x9e8>
 800b958:	4639      	mov	r1, r7
 800b95a:	4630      	mov	r0, r6
 800b95c:	f7f5 f904 	bl	8000b68 <__aeabi_d2iz>
 800b960:	f7f4 fde8 	bl	8000534 <__aeabi_i2d>
 800b964:	460b      	mov	r3, r1
 800b966:	4602      	mov	r2, r0
 800b968:	4639      	mov	r1, r7
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7f4 fc94 	bl	8000298 <__aeabi_dsub>
 800b970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b972:	4606      	mov	r6, r0
 800b974:	460f      	mov	r7, r1
 800b976:	b933      	cbnz	r3, 800b986 <_strtod_l+0xace>
 800b978:	f1ba 0f00 	cmp.w	sl, #0
 800b97c:	d103      	bne.n	800b986 <_strtod_l+0xace>
 800b97e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b982:	2d00      	cmp	r5, #0
 800b984:	d06d      	beq.n	800ba62 <_strtod_l+0xbaa>
 800b986:	a30a      	add	r3, pc, #40	; (adr r3, 800b9b0 <_strtod_l+0xaf8>)
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	4630      	mov	r0, r6
 800b98e:	4639      	mov	r1, r7
 800b990:	f7f5 f8ac 	bl	8000aec <__aeabi_dcmplt>
 800b994:	2800      	cmp	r0, #0
 800b996:	f47f acb8 	bne.w	800b30a <_strtod_l+0x452>
 800b99a:	a307      	add	r3, pc, #28	; (adr r3, 800b9b8 <_strtod_l+0xb00>)
 800b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	4639      	mov	r1, r7
 800b9a4:	f7f5 f8c0 	bl	8000b28 <__aeabi_dcmpgt>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	f43f af79 	beq.w	800b8a0 <_strtod_l+0x9e8>
 800b9ae:	e4ac      	b.n	800b30a <_strtod_l+0x452>
 800b9b0:	94a03595 	.word	0x94a03595
 800b9b4:	3fdfffff 	.word	0x3fdfffff
 800b9b8:	35afe535 	.word	0x35afe535
 800b9bc:	3fe00000 	.word	0x3fe00000
 800b9c0:	000fffff 	.word	0x000fffff
 800b9c4:	7ff00000 	.word	0x7ff00000
 800b9c8:	7fefffff 	.word	0x7fefffff
 800b9cc:	39500000 	.word	0x39500000
 800b9d0:	3ff00000 	.word	0x3ff00000
 800b9d4:	7fe00000 	.word	0x7fe00000
 800b9d8:	7c9fffff 	.word	0x7c9fffff
 800b9dc:	3fe00000 	.word	0x3fe00000
 800b9e0:	bff00000 	.word	0xbff00000
 800b9e4:	9b04      	ldr	r3, [sp, #16]
 800b9e6:	b333      	cbz	r3, 800ba36 <_strtod_l+0xb7e>
 800b9e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b9ee:	d822      	bhi.n	800ba36 <_strtod_l+0xb7e>
 800b9f0:	a327      	add	r3, pc, #156	; (adr r3, 800ba90 <_strtod_l+0xbd8>)
 800b9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	f7f5 f881 	bl	8000b00 <__aeabi_dcmple>
 800b9fe:	b1a0      	cbz	r0, 800ba2a <_strtod_l+0xb72>
 800ba00:	4639      	mov	r1, r7
 800ba02:	4630      	mov	r0, r6
 800ba04:	f7f5 f8d8 	bl	8000bb8 <__aeabi_d2uiz>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	bf08      	it	eq
 800ba0c:	2001      	moveq	r0, #1
 800ba0e:	f7f4 fd81 	bl	8000514 <__aeabi_ui2d>
 800ba12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba14:	4606      	mov	r6, r0
 800ba16:	460f      	mov	r7, r1
 800ba18:	bb03      	cbnz	r3, 800ba5c <_strtod_l+0xba4>
 800ba1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba1e:	9012      	str	r0, [sp, #72]	; 0x48
 800ba20:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ba26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ba2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba2e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ba32:	1a9b      	subs	r3, r3, r2
 800ba34:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba36:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ba3a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ba3e:	f001 fe2b 	bl	800d698 <__ulp>
 800ba42:	4650      	mov	r0, sl
 800ba44:	ec53 2b10 	vmov	r2, r3, d0
 800ba48:	4659      	mov	r1, fp
 800ba4a:	f7f4 fddd 	bl	8000608 <__aeabi_dmul>
 800ba4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba52:	f7f4 fc23 	bl	800029c <__adddf3>
 800ba56:	4682      	mov	sl, r0
 800ba58:	468b      	mov	fp, r1
 800ba5a:	e772      	b.n	800b942 <_strtod_l+0xa8a>
 800ba5c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ba60:	e7df      	b.n	800ba22 <_strtod_l+0xb6a>
 800ba62:	a30d      	add	r3, pc, #52	; (adr r3, 800ba98 <_strtod_l+0xbe0>)
 800ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba68:	f7f5 f840 	bl	8000aec <__aeabi_dcmplt>
 800ba6c:	e79c      	b.n	800b9a8 <_strtod_l+0xaf0>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	930d      	str	r3, [sp, #52]	; 0x34
 800ba72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ba74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba76:	6013      	str	r3, [r2, #0]
 800ba78:	f7ff ba61 	b.w	800af3e <_strtod_l+0x86>
 800ba7c:	2b65      	cmp	r3, #101	; 0x65
 800ba7e:	f04f 0200 	mov.w	r2, #0
 800ba82:	f43f ab4e 	beq.w	800b122 <_strtod_l+0x26a>
 800ba86:	2101      	movs	r1, #1
 800ba88:	4614      	mov	r4, r2
 800ba8a:	9104      	str	r1, [sp, #16]
 800ba8c:	f7ff bacb 	b.w	800b026 <_strtod_l+0x16e>
 800ba90:	ffc00000 	.word	0xffc00000
 800ba94:	41dfffff 	.word	0x41dfffff
 800ba98:	94a03595 	.word	0x94a03595
 800ba9c:	3fcfffff 	.word	0x3fcfffff

0800baa0 <strtof>:
 800baa0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800baa4:	4e24      	ldr	r6, [pc, #144]	; (800bb38 <strtof+0x98>)
 800baa6:	4a25      	ldr	r2, [pc, #148]	; (800bb3c <strtof+0x9c>)
 800baa8:	6834      	ldr	r4, [r6, #0]
 800baaa:	6a23      	ldr	r3, [r4, #32]
 800baac:	ed2d 8b02 	vpush	{d8}
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	bf08      	it	eq
 800bab4:	4613      	moveq	r3, r2
 800bab6:	460a      	mov	r2, r1
 800bab8:	4601      	mov	r1, r0
 800baba:	4620      	mov	r0, r4
 800babc:	f7ff f9fc 	bl	800aeb8 <_strtod_l>
 800bac0:	ec55 4b10 	vmov	r4, r5, d0
 800bac4:	ee10 2a10 	vmov	r2, s0
 800bac8:	462b      	mov	r3, r5
 800baca:	ee10 0a10 	vmov	r0, s0
 800bace:	4629      	mov	r1, r5
 800bad0:	f7f5 f834 	bl	8000b3c <__aeabi_dcmpun>
 800bad4:	b130      	cbz	r0, 800bae4 <strtof+0x44>
 800bad6:	ecbd 8b02 	vpop	{d8}
 800bada:	2000      	movs	r0, #0
 800badc:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 800bae0:	f002 b96a 	b.w	800ddb8 <nanf>
 800bae4:	4620      	mov	r0, r4
 800bae6:	4629      	mov	r1, r5
 800bae8:	f7f5 f886 	bl	8000bf8 <__aeabi_d2f>
 800baec:	ee08 0a10 	vmov	s16, r0
 800baf0:	eddf 7a13 	vldr	s15, [pc, #76]	; 800bb40 <strtof+0xa0>
 800baf4:	eeb0 7ac8 	vabs.f32	s14, s16
 800baf8:	eeb4 7a67 	vcmp.f32	s14, s15
 800bafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb00:	dd14      	ble.n	800bb2c <strtof+0x8c>
 800bb02:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 800bb06:	f04f 32ff 	mov.w	r2, #4294967295
 800bb0a:	4b0e      	ldr	r3, [pc, #56]	; (800bb44 <strtof+0xa4>)
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	4649      	mov	r1, r9
 800bb10:	f7f5 f814 	bl	8000b3c <__aeabi_dcmpun>
 800bb14:	b938      	cbnz	r0, 800bb26 <strtof+0x86>
 800bb16:	f04f 32ff 	mov.w	r2, #4294967295
 800bb1a:	4b0a      	ldr	r3, [pc, #40]	; (800bb44 <strtof+0xa4>)
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	4649      	mov	r1, r9
 800bb20:	f7f4 ffee 	bl	8000b00 <__aeabi_dcmple>
 800bb24:	b110      	cbz	r0, 800bb2c <strtof+0x8c>
 800bb26:	6833      	ldr	r3, [r6, #0]
 800bb28:	2222      	movs	r2, #34	; 0x22
 800bb2a:	601a      	str	r2, [r3, #0]
 800bb2c:	eeb0 0a48 	vmov.f32	s0, s16
 800bb30:	ecbd 8b02 	vpop	{d8}
 800bb34:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bb38:	20000094 	.word	0x20000094
 800bb3c:	200000f8 	.word	0x200000f8
 800bb40:	7f7fffff 	.word	0x7f7fffff
 800bb44:	7fefffff 	.word	0x7fefffff

0800bb48 <quorem>:
 800bb48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	6903      	ldr	r3, [r0, #16]
 800bb4e:	690c      	ldr	r4, [r1, #16]
 800bb50:	42a3      	cmp	r3, r4
 800bb52:	4680      	mov	r8, r0
 800bb54:	f2c0 8082 	blt.w	800bc5c <quorem+0x114>
 800bb58:	3c01      	subs	r4, #1
 800bb5a:	f101 0714 	add.w	r7, r1, #20
 800bb5e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bb62:	f100 0614 	add.w	r6, r0, #20
 800bb66:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bb6a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bb6e:	eb06 030c 	add.w	r3, r6, ip
 800bb72:	3501      	adds	r5, #1
 800bb74:	eb07 090c 	add.w	r9, r7, ip
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	fbb0 f5f5 	udiv	r5, r0, r5
 800bb7e:	b395      	cbz	r5, 800bbe6 <quorem+0x9e>
 800bb80:	f04f 0a00 	mov.w	sl, #0
 800bb84:	4638      	mov	r0, r7
 800bb86:	46b6      	mov	lr, r6
 800bb88:	46d3      	mov	fp, sl
 800bb8a:	f850 2b04 	ldr.w	r2, [r0], #4
 800bb8e:	b293      	uxth	r3, r2
 800bb90:	fb05 a303 	mla	r3, r5, r3, sl
 800bb94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	ebab 0303 	sub.w	r3, fp, r3
 800bb9e:	0c12      	lsrs	r2, r2, #16
 800bba0:	f8de b000 	ldr.w	fp, [lr]
 800bba4:	fb05 a202 	mla	r2, r5, r2, sl
 800bba8:	fa13 f38b 	uxtah	r3, r3, fp
 800bbac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bbb0:	fa1f fb82 	uxth.w	fp, r2
 800bbb4:	f8de 2000 	ldr.w	r2, [lr]
 800bbb8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bbbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbc6:	4581      	cmp	r9, r0
 800bbc8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bbcc:	f84e 3b04 	str.w	r3, [lr], #4
 800bbd0:	d2db      	bcs.n	800bb8a <quorem+0x42>
 800bbd2:	f856 300c 	ldr.w	r3, [r6, ip]
 800bbd6:	b933      	cbnz	r3, 800bbe6 <quorem+0x9e>
 800bbd8:	9b01      	ldr	r3, [sp, #4]
 800bbda:	3b04      	subs	r3, #4
 800bbdc:	429e      	cmp	r6, r3
 800bbde:	461a      	mov	r2, r3
 800bbe0:	d330      	bcc.n	800bc44 <quorem+0xfc>
 800bbe2:	f8c8 4010 	str.w	r4, [r8, #16]
 800bbe6:	4640      	mov	r0, r8
 800bbe8:	f001 fcde 	bl	800d5a8 <__mcmp>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	db25      	blt.n	800bc3c <quorem+0xf4>
 800bbf0:	3501      	adds	r5, #1
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f04f 0c00 	mov.w	ip, #0
 800bbf8:	f857 2b04 	ldr.w	r2, [r7], #4
 800bbfc:	f8d0 e000 	ldr.w	lr, [r0]
 800bc00:	b293      	uxth	r3, r2
 800bc02:	ebac 0303 	sub.w	r3, ip, r3
 800bc06:	0c12      	lsrs	r2, r2, #16
 800bc08:	fa13 f38e 	uxtah	r3, r3, lr
 800bc0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc1a:	45b9      	cmp	r9, r7
 800bc1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc20:	f840 3b04 	str.w	r3, [r0], #4
 800bc24:	d2e8      	bcs.n	800bbf8 <quorem+0xb0>
 800bc26:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bc2a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bc2e:	b92a      	cbnz	r2, 800bc3c <quorem+0xf4>
 800bc30:	3b04      	subs	r3, #4
 800bc32:	429e      	cmp	r6, r3
 800bc34:	461a      	mov	r2, r3
 800bc36:	d30b      	bcc.n	800bc50 <quorem+0x108>
 800bc38:	f8c8 4010 	str.w	r4, [r8, #16]
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	b003      	add	sp, #12
 800bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc44:	6812      	ldr	r2, [r2, #0]
 800bc46:	3b04      	subs	r3, #4
 800bc48:	2a00      	cmp	r2, #0
 800bc4a:	d1ca      	bne.n	800bbe2 <quorem+0x9a>
 800bc4c:	3c01      	subs	r4, #1
 800bc4e:	e7c5      	b.n	800bbdc <quorem+0x94>
 800bc50:	6812      	ldr	r2, [r2, #0]
 800bc52:	3b04      	subs	r3, #4
 800bc54:	2a00      	cmp	r2, #0
 800bc56:	d1ef      	bne.n	800bc38 <quorem+0xf0>
 800bc58:	3c01      	subs	r4, #1
 800bc5a:	e7ea      	b.n	800bc32 <quorem+0xea>
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	e7ee      	b.n	800bc3e <quorem+0xf6>

0800bc60 <_dtoa_r>:
 800bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc64:	ec57 6b10 	vmov	r6, r7, d0
 800bc68:	b097      	sub	sp, #92	; 0x5c
 800bc6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bc6c:	9106      	str	r1, [sp, #24]
 800bc6e:	4604      	mov	r4, r0
 800bc70:	920b      	str	r2, [sp, #44]	; 0x2c
 800bc72:	9312      	str	r3, [sp, #72]	; 0x48
 800bc74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bc78:	e9cd 6700 	strd	r6, r7, [sp]
 800bc7c:	b93d      	cbnz	r5, 800bc8e <_dtoa_r+0x2e>
 800bc7e:	2010      	movs	r0, #16
 800bc80:	f001 fa1a 	bl	800d0b8 <malloc>
 800bc84:	6260      	str	r0, [r4, #36]	; 0x24
 800bc86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bc8a:	6005      	str	r5, [r0, #0]
 800bc8c:	60c5      	str	r5, [r0, #12]
 800bc8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc90:	6819      	ldr	r1, [r3, #0]
 800bc92:	b151      	cbz	r1, 800bcaa <_dtoa_r+0x4a>
 800bc94:	685a      	ldr	r2, [r3, #4]
 800bc96:	604a      	str	r2, [r1, #4]
 800bc98:	2301      	movs	r3, #1
 800bc9a:	4093      	lsls	r3, r2
 800bc9c:	608b      	str	r3, [r1, #8]
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f001 fa63 	bl	800d16a <_Bfree>
 800bca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bca6:	2200      	movs	r2, #0
 800bca8:	601a      	str	r2, [r3, #0]
 800bcaa:	1e3b      	subs	r3, r7, #0
 800bcac:	bfbb      	ittet	lt
 800bcae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bcb2:	9301      	strlt	r3, [sp, #4]
 800bcb4:	2300      	movge	r3, #0
 800bcb6:	2201      	movlt	r2, #1
 800bcb8:	bfac      	ite	ge
 800bcba:	f8c8 3000 	strge.w	r3, [r8]
 800bcbe:	f8c8 2000 	strlt.w	r2, [r8]
 800bcc2:	4baf      	ldr	r3, [pc, #700]	; (800bf80 <_dtoa_r+0x320>)
 800bcc4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bcc8:	ea33 0308 	bics.w	r3, r3, r8
 800bccc:	d114      	bne.n	800bcf8 <_dtoa_r+0x98>
 800bcce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bcd0:	f242 730f 	movw	r3, #9999	; 0x270f
 800bcd4:	6013      	str	r3, [r2, #0]
 800bcd6:	9b00      	ldr	r3, [sp, #0]
 800bcd8:	b923      	cbnz	r3, 800bce4 <_dtoa_r+0x84>
 800bcda:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bcde:	2800      	cmp	r0, #0
 800bce0:	f000 8542 	beq.w	800c768 <_dtoa_r+0xb08>
 800bce4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bce6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bf94 <_dtoa_r+0x334>
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f000 8544 	beq.w	800c778 <_dtoa_r+0xb18>
 800bcf0:	f10b 0303 	add.w	r3, fp, #3
 800bcf4:	f000 bd3e 	b.w	800c774 <_dtoa_r+0xb14>
 800bcf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	2300      	movs	r3, #0
 800bd00:	4630      	mov	r0, r6
 800bd02:	4639      	mov	r1, r7
 800bd04:	f7f4 fee8 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd08:	4681      	mov	r9, r0
 800bd0a:	b168      	cbz	r0, 800bd28 <_dtoa_r+0xc8>
 800bd0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd0e:	2301      	movs	r3, #1
 800bd10:	6013      	str	r3, [r2, #0]
 800bd12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 8524 	beq.w	800c762 <_dtoa_r+0xb02>
 800bd1a:	4b9a      	ldr	r3, [pc, #616]	; (800bf84 <_dtoa_r+0x324>)
 800bd1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd1e:	f103 3bff 	add.w	fp, r3, #4294967295
 800bd22:	6013      	str	r3, [r2, #0]
 800bd24:	f000 bd28 	b.w	800c778 <_dtoa_r+0xb18>
 800bd28:	aa14      	add	r2, sp, #80	; 0x50
 800bd2a:	a915      	add	r1, sp, #84	; 0x54
 800bd2c:	ec47 6b10 	vmov	d0, r6, r7
 800bd30:	4620      	mov	r0, r4
 800bd32:	f001 fd27 	bl	800d784 <__d2b>
 800bd36:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bd3a:	9004      	str	r0, [sp, #16]
 800bd3c:	2d00      	cmp	r5, #0
 800bd3e:	d07c      	beq.n	800be3a <_dtoa_r+0x1da>
 800bd40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd44:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800bd48:	46b2      	mov	sl, r6
 800bd4a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800bd4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bd52:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bd56:	2200      	movs	r2, #0
 800bd58:	4b8b      	ldr	r3, [pc, #556]	; (800bf88 <_dtoa_r+0x328>)
 800bd5a:	4650      	mov	r0, sl
 800bd5c:	4659      	mov	r1, fp
 800bd5e:	f7f4 fa9b 	bl	8000298 <__aeabi_dsub>
 800bd62:	a381      	add	r3, pc, #516	; (adr r3, 800bf68 <_dtoa_r+0x308>)
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f7f4 fc4e 	bl	8000608 <__aeabi_dmul>
 800bd6c:	a380      	add	r3, pc, #512	; (adr r3, 800bf70 <_dtoa_r+0x310>)
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	f7f4 fa93 	bl	800029c <__adddf3>
 800bd76:	4606      	mov	r6, r0
 800bd78:	4628      	mov	r0, r5
 800bd7a:	460f      	mov	r7, r1
 800bd7c:	f7f4 fbda 	bl	8000534 <__aeabi_i2d>
 800bd80:	a37d      	add	r3, pc, #500	; (adr r3, 800bf78 <_dtoa_r+0x318>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f7f4 fc3f 	bl	8000608 <__aeabi_dmul>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	4630      	mov	r0, r6
 800bd90:	4639      	mov	r1, r7
 800bd92:	f7f4 fa83 	bl	800029c <__adddf3>
 800bd96:	4606      	mov	r6, r0
 800bd98:	460f      	mov	r7, r1
 800bd9a:	f7f4 fee5 	bl	8000b68 <__aeabi_d2iz>
 800bd9e:	2200      	movs	r2, #0
 800bda0:	4682      	mov	sl, r0
 800bda2:	2300      	movs	r3, #0
 800bda4:	4630      	mov	r0, r6
 800bda6:	4639      	mov	r1, r7
 800bda8:	f7f4 fea0 	bl	8000aec <__aeabi_dcmplt>
 800bdac:	b148      	cbz	r0, 800bdc2 <_dtoa_r+0x162>
 800bdae:	4650      	mov	r0, sl
 800bdb0:	f7f4 fbc0 	bl	8000534 <__aeabi_i2d>
 800bdb4:	4632      	mov	r2, r6
 800bdb6:	463b      	mov	r3, r7
 800bdb8:	f7f4 fe8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdbc:	b908      	cbnz	r0, 800bdc2 <_dtoa_r+0x162>
 800bdbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdc2:	f1ba 0f16 	cmp.w	sl, #22
 800bdc6:	d859      	bhi.n	800be7c <_dtoa_r+0x21c>
 800bdc8:	4970      	ldr	r1, [pc, #448]	; (800bf8c <_dtoa_r+0x32c>)
 800bdca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bdce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdd6:	f7f4 fea7 	bl	8000b28 <__aeabi_dcmpgt>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d050      	beq.n	800be80 <_dtoa_r+0x220>
 800bdde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bde2:	2300      	movs	r3, #0
 800bde4:	930f      	str	r3, [sp, #60]	; 0x3c
 800bde6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bde8:	1b5d      	subs	r5, r3, r5
 800bdea:	f1b5 0801 	subs.w	r8, r5, #1
 800bdee:	bf49      	itett	mi
 800bdf0:	f1c5 0301 	rsbmi	r3, r5, #1
 800bdf4:	2300      	movpl	r3, #0
 800bdf6:	9305      	strmi	r3, [sp, #20]
 800bdf8:	f04f 0800 	movmi.w	r8, #0
 800bdfc:	bf58      	it	pl
 800bdfe:	9305      	strpl	r3, [sp, #20]
 800be00:	f1ba 0f00 	cmp.w	sl, #0
 800be04:	db3e      	blt.n	800be84 <_dtoa_r+0x224>
 800be06:	2300      	movs	r3, #0
 800be08:	44d0      	add	r8, sl
 800be0a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800be0e:	9307      	str	r3, [sp, #28]
 800be10:	9b06      	ldr	r3, [sp, #24]
 800be12:	2b09      	cmp	r3, #9
 800be14:	f200 8090 	bhi.w	800bf38 <_dtoa_r+0x2d8>
 800be18:	2b05      	cmp	r3, #5
 800be1a:	bfc4      	itt	gt
 800be1c:	3b04      	subgt	r3, #4
 800be1e:	9306      	strgt	r3, [sp, #24]
 800be20:	9b06      	ldr	r3, [sp, #24]
 800be22:	f1a3 0302 	sub.w	r3, r3, #2
 800be26:	bfcc      	ite	gt
 800be28:	2500      	movgt	r5, #0
 800be2a:	2501      	movle	r5, #1
 800be2c:	2b03      	cmp	r3, #3
 800be2e:	f200 808f 	bhi.w	800bf50 <_dtoa_r+0x2f0>
 800be32:	e8df f003 	tbb	[pc, r3]
 800be36:	7f7d      	.short	0x7f7d
 800be38:	7131      	.short	0x7131
 800be3a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800be3e:	441d      	add	r5, r3
 800be40:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800be44:	2820      	cmp	r0, #32
 800be46:	dd13      	ble.n	800be70 <_dtoa_r+0x210>
 800be48:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800be4c:	9b00      	ldr	r3, [sp, #0]
 800be4e:	fa08 f800 	lsl.w	r8, r8, r0
 800be52:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800be56:	fa23 f000 	lsr.w	r0, r3, r0
 800be5a:	ea48 0000 	orr.w	r0, r8, r0
 800be5e:	f7f4 fb59 	bl	8000514 <__aeabi_ui2d>
 800be62:	2301      	movs	r3, #1
 800be64:	4682      	mov	sl, r0
 800be66:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800be6a:	3d01      	subs	r5, #1
 800be6c:	9313      	str	r3, [sp, #76]	; 0x4c
 800be6e:	e772      	b.n	800bd56 <_dtoa_r+0xf6>
 800be70:	9b00      	ldr	r3, [sp, #0]
 800be72:	f1c0 0020 	rsb	r0, r0, #32
 800be76:	fa03 f000 	lsl.w	r0, r3, r0
 800be7a:	e7f0      	b.n	800be5e <_dtoa_r+0x1fe>
 800be7c:	2301      	movs	r3, #1
 800be7e:	e7b1      	b.n	800bde4 <_dtoa_r+0x184>
 800be80:	900f      	str	r0, [sp, #60]	; 0x3c
 800be82:	e7b0      	b.n	800bde6 <_dtoa_r+0x186>
 800be84:	9b05      	ldr	r3, [sp, #20]
 800be86:	eba3 030a 	sub.w	r3, r3, sl
 800be8a:	9305      	str	r3, [sp, #20]
 800be8c:	f1ca 0300 	rsb	r3, sl, #0
 800be90:	9307      	str	r3, [sp, #28]
 800be92:	2300      	movs	r3, #0
 800be94:	930e      	str	r3, [sp, #56]	; 0x38
 800be96:	e7bb      	b.n	800be10 <_dtoa_r+0x1b0>
 800be98:	2301      	movs	r3, #1
 800be9a:	930a      	str	r3, [sp, #40]	; 0x28
 800be9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	dd59      	ble.n	800bf56 <_dtoa_r+0x2f6>
 800bea2:	9302      	str	r3, [sp, #8]
 800bea4:	4699      	mov	r9, r3
 800bea6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bea8:	2200      	movs	r2, #0
 800beaa:	6072      	str	r2, [r6, #4]
 800beac:	2204      	movs	r2, #4
 800beae:	f102 0014 	add.w	r0, r2, #20
 800beb2:	4298      	cmp	r0, r3
 800beb4:	6871      	ldr	r1, [r6, #4]
 800beb6:	d953      	bls.n	800bf60 <_dtoa_r+0x300>
 800beb8:	4620      	mov	r0, r4
 800beba:	f001 f922 	bl	800d102 <_Balloc>
 800bebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bec0:	6030      	str	r0, [r6, #0]
 800bec2:	f1b9 0f0e 	cmp.w	r9, #14
 800bec6:	f8d3 b000 	ldr.w	fp, [r3]
 800beca:	f200 80e6 	bhi.w	800c09a <_dtoa_r+0x43a>
 800bece:	2d00      	cmp	r5, #0
 800bed0:	f000 80e3 	beq.w	800c09a <_dtoa_r+0x43a>
 800bed4:	ed9d 7b00 	vldr	d7, [sp]
 800bed8:	f1ba 0f00 	cmp.w	sl, #0
 800bedc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bee0:	dd74      	ble.n	800bfcc <_dtoa_r+0x36c>
 800bee2:	4a2a      	ldr	r2, [pc, #168]	; (800bf8c <_dtoa_r+0x32c>)
 800bee4:	f00a 030f 	and.w	r3, sl, #15
 800bee8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800beec:	ed93 7b00 	vldr	d7, [r3]
 800bef0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bef4:	06f0      	lsls	r0, r6, #27
 800bef6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800befa:	d565      	bpl.n	800bfc8 <_dtoa_r+0x368>
 800befc:	4b24      	ldr	r3, [pc, #144]	; (800bf90 <_dtoa_r+0x330>)
 800befe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf06:	f7f4 fca9 	bl	800085c <__aeabi_ddiv>
 800bf0a:	e9cd 0100 	strd	r0, r1, [sp]
 800bf0e:	f006 060f 	and.w	r6, r6, #15
 800bf12:	2503      	movs	r5, #3
 800bf14:	4f1e      	ldr	r7, [pc, #120]	; (800bf90 <_dtoa_r+0x330>)
 800bf16:	e04c      	b.n	800bfb2 <_dtoa_r+0x352>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	930a      	str	r3, [sp, #40]	; 0x28
 800bf1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf1e:	4453      	add	r3, sl
 800bf20:	f103 0901 	add.w	r9, r3, #1
 800bf24:	9302      	str	r3, [sp, #8]
 800bf26:	464b      	mov	r3, r9
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	bfb8      	it	lt
 800bf2c:	2301      	movlt	r3, #1
 800bf2e:	e7ba      	b.n	800bea6 <_dtoa_r+0x246>
 800bf30:	2300      	movs	r3, #0
 800bf32:	e7b2      	b.n	800be9a <_dtoa_r+0x23a>
 800bf34:	2300      	movs	r3, #0
 800bf36:	e7f0      	b.n	800bf1a <_dtoa_r+0x2ba>
 800bf38:	2501      	movs	r5, #1
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	9306      	str	r3, [sp, #24]
 800bf3e:	950a      	str	r5, [sp, #40]	; 0x28
 800bf40:	f04f 33ff 	mov.w	r3, #4294967295
 800bf44:	9302      	str	r3, [sp, #8]
 800bf46:	4699      	mov	r9, r3
 800bf48:	2200      	movs	r2, #0
 800bf4a:	2312      	movs	r3, #18
 800bf4c:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf4e:	e7aa      	b.n	800bea6 <_dtoa_r+0x246>
 800bf50:	2301      	movs	r3, #1
 800bf52:	930a      	str	r3, [sp, #40]	; 0x28
 800bf54:	e7f4      	b.n	800bf40 <_dtoa_r+0x2e0>
 800bf56:	2301      	movs	r3, #1
 800bf58:	9302      	str	r3, [sp, #8]
 800bf5a:	4699      	mov	r9, r3
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	e7f5      	b.n	800bf4c <_dtoa_r+0x2ec>
 800bf60:	3101      	adds	r1, #1
 800bf62:	6071      	str	r1, [r6, #4]
 800bf64:	0052      	lsls	r2, r2, #1
 800bf66:	e7a2      	b.n	800beae <_dtoa_r+0x24e>
 800bf68:	636f4361 	.word	0x636f4361
 800bf6c:	3fd287a7 	.word	0x3fd287a7
 800bf70:	8b60c8b3 	.word	0x8b60c8b3
 800bf74:	3fc68a28 	.word	0x3fc68a28
 800bf78:	509f79fb 	.word	0x509f79fb
 800bf7c:	3fd34413 	.word	0x3fd34413
 800bf80:	7ff00000 	.word	0x7ff00000
 800bf84:	0800eaf5 	.word	0x0800eaf5
 800bf88:	3ff80000 	.word	0x3ff80000
 800bf8c:	0800eba8 	.word	0x0800eba8
 800bf90:	0800eb80 	.word	0x0800eb80
 800bf94:	0800eb71 	.word	0x0800eb71
 800bf98:	07f1      	lsls	r1, r6, #31
 800bf9a:	d508      	bpl.n	800bfae <_dtoa_r+0x34e>
 800bf9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bfa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfa4:	f7f4 fb30 	bl	8000608 <__aeabi_dmul>
 800bfa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bfac:	3501      	adds	r5, #1
 800bfae:	1076      	asrs	r6, r6, #1
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	2e00      	cmp	r6, #0
 800bfb4:	d1f0      	bne.n	800bf98 <_dtoa_r+0x338>
 800bfb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bfba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfbe:	f7f4 fc4d 	bl	800085c <__aeabi_ddiv>
 800bfc2:	e9cd 0100 	strd	r0, r1, [sp]
 800bfc6:	e01a      	b.n	800bffe <_dtoa_r+0x39e>
 800bfc8:	2502      	movs	r5, #2
 800bfca:	e7a3      	b.n	800bf14 <_dtoa_r+0x2b4>
 800bfcc:	f000 80a0 	beq.w	800c110 <_dtoa_r+0x4b0>
 800bfd0:	f1ca 0600 	rsb	r6, sl, #0
 800bfd4:	4b9f      	ldr	r3, [pc, #636]	; (800c254 <_dtoa_r+0x5f4>)
 800bfd6:	4fa0      	ldr	r7, [pc, #640]	; (800c258 <_dtoa_r+0x5f8>)
 800bfd8:	f006 020f 	and.w	r2, r6, #15
 800bfdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bfe8:	f7f4 fb0e 	bl	8000608 <__aeabi_dmul>
 800bfec:	e9cd 0100 	strd	r0, r1, [sp]
 800bff0:	1136      	asrs	r6, r6, #4
 800bff2:	2300      	movs	r3, #0
 800bff4:	2502      	movs	r5, #2
 800bff6:	2e00      	cmp	r6, #0
 800bff8:	d17f      	bne.n	800c0fa <_dtoa_r+0x49a>
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1e1      	bne.n	800bfc2 <_dtoa_r+0x362>
 800bffe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 8087 	beq.w	800c114 <_dtoa_r+0x4b4>
 800c006:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c00a:	2200      	movs	r2, #0
 800c00c:	4b93      	ldr	r3, [pc, #588]	; (800c25c <_dtoa_r+0x5fc>)
 800c00e:	4630      	mov	r0, r6
 800c010:	4639      	mov	r1, r7
 800c012:	f7f4 fd6b 	bl	8000aec <__aeabi_dcmplt>
 800c016:	2800      	cmp	r0, #0
 800c018:	d07c      	beq.n	800c114 <_dtoa_r+0x4b4>
 800c01a:	f1b9 0f00 	cmp.w	r9, #0
 800c01e:	d079      	beq.n	800c114 <_dtoa_r+0x4b4>
 800c020:	9b02      	ldr	r3, [sp, #8]
 800c022:	2b00      	cmp	r3, #0
 800c024:	dd35      	ble.n	800c092 <_dtoa_r+0x432>
 800c026:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c02a:	9308      	str	r3, [sp, #32]
 800c02c:	4639      	mov	r1, r7
 800c02e:	2200      	movs	r2, #0
 800c030:	4b8b      	ldr	r3, [pc, #556]	; (800c260 <_dtoa_r+0x600>)
 800c032:	4630      	mov	r0, r6
 800c034:	f7f4 fae8 	bl	8000608 <__aeabi_dmul>
 800c038:	e9cd 0100 	strd	r0, r1, [sp]
 800c03c:	9f02      	ldr	r7, [sp, #8]
 800c03e:	3501      	adds	r5, #1
 800c040:	4628      	mov	r0, r5
 800c042:	f7f4 fa77 	bl	8000534 <__aeabi_i2d>
 800c046:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c04a:	f7f4 fadd 	bl	8000608 <__aeabi_dmul>
 800c04e:	2200      	movs	r2, #0
 800c050:	4b84      	ldr	r3, [pc, #528]	; (800c264 <_dtoa_r+0x604>)
 800c052:	f7f4 f923 	bl	800029c <__adddf3>
 800c056:	4605      	mov	r5, r0
 800c058:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c05c:	2f00      	cmp	r7, #0
 800c05e:	d15d      	bne.n	800c11c <_dtoa_r+0x4bc>
 800c060:	2200      	movs	r2, #0
 800c062:	4b81      	ldr	r3, [pc, #516]	; (800c268 <_dtoa_r+0x608>)
 800c064:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c068:	f7f4 f916 	bl	8000298 <__aeabi_dsub>
 800c06c:	462a      	mov	r2, r5
 800c06e:	4633      	mov	r3, r6
 800c070:	e9cd 0100 	strd	r0, r1, [sp]
 800c074:	f7f4 fd58 	bl	8000b28 <__aeabi_dcmpgt>
 800c078:	2800      	cmp	r0, #0
 800c07a:	f040 8288 	bne.w	800c58e <_dtoa_r+0x92e>
 800c07e:	462a      	mov	r2, r5
 800c080:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c084:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c088:	f7f4 fd30 	bl	8000aec <__aeabi_dcmplt>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	f040 827c 	bne.w	800c58a <_dtoa_r+0x92a>
 800c092:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c096:	e9cd 2300 	strd	r2, r3, [sp]
 800c09a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f2c0 8150 	blt.w	800c342 <_dtoa_r+0x6e2>
 800c0a2:	f1ba 0f0e 	cmp.w	sl, #14
 800c0a6:	f300 814c 	bgt.w	800c342 <_dtoa_r+0x6e2>
 800c0aa:	4b6a      	ldr	r3, [pc, #424]	; (800c254 <_dtoa_r+0x5f4>)
 800c0ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c0b0:	ed93 7b00 	vldr	d7, [r3]
 800c0b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0bc:	f280 80d8 	bge.w	800c270 <_dtoa_r+0x610>
 800c0c0:	f1b9 0f00 	cmp.w	r9, #0
 800c0c4:	f300 80d4 	bgt.w	800c270 <_dtoa_r+0x610>
 800c0c8:	f040 825e 	bne.w	800c588 <_dtoa_r+0x928>
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	4b66      	ldr	r3, [pc, #408]	; (800c268 <_dtoa_r+0x608>)
 800c0d0:	ec51 0b17 	vmov	r0, r1, d7
 800c0d4:	f7f4 fa98 	bl	8000608 <__aeabi_dmul>
 800c0d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0dc:	f7f4 fd1a 	bl	8000b14 <__aeabi_dcmpge>
 800c0e0:	464f      	mov	r7, r9
 800c0e2:	464e      	mov	r6, r9
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	f040 8234 	bne.w	800c552 <_dtoa_r+0x8f2>
 800c0ea:	2331      	movs	r3, #49	; 0x31
 800c0ec:	f10b 0501 	add.w	r5, fp, #1
 800c0f0:	f88b 3000 	strb.w	r3, [fp]
 800c0f4:	f10a 0a01 	add.w	sl, sl, #1
 800c0f8:	e22f      	b.n	800c55a <_dtoa_r+0x8fa>
 800c0fa:	07f2      	lsls	r2, r6, #31
 800c0fc:	d505      	bpl.n	800c10a <_dtoa_r+0x4aa>
 800c0fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c102:	f7f4 fa81 	bl	8000608 <__aeabi_dmul>
 800c106:	3501      	adds	r5, #1
 800c108:	2301      	movs	r3, #1
 800c10a:	1076      	asrs	r6, r6, #1
 800c10c:	3708      	adds	r7, #8
 800c10e:	e772      	b.n	800bff6 <_dtoa_r+0x396>
 800c110:	2502      	movs	r5, #2
 800c112:	e774      	b.n	800bffe <_dtoa_r+0x39e>
 800c114:	f8cd a020 	str.w	sl, [sp, #32]
 800c118:	464f      	mov	r7, r9
 800c11a:	e791      	b.n	800c040 <_dtoa_r+0x3e0>
 800c11c:	4b4d      	ldr	r3, [pc, #308]	; (800c254 <_dtoa_r+0x5f4>)
 800c11e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c122:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d047      	beq.n	800c1bc <_dtoa_r+0x55c>
 800c12c:	4602      	mov	r2, r0
 800c12e:	460b      	mov	r3, r1
 800c130:	2000      	movs	r0, #0
 800c132:	494e      	ldr	r1, [pc, #312]	; (800c26c <_dtoa_r+0x60c>)
 800c134:	f7f4 fb92 	bl	800085c <__aeabi_ddiv>
 800c138:	462a      	mov	r2, r5
 800c13a:	4633      	mov	r3, r6
 800c13c:	f7f4 f8ac 	bl	8000298 <__aeabi_dsub>
 800c140:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c144:	465d      	mov	r5, fp
 800c146:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c14a:	f7f4 fd0d 	bl	8000b68 <__aeabi_d2iz>
 800c14e:	4606      	mov	r6, r0
 800c150:	f7f4 f9f0 	bl	8000534 <__aeabi_i2d>
 800c154:	4602      	mov	r2, r0
 800c156:	460b      	mov	r3, r1
 800c158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c15c:	f7f4 f89c 	bl	8000298 <__aeabi_dsub>
 800c160:	3630      	adds	r6, #48	; 0x30
 800c162:	f805 6b01 	strb.w	r6, [r5], #1
 800c166:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c16a:	e9cd 0100 	strd	r0, r1, [sp]
 800c16e:	f7f4 fcbd 	bl	8000aec <__aeabi_dcmplt>
 800c172:	2800      	cmp	r0, #0
 800c174:	d163      	bne.n	800c23e <_dtoa_r+0x5de>
 800c176:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c17a:	2000      	movs	r0, #0
 800c17c:	4937      	ldr	r1, [pc, #220]	; (800c25c <_dtoa_r+0x5fc>)
 800c17e:	f7f4 f88b 	bl	8000298 <__aeabi_dsub>
 800c182:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c186:	f7f4 fcb1 	bl	8000aec <__aeabi_dcmplt>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	f040 80b7 	bne.w	800c2fe <_dtoa_r+0x69e>
 800c190:	eba5 030b 	sub.w	r3, r5, fp
 800c194:	429f      	cmp	r7, r3
 800c196:	f77f af7c 	ble.w	800c092 <_dtoa_r+0x432>
 800c19a:	2200      	movs	r2, #0
 800c19c:	4b30      	ldr	r3, [pc, #192]	; (800c260 <_dtoa_r+0x600>)
 800c19e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c1a2:	f7f4 fa31 	bl	8000608 <__aeabi_dmul>
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c1ac:	4b2c      	ldr	r3, [pc, #176]	; (800c260 <_dtoa_r+0x600>)
 800c1ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1b2:	f7f4 fa29 	bl	8000608 <__aeabi_dmul>
 800c1b6:	e9cd 0100 	strd	r0, r1, [sp]
 800c1ba:	e7c4      	b.n	800c146 <_dtoa_r+0x4e6>
 800c1bc:	462a      	mov	r2, r5
 800c1be:	4633      	mov	r3, r6
 800c1c0:	f7f4 fa22 	bl	8000608 <__aeabi_dmul>
 800c1c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c1c8:	eb0b 0507 	add.w	r5, fp, r7
 800c1cc:	465e      	mov	r6, fp
 800c1ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1d2:	f7f4 fcc9 	bl	8000b68 <__aeabi_d2iz>
 800c1d6:	4607      	mov	r7, r0
 800c1d8:	f7f4 f9ac 	bl	8000534 <__aeabi_i2d>
 800c1dc:	3730      	adds	r7, #48	; 0x30
 800c1de:	4602      	mov	r2, r0
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1e6:	f7f4 f857 	bl	8000298 <__aeabi_dsub>
 800c1ea:	f806 7b01 	strb.w	r7, [r6], #1
 800c1ee:	42ae      	cmp	r6, r5
 800c1f0:	e9cd 0100 	strd	r0, r1, [sp]
 800c1f4:	f04f 0200 	mov.w	r2, #0
 800c1f8:	d126      	bne.n	800c248 <_dtoa_r+0x5e8>
 800c1fa:	4b1c      	ldr	r3, [pc, #112]	; (800c26c <_dtoa_r+0x60c>)
 800c1fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c200:	f7f4 f84c 	bl	800029c <__adddf3>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c20c:	f7f4 fc8c 	bl	8000b28 <__aeabi_dcmpgt>
 800c210:	2800      	cmp	r0, #0
 800c212:	d174      	bne.n	800c2fe <_dtoa_r+0x69e>
 800c214:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c218:	2000      	movs	r0, #0
 800c21a:	4914      	ldr	r1, [pc, #80]	; (800c26c <_dtoa_r+0x60c>)
 800c21c:	f7f4 f83c 	bl	8000298 <__aeabi_dsub>
 800c220:	4602      	mov	r2, r0
 800c222:	460b      	mov	r3, r1
 800c224:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c228:	f7f4 fc60 	bl	8000aec <__aeabi_dcmplt>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	f43f af30 	beq.w	800c092 <_dtoa_r+0x432>
 800c232:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c236:	2b30      	cmp	r3, #48	; 0x30
 800c238:	f105 32ff 	add.w	r2, r5, #4294967295
 800c23c:	d002      	beq.n	800c244 <_dtoa_r+0x5e4>
 800c23e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c242:	e04a      	b.n	800c2da <_dtoa_r+0x67a>
 800c244:	4615      	mov	r5, r2
 800c246:	e7f4      	b.n	800c232 <_dtoa_r+0x5d2>
 800c248:	4b05      	ldr	r3, [pc, #20]	; (800c260 <_dtoa_r+0x600>)
 800c24a:	f7f4 f9dd 	bl	8000608 <__aeabi_dmul>
 800c24e:	e9cd 0100 	strd	r0, r1, [sp]
 800c252:	e7bc      	b.n	800c1ce <_dtoa_r+0x56e>
 800c254:	0800eba8 	.word	0x0800eba8
 800c258:	0800eb80 	.word	0x0800eb80
 800c25c:	3ff00000 	.word	0x3ff00000
 800c260:	40240000 	.word	0x40240000
 800c264:	401c0000 	.word	0x401c0000
 800c268:	40140000 	.word	0x40140000
 800c26c:	3fe00000 	.word	0x3fe00000
 800c270:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c274:	465d      	mov	r5, fp
 800c276:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c27a:	4630      	mov	r0, r6
 800c27c:	4639      	mov	r1, r7
 800c27e:	f7f4 faed 	bl	800085c <__aeabi_ddiv>
 800c282:	f7f4 fc71 	bl	8000b68 <__aeabi_d2iz>
 800c286:	4680      	mov	r8, r0
 800c288:	f7f4 f954 	bl	8000534 <__aeabi_i2d>
 800c28c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c290:	f7f4 f9ba 	bl	8000608 <__aeabi_dmul>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4630      	mov	r0, r6
 800c29a:	4639      	mov	r1, r7
 800c29c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c2a0:	f7f3 fffa 	bl	8000298 <__aeabi_dsub>
 800c2a4:	f805 6b01 	strb.w	r6, [r5], #1
 800c2a8:	eba5 060b 	sub.w	r6, r5, fp
 800c2ac:	45b1      	cmp	r9, r6
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	d139      	bne.n	800c328 <_dtoa_r+0x6c8>
 800c2b4:	f7f3 fff2 	bl	800029c <__adddf3>
 800c2b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2bc:	4606      	mov	r6, r0
 800c2be:	460f      	mov	r7, r1
 800c2c0:	f7f4 fc32 	bl	8000b28 <__aeabi_dcmpgt>
 800c2c4:	b9c8      	cbnz	r0, 800c2fa <_dtoa_r+0x69a>
 800c2c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	f7f4 fc03 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2d2:	b110      	cbz	r0, 800c2da <_dtoa_r+0x67a>
 800c2d4:	f018 0f01 	tst.w	r8, #1
 800c2d8:	d10f      	bne.n	800c2fa <_dtoa_r+0x69a>
 800c2da:	9904      	ldr	r1, [sp, #16]
 800c2dc:	4620      	mov	r0, r4
 800c2de:	f000 ff44 	bl	800d16a <_Bfree>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c2e6:	702b      	strb	r3, [r5, #0]
 800c2e8:	f10a 0301 	add.w	r3, sl, #1
 800c2ec:	6013      	str	r3, [r2, #0]
 800c2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f000 8241 	beq.w	800c778 <_dtoa_r+0xb18>
 800c2f6:	601d      	str	r5, [r3, #0]
 800c2f8:	e23e      	b.n	800c778 <_dtoa_r+0xb18>
 800c2fa:	f8cd a020 	str.w	sl, [sp, #32]
 800c2fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c302:	2a39      	cmp	r2, #57	; 0x39
 800c304:	f105 33ff 	add.w	r3, r5, #4294967295
 800c308:	d108      	bne.n	800c31c <_dtoa_r+0x6bc>
 800c30a:	459b      	cmp	fp, r3
 800c30c:	d10a      	bne.n	800c324 <_dtoa_r+0x6c4>
 800c30e:	9b08      	ldr	r3, [sp, #32]
 800c310:	3301      	adds	r3, #1
 800c312:	9308      	str	r3, [sp, #32]
 800c314:	2330      	movs	r3, #48	; 0x30
 800c316:	f88b 3000 	strb.w	r3, [fp]
 800c31a:	465b      	mov	r3, fp
 800c31c:	781a      	ldrb	r2, [r3, #0]
 800c31e:	3201      	adds	r2, #1
 800c320:	701a      	strb	r2, [r3, #0]
 800c322:	e78c      	b.n	800c23e <_dtoa_r+0x5de>
 800c324:	461d      	mov	r5, r3
 800c326:	e7ea      	b.n	800c2fe <_dtoa_r+0x69e>
 800c328:	2200      	movs	r2, #0
 800c32a:	4b9b      	ldr	r3, [pc, #620]	; (800c598 <_dtoa_r+0x938>)
 800c32c:	f7f4 f96c 	bl	8000608 <__aeabi_dmul>
 800c330:	2200      	movs	r2, #0
 800c332:	2300      	movs	r3, #0
 800c334:	4606      	mov	r6, r0
 800c336:	460f      	mov	r7, r1
 800c338:	f7f4 fbce 	bl	8000ad8 <__aeabi_dcmpeq>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d09a      	beq.n	800c276 <_dtoa_r+0x616>
 800c340:	e7cb      	b.n	800c2da <_dtoa_r+0x67a>
 800c342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c344:	2a00      	cmp	r2, #0
 800c346:	f000 808b 	beq.w	800c460 <_dtoa_r+0x800>
 800c34a:	9a06      	ldr	r2, [sp, #24]
 800c34c:	2a01      	cmp	r2, #1
 800c34e:	dc6e      	bgt.n	800c42e <_dtoa_r+0x7ce>
 800c350:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c352:	2a00      	cmp	r2, #0
 800c354:	d067      	beq.n	800c426 <_dtoa_r+0x7c6>
 800c356:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c35a:	9f07      	ldr	r7, [sp, #28]
 800c35c:	9d05      	ldr	r5, [sp, #20]
 800c35e:	9a05      	ldr	r2, [sp, #20]
 800c360:	2101      	movs	r1, #1
 800c362:	441a      	add	r2, r3
 800c364:	4620      	mov	r0, r4
 800c366:	9205      	str	r2, [sp, #20]
 800c368:	4498      	add	r8, r3
 800c36a:	f000 ffdc 	bl	800d326 <__i2b>
 800c36e:	4606      	mov	r6, r0
 800c370:	2d00      	cmp	r5, #0
 800c372:	dd0c      	ble.n	800c38e <_dtoa_r+0x72e>
 800c374:	f1b8 0f00 	cmp.w	r8, #0
 800c378:	dd09      	ble.n	800c38e <_dtoa_r+0x72e>
 800c37a:	4545      	cmp	r5, r8
 800c37c:	9a05      	ldr	r2, [sp, #20]
 800c37e:	462b      	mov	r3, r5
 800c380:	bfa8      	it	ge
 800c382:	4643      	movge	r3, r8
 800c384:	1ad2      	subs	r2, r2, r3
 800c386:	9205      	str	r2, [sp, #20]
 800c388:	1aed      	subs	r5, r5, r3
 800c38a:	eba8 0803 	sub.w	r8, r8, r3
 800c38e:	9b07      	ldr	r3, [sp, #28]
 800c390:	b1eb      	cbz	r3, 800c3ce <_dtoa_r+0x76e>
 800c392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c394:	2b00      	cmp	r3, #0
 800c396:	d067      	beq.n	800c468 <_dtoa_r+0x808>
 800c398:	b18f      	cbz	r7, 800c3be <_dtoa_r+0x75e>
 800c39a:	4631      	mov	r1, r6
 800c39c:	463a      	mov	r2, r7
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f001 f860 	bl	800d464 <__pow5mult>
 800c3a4:	9a04      	ldr	r2, [sp, #16]
 800c3a6:	4601      	mov	r1, r0
 800c3a8:	4606      	mov	r6, r0
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f000 ffc4 	bl	800d338 <__multiply>
 800c3b0:	9904      	ldr	r1, [sp, #16]
 800c3b2:	9008      	str	r0, [sp, #32]
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f000 fed8 	bl	800d16a <_Bfree>
 800c3ba:	9b08      	ldr	r3, [sp, #32]
 800c3bc:	9304      	str	r3, [sp, #16]
 800c3be:	9b07      	ldr	r3, [sp, #28]
 800c3c0:	1bda      	subs	r2, r3, r7
 800c3c2:	d004      	beq.n	800c3ce <_dtoa_r+0x76e>
 800c3c4:	9904      	ldr	r1, [sp, #16]
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f001 f84c 	bl	800d464 <__pow5mult>
 800c3cc:	9004      	str	r0, [sp, #16]
 800c3ce:	2101      	movs	r1, #1
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f000 ffa8 	bl	800d326 <__i2b>
 800c3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3d8:	4607      	mov	r7, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f000 81d0 	beq.w	800c780 <_dtoa_r+0xb20>
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	4601      	mov	r1, r0
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f001 f83d 	bl	800d464 <__pow5mult>
 800c3ea:	9b06      	ldr	r3, [sp, #24]
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	4607      	mov	r7, r0
 800c3f0:	dc40      	bgt.n	800c474 <_dtoa_r+0x814>
 800c3f2:	9b00      	ldr	r3, [sp, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d139      	bne.n	800c46c <_dtoa_r+0x80c>
 800c3f8:	9b01      	ldr	r3, [sp, #4]
 800c3fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d136      	bne.n	800c470 <_dtoa_r+0x810>
 800c402:	9b01      	ldr	r3, [sp, #4]
 800c404:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c408:	0d1b      	lsrs	r3, r3, #20
 800c40a:	051b      	lsls	r3, r3, #20
 800c40c:	b12b      	cbz	r3, 800c41a <_dtoa_r+0x7ba>
 800c40e:	9b05      	ldr	r3, [sp, #20]
 800c410:	3301      	adds	r3, #1
 800c412:	9305      	str	r3, [sp, #20]
 800c414:	f108 0801 	add.w	r8, r8, #1
 800c418:	2301      	movs	r3, #1
 800c41a:	9307      	str	r3, [sp, #28]
 800c41c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d12a      	bne.n	800c478 <_dtoa_r+0x818>
 800c422:	2001      	movs	r0, #1
 800c424:	e030      	b.n	800c488 <_dtoa_r+0x828>
 800c426:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c428:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c42c:	e795      	b.n	800c35a <_dtoa_r+0x6fa>
 800c42e:	9b07      	ldr	r3, [sp, #28]
 800c430:	f109 37ff 	add.w	r7, r9, #4294967295
 800c434:	42bb      	cmp	r3, r7
 800c436:	bfbf      	itttt	lt
 800c438:	9b07      	ldrlt	r3, [sp, #28]
 800c43a:	9707      	strlt	r7, [sp, #28]
 800c43c:	1afa      	sublt	r2, r7, r3
 800c43e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c440:	bfbb      	ittet	lt
 800c442:	189b      	addlt	r3, r3, r2
 800c444:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c446:	1bdf      	subge	r7, r3, r7
 800c448:	2700      	movlt	r7, #0
 800c44a:	f1b9 0f00 	cmp.w	r9, #0
 800c44e:	bfb5      	itete	lt
 800c450:	9b05      	ldrlt	r3, [sp, #20]
 800c452:	9d05      	ldrge	r5, [sp, #20]
 800c454:	eba3 0509 	sublt.w	r5, r3, r9
 800c458:	464b      	movge	r3, r9
 800c45a:	bfb8      	it	lt
 800c45c:	2300      	movlt	r3, #0
 800c45e:	e77e      	b.n	800c35e <_dtoa_r+0x6fe>
 800c460:	9f07      	ldr	r7, [sp, #28]
 800c462:	9d05      	ldr	r5, [sp, #20]
 800c464:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c466:	e783      	b.n	800c370 <_dtoa_r+0x710>
 800c468:	9a07      	ldr	r2, [sp, #28]
 800c46a:	e7ab      	b.n	800c3c4 <_dtoa_r+0x764>
 800c46c:	2300      	movs	r3, #0
 800c46e:	e7d4      	b.n	800c41a <_dtoa_r+0x7ba>
 800c470:	9b00      	ldr	r3, [sp, #0]
 800c472:	e7d2      	b.n	800c41a <_dtoa_r+0x7ba>
 800c474:	2300      	movs	r3, #0
 800c476:	9307      	str	r3, [sp, #28]
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c47e:	6918      	ldr	r0, [r3, #16]
 800c480:	f000 ff03 	bl	800d28a <__hi0bits>
 800c484:	f1c0 0020 	rsb	r0, r0, #32
 800c488:	4440      	add	r0, r8
 800c48a:	f010 001f 	ands.w	r0, r0, #31
 800c48e:	d047      	beq.n	800c520 <_dtoa_r+0x8c0>
 800c490:	f1c0 0320 	rsb	r3, r0, #32
 800c494:	2b04      	cmp	r3, #4
 800c496:	dd3b      	ble.n	800c510 <_dtoa_r+0x8b0>
 800c498:	9b05      	ldr	r3, [sp, #20]
 800c49a:	f1c0 001c 	rsb	r0, r0, #28
 800c49e:	4403      	add	r3, r0
 800c4a0:	9305      	str	r3, [sp, #20]
 800c4a2:	4405      	add	r5, r0
 800c4a4:	4480      	add	r8, r0
 800c4a6:	9b05      	ldr	r3, [sp, #20]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	dd05      	ble.n	800c4b8 <_dtoa_r+0x858>
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	9904      	ldr	r1, [sp, #16]
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f001 f825 	bl	800d500 <__lshift>
 800c4b6:	9004      	str	r0, [sp, #16]
 800c4b8:	f1b8 0f00 	cmp.w	r8, #0
 800c4bc:	dd05      	ble.n	800c4ca <_dtoa_r+0x86a>
 800c4be:	4639      	mov	r1, r7
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f001 f81c 	bl	800d500 <__lshift>
 800c4c8:	4607      	mov	r7, r0
 800c4ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4cc:	b353      	cbz	r3, 800c524 <_dtoa_r+0x8c4>
 800c4ce:	4639      	mov	r1, r7
 800c4d0:	9804      	ldr	r0, [sp, #16]
 800c4d2:	f001 f869 	bl	800d5a8 <__mcmp>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	da24      	bge.n	800c524 <_dtoa_r+0x8c4>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	220a      	movs	r2, #10
 800c4de:	9904      	ldr	r1, [sp, #16]
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f000 fe59 	bl	800d198 <__multadd>
 800c4e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4e8:	9004      	str	r0, [sp, #16]
 800c4ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f000 814d 	beq.w	800c78e <_dtoa_r+0xb2e>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	220a      	movs	r2, #10
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f000 fe4c 	bl	800d198 <__multadd>
 800c500:	9b02      	ldr	r3, [sp, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	4606      	mov	r6, r0
 800c506:	dc4f      	bgt.n	800c5a8 <_dtoa_r+0x948>
 800c508:	9b06      	ldr	r3, [sp, #24]
 800c50a:	2b02      	cmp	r3, #2
 800c50c:	dd4c      	ble.n	800c5a8 <_dtoa_r+0x948>
 800c50e:	e011      	b.n	800c534 <_dtoa_r+0x8d4>
 800c510:	d0c9      	beq.n	800c4a6 <_dtoa_r+0x846>
 800c512:	9a05      	ldr	r2, [sp, #20]
 800c514:	331c      	adds	r3, #28
 800c516:	441a      	add	r2, r3
 800c518:	9205      	str	r2, [sp, #20]
 800c51a:	441d      	add	r5, r3
 800c51c:	4498      	add	r8, r3
 800c51e:	e7c2      	b.n	800c4a6 <_dtoa_r+0x846>
 800c520:	4603      	mov	r3, r0
 800c522:	e7f6      	b.n	800c512 <_dtoa_r+0x8b2>
 800c524:	f1b9 0f00 	cmp.w	r9, #0
 800c528:	dc38      	bgt.n	800c59c <_dtoa_r+0x93c>
 800c52a:	9b06      	ldr	r3, [sp, #24]
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	dd35      	ble.n	800c59c <_dtoa_r+0x93c>
 800c530:	f8cd 9008 	str.w	r9, [sp, #8]
 800c534:	9b02      	ldr	r3, [sp, #8]
 800c536:	b963      	cbnz	r3, 800c552 <_dtoa_r+0x8f2>
 800c538:	4639      	mov	r1, r7
 800c53a:	2205      	movs	r2, #5
 800c53c:	4620      	mov	r0, r4
 800c53e:	f000 fe2b 	bl	800d198 <__multadd>
 800c542:	4601      	mov	r1, r0
 800c544:	4607      	mov	r7, r0
 800c546:	9804      	ldr	r0, [sp, #16]
 800c548:	f001 f82e 	bl	800d5a8 <__mcmp>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	f73f adcc 	bgt.w	800c0ea <_dtoa_r+0x48a>
 800c552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c554:	465d      	mov	r5, fp
 800c556:	ea6f 0a03 	mvn.w	sl, r3
 800c55a:	f04f 0900 	mov.w	r9, #0
 800c55e:	4639      	mov	r1, r7
 800c560:	4620      	mov	r0, r4
 800c562:	f000 fe02 	bl	800d16a <_Bfree>
 800c566:	2e00      	cmp	r6, #0
 800c568:	f43f aeb7 	beq.w	800c2da <_dtoa_r+0x67a>
 800c56c:	f1b9 0f00 	cmp.w	r9, #0
 800c570:	d005      	beq.n	800c57e <_dtoa_r+0x91e>
 800c572:	45b1      	cmp	r9, r6
 800c574:	d003      	beq.n	800c57e <_dtoa_r+0x91e>
 800c576:	4649      	mov	r1, r9
 800c578:	4620      	mov	r0, r4
 800c57a:	f000 fdf6 	bl	800d16a <_Bfree>
 800c57e:	4631      	mov	r1, r6
 800c580:	4620      	mov	r0, r4
 800c582:	f000 fdf2 	bl	800d16a <_Bfree>
 800c586:	e6a8      	b.n	800c2da <_dtoa_r+0x67a>
 800c588:	2700      	movs	r7, #0
 800c58a:	463e      	mov	r6, r7
 800c58c:	e7e1      	b.n	800c552 <_dtoa_r+0x8f2>
 800c58e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c592:	463e      	mov	r6, r7
 800c594:	e5a9      	b.n	800c0ea <_dtoa_r+0x48a>
 800c596:	bf00      	nop
 800c598:	40240000 	.word	0x40240000
 800c59c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c59e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	f000 80fa 	beq.w	800c79c <_dtoa_r+0xb3c>
 800c5a8:	2d00      	cmp	r5, #0
 800c5aa:	dd05      	ble.n	800c5b8 <_dtoa_r+0x958>
 800c5ac:	4631      	mov	r1, r6
 800c5ae:	462a      	mov	r2, r5
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f000 ffa5 	bl	800d500 <__lshift>
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	9b07      	ldr	r3, [sp, #28]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d04c      	beq.n	800c658 <_dtoa_r+0x9f8>
 800c5be:	6871      	ldr	r1, [r6, #4]
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f000 fd9e 	bl	800d102 <_Balloc>
 800c5c6:	6932      	ldr	r2, [r6, #16]
 800c5c8:	3202      	adds	r2, #2
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	0092      	lsls	r2, r2, #2
 800c5ce:	f106 010c 	add.w	r1, r6, #12
 800c5d2:	300c      	adds	r0, #12
 800c5d4:	f000 fd8a 	bl	800d0ec <memcpy>
 800c5d8:	2201      	movs	r2, #1
 800c5da:	4629      	mov	r1, r5
 800c5dc:	4620      	mov	r0, r4
 800c5de:	f000 ff8f 	bl	800d500 <__lshift>
 800c5e2:	9b00      	ldr	r3, [sp, #0]
 800c5e4:	f8cd b014 	str.w	fp, [sp, #20]
 800c5e8:	f003 0301 	and.w	r3, r3, #1
 800c5ec:	46b1      	mov	r9, r6
 800c5ee:	9307      	str	r3, [sp, #28]
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	4639      	mov	r1, r7
 800c5f4:	9804      	ldr	r0, [sp, #16]
 800c5f6:	f7ff faa7 	bl	800bb48 <quorem>
 800c5fa:	4649      	mov	r1, r9
 800c5fc:	4605      	mov	r5, r0
 800c5fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c602:	9804      	ldr	r0, [sp, #16]
 800c604:	f000 ffd0 	bl	800d5a8 <__mcmp>
 800c608:	4632      	mov	r2, r6
 800c60a:	9000      	str	r0, [sp, #0]
 800c60c:	4639      	mov	r1, r7
 800c60e:	4620      	mov	r0, r4
 800c610:	f000 ffe4 	bl	800d5dc <__mdiff>
 800c614:	68c3      	ldr	r3, [r0, #12]
 800c616:	4602      	mov	r2, r0
 800c618:	bb03      	cbnz	r3, 800c65c <_dtoa_r+0x9fc>
 800c61a:	4601      	mov	r1, r0
 800c61c:	9008      	str	r0, [sp, #32]
 800c61e:	9804      	ldr	r0, [sp, #16]
 800c620:	f000 ffc2 	bl	800d5a8 <__mcmp>
 800c624:	9a08      	ldr	r2, [sp, #32]
 800c626:	4603      	mov	r3, r0
 800c628:	4611      	mov	r1, r2
 800c62a:	4620      	mov	r0, r4
 800c62c:	9308      	str	r3, [sp, #32]
 800c62e:	f000 fd9c 	bl	800d16a <_Bfree>
 800c632:	9b08      	ldr	r3, [sp, #32]
 800c634:	b9a3      	cbnz	r3, 800c660 <_dtoa_r+0xa00>
 800c636:	9a06      	ldr	r2, [sp, #24]
 800c638:	b992      	cbnz	r2, 800c660 <_dtoa_r+0xa00>
 800c63a:	9a07      	ldr	r2, [sp, #28]
 800c63c:	b982      	cbnz	r2, 800c660 <_dtoa_r+0xa00>
 800c63e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c642:	d029      	beq.n	800c698 <_dtoa_r+0xa38>
 800c644:	9b00      	ldr	r3, [sp, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	dd01      	ble.n	800c64e <_dtoa_r+0x9ee>
 800c64a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c64e:	9b05      	ldr	r3, [sp, #20]
 800c650:	1c5d      	adds	r5, r3, #1
 800c652:	f883 8000 	strb.w	r8, [r3]
 800c656:	e782      	b.n	800c55e <_dtoa_r+0x8fe>
 800c658:	4630      	mov	r0, r6
 800c65a:	e7c2      	b.n	800c5e2 <_dtoa_r+0x982>
 800c65c:	2301      	movs	r3, #1
 800c65e:	e7e3      	b.n	800c628 <_dtoa_r+0x9c8>
 800c660:	9a00      	ldr	r2, [sp, #0]
 800c662:	2a00      	cmp	r2, #0
 800c664:	db04      	blt.n	800c670 <_dtoa_r+0xa10>
 800c666:	d125      	bne.n	800c6b4 <_dtoa_r+0xa54>
 800c668:	9a06      	ldr	r2, [sp, #24]
 800c66a:	bb1a      	cbnz	r2, 800c6b4 <_dtoa_r+0xa54>
 800c66c:	9a07      	ldr	r2, [sp, #28]
 800c66e:	bb0a      	cbnz	r2, 800c6b4 <_dtoa_r+0xa54>
 800c670:	2b00      	cmp	r3, #0
 800c672:	ddec      	ble.n	800c64e <_dtoa_r+0x9ee>
 800c674:	2201      	movs	r2, #1
 800c676:	9904      	ldr	r1, [sp, #16]
 800c678:	4620      	mov	r0, r4
 800c67a:	f000 ff41 	bl	800d500 <__lshift>
 800c67e:	4639      	mov	r1, r7
 800c680:	9004      	str	r0, [sp, #16]
 800c682:	f000 ff91 	bl	800d5a8 <__mcmp>
 800c686:	2800      	cmp	r0, #0
 800c688:	dc03      	bgt.n	800c692 <_dtoa_r+0xa32>
 800c68a:	d1e0      	bne.n	800c64e <_dtoa_r+0x9ee>
 800c68c:	f018 0f01 	tst.w	r8, #1
 800c690:	d0dd      	beq.n	800c64e <_dtoa_r+0x9ee>
 800c692:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c696:	d1d8      	bne.n	800c64a <_dtoa_r+0x9ea>
 800c698:	9b05      	ldr	r3, [sp, #20]
 800c69a:	9a05      	ldr	r2, [sp, #20]
 800c69c:	1c5d      	adds	r5, r3, #1
 800c69e:	2339      	movs	r3, #57	; 0x39
 800c6a0:	7013      	strb	r3, [r2, #0]
 800c6a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c6a6:	2b39      	cmp	r3, #57	; 0x39
 800c6a8:	f105 32ff 	add.w	r2, r5, #4294967295
 800c6ac:	d04f      	beq.n	800c74e <_dtoa_r+0xaee>
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	7013      	strb	r3, [r2, #0]
 800c6b2:	e754      	b.n	800c55e <_dtoa_r+0x8fe>
 800c6b4:	9a05      	ldr	r2, [sp, #20]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	f102 0501 	add.w	r5, r2, #1
 800c6bc:	dd06      	ble.n	800c6cc <_dtoa_r+0xa6c>
 800c6be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c6c2:	d0e9      	beq.n	800c698 <_dtoa_r+0xa38>
 800c6c4:	f108 0801 	add.w	r8, r8, #1
 800c6c8:	9b05      	ldr	r3, [sp, #20]
 800c6ca:	e7c2      	b.n	800c652 <_dtoa_r+0x9f2>
 800c6cc:	9a02      	ldr	r2, [sp, #8]
 800c6ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c6d2:	eba5 030b 	sub.w	r3, r5, fp
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d021      	beq.n	800c71e <_dtoa_r+0xabe>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	220a      	movs	r2, #10
 800c6de:	9904      	ldr	r1, [sp, #16]
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f000 fd59 	bl	800d198 <__multadd>
 800c6e6:	45b1      	cmp	r9, r6
 800c6e8:	9004      	str	r0, [sp, #16]
 800c6ea:	f04f 0300 	mov.w	r3, #0
 800c6ee:	f04f 020a 	mov.w	r2, #10
 800c6f2:	4649      	mov	r1, r9
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	d105      	bne.n	800c704 <_dtoa_r+0xaa4>
 800c6f8:	f000 fd4e 	bl	800d198 <__multadd>
 800c6fc:	4681      	mov	r9, r0
 800c6fe:	4606      	mov	r6, r0
 800c700:	9505      	str	r5, [sp, #20]
 800c702:	e776      	b.n	800c5f2 <_dtoa_r+0x992>
 800c704:	f000 fd48 	bl	800d198 <__multadd>
 800c708:	4631      	mov	r1, r6
 800c70a:	4681      	mov	r9, r0
 800c70c:	2300      	movs	r3, #0
 800c70e:	220a      	movs	r2, #10
 800c710:	4620      	mov	r0, r4
 800c712:	f000 fd41 	bl	800d198 <__multadd>
 800c716:	4606      	mov	r6, r0
 800c718:	e7f2      	b.n	800c700 <_dtoa_r+0xaa0>
 800c71a:	f04f 0900 	mov.w	r9, #0
 800c71e:	2201      	movs	r2, #1
 800c720:	9904      	ldr	r1, [sp, #16]
 800c722:	4620      	mov	r0, r4
 800c724:	f000 feec 	bl	800d500 <__lshift>
 800c728:	4639      	mov	r1, r7
 800c72a:	9004      	str	r0, [sp, #16]
 800c72c:	f000 ff3c 	bl	800d5a8 <__mcmp>
 800c730:	2800      	cmp	r0, #0
 800c732:	dcb6      	bgt.n	800c6a2 <_dtoa_r+0xa42>
 800c734:	d102      	bne.n	800c73c <_dtoa_r+0xadc>
 800c736:	f018 0f01 	tst.w	r8, #1
 800c73a:	d1b2      	bne.n	800c6a2 <_dtoa_r+0xa42>
 800c73c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c740:	2b30      	cmp	r3, #48	; 0x30
 800c742:	f105 32ff 	add.w	r2, r5, #4294967295
 800c746:	f47f af0a 	bne.w	800c55e <_dtoa_r+0x8fe>
 800c74a:	4615      	mov	r5, r2
 800c74c:	e7f6      	b.n	800c73c <_dtoa_r+0xadc>
 800c74e:	4593      	cmp	fp, r2
 800c750:	d105      	bne.n	800c75e <_dtoa_r+0xafe>
 800c752:	2331      	movs	r3, #49	; 0x31
 800c754:	f10a 0a01 	add.w	sl, sl, #1
 800c758:	f88b 3000 	strb.w	r3, [fp]
 800c75c:	e6ff      	b.n	800c55e <_dtoa_r+0x8fe>
 800c75e:	4615      	mov	r5, r2
 800c760:	e79f      	b.n	800c6a2 <_dtoa_r+0xa42>
 800c762:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c7c8 <_dtoa_r+0xb68>
 800c766:	e007      	b.n	800c778 <_dtoa_r+0xb18>
 800c768:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c76a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c7cc <_dtoa_r+0xb6c>
 800c76e:	b11b      	cbz	r3, 800c778 <_dtoa_r+0xb18>
 800c770:	f10b 0308 	add.w	r3, fp, #8
 800c774:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c776:	6013      	str	r3, [r2, #0]
 800c778:	4658      	mov	r0, fp
 800c77a:	b017      	add	sp, #92	; 0x5c
 800c77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c780:	9b06      	ldr	r3, [sp, #24]
 800c782:	2b01      	cmp	r3, #1
 800c784:	f77f ae35 	ble.w	800c3f2 <_dtoa_r+0x792>
 800c788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c78a:	9307      	str	r3, [sp, #28]
 800c78c:	e649      	b.n	800c422 <_dtoa_r+0x7c2>
 800c78e:	9b02      	ldr	r3, [sp, #8]
 800c790:	2b00      	cmp	r3, #0
 800c792:	dc03      	bgt.n	800c79c <_dtoa_r+0xb3c>
 800c794:	9b06      	ldr	r3, [sp, #24]
 800c796:	2b02      	cmp	r3, #2
 800c798:	f73f aecc 	bgt.w	800c534 <_dtoa_r+0x8d4>
 800c79c:	465d      	mov	r5, fp
 800c79e:	4639      	mov	r1, r7
 800c7a0:	9804      	ldr	r0, [sp, #16]
 800c7a2:	f7ff f9d1 	bl	800bb48 <quorem>
 800c7a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c7aa:	f805 8b01 	strb.w	r8, [r5], #1
 800c7ae:	9a02      	ldr	r2, [sp, #8]
 800c7b0:	eba5 030b 	sub.w	r3, r5, fp
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	ddb0      	ble.n	800c71a <_dtoa_r+0xaba>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	220a      	movs	r2, #10
 800c7bc:	9904      	ldr	r1, [sp, #16]
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f000 fcea 	bl	800d198 <__multadd>
 800c7c4:	9004      	str	r0, [sp, #16]
 800c7c6:	e7ea      	b.n	800c79e <_dtoa_r+0xb3e>
 800c7c8:	0800eaf4 	.word	0x0800eaf4
 800c7cc:	0800eb68 	.word	0x0800eb68

0800c7d0 <print_e>:
 800c7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7d2:	b087      	sub	sp, #28
 800c7d4:	ec43 2b10 	vmov	d0, r2, r3
 800c7d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c7da:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800c7de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c7e0:	ab04      	add	r3, sp, #16
 800c7e2:	9301      	str	r3, [sp, #4]
 800c7e4:	ab03      	add	r3, sp, #12
 800c7e6:	9300      	str	r3, [sp, #0]
 800c7e8:	460f      	mov	r7, r1
 800c7ea:	ab05      	add	r3, sp, #20
 800c7ec:	2102      	movs	r1, #2
 800c7ee:	1c62      	adds	r2, r4, #1
 800c7f0:	f7ff fa36 	bl	800bc60 <_dtoa_r>
 800c7f4:	4601      	mov	r1, r0
 800c7f6:	9805      	ldr	r0, [sp, #20]
 800c7f8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7fc:	4298      	cmp	r0, r3
 800c7fe:	d104      	bne.n	800c80a <print_e+0x3a>
 800c800:	4638      	mov	r0, r7
 800c802:	f001 fadf 	bl	800ddc4 <strcpy>
 800c806:	b007      	add	sp, #28
 800c808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c80a:	780b      	ldrb	r3, [r1, #0]
 800c80c:	703b      	strb	r3, [r7, #0]
 800c80e:	2d00      	cmp	r5, #0
 800c810:	d143      	bne.n	800c89a <print_e+0xca>
 800c812:	2c00      	cmp	r4, #0
 800c814:	d141      	bne.n	800c89a <print_e+0xca>
 800c816:	1c7b      	adds	r3, r7, #1
 800c818:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c81c:	b10a      	cbz	r2, 800c822 <print_e+0x52>
 800c81e:	2c00      	cmp	r4, #0
 800c820:	dc3f      	bgt.n	800c8a2 <print_e+0xd2>
 800c822:	2e67      	cmp	r6, #103	; 0x67
 800c824:	d044      	beq.n	800c8b0 <print_e+0xe0>
 800c826:	2e47      	cmp	r6, #71	; 0x47
 800c828:	d044      	beq.n	800c8b4 <print_e+0xe4>
 800c82a:	461a      	mov	r2, r3
 800c82c:	191d      	adds	r5, r3, r4
 800c82e:	2730      	movs	r7, #48	; 0x30
 800c830:	1aa9      	subs	r1, r5, r2
 800c832:	2900      	cmp	r1, #0
 800c834:	dc39      	bgt.n	800c8aa <print_e+0xda>
 800c836:	2c00      	cmp	r4, #0
 800c838:	bfa8      	it	ge
 800c83a:	191b      	addge	r3, r3, r4
 800c83c:	1e41      	subs	r1, r0, #1
 800c83e:	2900      	cmp	r1, #0
 800c840:	bfb8      	it	lt
 800c842:	f1c0 0001 	rsblt	r0, r0, #1
 800c846:	9105      	str	r1, [sp, #20]
 800c848:	bfb8      	it	lt
 800c84a:	9005      	strlt	r0, [sp, #20]
 800c84c:	461a      	mov	r2, r3
 800c84e:	9805      	ldr	r0, [sp, #20]
 800c850:	f802 6b02 	strb.w	r6, [r2], #2
 800c854:	bfb5      	itete	lt
 800c856:	212d      	movlt	r1, #45	; 0x2d
 800c858:	212b      	movge	r1, #43	; 0x2b
 800c85a:	7059      	strblt	r1, [r3, #1]
 800c85c:	7059      	strbge	r1, [r3, #1]
 800c85e:	2863      	cmp	r0, #99	; 0x63
 800c860:	dd0b      	ble.n	800c87a <print_e+0xaa>
 800c862:	2164      	movs	r1, #100	; 0x64
 800c864:	fb90 f1f1 	sdiv	r1, r0, r1
 800c868:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800c86c:	1cda      	adds	r2, r3, #3
 800c86e:	709c      	strb	r4, [r3, #2]
 800c870:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800c874:	fb03 0101 	mla	r1, r3, r1, r0
 800c878:	9105      	str	r1, [sp, #20]
 800c87a:	9905      	ldr	r1, [sp, #20]
 800c87c:	230a      	movs	r3, #10
 800c87e:	fb91 f3f3 	sdiv	r3, r1, r3
 800c882:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c886:	7010      	strb	r0, [r2, #0]
 800c888:	f06f 0009 	mvn.w	r0, #9
 800c88c:	fb00 1303 	mla	r3, r0, r3, r1
 800c890:	3330      	adds	r3, #48	; 0x30
 800c892:	7053      	strb	r3, [r2, #1]
 800c894:	2300      	movs	r3, #0
 800c896:	7093      	strb	r3, [r2, #2]
 800c898:	e7b5      	b.n	800c806 <print_e+0x36>
 800c89a:	222e      	movs	r2, #46	; 0x2e
 800c89c:	1cbb      	adds	r3, r7, #2
 800c89e:	707a      	strb	r2, [r7, #1]
 800c8a0:	e7ba      	b.n	800c818 <print_e+0x48>
 800c8a2:	f803 2b01 	strb.w	r2, [r3], #1
 800c8a6:	3c01      	subs	r4, #1
 800c8a8:	e7b6      	b.n	800c818 <print_e+0x48>
 800c8aa:	f802 7b01 	strb.w	r7, [r2], #1
 800c8ae:	e7bf      	b.n	800c830 <print_e+0x60>
 800c8b0:	2665      	movs	r6, #101	; 0x65
 800c8b2:	e7c3      	b.n	800c83c <print_e+0x6c>
 800c8b4:	2645      	movs	r6, #69	; 0x45
 800c8b6:	e7c1      	b.n	800c83c <print_e+0x6c>

0800c8b8 <_gcvt>:
 800c8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8bc:	ec55 4b10 	vmov	r4, r5, d0
 800c8c0:	b088      	sub	sp, #32
 800c8c2:	4681      	mov	r9, r0
 800c8c4:	460f      	mov	r7, r1
 800c8c6:	4616      	mov	r6, r2
 800c8c8:	469a      	mov	sl, r3
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	ee10 0a10 	vmov	r0, s0
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800c8d8:	f7f4 f908 	bl	8000aec <__aeabi_dcmplt>
 800c8dc:	b110      	cbz	r0, 800c8e4 <_gcvt+0x2c>
 800c8de:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c8e2:	461d      	mov	r5, r3
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	f7f4 f8f4 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8f0:	b138      	cbz	r0, 800c902 <_gcvt+0x4a>
 800c8f2:	2330      	movs	r3, #48	; 0x30
 800c8f4:	7033      	strb	r3, [r6, #0]
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	7073      	strb	r3, [r6, #1]
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	b008      	add	sp, #32
 800c8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c902:	a350      	add	r3, pc, #320	; (adr r3, 800ca44 <_gcvt+0x18c>)
 800c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c908:	4620      	mov	r0, r4
 800c90a:	4629      	mov	r1, r5
 800c90c:	f7f4 f8f8 	bl	8000b00 <__aeabi_dcmple>
 800c910:	b150      	cbz	r0, 800c928 <_gcvt+0x70>
 800c912:	3f01      	subs	r7, #1
 800c914:	e9cd a801 	strd	sl, r8, [sp, #4]
 800c918:	9700      	str	r7, [sp, #0]
 800c91a:	4622      	mov	r2, r4
 800c91c:	462b      	mov	r3, r5
 800c91e:	4631      	mov	r1, r6
 800c920:	4648      	mov	r0, r9
 800c922:	f7ff ff55 	bl	800c7d0 <print_e>
 800c926:	e7e8      	b.n	800c8fa <_gcvt+0x42>
 800c928:	4638      	mov	r0, r7
 800c92a:	f000 ffad 	bl	800d888 <_mprec_log10>
 800c92e:	4622      	mov	r2, r4
 800c930:	462b      	mov	r3, r5
 800c932:	ec51 0b10 	vmov	r0, r1, d0
 800c936:	f7f4 f8e3 	bl	8000b00 <__aeabi_dcmple>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d1e9      	bne.n	800c912 <_gcvt+0x5a>
 800c93e:	2200      	movs	r2, #0
 800c940:	4b3f      	ldr	r3, [pc, #252]	; (800ca40 <_gcvt+0x188>)
 800c942:	4620      	mov	r0, r4
 800c944:	4629      	mov	r1, r5
 800c946:	f7f4 f8d1 	bl	8000aec <__aeabi_dcmplt>
 800c94a:	aa07      	add	r2, sp, #28
 800c94c:	ab06      	add	r3, sp, #24
 800c94e:	e9cd 3200 	strd	r3, r2, [sp]
 800c952:	ab05      	add	r3, sp, #20
 800c954:	463a      	mov	r2, r7
 800c956:	b360      	cbz	r0, 800c9b2 <_gcvt+0xfa>
 800c958:	2103      	movs	r1, #3
 800c95a:	ec45 4b10 	vmov	d0, r4, r5
 800c95e:	4648      	mov	r0, r9
 800c960:	f7ff f97e 	bl	800bc60 <_dtoa_r>
 800c964:	9a05      	ldr	r2, [sp, #20]
 800c966:	f242 730f 	movw	r3, #9999	; 0x270f
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d023      	beq.n	800c9b6 <_gcvt+0xfe>
 800c96e:	4633      	mov	r3, r6
 800c970:	4437      	add	r7, r6
 800c972:	4601      	mov	r1, r0
 800c974:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c978:	9d05      	ldr	r5, [sp, #20]
 800c97a:	1afc      	subs	r4, r7, r3
 800c97c:	b32a      	cbz	r2, 800c9ca <_gcvt+0x112>
 800c97e:	2d00      	cmp	r5, #0
 800c980:	dc1e      	bgt.n	800c9c0 <_gcvt+0x108>
 800c982:	f1b8 0f00 	cmp.w	r8, #0
 800c986:	d102      	bne.n	800c98e <_gcvt+0xd6>
 800c988:	780a      	ldrb	r2, [r1, #0]
 800c98a:	2a00      	cmp	r2, #0
 800c98c:	d045      	beq.n	800ca1a <_gcvt+0x162>
 800c98e:	429e      	cmp	r6, r3
 800c990:	bf02      	ittt	eq
 800c992:	1c73      	addeq	r3, r6, #1
 800c994:	2230      	moveq	r2, #48	; 0x30
 800c996:	7032      	strbeq	r2, [r6, #0]
 800c998:	222e      	movs	r2, #46	; 0x2e
 800c99a:	701a      	strb	r2, [r3, #0]
 800c99c:	9a05      	ldr	r2, [sp, #20]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	2730      	movs	r7, #48	; 0x30
 800c9a4:	2a00      	cmp	r2, #0
 800c9a6:	4615      	mov	r5, r2
 800c9a8:	db24      	blt.n	800c9f4 <_gcvt+0x13c>
 800c9aa:	b100      	cbz	r0, 800c9ae <_gcvt+0xf6>
 800c9ac:	9205      	str	r2, [sp, #20]
 800c9ae:	1e4a      	subs	r2, r1, #1
 800c9b0:	e02b      	b.n	800ca0a <_gcvt+0x152>
 800c9b2:	2102      	movs	r1, #2
 800c9b4:	e7d1      	b.n	800c95a <_gcvt+0xa2>
 800c9b6:	4601      	mov	r1, r0
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	f001 fa03 	bl	800ddc4 <strcpy>
 800c9be:	e79c      	b.n	800c8fa <_gcvt+0x42>
 800c9c0:	3d01      	subs	r5, #1
 800c9c2:	f803 2b01 	strb.w	r2, [r3], #1
 800c9c6:	9505      	str	r5, [sp, #20]
 800c9c8:	e7d3      	b.n	800c972 <_gcvt+0xba>
 800c9ca:	1b2d      	subs	r5, r5, r4
 800c9cc:	2730      	movs	r7, #48	; 0x30
 800c9ce:	e005      	b.n	800c9dc <_gcvt+0x124>
 800c9d0:	2c00      	cmp	r4, #0
 800c9d2:	dd06      	ble.n	800c9e2 <_gcvt+0x12a>
 800c9d4:	f803 7b01 	strb.w	r7, [r3], #1
 800c9d8:	3c01      	subs	r4, #1
 800c9da:	2201      	movs	r2, #1
 800c9dc:	1928      	adds	r0, r5, r4
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	dcf6      	bgt.n	800c9d0 <_gcvt+0x118>
 800c9e2:	2a00      	cmp	r2, #0
 800c9e4:	d0cd      	beq.n	800c982 <_gcvt+0xca>
 800c9e6:	9005      	str	r0, [sp, #20]
 800c9e8:	e7cb      	b.n	800c982 <_gcvt+0xca>
 800c9ea:	f803 7b01 	strb.w	r7, [r3], #1
 800c9ee:	3c01      	subs	r4, #1
 800c9f0:	2001      	movs	r0, #1
 800c9f2:	e7d7      	b.n	800c9a4 <_gcvt+0xec>
 800c9f4:	2c00      	cmp	r4, #0
 800c9f6:	f102 0201 	add.w	r2, r2, #1
 800c9fa:	dcf6      	bgt.n	800c9ea <_gcvt+0x132>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d0d6      	beq.n	800c9ae <_gcvt+0xf6>
 800ca00:	9505      	str	r5, [sp, #20]
 800ca02:	e7d4      	b.n	800c9ae <_gcvt+0xf6>
 800ca04:	f803 1b01 	strb.w	r1, [r3], #1
 800ca08:	3c01      	subs	r4, #1
 800ca0a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800ca0e:	b109      	cbz	r1, 800ca14 <_gcvt+0x15c>
 800ca10:	2c00      	cmp	r4, #0
 800ca12:	dcf7      	bgt.n	800ca04 <_gcvt+0x14c>
 800ca14:	f1b8 0f00 	cmp.w	r8, #0
 800ca18:	d10b      	bne.n	800ca32 <_gcvt+0x17a>
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	701a      	strb	r2, [r3, #0]
 800ca1e:	e76c      	b.n	800c8fa <_gcvt+0x42>
 800ca20:	f802 5b01 	strb.w	r5, [r2], #1
 800ca24:	1a81      	subs	r1, r0, r2
 800ca26:	2900      	cmp	r1, #0
 800ca28:	dcfa      	bgt.n	800ca20 <_gcvt+0x168>
 800ca2a:	2c00      	cmp	r4, #0
 800ca2c:	bfa8      	it	ge
 800ca2e:	191b      	addge	r3, r3, r4
 800ca30:	e7f3      	b.n	800ca1a <_gcvt+0x162>
 800ca32:	461a      	mov	r2, r3
 800ca34:	1918      	adds	r0, r3, r4
 800ca36:	2530      	movs	r5, #48	; 0x30
 800ca38:	e7f4      	b.n	800ca24 <_gcvt+0x16c>
 800ca3a:	bf00      	nop
 800ca3c:	f3af 8000 	nop.w
 800ca40:	3ff00000 	.word	0x3ff00000
 800ca44:	eb1c432d 	.word	0xeb1c432d
 800ca48:	3f1a36e2 	.word	0x3f1a36e2

0800ca4c <rshift>:
 800ca4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca4e:	6906      	ldr	r6, [r0, #16]
 800ca50:	114b      	asrs	r3, r1, #5
 800ca52:	429e      	cmp	r6, r3
 800ca54:	f100 0414 	add.w	r4, r0, #20
 800ca58:	dd30      	ble.n	800cabc <rshift+0x70>
 800ca5a:	f011 011f 	ands.w	r1, r1, #31
 800ca5e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ca62:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ca66:	d108      	bne.n	800ca7a <rshift+0x2e>
 800ca68:	4621      	mov	r1, r4
 800ca6a:	42b2      	cmp	r2, r6
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	d211      	bcs.n	800ca94 <rshift+0x48>
 800ca70:	f852 3b04 	ldr.w	r3, [r2], #4
 800ca74:	f841 3b04 	str.w	r3, [r1], #4
 800ca78:	e7f7      	b.n	800ca6a <rshift+0x1e>
 800ca7a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ca7e:	f1c1 0c20 	rsb	ip, r1, #32
 800ca82:	40cd      	lsrs	r5, r1
 800ca84:	3204      	adds	r2, #4
 800ca86:	4623      	mov	r3, r4
 800ca88:	42b2      	cmp	r2, r6
 800ca8a:	4617      	mov	r7, r2
 800ca8c:	d30c      	bcc.n	800caa8 <rshift+0x5c>
 800ca8e:	601d      	str	r5, [r3, #0]
 800ca90:	b105      	cbz	r5, 800ca94 <rshift+0x48>
 800ca92:	3304      	adds	r3, #4
 800ca94:	1b1a      	subs	r2, r3, r4
 800ca96:	42a3      	cmp	r3, r4
 800ca98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca9c:	bf08      	it	eq
 800ca9e:	2300      	moveq	r3, #0
 800caa0:	6102      	str	r2, [r0, #16]
 800caa2:	bf08      	it	eq
 800caa4:	6143      	streq	r3, [r0, #20]
 800caa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caa8:	683f      	ldr	r7, [r7, #0]
 800caaa:	fa07 f70c 	lsl.w	r7, r7, ip
 800caae:	433d      	orrs	r5, r7
 800cab0:	f843 5b04 	str.w	r5, [r3], #4
 800cab4:	f852 5b04 	ldr.w	r5, [r2], #4
 800cab8:	40cd      	lsrs	r5, r1
 800caba:	e7e5      	b.n	800ca88 <rshift+0x3c>
 800cabc:	4623      	mov	r3, r4
 800cabe:	e7e9      	b.n	800ca94 <rshift+0x48>

0800cac0 <__hexdig_fun>:
 800cac0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cac4:	2b09      	cmp	r3, #9
 800cac6:	d802      	bhi.n	800cace <__hexdig_fun+0xe>
 800cac8:	3820      	subs	r0, #32
 800caca:	b2c0      	uxtb	r0, r0
 800cacc:	4770      	bx	lr
 800cace:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cad2:	2b05      	cmp	r3, #5
 800cad4:	d801      	bhi.n	800cada <__hexdig_fun+0x1a>
 800cad6:	3847      	subs	r0, #71	; 0x47
 800cad8:	e7f7      	b.n	800caca <__hexdig_fun+0xa>
 800cada:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cade:	2b05      	cmp	r3, #5
 800cae0:	d801      	bhi.n	800cae6 <__hexdig_fun+0x26>
 800cae2:	3827      	subs	r0, #39	; 0x27
 800cae4:	e7f1      	b.n	800caca <__hexdig_fun+0xa>
 800cae6:	2000      	movs	r0, #0
 800cae8:	4770      	bx	lr

0800caea <__gethex>:
 800caea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caee:	b08b      	sub	sp, #44	; 0x2c
 800caf0:	468a      	mov	sl, r1
 800caf2:	9002      	str	r0, [sp, #8]
 800caf4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800caf6:	9306      	str	r3, [sp, #24]
 800caf8:	4690      	mov	r8, r2
 800cafa:	f000 facd 	bl	800d098 <__localeconv_l>
 800cafe:	6803      	ldr	r3, [r0, #0]
 800cb00:	9303      	str	r3, [sp, #12]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7f3 fb6c 	bl	80001e0 <strlen>
 800cb08:	9b03      	ldr	r3, [sp, #12]
 800cb0a:	9001      	str	r0, [sp, #4]
 800cb0c:	4403      	add	r3, r0
 800cb0e:	f04f 0b00 	mov.w	fp, #0
 800cb12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cb16:	9307      	str	r3, [sp, #28]
 800cb18:	f8da 3000 	ldr.w	r3, [sl]
 800cb1c:	3302      	adds	r3, #2
 800cb1e:	461f      	mov	r7, r3
 800cb20:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cb24:	2830      	cmp	r0, #48	; 0x30
 800cb26:	d06c      	beq.n	800cc02 <__gethex+0x118>
 800cb28:	f7ff ffca 	bl	800cac0 <__hexdig_fun>
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d16a      	bne.n	800cc08 <__gethex+0x11e>
 800cb32:	9a01      	ldr	r2, [sp, #4]
 800cb34:	9903      	ldr	r1, [sp, #12]
 800cb36:	4638      	mov	r0, r7
 800cb38:	f001 f94c 	bl	800ddd4 <strncmp>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d166      	bne.n	800cc0e <__gethex+0x124>
 800cb40:	9b01      	ldr	r3, [sp, #4]
 800cb42:	5cf8      	ldrb	r0, [r7, r3]
 800cb44:	18fe      	adds	r6, r7, r3
 800cb46:	f7ff ffbb 	bl	800cac0 <__hexdig_fun>
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d062      	beq.n	800cc14 <__gethex+0x12a>
 800cb4e:	4633      	mov	r3, r6
 800cb50:	7818      	ldrb	r0, [r3, #0]
 800cb52:	2830      	cmp	r0, #48	; 0x30
 800cb54:	461f      	mov	r7, r3
 800cb56:	f103 0301 	add.w	r3, r3, #1
 800cb5a:	d0f9      	beq.n	800cb50 <__gethex+0x66>
 800cb5c:	f7ff ffb0 	bl	800cac0 <__hexdig_fun>
 800cb60:	fab0 f580 	clz	r5, r0
 800cb64:	096d      	lsrs	r5, r5, #5
 800cb66:	4634      	mov	r4, r6
 800cb68:	f04f 0b01 	mov.w	fp, #1
 800cb6c:	463a      	mov	r2, r7
 800cb6e:	4616      	mov	r6, r2
 800cb70:	3201      	adds	r2, #1
 800cb72:	7830      	ldrb	r0, [r6, #0]
 800cb74:	f7ff ffa4 	bl	800cac0 <__hexdig_fun>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d1f8      	bne.n	800cb6e <__gethex+0x84>
 800cb7c:	9a01      	ldr	r2, [sp, #4]
 800cb7e:	9903      	ldr	r1, [sp, #12]
 800cb80:	4630      	mov	r0, r6
 800cb82:	f001 f927 	bl	800ddd4 <strncmp>
 800cb86:	b950      	cbnz	r0, 800cb9e <__gethex+0xb4>
 800cb88:	b954      	cbnz	r4, 800cba0 <__gethex+0xb6>
 800cb8a:	9b01      	ldr	r3, [sp, #4]
 800cb8c:	18f4      	adds	r4, r6, r3
 800cb8e:	4622      	mov	r2, r4
 800cb90:	4616      	mov	r6, r2
 800cb92:	3201      	adds	r2, #1
 800cb94:	7830      	ldrb	r0, [r6, #0]
 800cb96:	f7ff ff93 	bl	800cac0 <__hexdig_fun>
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d1f8      	bne.n	800cb90 <__gethex+0xa6>
 800cb9e:	b10c      	cbz	r4, 800cba4 <__gethex+0xba>
 800cba0:	1ba4      	subs	r4, r4, r6
 800cba2:	00a4      	lsls	r4, r4, #2
 800cba4:	7833      	ldrb	r3, [r6, #0]
 800cba6:	2b50      	cmp	r3, #80	; 0x50
 800cba8:	d001      	beq.n	800cbae <__gethex+0xc4>
 800cbaa:	2b70      	cmp	r3, #112	; 0x70
 800cbac:	d140      	bne.n	800cc30 <__gethex+0x146>
 800cbae:	7873      	ldrb	r3, [r6, #1]
 800cbb0:	2b2b      	cmp	r3, #43	; 0x2b
 800cbb2:	d031      	beq.n	800cc18 <__gethex+0x12e>
 800cbb4:	2b2d      	cmp	r3, #45	; 0x2d
 800cbb6:	d033      	beq.n	800cc20 <__gethex+0x136>
 800cbb8:	1c71      	adds	r1, r6, #1
 800cbba:	f04f 0900 	mov.w	r9, #0
 800cbbe:	7808      	ldrb	r0, [r1, #0]
 800cbc0:	f7ff ff7e 	bl	800cac0 <__hexdig_fun>
 800cbc4:	1e43      	subs	r3, r0, #1
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	2b18      	cmp	r3, #24
 800cbca:	d831      	bhi.n	800cc30 <__gethex+0x146>
 800cbcc:	f1a0 0210 	sub.w	r2, r0, #16
 800cbd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cbd4:	f7ff ff74 	bl	800cac0 <__hexdig_fun>
 800cbd8:	1e43      	subs	r3, r0, #1
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	2b18      	cmp	r3, #24
 800cbde:	d922      	bls.n	800cc26 <__gethex+0x13c>
 800cbe0:	f1b9 0f00 	cmp.w	r9, #0
 800cbe4:	d000      	beq.n	800cbe8 <__gethex+0xfe>
 800cbe6:	4252      	negs	r2, r2
 800cbe8:	4414      	add	r4, r2
 800cbea:	f8ca 1000 	str.w	r1, [sl]
 800cbee:	b30d      	cbz	r5, 800cc34 <__gethex+0x14a>
 800cbf0:	f1bb 0f00 	cmp.w	fp, #0
 800cbf4:	bf0c      	ite	eq
 800cbf6:	2706      	moveq	r7, #6
 800cbf8:	2700      	movne	r7, #0
 800cbfa:	4638      	mov	r0, r7
 800cbfc:	b00b      	add	sp, #44	; 0x2c
 800cbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc02:	f10b 0b01 	add.w	fp, fp, #1
 800cc06:	e78a      	b.n	800cb1e <__gethex+0x34>
 800cc08:	2500      	movs	r5, #0
 800cc0a:	462c      	mov	r4, r5
 800cc0c:	e7ae      	b.n	800cb6c <__gethex+0x82>
 800cc0e:	463e      	mov	r6, r7
 800cc10:	2501      	movs	r5, #1
 800cc12:	e7c7      	b.n	800cba4 <__gethex+0xba>
 800cc14:	4604      	mov	r4, r0
 800cc16:	e7fb      	b.n	800cc10 <__gethex+0x126>
 800cc18:	f04f 0900 	mov.w	r9, #0
 800cc1c:	1cb1      	adds	r1, r6, #2
 800cc1e:	e7ce      	b.n	800cbbe <__gethex+0xd4>
 800cc20:	f04f 0901 	mov.w	r9, #1
 800cc24:	e7fa      	b.n	800cc1c <__gethex+0x132>
 800cc26:	230a      	movs	r3, #10
 800cc28:	fb03 0202 	mla	r2, r3, r2, r0
 800cc2c:	3a10      	subs	r2, #16
 800cc2e:	e7cf      	b.n	800cbd0 <__gethex+0xe6>
 800cc30:	4631      	mov	r1, r6
 800cc32:	e7da      	b.n	800cbea <__gethex+0x100>
 800cc34:	1bf3      	subs	r3, r6, r7
 800cc36:	3b01      	subs	r3, #1
 800cc38:	4629      	mov	r1, r5
 800cc3a:	2b07      	cmp	r3, #7
 800cc3c:	dc49      	bgt.n	800ccd2 <__gethex+0x1e8>
 800cc3e:	9802      	ldr	r0, [sp, #8]
 800cc40:	f000 fa5f 	bl	800d102 <_Balloc>
 800cc44:	9b01      	ldr	r3, [sp, #4]
 800cc46:	f100 0914 	add.w	r9, r0, #20
 800cc4a:	f04f 0b00 	mov.w	fp, #0
 800cc4e:	f1c3 0301 	rsb	r3, r3, #1
 800cc52:	4605      	mov	r5, r0
 800cc54:	f8cd 9010 	str.w	r9, [sp, #16]
 800cc58:	46da      	mov	sl, fp
 800cc5a:	9308      	str	r3, [sp, #32]
 800cc5c:	42b7      	cmp	r7, r6
 800cc5e:	d33b      	bcc.n	800ccd8 <__gethex+0x1ee>
 800cc60:	9804      	ldr	r0, [sp, #16]
 800cc62:	f840 ab04 	str.w	sl, [r0], #4
 800cc66:	eba0 0009 	sub.w	r0, r0, r9
 800cc6a:	1080      	asrs	r0, r0, #2
 800cc6c:	6128      	str	r0, [r5, #16]
 800cc6e:	0147      	lsls	r7, r0, #5
 800cc70:	4650      	mov	r0, sl
 800cc72:	f000 fb0a 	bl	800d28a <__hi0bits>
 800cc76:	f8d8 6000 	ldr.w	r6, [r8]
 800cc7a:	1a3f      	subs	r7, r7, r0
 800cc7c:	42b7      	cmp	r7, r6
 800cc7e:	dd64      	ble.n	800cd4a <__gethex+0x260>
 800cc80:	1bbf      	subs	r7, r7, r6
 800cc82:	4639      	mov	r1, r7
 800cc84:	4628      	mov	r0, r5
 800cc86:	f000 fe37 	bl	800d8f8 <__any_on>
 800cc8a:	4682      	mov	sl, r0
 800cc8c:	b178      	cbz	r0, 800ccae <__gethex+0x1c4>
 800cc8e:	1e7b      	subs	r3, r7, #1
 800cc90:	1159      	asrs	r1, r3, #5
 800cc92:	f003 021f 	and.w	r2, r3, #31
 800cc96:	f04f 0a01 	mov.w	sl, #1
 800cc9a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cc9e:	fa0a f202 	lsl.w	r2, sl, r2
 800cca2:	420a      	tst	r2, r1
 800cca4:	d003      	beq.n	800ccae <__gethex+0x1c4>
 800cca6:	4553      	cmp	r3, sl
 800cca8:	dc46      	bgt.n	800cd38 <__gethex+0x24e>
 800ccaa:	f04f 0a02 	mov.w	sl, #2
 800ccae:	4639      	mov	r1, r7
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	f7ff fecb 	bl	800ca4c <rshift>
 800ccb6:	443c      	add	r4, r7
 800ccb8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ccbc:	42a3      	cmp	r3, r4
 800ccbe:	da52      	bge.n	800cd66 <__gethex+0x27c>
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	9802      	ldr	r0, [sp, #8]
 800ccc4:	f000 fa51 	bl	800d16a <_Bfree>
 800ccc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ccca:	2300      	movs	r3, #0
 800cccc:	6013      	str	r3, [r2, #0]
 800ccce:	27a3      	movs	r7, #163	; 0xa3
 800ccd0:	e793      	b.n	800cbfa <__gethex+0x110>
 800ccd2:	3101      	adds	r1, #1
 800ccd4:	105b      	asrs	r3, r3, #1
 800ccd6:	e7b0      	b.n	800cc3a <__gethex+0x150>
 800ccd8:	1e73      	subs	r3, r6, #1
 800ccda:	9305      	str	r3, [sp, #20]
 800ccdc:	9a07      	ldr	r2, [sp, #28]
 800ccde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d018      	beq.n	800cd18 <__gethex+0x22e>
 800cce6:	f1bb 0f20 	cmp.w	fp, #32
 800ccea:	d107      	bne.n	800ccfc <__gethex+0x212>
 800ccec:	9b04      	ldr	r3, [sp, #16]
 800ccee:	f8c3 a000 	str.w	sl, [r3]
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	f04f 0a00 	mov.w	sl, #0
 800ccf8:	9304      	str	r3, [sp, #16]
 800ccfa:	46d3      	mov	fp, sl
 800ccfc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cd00:	f7ff fede 	bl	800cac0 <__hexdig_fun>
 800cd04:	f000 000f 	and.w	r0, r0, #15
 800cd08:	fa00 f00b 	lsl.w	r0, r0, fp
 800cd0c:	ea4a 0a00 	orr.w	sl, sl, r0
 800cd10:	f10b 0b04 	add.w	fp, fp, #4
 800cd14:	9b05      	ldr	r3, [sp, #20]
 800cd16:	e00d      	b.n	800cd34 <__gethex+0x24a>
 800cd18:	9b05      	ldr	r3, [sp, #20]
 800cd1a:	9a08      	ldr	r2, [sp, #32]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	42bb      	cmp	r3, r7
 800cd20:	d3e1      	bcc.n	800cce6 <__gethex+0x1fc>
 800cd22:	4618      	mov	r0, r3
 800cd24:	9a01      	ldr	r2, [sp, #4]
 800cd26:	9903      	ldr	r1, [sp, #12]
 800cd28:	9309      	str	r3, [sp, #36]	; 0x24
 800cd2a:	f001 f853 	bl	800ddd4 <strncmp>
 800cd2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d1d8      	bne.n	800cce6 <__gethex+0x1fc>
 800cd34:	461e      	mov	r6, r3
 800cd36:	e791      	b.n	800cc5c <__gethex+0x172>
 800cd38:	1eb9      	subs	r1, r7, #2
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	f000 fddc 	bl	800d8f8 <__any_on>
 800cd40:	2800      	cmp	r0, #0
 800cd42:	d0b2      	beq.n	800ccaa <__gethex+0x1c0>
 800cd44:	f04f 0a03 	mov.w	sl, #3
 800cd48:	e7b1      	b.n	800ccae <__gethex+0x1c4>
 800cd4a:	da09      	bge.n	800cd60 <__gethex+0x276>
 800cd4c:	1bf7      	subs	r7, r6, r7
 800cd4e:	4629      	mov	r1, r5
 800cd50:	463a      	mov	r2, r7
 800cd52:	9802      	ldr	r0, [sp, #8]
 800cd54:	f000 fbd4 	bl	800d500 <__lshift>
 800cd58:	1be4      	subs	r4, r4, r7
 800cd5a:	4605      	mov	r5, r0
 800cd5c:	f100 0914 	add.w	r9, r0, #20
 800cd60:	f04f 0a00 	mov.w	sl, #0
 800cd64:	e7a8      	b.n	800ccb8 <__gethex+0x1ce>
 800cd66:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cd6a:	42a0      	cmp	r0, r4
 800cd6c:	dd6a      	ble.n	800ce44 <__gethex+0x35a>
 800cd6e:	1b04      	subs	r4, r0, r4
 800cd70:	42a6      	cmp	r6, r4
 800cd72:	dc2e      	bgt.n	800cdd2 <__gethex+0x2e8>
 800cd74:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d022      	beq.n	800cdc2 <__gethex+0x2d8>
 800cd7c:	2b03      	cmp	r3, #3
 800cd7e:	d024      	beq.n	800cdca <__gethex+0x2e0>
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d115      	bne.n	800cdb0 <__gethex+0x2c6>
 800cd84:	42a6      	cmp	r6, r4
 800cd86:	d113      	bne.n	800cdb0 <__gethex+0x2c6>
 800cd88:	2e01      	cmp	r6, #1
 800cd8a:	dc0b      	bgt.n	800cda4 <__gethex+0x2ba>
 800cd8c:	9a06      	ldr	r2, [sp, #24]
 800cd8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd92:	6013      	str	r3, [r2, #0]
 800cd94:	2301      	movs	r3, #1
 800cd96:	612b      	str	r3, [r5, #16]
 800cd98:	f8c9 3000 	str.w	r3, [r9]
 800cd9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd9e:	2762      	movs	r7, #98	; 0x62
 800cda0:	601d      	str	r5, [r3, #0]
 800cda2:	e72a      	b.n	800cbfa <__gethex+0x110>
 800cda4:	1e71      	subs	r1, r6, #1
 800cda6:	4628      	mov	r0, r5
 800cda8:	f000 fda6 	bl	800d8f8 <__any_on>
 800cdac:	2800      	cmp	r0, #0
 800cdae:	d1ed      	bne.n	800cd8c <__gethex+0x2a2>
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	9802      	ldr	r0, [sp, #8]
 800cdb4:	f000 f9d9 	bl	800d16a <_Bfree>
 800cdb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cdba:	2300      	movs	r3, #0
 800cdbc:	6013      	str	r3, [r2, #0]
 800cdbe:	2750      	movs	r7, #80	; 0x50
 800cdc0:	e71b      	b.n	800cbfa <__gethex+0x110>
 800cdc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d0e1      	beq.n	800cd8c <__gethex+0x2a2>
 800cdc8:	e7f2      	b.n	800cdb0 <__gethex+0x2c6>
 800cdca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d1dd      	bne.n	800cd8c <__gethex+0x2a2>
 800cdd0:	e7ee      	b.n	800cdb0 <__gethex+0x2c6>
 800cdd2:	1e67      	subs	r7, r4, #1
 800cdd4:	f1ba 0f00 	cmp.w	sl, #0
 800cdd8:	d131      	bne.n	800ce3e <__gethex+0x354>
 800cdda:	b127      	cbz	r7, 800cde6 <__gethex+0x2fc>
 800cddc:	4639      	mov	r1, r7
 800cdde:	4628      	mov	r0, r5
 800cde0:	f000 fd8a 	bl	800d8f8 <__any_on>
 800cde4:	4682      	mov	sl, r0
 800cde6:	117a      	asrs	r2, r7, #5
 800cde8:	2301      	movs	r3, #1
 800cdea:	f007 071f 	and.w	r7, r7, #31
 800cdee:	fa03 f707 	lsl.w	r7, r3, r7
 800cdf2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	421f      	tst	r7, r3
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	bf18      	it	ne
 800cdfe:	f04a 0a02 	orrne.w	sl, sl, #2
 800ce02:	1b36      	subs	r6, r6, r4
 800ce04:	f7ff fe22 	bl	800ca4c <rshift>
 800ce08:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ce0c:	2702      	movs	r7, #2
 800ce0e:	f1ba 0f00 	cmp.w	sl, #0
 800ce12:	d048      	beq.n	800cea6 <__gethex+0x3bc>
 800ce14:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce18:	2b02      	cmp	r3, #2
 800ce1a:	d015      	beq.n	800ce48 <__gethex+0x35e>
 800ce1c:	2b03      	cmp	r3, #3
 800ce1e:	d017      	beq.n	800ce50 <__gethex+0x366>
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d109      	bne.n	800ce38 <__gethex+0x34e>
 800ce24:	f01a 0f02 	tst.w	sl, #2
 800ce28:	d006      	beq.n	800ce38 <__gethex+0x34e>
 800ce2a:	f8d9 3000 	ldr.w	r3, [r9]
 800ce2e:	ea4a 0a03 	orr.w	sl, sl, r3
 800ce32:	f01a 0f01 	tst.w	sl, #1
 800ce36:	d10e      	bne.n	800ce56 <__gethex+0x36c>
 800ce38:	f047 0710 	orr.w	r7, r7, #16
 800ce3c:	e033      	b.n	800cea6 <__gethex+0x3bc>
 800ce3e:	f04f 0a01 	mov.w	sl, #1
 800ce42:	e7d0      	b.n	800cde6 <__gethex+0x2fc>
 800ce44:	2701      	movs	r7, #1
 800ce46:	e7e2      	b.n	800ce0e <__gethex+0x324>
 800ce48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce4a:	f1c3 0301 	rsb	r3, r3, #1
 800ce4e:	9315      	str	r3, [sp, #84]	; 0x54
 800ce50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d0f0      	beq.n	800ce38 <__gethex+0x34e>
 800ce56:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ce5a:	f105 0314 	add.w	r3, r5, #20
 800ce5e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ce62:	eb03 010a 	add.w	r1, r3, sl
 800ce66:	f04f 0c00 	mov.w	ip, #0
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce70:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ce74:	d01c      	beq.n	800ceb0 <__gethex+0x3c6>
 800ce76:	3201      	adds	r2, #1
 800ce78:	6002      	str	r2, [r0, #0]
 800ce7a:	2f02      	cmp	r7, #2
 800ce7c:	f105 0314 	add.w	r3, r5, #20
 800ce80:	d138      	bne.n	800cef4 <__gethex+0x40a>
 800ce82:	f8d8 2000 	ldr.w	r2, [r8]
 800ce86:	3a01      	subs	r2, #1
 800ce88:	42b2      	cmp	r2, r6
 800ce8a:	d10a      	bne.n	800cea2 <__gethex+0x3b8>
 800ce8c:	1171      	asrs	r1, r6, #5
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f006 061f 	and.w	r6, r6, #31
 800ce94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce98:	fa02 f606 	lsl.w	r6, r2, r6
 800ce9c:	421e      	tst	r6, r3
 800ce9e:	bf18      	it	ne
 800cea0:	4617      	movne	r7, r2
 800cea2:	f047 0720 	orr.w	r7, r7, #32
 800cea6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cea8:	601d      	str	r5, [r3, #0]
 800ceaa:	9b06      	ldr	r3, [sp, #24]
 800ceac:	601c      	str	r4, [r3, #0]
 800ceae:	e6a4      	b.n	800cbfa <__gethex+0x110>
 800ceb0:	4299      	cmp	r1, r3
 800ceb2:	f843 cc04 	str.w	ip, [r3, #-4]
 800ceb6:	d8d8      	bhi.n	800ce6a <__gethex+0x380>
 800ceb8:	68ab      	ldr	r3, [r5, #8]
 800ceba:	4599      	cmp	r9, r3
 800cebc:	db12      	blt.n	800cee4 <__gethex+0x3fa>
 800cebe:	6869      	ldr	r1, [r5, #4]
 800cec0:	9802      	ldr	r0, [sp, #8]
 800cec2:	3101      	adds	r1, #1
 800cec4:	f000 f91d 	bl	800d102 <_Balloc>
 800cec8:	692a      	ldr	r2, [r5, #16]
 800ceca:	3202      	adds	r2, #2
 800cecc:	f105 010c 	add.w	r1, r5, #12
 800ced0:	4683      	mov	fp, r0
 800ced2:	0092      	lsls	r2, r2, #2
 800ced4:	300c      	adds	r0, #12
 800ced6:	f000 f909 	bl	800d0ec <memcpy>
 800ceda:	4629      	mov	r1, r5
 800cedc:	9802      	ldr	r0, [sp, #8]
 800cede:	f000 f944 	bl	800d16a <_Bfree>
 800cee2:	465d      	mov	r5, fp
 800cee4:	692b      	ldr	r3, [r5, #16]
 800cee6:	1c5a      	adds	r2, r3, #1
 800cee8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ceec:	612a      	str	r2, [r5, #16]
 800ceee:	2201      	movs	r2, #1
 800cef0:	615a      	str	r2, [r3, #20]
 800cef2:	e7c2      	b.n	800ce7a <__gethex+0x390>
 800cef4:	692a      	ldr	r2, [r5, #16]
 800cef6:	454a      	cmp	r2, r9
 800cef8:	dd0b      	ble.n	800cf12 <__gethex+0x428>
 800cefa:	2101      	movs	r1, #1
 800cefc:	4628      	mov	r0, r5
 800cefe:	f7ff fda5 	bl	800ca4c <rshift>
 800cf02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf06:	3401      	adds	r4, #1
 800cf08:	42a3      	cmp	r3, r4
 800cf0a:	f6ff aed9 	blt.w	800ccc0 <__gethex+0x1d6>
 800cf0e:	2701      	movs	r7, #1
 800cf10:	e7c7      	b.n	800cea2 <__gethex+0x3b8>
 800cf12:	f016 061f 	ands.w	r6, r6, #31
 800cf16:	d0fa      	beq.n	800cf0e <__gethex+0x424>
 800cf18:	449a      	add	sl, r3
 800cf1a:	f1c6 0620 	rsb	r6, r6, #32
 800cf1e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cf22:	f000 f9b2 	bl	800d28a <__hi0bits>
 800cf26:	42b0      	cmp	r0, r6
 800cf28:	dbe7      	blt.n	800cefa <__gethex+0x410>
 800cf2a:	e7f0      	b.n	800cf0e <__gethex+0x424>

0800cf2c <L_shift>:
 800cf2c:	f1c2 0208 	rsb	r2, r2, #8
 800cf30:	0092      	lsls	r2, r2, #2
 800cf32:	b570      	push	{r4, r5, r6, lr}
 800cf34:	f1c2 0620 	rsb	r6, r2, #32
 800cf38:	6843      	ldr	r3, [r0, #4]
 800cf3a:	6804      	ldr	r4, [r0, #0]
 800cf3c:	fa03 f506 	lsl.w	r5, r3, r6
 800cf40:	432c      	orrs	r4, r5
 800cf42:	40d3      	lsrs	r3, r2
 800cf44:	6004      	str	r4, [r0, #0]
 800cf46:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf4a:	4288      	cmp	r0, r1
 800cf4c:	d3f4      	bcc.n	800cf38 <L_shift+0xc>
 800cf4e:	bd70      	pop	{r4, r5, r6, pc}

0800cf50 <__match>:
 800cf50:	b530      	push	{r4, r5, lr}
 800cf52:	6803      	ldr	r3, [r0, #0]
 800cf54:	3301      	adds	r3, #1
 800cf56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf5a:	b914      	cbnz	r4, 800cf62 <__match+0x12>
 800cf5c:	6003      	str	r3, [r0, #0]
 800cf5e:	2001      	movs	r0, #1
 800cf60:	bd30      	pop	{r4, r5, pc}
 800cf62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cf6a:	2d19      	cmp	r5, #25
 800cf6c:	bf98      	it	ls
 800cf6e:	3220      	addls	r2, #32
 800cf70:	42a2      	cmp	r2, r4
 800cf72:	d0f0      	beq.n	800cf56 <__match+0x6>
 800cf74:	2000      	movs	r0, #0
 800cf76:	e7f3      	b.n	800cf60 <__match+0x10>

0800cf78 <__hexnan>:
 800cf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf7c:	680b      	ldr	r3, [r1, #0]
 800cf7e:	6801      	ldr	r1, [r0, #0]
 800cf80:	115f      	asrs	r7, r3, #5
 800cf82:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800cf86:	f013 031f 	ands.w	r3, r3, #31
 800cf8a:	b087      	sub	sp, #28
 800cf8c:	bf18      	it	ne
 800cf8e:	3704      	addne	r7, #4
 800cf90:	2500      	movs	r5, #0
 800cf92:	1f3e      	subs	r6, r7, #4
 800cf94:	4682      	mov	sl, r0
 800cf96:	4690      	mov	r8, r2
 800cf98:	9301      	str	r3, [sp, #4]
 800cf9a:	f847 5c04 	str.w	r5, [r7, #-4]
 800cf9e:	46b1      	mov	r9, r6
 800cfa0:	4634      	mov	r4, r6
 800cfa2:	9502      	str	r5, [sp, #8]
 800cfa4:	46ab      	mov	fp, r5
 800cfa6:	784a      	ldrb	r2, [r1, #1]
 800cfa8:	1c4b      	adds	r3, r1, #1
 800cfaa:	9303      	str	r3, [sp, #12]
 800cfac:	b342      	cbz	r2, 800d000 <__hexnan+0x88>
 800cfae:	4610      	mov	r0, r2
 800cfb0:	9105      	str	r1, [sp, #20]
 800cfb2:	9204      	str	r2, [sp, #16]
 800cfb4:	f7ff fd84 	bl	800cac0 <__hexdig_fun>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d143      	bne.n	800d044 <__hexnan+0xcc>
 800cfbc:	9a04      	ldr	r2, [sp, #16]
 800cfbe:	9905      	ldr	r1, [sp, #20]
 800cfc0:	2a20      	cmp	r2, #32
 800cfc2:	d818      	bhi.n	800cff6 <__hexnan+0x7e>
 800cfc4:	9b02      	ldr	r3, [sp, #8]
 800cfc6:	459b      	cmp	fp, r3
 800cfc8:	dd13      	ble.n	800cff2 <__hexnan+0x7a>
 800cfca:	454c      	cmp	r4, r9
 800cfcc:	d206      	bcs.n	800cfdc <__hexnan+0x64>
 800cfce:	2d07      	cmp	r5, #7
 800cfd0:	dc04      	bgt.n	800cfdc <__hexnan+0x64>
 800cfd2:	462a      	mov	r2, r5
 800cfd4:	4649      	mov	r1, r9
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f7ff ffa8 	bl	800cf2c <L_shift>
 800cfdc:	4544      	cmp	r4, r8
 800cfde:	d944      	bls.n	800d06a <__hexnan+0xf2>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	f1a4 0904 	sub.w	r9, r4, #4
 800cfe6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfea:	f8cd b008 	str.w	fp, [sp, #8]
 800cfee:	464c      	mov	r4, r9
 800cff0:	461d      	mov	r5, r3
 800cff2:	9903      	ldr	r1, [sp, #12]
 800cff4:	e7d7      	b.n	800cfa6 <__hexnan+0x2e>
 800cff6:	2a29      	cmp	r2, #41	; 0x29
 800cff8:	d14a      	bne.n	800d090 <__hexnan+0x118>
 800cffa:	3102      	adds	r1, #2
 800cffc:	f8ca 1000 	str.w	r1, [sl]
 800d000:	f1bb 0f00 	cmp.w	fp, #0
 800d004:	d044      	beq.n	800d090 <__hexnan+0x118>
 800d006:	454c      	cmp	r4, r9
 800d008:	d206      	bcs.n	800d018 <__hexnan+0xa0>
 800d00a:	2d07      	cmp	r5, #7
 800d00c:	dc04      	bgt.n	800d018 <__hexnan+0xa0>
 800d00e:	462a      	mov	r2, r5
 800d010:	4649      	mov	r1, r9
 800d012:	4620      	mov	r0, r4
 800d014:	f7ff ff8a 	bl	800cf2c <L_shift>
 800d018:	4544      	cmp	r4, r8
 800d01a:	d928      	bls.n	800d06e <__hexnan+0xf6>
 800d01c:	4643      	mov	r3, r8
 800d01e:	f854 2b04 	ldr.w	r2, [r4], #4
 800d022:	f843 2b04 	str.w	r2, [r3], #4
 800d026:	42a6      	cmp	r6, r4
 800d028:	d2f9      	bcs.n	800d01e <__hexnan+0xa6>
 800d02a:	2200      	movs	r2, #0
 800d02c:	f843 2b04 	str.w	r2, [r3], #4
 800d030:	429e      	cmp	r6, r3
 800d032:	d2fb      	bcs.n	800d02c <__hexnan+0xb4>
 800d034:	6833      	ldr	r3, [r6, #0]
 800d036:	b91b      	cbnz	r3, 800d040 <__hexnan+0xc8>
 800d038:	4546      	cmp	r6, r8
 800d03a:	d127      	bne.n	800d08c <__hexnan+0x114>
 800d03c:	2301      	movs	r3, #1
 800d03e:	6033      	str	r3, [r6, #0]
 800d040:	2005      	movs	r0, #5
 800d042:	e026      	b.n	800d092 <__hexnan+0x11a>
 800d044:	3501      	adds	r5, #1
 800d046:	2d08      	cmp	r5, #8
 800d048:	f10b 0b01 	add.w	fp, fp, #1
 800d04c:	dd06      	ble.n	800d05c <__hexnan+0xe4>
 800d04e:	4544      	cmp	r4, r8
 800d050:	d9cf      	bls.n	800cff2 <__hexnan+0x7a>
 800d052:	2300      	movs	r3, #0
 800d054:	f844 3c04 	str.w	r3, [r4, #-4]
 800d058:	2501      	movs	r5, #1
 800d05a:	3c04      	subs	r4, #4
 800d05c:	6822      	ldr	r2, [r4, #0]
 800d05e:	f000 000f 	and.w	r0, r0, #15
 800d062:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d066:	6020      	str	r0, [r4, #0]
 800d068:	e7c3      	b.n	800cff2 <__hexnan+0x7a>
 800d06a:	2508      	movs	r5, #8
 800d06c:	e7c1      	b.n	800cff2 <__hexnan+0x7a>
 800d06e:	9b01      	ldr	r3, [sp, #4]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d0df      	beq.n	800d034 <__hexnan+0xbc>
 800d074:	f04f 32ff 	mov.w	r2, #4294967295
 800d078:	f1c3 0320 	rsb	r3, r3, #32
 800d07c:	fa22 f303 	lsr.w	r3, r2, r3
 800d080:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d084:	401a      	ands	r2, r3
 800d086:	f847 2c04 	str.w	r2, [r7, #-4]
 800d08a:	e7d3      	b.n	800d034 <__hexnan+0xbc>
 800d08c:	3e04      	subs	r6, #4
 800d08e:	e7d1      	b.n	800d034 <__hexnan+0xbc>
 800d090:	2004      	movs	r0, #4
 800d092:	b007      	add	sp, #28
 800d094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d098 <__localeconv_l>:
 800d098:	30f0      	adds	r0, #240	; 0xf0
 800d09a:	4770      	bx	lr

0800d09c <_localeconv_r>:
 800d09c:	4b04      	ldr	r3, [pc, #16]	; (800d0b0 <_localeconv_r+0x14>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6a18      	ldr	r0, [r3, #32]
 800d0a2:	4b04      	ldr	r3, [pc, #16]	; (800d0b4 <_localeconv_r+0x18>)
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	bf08      	it	eq
 800d0a8:	4618      	moveq	r0, r3
 800d0aa:	30f0      	adds	r0, #240	; 0xf0
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	20000094 	.word	0x20000094
 800d0b4:	200000f8 	.word	0x200000f8

0800d0b8 <malloc>:
 800d0b8:	4b02      	ldr	r3, [pc, #8]	; (800d0c4 <malloc+0xc>)
 800d0ba:	4601      	mov	r1, r0
 800d0bc:	6818      	ldr	r0, [r3, #0]
 800d0be:	f000 bc99 	b.w	800d9f4 <_malloc_r>
 800d0c2:	bf00      	nop
 800d0c4:	20000094 	.word	0x20000094

0800d0c8 <__ascii_mbtowc>:
 800d0c8:	b082      	sub	sp, #8
 800d0ca:	b901      	cbnz	r1, 800d0ce <__ascii_mbtowc+0x6>
 800d0cc:	a901      	add	r1, sp, #4
 800d0ce:	b142      	cbz	r2, 800d0e2 <__ascii_mbtowc+0x1a>
 800d0d0:	b14b      	cbz	r3, 800d0e6 <__ascii_mbtowc+0x1e>
 800d0d2:	7813      	ldrb	r3, [r2, #0]
 800d0d4:	600b      	str	r3, [r1, #0]
 800d0d6:	7812      	ldrb	r2, [r2, #0]
 800d0d8:	1c10      	adds	r0, r2, #0
 800d0da:	bf18      	it	ne
 800d0dc:	2001      	movne	r0, #1
 800d0de:	b002      	add	sp, #8
 800d0e0:	4770      	bx	lr
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	e7fb      	b.n	800d0de <__ascii_mbtowc+0x16>
 800d0e6:	f06f 0001 	mvn.w	r0, #1
 800d0ea:	e7f8      	b.n	800d0de <__ascii_mbtowc+0x16>

0800d0ec <memcpy>:
 800d0ec:	b510      	push	{r4, lr}
 800d0ee:	1e43      	subs	r3, r0, #1
 800d0f0:	440a      	add	r2, r1
 800d0f2:	4291      	cmp	r1, r2
 800d0f4:	d100      	bne.n	800d0f8 <memcpy+0xc>
 800d0f6:	bd10      	pop	{r4, pc}
 800d0f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d100:	e7f7      	b.n	800d0f2 <memcpy+0x6>

0800d102 <_Balloc>:
 800d102:	b570      	push	{r4, r5, r6, lr}
 800d104:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d106:	4604      	mov	r4, r0
 800d108:	460e      	mov	r6, r1
 800d10a:	b93d      	cbnz	r5, 800d11c <_Balloc+0x1a>
 800d10c:	2010      	movs	r0, #16
 800d10e:	f7ff ffd3 	bl	800d0b8 <malloc>
 800d112:	6260      	str	r0, [r4, #36]	; 0x24
 800d114:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d118:	6005      	str	r5, [r0, #0]
 800d11a:	60c5      	str	r5, [r0, #12]
 800d11c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d11e:	68eb      	ldr	r3, [r5, #12]
 800d120:	b183      	cbz	r3, 800d144 <_Balloc+0x42>
 800d122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d12a:	b9b8      	cbnz	r0, 800d15c <_Balloc+0x5a>
 800d12c:	2101      	movs	r1, #1
 800d12e:	fa01 f506 	lsl.w	r5, r1, r6
 800d132:	1d6a      	adds	r2, r5, #5
 800d134:	0092      	lsls	r2, r2, #2
 800d136:	4620      	mov	r0, r4
 800d138:	f000 fbff 	bl	800d93a <_calloc_r>
 800d13c:	b160      	cbz	r0, 800d158 <_Balloc+0x56>
 800d13e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d142:	e00e      	b.n	800d162 <_Balloc+0x60>
 800d144:	2221      	movs	r2, #33	; 0x21
 800d146:	2104      	movs	r1, #4
 800d148:	4620      	mov	r0, r4
 800d14a:	f000 fbf6 	bl	800d93a <_calloc_r>
 800d14e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d150:	60e8      	str	r0, [r5, #12]
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d1e4      	bne.n	800d122 <_Balloc+0x20>
 800d158:	2000      	movs	r0, #0
 800d15a:	bd70      	pop	{r4, r5, r6, pc}
 800d15c:	6802      	ldr	r2, [r0, #0]
 800d15e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d162:	2300      	movs	r3, #0
 800d164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d168:	e7f7      	b.n	800d15a <_Balloc+0x58>

0800d16a <_Bfree>:
 800d16a:	b570      	push	{r4, r5, r6, lr}
 800d16c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d16e:	4606      	mov	r6, r0
 800d170:	460d      	mov	r5, r1
 800d172:	b93c      	cbnz	r4, 800d184 <_Bfree+0x1a>
 800d174:	2010      	movs	r0, #16
 800d176:	f7ff ff9f 	bl	800d0b8 <malloc>
 800d17a:	6270      	str	r0, [r6, #36]	; 0x24
 800d17c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d180:	6004      	str	r4, [r0, #0]
 800d182:	60c4      	str	r4, [r0, #12]
 800d184:	b13d      	cbz	r5, 800d196 <_Bfree+0x2c>
 800d186:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d188:	686a      	ldr	r2, [r5, #4]
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d190:	6029      	str	r1, [r5, #0]
 800d192:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d196:	bd70      	pop	{r4, r5, r6, pc}

0800d198 <__multadd>:
 800d198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d19c:	690d      	ldr	r5, [r1, #16]
 800d19e:	461f      	mov	r7, r3
 800d1a0:	4606      	mov	r6, r0
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	f101 0c14 	add.w	ip, r1, #20
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	f8dc 0000 	ldr.w	r0, [ip]
 800d1ae:	b281      	uxth	r1, r0
 800d1b0:	fb02 7101 	mla	r1, r2, r1, r7
 800d1b4:	0c0f      	lsrs	r7, r1, #16
 800d1b6:	0c00      	lsrs	r0, r0, #16
 800d1b8:	fb02 7000 	mla	r0, r2, r0, r7
 800d1bc:	b289      	uxth	r1, r1
 800d1be:	3301      	adds	r3, #1
 800d1c0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d1c4:	429d      	cmp	r5, r3
 800d1c6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d1ca:	f84c 1b04 	str.w	r1, [ip], #4
 800d1ce:	dcec      	bgt.n	800d1aa <__multadd+0x12>
 800d1d0:	b1d7      	cbz	r7, 800d208 <__multadd+0x70>
 800d1d2:	68a3      	ldr	r3, [r4, #8]
 800d1d4:	42ab      	cmp	r3, r5
 800d1d6:	dc12      	bgt.n	800d1fe <__multadd+0x66>
 800d1d8:	6861      	ldr	r1, [r4, #4]
 800d1da:	4630      	mov	r0, r6
 800d1dc:	3101      	adds	r1, #1
 800d1de:	f7ff ff90 	bl	800d102 <_Balloc>
 800d1e2:	6922      	ldr	r2, [r4, #16]
 800d1e4:	3202      	adds	r2, #2
 800d1e6:	f104 010c 	add.w	r1, r4, #12
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	0092      	lsls	r2, r2, #2
 800d1ee:	300c      	adds	r0, #12
 800d1f0:	f7ff ff7c 	bl	800d0ec <memcpy>
 800d1f4:	4621      	mov	r1, r4
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f7ff ffb7 	bl	800d16a <_Bfree>
 800d1fc:	4644      	mov	r4, r8
 800d1fe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d202:	3501      	adds	r5, #1
 800d204:	615f      	str	r7, [r3, #20]
 800d206:	6125      	str	r5, [r4, #16]
 800d208:	4620      	mov	r0, r4
 800d20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d20e <__s2b>:
 800d20e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d212:	460c      	mov	r4, r1
 800d214:	4615      	mov	r5, r2
 800d216:	461f      	mov	r7, r3
 800d218:	2209      	movs	r2, #9
 800d21a:	3308      	adds	r3, #8
 800d21c:	4606      	mov	r6, r0
 800d21e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d222:	2100      	movs	r1, #0
 800d224:	2201      	movs	r2, #1
 800d226:	429a      	cmp	r2, r3
 800d228:	db20      	blt.n	800d26c <__s2b+0x5e>
 800d22a:	4630      	mov	r0, r6
 800d22c:	f7ff ff69 	bl	800d102 <_Balloc>
 800d230:	9b08      	ldr	r3, [sp, #32]
 800d232:	6143      	str	r3, [r0, #20]
 800d234:	2d09      	cmp	r5, #9
 800d236:	f04f 0301 	mov.w	r3, #1
 800d23a:	6103      	str	r3, [r0, #16]
 800d23c:	dd19      	ble.n	800d272 <__s2b+0x64>
 800d23e:	f104 0809 	add.w	r8, r4, #9
 800d242:	46c1      	mov	r9, r8
 800d244:	442c      	add	r4, r5
 800d246:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d24a:	4601      	mov	r1, r0
 800d24c:	3b30      	subs	r3, #48	; 0x30
 800d24e:	220a      	movs	r2, #10
 800d250:	4630      	mov	r0, r6
 800d252:	f7ff ffa1 	bl	800d198 <__multadd>
 800d256:	45a1      	cmp	r9, r4
 800d258:	d1f5      	bne.n	800d246 <__s2b+0x38>
 800d25a:	eb08 0405 	add.w	r4, r8, r5
 800d25e:	3c08      	subs	r4, #8
 800d260:	1b2d      	subs	r5, r5, r4
 800d262:	1963      	adds	r3, r4, r5
 800d264:	42bb      	cmp	r3, r7
 800d266:	db07      	blt.n	800d278 <__s2b+0x6a>
 800d268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d26c:	0052      	lsls	r2, r2, #1
 800d26e:	3101      	adds	r1, #1
 800d270:	e7d9      	b.n	800d226 <__s2b+0x18>
 800d272:	340a      	adds	r4, #10
 800d274:	2509      	movs	r5, #9
 800d276:	e7f3      	b.n	800d260 <__s2b+0x52>
 800d278:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d27c:	4601      	mov	r1, r0
 800d27e:	3b30      	subs	r3, #48	; 0x30
 800d280:	220a      	movs	r2, #10
 800d282:	4630      	mov	r0, r6
 800d284:	f7ff ff88 	bl	800d198 <__multadd>
 800d288:	e7eb      	b.n	800d262 <__s2b+0x54>

0800d28a <__hi0bits>:
 800d28a:	0c02      	lsrs	r2, r0, #16
 800d28c:	0412      	lsls	r2, r2, #16
 800d28e:	4603      	mov	r3, r0
 800d290:	b9b2      	cbnz	r2, 800d2c0 <__hi0bits+0x36>
 800d292:	0403      	lsls	r3, r0, #16
 800d294:	2010      	movs	r0, #16
 800d296:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d29a:	bf04      	itt	eq
 800d29c:	021b      	lsleq	r3, r3, #8
 800d29e:	3008      	addeq	r0, #8
 800d2a0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d2a4:	bf04      	itt	eq
 800d2a6:	011b      	lsleq	r3, r3, #4
 800d2a8:	3004      	addeq	r0, #4
 800d2aa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d2ae:	bf04      	itt	eq
 800d2b0:	009b      	lsleq	r3, r3, #2
 800d2b2:	3002      	addeq	r0, #2
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	db06      	blt.n	800d2c6 <__hi0bits+0x3c>
 800d2b8:	005b      	lsls	r3, r3, #1
 800d2ba:	d503      	bpl.n	800d2c4 <__hi0bits+0x3a>
 800d2bc:	3001      	adds	r0, #1
 800d2be:	4770      	bx	lr
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	e7e8      	b.n	800d296 <__hi0bits+0xc>
 800d2c4:	2020      	movs	r0, #32
 800d2c6:	4770      	bx	lr

0800d2c8 <__lo0bits>:
 800d2c8:	6803      	ldr	r3, [r0, #0]
 800d2ca:	f013 0207 	ands.w	r2, r3, #7
 800d2ce:	4601      	mov	r1, r0
 800d2d0:	d00b      	beq.n	800d2ea <__lo0bits+0x22>
 800d2d2:	07da      	lsls	r2, r3, #31
 800d2d4:	d423      	bmi.n	800d31e <__lo0bits+0x56>
 800d2d6:	0798      	lsls	r0, r3, #30
 800d2d8:	bf49      	itett	mi
 800d2da:	085b      	lsrmi	r3, r3, #1
 800d2dc:	089b      	lsrpl	r3, r3, #2
 800d2de:	2001      	movmi	r0, #1
 800d2e0:	600b      	strmi	r3, [r1, #0]
 800d2e2:	bf5c      	itt	pl
 800d2e4:	600b      	strpl	r3, [r1, #0]
 800d2e6:	2002      	movpl	r0, #2
 800d2e8:	4770      	bx	lr
 800d2ea:	b298      	uxth	r0, r3
 800d2ec:	b9a8      	cbnz	r0, 800d31a <__lo0bits+0x52>
 800d2ee:	0c1b      	lsrs	r3, r3, #16
 800d2f0:	2010      	movs	r0, #16
 800d2f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d2f6:	bf04      	itt	eq
 800d2f8:	0a1b      	lsreq	r3, r3, #8
 800d2fa:	3008      	addeq	r0, #8
 800d2fc:	071a      	lsls	r2, r3, #28
 800d2fe:	bf04      	itt	eq
 800d300:	091b      	lsreq	r3, r3, #4
 800d302:	3004      	addeq	r0, #4
 800d304:	079a      	lsls	r2, r3, #30
 800d306:	bf04      	itt	eq
 800d308:	089b      	lsreq	r3, r3, #2
 800d30a:	3002      	addeq	r0, #2
 800d30c:	07da      	lsls	r2, r3, #31
 800d30e:	d402      	bmi.n	800d316 <__lo0bits+0x4e>
 800d310:	085b      	lsrs	r3, r3, #1
 800d312:	d006      	beq.n	800d322 <__lo0bits+0x5a>
 800d314:	3001      	adds	r0, #1
 800d316:	600b      	str	r3, [r1, #0]
 800d318:	4770      	bx	lr
 800d31a:	4610      	mov	r0, r2
 800d31c:	e7e9      	b.n	800d2f2 <__lo0bits+0x2a>
 800d31e:	2000      	movs	r0, #0
 800d320:	4770      	bx	lr
 800d322:	2020      	movs	r0, #32
 800d324:	4770      	bx	lr

0800d326 <__i2b>:
 800d326:	b510      	push	{r4, lr}
 800d328:	460c      	mov	r4, r1
 800d32a:	2101      	movs	r1, #1
 800d32c:	f7ff fee9 	bl	800d102 <_Balloc>
 800d330:	2201      	movs	r2, #1
 800d332:	6144      	str	r4, [r0, #20]
 800d334:	6102      	str	r2, [r0, #16]
 800d336:	bd10      	pop	{r4, pc}

0800d338 <__multiply>:
 800d338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33c:	4614      	mov	r4, r2
 800d33e:	690a      	ldr	r2, [r1, #16]
 800d340:	6923      	ldr	r3, [r4, #16]
 800d342:	429a      	cmp	r2, r3
 800d344:	bfb8      	it	lt
 800d346:	460b      	movlt	r3, r1
 800d348:	4688      	mov	r8, r1
 800d34a:	bfbc      	itt	lt
 800d34c:	46a0      	movlt	r8, r4
 800d34e:	461c      	movlt	r4, r3
 800d350:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d354:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d358:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d35c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d360:	eb07 0609 	add.w	r6, r7, r9
 800d364:	42b3      	cmp	r3, r6
 800d366:	bfb8      	it	lt
 800d368:	3101      	addlt	r1, #1
 800d36a:	f7ff feca 	bl	800d102 <_Balloc>
 800d36e:	f100 0514 	add.w	r5, r0, #20
 800d372:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d376:	462b      	mov	r3, r5
 800d378:	2200      	movs	r2, #0
 800d37a:	4573      	cmp	r3, lr
 800d37c:	d316      	bcc.n	800d3ac <__multiply+0x74>
 800d37e:	f104 0214 	add.w	r2, r4, #20
 800d382:	f108 0114 	add.w	r1, r8, #20
 800d386:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d38a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	9b00      	ldr	r3, [sp, #0]
 800d392:	9201      	str	r2, [sp, #4]
 800d394:	4293      	cmp	r3, r2
 800d396:	d80c      	bhi.n	800d3b2 <__multiply+0x7a>
 800d398:	2e00      	cmp	r6, #0
 800d39a:	dd03      	ble.n	800d3a4 <__multiply+0x6c>
 800d39c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d05d      	beq.n	800d460 <__multiply+0x128>
 800d3a4:	6106      	str	r6, [r0, #16]
 800d3a6:	b003      	add	sp, #12
 800d3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ac:	f843 2b04 	str.w	r2, [r3], #4
 800d3b0:	e7e3      	b.n	800d37a <__multiply+0x42>
 800d3b2:	f8b2 b000 	ldrh.w	fp, [r2]
 800d3b6:	f1bb 0f00 	cmp.w	fp, #0
 800d3ba:	d023      	beq.n	800d404 <__multiply+0xcc>
 800d3bc:	4689      	mov	r9, r1
 800d3be:	46ac      	mov	ip, r5
 800d3c0:	f04f 0800 	mov.w	r8, #0
 800d3c4:	f859 4b04 	ldr.w	r4, [r9], #4
 800d3c8:	f8dc a000 	ldr.w	sl, [ip]
 800d3cc:	b2a3      	uxth	r3, r4
 800d3ce:	fa1f fa8a 	uxth.w	sl, sl
 800d3d2:	fb0b a303 	mla	r3, fp, r3, sl
 800d3d6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d3da:	f8dc 4000 	ldr.w	r4, [ip]
 800d3de:	4443      	add	r3, r8
 800d3e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d3e4:	fb0b 840a 	mla	r4, fp, sl, r8
 800d3e8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d3ec:	46e2      	mov	sl, ip
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d3f4:	454f      	cmp	r7, r9
 800d3f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d3fa:	f84a 3b04 	str.w	r3, [sl], #4
 800d3fe:	d82b      	bhi.n	800d458 <__multiply+0x120>
 800d400:	f8cc 8004 	str.w	r8, [ip, #4]
 800d404:	9b01      	ldr	r3, [sp, #4]
 800d406:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d40a:	3204      	adds	r2, #4
 800d40c:	f1ba 0f00 	cmp.w	sl, #0
 800d410:	d020      	beq.n	800d454 <__multiply+0x11c>
 800d412:	682b      	ldr	r3, [r5, #0]
 800d414:	4689      	mov	r9, r1
 800d416:	46a8      	mov	r8, r5
 800d418:	f04f 0b00 	mov.w	fp, #0
 800d41c:	f8b9 c000 	ldrh.w	ip, [r9]
 800d420:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d424:	fb0a 440c 	mla	r4, sl, ip, r4
 800d428:	445c      	add	r4, fp
 800d42a:	46c4      	mov	ip, r8
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d432:	f84c 3b04 	str.w	r3, [ip], #4
 800d436:	f859 3b04 	ldr.w	r3, [r9], #4
 800d43a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d43e:	0c1b      	lsrs	r3, r3, #16
 800d440:	fb0a b303 	mla	r3, sl, r3, fp
 800d444:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d448:	454f      	cmp	r7, r9
 800d44a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d44e:	d805      	bhi.n	800d45c <__multiply+0x124>
 800d450:	f8c8 3004 	str.w	r3, [r8, #4]
 800d454:	3504      	adds	r5, #4
 800d456:	e79b      	b.n	800d390 <__multiply+0x58>
 800d458:	46d4      	mov	ip, sl
 800d45a:	e7b3      	b.n	800d3c4 <__multiply+0x8c>
 800d45c:	46e0      	mov	r8, ip
 800d45e:	e7dd      	b.n	800d41c <__multiply+0xe4>
 800d460:	3e01      	subs	r6, #1
 800d462:	e799      	b.n	800d398 <__multiply+0x60>

0800d464 <__pow5mult>:
 800d464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d468:	4615      	mov	r5, r2
 800d46a:	f012 0203 	ands.w	r2, r2, #3
 800d46e:	4606      	mov	r6, r0
 800d470:	460f      	mov	r7, r1
 800d472:	d007      	beq.n	800d484 <__pow5mult+0x20>
 800d474:	3a01      	subs	r2, #1
 800d476:	4c21      	ldr	r4, [pc, #132]	; (800d4fc <__pow5mult+0x98>)
 800d478:	2300      	movs	r3, #0
 800d47a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d47e:	f7ff fe8b 	bl	800d198 <__multadd>
 800d482:	4607      	mov	r7, r0
 800d484:	10ad      	asrs	r5, r5, #2
 800d486:	d035      	beq.n	800d4f4 <__pow5mult+0x90>
 800d488:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d48a:	b93c      	cbnz	r4, 800d49c <__pow5mult+0x38>
 800d48c:	2010      	movs	r0, #16
 800d48e:	f7ff fe13 	bl	800d0b8 <malloc>
 800d492:	6270      	str	r0, [r6, #36]	; 0x24
 800d494:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d498:	6004      	str	r4, [r0, #0]
 800d49a:	60c4      	str	r4, [r0, #12]
 800d49c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d4a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4a4:	b94c      	cbnz	r4, 800d4ba <__pow5mult+0x56>
 800d4a6:	f240 2171 	movw	r1, #625	; 0x271
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	f7ff ff3b 	bl	800d326 <__i2b>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4b6:	4604      	mov	r4, r0
 800d4b8:	6003      	str	r3, [r0, #0]
 800d4ba:	f04f 0800 	mov.w	r8, #0
 800d4be:	07eb      	lsls	r3, r5, #31
 800d4c0:	d50a      	bpl.n	800d4d8 <__pow5mult+0x74>
 800d4c2:	4639      	mov	r1, r7
 800d4c4:	4622      	mov	r2, r4
 800d4c6:	4630      	mov	r0, r6
 800d4c8:	f7ff ff36 	bl	800d338 <__multiply>
 800d4cc:	4639      	mov	r1, r7
 800d4ce:	4681      	mov	r9, r0
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	f7ff fe4a 	bl	800d16a <_Bfree>
 800d4d6:	464f      	mov	r7, r9
 800d4d8:	106d      	asrs	r5, r5, #1
 800d4da:	d00b      	beq.n	800d4f4 <__pow5mult+0x90>
 800d4dc:	6820      	ldr	r0, [r4, #0]
 800d4de:	b938      	cbnz	r0, 800d4f0 <__pow5mult+0x8c>
 800d4e0:	4622      	mov	r2, r4
 800d4e2:	4621      	mov	r1, r4
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f7ff ff27 	bl	800d338 <__multiply>
 800d4ea:	6020      	str	r0, [r4, #0]
 800d4ec:	f8c0 8000 	str.w	r8, [r0]
 800d4f0:	4604      	mov	r4, r0
 800d4f2:	e7e4      	b.n	800d4be <__pow5mult+0x5a>
 800d4f4:	4638      	mov	r0, r7
 800d4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4fa:	bf00      	nop
 800d4fc:	0800ec70 	.word	0x0800ec70

0800d500 <__lshift>:
 800d500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d504:	460c      	mov	r4, r1
 800d506:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d50a:	6923      	ldr	r3, [r4, #16]
 800d50c:	6849      	ldr	r1, [r1, #4]
 800d50e:	eb0a 0903 	add.w	r9, sl, r3
 800d512:	68a3      	ldr	r3, [r4, #8]
 800d514:	4607      	mov	r7, r0
 800d516:	4616      	mov	r6, r2
 800d518:	f109 0501 	add.w	r5, r9, #1
 800d51c:	42ab      	cmp	r3, r5
 800d51e:	db32      	blt.n	800d586 <__lshift+0x86>
 800d520:	4638      	mov	r0, r7
 800d522:	f7ff fdee 	bl	800d102 <_Balloc>
 800d526:	2300      	movs	r3, #0
 800d528:	4680      	mov	r8, r0
 800d52a:	f100 0114 	add.w	r1, r0, #20
 800d52e:	461a      	mov	r2, r3
 800d530:	4553      	cmp	r3, sl
 800d532:	db2b      	blt.n	800d58c <__lshift+0x8c>
 800d534:	6920      	ldr	r0, [r4, #16]
 800d536:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d53a:	f104 0314 	add.w	r3, r4, #20
 800d53e:	f016 021f 	ands.w	r2, r6, #31
 800d542:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d546:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d54a:	d025      	beq.n	800d598 <__lshift+0x98>
 800d54c:	f1c2 0e20 	rsb	lr, r2, #32
 800d550:	2000      	movs	r0, #0
 800d552:	681e      	ldr	r6, [r3, #0]
 800d554:	468a      	mov	sl, r1
 800d556:	4096      	lsls	r6, r2
 800d558:	4330      	orrs	r0, r6
 800d55a:	f84a 0b04 	str.w	r0, [sl], #4
 800d55e:	f853 0b04 	ldr.w	r0, [r3], #4
 800d562:	459c      	cmp	ip, r3
 800d564:	fa20 f00e 	lsr.w	r0, r0, lr
 800d568:	d814      	bhi.n	800d594 <__lshift+0x94>
 800d56a:	6048      	str	r0, [r1, #4]
 800d56c:	b108      	cbz	r0, 800d572 <__lshift+0x72>
 800d56e:	f109 0502 	add.w	r5, r9, #2
 800d572:	3d01      	subs	r5, #1
 800d574:	4638      	mov	r0, r7
 800d576:	f8c8 5010 	str.w	r5, [r8, #16]
 800d57a:	4621      	mov	r1, r4
 800d57c:	f7ff fdf5 	bl	800d16a <_Bfree>
 800d580:	4640      	mov	r0, r8
 800d582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d586:	3101      	adds	r1, #1
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	e7c7      	b.n	800d51c <__lshift+0x1c>
 800d58c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d590:	3301      	adds	r3, #1
 800d592:	e7cd      	b.n	800d530 <__lshift+0x30>
 800d594:	4651      	mov	r1, sl
 800d596:	e7dc      	b.n	800d552 <__lshift+0x52>
 800d598:	3904      	subs	r1, #4
 800d59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d59e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5a2:	459c      	cmp	ip, r3
 800d5a4:	d8f9      	bhi.n	800d59a <__lshift+0x9a>
 800d5a6:	e7e4      	b.n	800d572 <__lshift+0x72>

0800d5a8 <__mcmp>:
 800d5a8:	6903      	ldr	r3, [r0, #16]
 800d5aa:	690a      	ldr	r2, [r1, #16]
 800d5ac:	1a9b      	subs	r3, r3, r2
 800d5ae:	b530      	push	{r4, r5, lr}
 800d5b0:	d10c      	bne.n	800d5cc <__mcmp+0x24>
 800d5b2:	0092      	lsls	r2, r2, #2
 800d5b4:	3014      	adds	r0, #20
 800d5b6:	3114      	adds	r1, #20
 800d5b8:	1884      	adds	r4, r0, r2
 800d5ba:	4411      	add	r1, r2
 800d5bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d5c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d5c4:	4295      	cmp	r5, r2
 800d5c6:	d003      	beq.n	800d5d0 <__mcmp+0x28>
 800d5c8:	d305      	bcc.n	800d5d6 <__mcmp+0x2e>
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	bd30      	pop	{r4, r5, pc}
 800d5d0:	42a0      	cmp	r0, r4
 800d5d2:	d3f3      	bcc.n	800d5bc <__mcmp+0x14>
 800d5d4:	e7fa      	b.n	800d5cc <__mcmp+0x24>
 800d5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5da:	e7f7      	b.n	800d5cc <__mcmp+0x24>

0800d5dc <__mdiff>:
 800d5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5e0:	460d      	mov	r5, r1
 800d5e2:	4607      	mov	r7, r0
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	4614      	mov	r4, r2
 800d5ea:	f7ff ffdd 	bl	800d5a8 <__mcmp>
 800d5ee:	1e06      	subs	r6, r0, #0
 800d5f0:	d108      	bne.n	800d604 <__mdiff+0x28>
 800d5f2:	4631      	mov	r1, r6
 800d5f4:	4638      	mov	r0, r7
 800d5f6:	f7ff fd84 	bl	800d102 <_Balloc>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d604:	bfa4      	itt	ge
 800d606:	4623      	movge	r3, r4
 800d608:	462c      	movge	r4, r5
 800d60a:	4638      	mov	r0, r7
 800d60c:	6861      	ldr	r1, [r4, #4]
 800d60e:	bfa6      	itte	ge
 800d610:	461d      	movge	r5, r3
 800d612:	2600      	movge	r6, #0
 800d614:	2601      	movlt	r6, #1
 800d616:	f7ff fd74 	bl	800d102 <_Balloc>
 800d61a:	692b      	ldr	r3, [r5, #16]
 800d61c:	60c6      	str	r6, [r0, #12]
 800d61e:	6926      	ldr	r6, [r4, #16]
 800d620:	f105 0914 	add.w	r9, r5, #20
 800d624:	f104 0214 	add.w	r2, r4, #20
 800d628:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d62c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d630:	f100 0514 	add.w	r5, r0, #20
 800d634:	f04f 0e00 	mov.w	lr, #0
 800d638:	f852 ab04 	ldr.w	sl, [r2], #4
 800d63c:	f859 4b04 	ldr.w	r4, [r9], #4
 800d640:	fa1e f18a 	uxtah	r1, lr, sl
 800d644:	b2a3      	uxth	r3, r4
 800d646:	1ac9      	subs	r1, r1, r3
 800d648:	0c23      	lsrs	r3, r4, #16
 800d64a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d64e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d652:	b289      	uxth	r1, r1
 800d654:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d658:	45c8      	cmp	r8, r9
 800d65a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d65e:	4694      	mov	ip, r2
 800d660:	f845 3b04 	str.w	r3, [r5], #4
 800d664:	d8e8      	bhi.n	800d638 <__mdiff+0x5c>
 800d666:	45bc      	cmp	ip, r7
 800d668:	d304      	bcc.n	800d674 <__mdiff+0x98>
 800d66a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d66e:	b183      	cbz	r3, 800d692 <__mdiff+0xb6>
 800d670:	6106      	str	r6, [r0, #16]
 800d672:	e7c5      	b.n	800d600 <__mdiff+0x24>
 800d674:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d678:	fa1e f381 	uxtah	r3, lr, r1
 800d67c:	141a      	asrs	r2, r3, #16
 800d67e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d682:	b29b      	uxth	r3, r3
 800d684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d688:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d68c:	f845 3b04 	str.w	r3, [r5], #4
 800d690:	e7e9      	b.n	800d666 <__mdiff+0x8a>
 800d692:	3e01      	subs	r6, #1
 800d694:	e7e9      	b.n	800d66a <__mdiff+0x8e>
	...

0800d698 <__ulp>:
 800d698:	4b12      	ldr	r3, [pc, #72]	; (800d6e4 <__ulp+0x4c>)
 800d69a:	ee10 2a90 	vmov	r2, s1
 800d69e:	401a      	ands	r2, r3
 800d6a0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	dd04      	ble.n	800d6b2 <__ulp+0x1a>
 800d6a8:	2000      	movs	r0, #0
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	ec41 0b10 	vmov	d0, r0, r1
 800d6b0:	4770      	bx	lr
 800d6b2:	425b      	negs	r3, r3
 800d6b4:	151b      	asrs	r3, r3, #20
 800d6b6:	2b13      	cmp	r3, #19
 800d6b8:	f04f 0000 	mov.w	r0, #0
 800d6bc:	f04f 0100 	mov.w	r1, #0
 800d6c0:	dc04      	bgt.n	800d6cc <__ulp+0x34>
 800d6c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d6c6:	fa42 f103 	asr.w	r1, r2, r3
 800d6ca:	e7ef      	b.n	800d6ac <__ulp+0x14>
 800d6cc:	3b14      	subs	r3, #20
 800d6ce:	2b1e      	cmp	r3, #30
 800d6d0:	f04f 0201 	mov.w	r2, #1
 800d6d4:	bfda      	itte	le
 800d6d6:	f1c3 031f 	rsble	r3, r3, #31
 800d6da:	fa02 f303 	lslle.w	r3, r2, r3
 800d6de:	4613      	movgt	r3, r2
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	e7e3      	b.n	800d6ac <__ulp+0x14>
 800d6e4:	7ff00000 	.word	0x7ff00000

0800d6e8 <__b2d>:
 800d6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ea:	6905      	ldr	r5, [r0, #16]
 800d6ec:	f100 0714 	add.w	r7, r0, #20
 800d6f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d6f4:	1f2e      	subs	r6, r5, #4
 800d6f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f7ff fdc5 	bl	800d28a <__hi0bits>
 800d700:	f1c0 0320 	rsb	r3, r0, #32
 800d704:	280a      	cmp	r0, #10
 800d706:	600b      	str	r3, [r1, #0]
 800d708:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d780 <__b2d+0x98>
 800d70c:	dc14      	bgt.n	800d738 <__b2d+0x50>
 800d70e:	f1c0 0e0b 	rsb	lr, r0, #11
 800d712:	fa24 f10e 	lsr.w	r1, r4, lr
 800d716:	42b7      	cmp	r7, r6
 800d718:	ea41 030c 	orr.w	r3, r1, ip
 800d71c:	bf34      	ite	cc
 800d71e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d722:	2100      	movcs	r1, #0
 800d724:	3015      	adds	r0, #21
 800d726:	fa04 f000 	lsl.w	r0, r4, r0
 800d72a:	fa21 f10e 	lsr.w	r1, r1, lr
 800d72e:	ea40 0201 	orr.w	r2, r0, r1
 800d732:	ec43 2b10 	vmov	d0, r2, r3
 800d736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d738:	42b7      	cmp	r7, r6
 800d73a:	bf3a      	itte	cc
 800d73c:	f1a5 0608 	subcc.w	r6, r5, #8
 800d740:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d744:	2100      	movcs	r1, #0
 800d746:	380b      	subs	r0, #11
 800d748:	d015      	beq.n	800d776 <__b2d+0x8e>
 800d74a:	4084      	lsls	r4, r0
 800d74c:	f1c0 0520 	rsb	r5, r0, #32
 800d750:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d754:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d758:	42be      	cmp	r6, r7
 800d75a:	fa21 fc05 	lsr.w	ip, r1, r5
 800d75e:	ea44 030c 	orr.w	r3, r4, ip
 800d762:	bf8c      	ite	hi
 800d764:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d768:	2400      	movls	r4, #0
 800d76a:	fa01 f000 	lsl.w	r0, r1, r0
 800d76e:	40ec      	lsrs	r4, r5
 800d770:	ea40 0204 	orr.w	r2, r0, r4
 800d774:	e7dd      	b.n	800d732 <__b2d+0x4a>
 800d776:	ea44 030c 	orr.w	r3, r4, ip
 800d77a:	460a      	mov	r2, r1
 800d77c:	e7d9      	b.n	800d732 <__b2d+0x4a>
 800d77e:	bf00      	nop
 800d780:	3ff00000 	.word	0x3ff00000

0800d784 <__d2b>:
 800d784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d788:	460e      	mov	r6, r1
 800d78a:	2101      	movs	r1, #1
 800d78c:	ec59 8b10 	vmov	r8, r9, d0
 800d790:	4615      	mov	r5, r2
 800d792:	f7ff fcb6 	bl	800d102 <_Balloc>
 800d796:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d79a:	4607      	mov	r7, r0
 800d79c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7a0:	bb34      	cbnz	r4, 800d7f0 <__d2b+0x6c>
 800d7a2:	9301      	str	r3, [sp, #4]
 800d7a4:	f1b8 0300 	subs.w	r3, r8, #0
 800d7a8:	d027      	beq.n	800d7fa <__d2b+0x76>
 800d7aa:	a802      	add	r0, sp, #8
 800d7ac:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d7b0:	f7ff fd8a 	bl	800d2c8 <__lo0bits>
 800d7b4:	9900      	ldr	r1, [sp, #0]
 800d7b6:	b1f0      	cbz	r0, 800d7f6 <__d2b+0x72>
 800d7b8:	9a01      	ldr	r2, [sp, #4]
 800d7ba:	f1c0 0320 	rsb	r3, r0, #32
 800d7be:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c2:	430b      	orrs	r3, r1
 800d7c4:	40c2      	lsrs	r2, r0
 800d7c6:	617b      	str	r3, [r7, #20]
 800d7c8:	9201      	str	r2, [sp, #4]
 800d7ca:	9b01      	ldr	r3, [sp, #4]
 800d7cc:	61bb      	str	r3, [r7, #24]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	bf14      	ite	ne
 800d7d2:	2102      	movne	r1, #2
 800d7d4:	2101      	moveq	r1, #1
 800d7d6:	6139      	str	r1, [r7, #16]
 800d7d8:	b1c4      	cbz	r4, 800d80c <__d2b+0x88>
 800d7da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d7de:	4404      	add	r4, r0
 800d7e0:	6034      	str	r4, [r6, #0]
 800d7e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7e6:	6028      	str	r0, [r5, #0]
 800d7e8:	4638      	mov	r0, r7
 800d7ea:	b003      	add	sp, #12
 800d7ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7f4:	e7d5      	b.n	800d7a2 <__d2b+0x1e>
 800d7f6:	6179      	str	r1, [r7, #20]
 800d7f8:	e7e7      	b.n	800d7ca <__d2b+0x46>
 800d7fa:	a801      	add	r0, sp, #4
 800d7fc:	f7ff fd64 	bl	800d2c8 <__lo0bits>
 800d800:	9b01      	ldr	r3, [sp, #4]
 800d802:	617b      	str	r3, [r7, #20]
 800d804:	2101      	movs	r1, #1
 800d806:	6139      	str	r1, [r7, #16]
 800d808:	3020      	adds	r0, #32
 800d80a:	e7e5      	b.n	800d7d8 <__d2b+0x54>
 800d80c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d810:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d814:	6030      	str	r0, [r6, #0]
 800d816:	6918      	ldr	r0, [r3, #16]
 800d818:	f7ff fd37 	bl	800d28a <__hi0bits>
 800d81c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d820:	e7e1      	b.n	800d7e6 <__d2b+0x62>

0800d822 <__ratio>:
 800d822:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d826:	4688      	mov	r8, r1
 800d828:	4669      	mov	r1, sp
 800d82a:	4681      	mov	r9, r0
 800d82c:	f7ff ff5c 	bl	800d6e8 <__b2d>
 800d830:	a901      	add	r1, sp, #4
 800d832:	4640      	mov	r0, r8
 800d834:	ec57 6b10 	vmov	r6, r7, d0
 800d838:	f7ff ff56 	bl	800d6e8 <__b2d>
 800d83c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d840:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d844:	eba3 0c02 	sub.w	ip, r3, r2
 800d848:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d84c:	1a9b      	subs	r3, r3, r2
 800d84e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d852:	ec5b ab10 	vmov	sl, fp, d0
 800d856:	2b00      	cmp	r3, #0
 800d858:	bfce      	itee	gt
 800d85a:	463a      	movgt	r2, r7
 800d85c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d860:	465a      	movle	r2, fp
 800d862:	4659      	mov	r1, fp
 800d864:	463d      	mov	r5, r7
 800d866:	bfd4      	ite	le
 800d868:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d86c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d870:	4630      	mov	r0, r6
 800d872:	ee10 2a10 	vmov	r2, s0
 800d876:	460b      	mov	r3, r1
 800d878:	4629      	mov	r1, r5
 800d87a:	f7f2 ffef 	bl	800085c <__aeabi_ddiv>
 800d87e:	ec41 0b10 	vmov	d0, r0, r1
 800d882:	b003      	add	sp, #12
 800d884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d888 <_mprec_log10>:
 800d888:	2817      	cmp	r0, #23
 800d88a:	b5d0      	push	{r4, r6, r7, lr}
 800d88c:	4604      	mov	r4, r0
 800d88e:	dc07      	bgt.n	800d8a0 <_mprec_log10+0x18>
 800d890:	4b09      	ldr	r3, [pc, #36]	; (800d8b8 <_mprec_log10+0x30>)
 800d892:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800d896:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d89a:	ec41 0b10 	vmov	d0, r0, r1
 800d89e:	bdd0      	pop	{r4, r6, r7, pc}
 800d8a0:	4906      	ldr	r1, [pc, #24]	; (800d8bc <_mprec_log10+0x34>)
 800d8a2:	4f07      	ldr	r7, [pc, #28]	; (800d8c0 <_mprec_log10+0x38>)
 800d8a4:	2000      	movs	r0, #0
 800d8a6:	2600      	movs	r6, #0
 800d8a8:	4632      	mov	r2, r6
 800d8aa:	463b      	mov	r3, r7
 800d8ac:	f7f2 feac 	bl	8000608 <__aeabi_dmul>
 800d8b0:	3c01      	subs	r4, #1
 800d8b2:	d1f9      	bne.n	800d8a8 <_mprec_log10+0x20>
 800d8b4:	e7f1      	b.n	800d89a <_mprec_log10+0x12>
 800d8b6:	bf00      	nop
 800d8b8:	0800eba8 	.word	0x0800eba8
 800d8bc:	3ff00000 	.word	0x3ff00000
 800d8c0:	40240000 	.word	0x40240000

0800d8c4 <__copybits>:
 800d8c4:	3901      	subs	r1, #1
 800d8c6:	b510      	push	{r4, lr}
 800d8c8:	1149      	asrs	r1, r1, #5
 800d8ca:	6914      	ldr	r4, [r2, #16]
 800d8cc:	3101      	adds	r1, #1
 800d8ce:	f102 0314 	add.w	r3, r2, #20
 800d8d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d8d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8da:	42a3      	cmp	r3, r4
 800d8dc:	4602      	mov	r2, r0
 800d8de:	d303      	bcc.n	800d8e8 <__copybits+0x24>
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	428a      	cmp	r2, r1
 800d8e4:	d305      	bcc.n	800d8f2 <__copybits+0x2e>
 800d8e6:	bd10      	pop	{r4, pc}
 800d8e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ec:	f840 2b04 	str.w	r2, [r0], #4
 800d8f0:	e7f3      	b.n	800d8da <__copybits+0x16>
 800d8f2:	f842 3b04 	str.w	r3, [r2], #4
 800d8f6:	e7f4      	b.n	800d8e2 <__copybits+0x1e>

0800d8f8 <__any_on>:
 800d8f8:	f100 0214 	add.w	r2, r0, #20
 800d8fc:	6900      	ldr	r0, [r0, #16]
 800d8fe:	114b      	asrs	r3, r1, #5
 800d900:	4298      	cmp	r0, r3
 800d902:	b510      	push	{r4, lr}
 800d904:	db11      	blt.n	800d92a <__any_on+0x32>
 800d906:	dd0a      	ble.n	800d91e <__any_on+0x26>
 800d908:	f011 011f 	ands.w	r1, r1, #31
 800d90c:	d007      	beq.n	800d91e <__any_on+0x26>
 800d90e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d912:	fa24 f001 	lsr.w	r0, r4, r1
 800d916:	fa00 f101 	lsl.w	r1, r0, r1
 800d91a:	428c      	cmp	r4, r1
 800d91c:	d10b      	bne.n	800d936 <__any_on+0x3e>
 800d91e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d922:	4293      	cmp	r3, r2
 800d924:	d803      	bhi.n	800d92e <__any_on+0x36>
 800d926:	2000      	movs	r0, #0
 800d928:	bd10      	pop	{r4, pc}
 800d92a:	4603      	mov	r3, r0
 800d92c:	e7f7      	b.n	800d91e <__any_on+0x26>
 800d92e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d932:	2900      	cmp	r1, #0
 800d934:	d0f5      	beq.n	800d922 <__any_on+0x2a>
 800d936:	2001      	movs	r0, #1
 800d938:	e7f6      	b.n	800d928 <__any_on+0x30>

0800d93a <_calloc_r>:
 800d93a:	b538      	push	{r3, r4, r5, lr}
 800d93c:	fb02 f401 	mul.w	r4, r2, r1
 800d940:	4621      	mov	r1, r4
 800d942:	f000 f857 	bl	800d9f4 <_malloc_r>
 800d946:	4605      	mov	r5, r0
 800d948:	b118      	cbz	r0, 800d952 <_calloc_r+0x18>
 800d94a:	4622      	mov	r2, r4
 800d94c:	2100      	movs	r1, #0
 800d94e:	f7fc fdfd 	bl	800a54c <memset>
 800d952:	4628      	mov	r0, r5
 800d954:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d958 <_free_r>:
 800d958:	b538      	push	{r3, r4, r5, lr}
 800d95a:	4605      	mov	r5, r0
 800d95c:	2900      	cmp	r1, #0
 800d95e:	d045      	beq.n	800d9ec <_free_r+0x94>
 800d960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d964:	1f0c      	subs	r4, r1, #4
 800d966:	2b00      	cmp	r3, #0
 800d968:	bfb8      	it	lt
 800d96a:	18e4      	addlt	r4, r4, r3
 800d96c:	f000 fa6a 	bl	800de44 <__malloc_lock>
 800d970:	4a1f      	ldr	r2, [pc, #124]	; (800d9f0 <_free_r+0x98>)
 800d972:	6813      	ldr	r3, [r2, #0]
 800d974:	4610      	mov	r0, r2
 800d976:	b933      	cbnz	r3, 800d986 <_free_r+0x2e>
 800d978:	6063      	str	r3, [r4, #4]
 800d97a:	6014      	str	r4, [r2, #0]
 800d97c:	4628      	mov	r0, r5
 800d97e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d982:	f000 ba60 	b.w	800de46 <__malloc_unlock>
 800d986:	42a3      	cmp	r3, r4
 800d988:	d90c      	bls.n	800d9a4 <_free_r+0x4c>
 800d98a:	6821      	ldr	r1, [r4, #0]
 800d98c:	1862      	adds	r2, r4, r1
 800d98e:	4293      	cmp	r3, r2
 800d990:	bf04      	itt	eq
 800d992:	681a      	ldreq	r2, [r3, #0]
 800d994:	685b      	ldreq	r3, [r3, #4]
 800d996:	6063      	str	r3, [r4, #4]
 800d998:	bf04      	itt	eq
 800d99a:	1852      	addeq	r2, r2, r1
 800d99c:	6022      	streq	r2, [r4, #0]
 800d99e:	6004      	str	r4, [r0, #0]
 800d9a0:	e7ec      	b.n	800d97c <_free_r+0x24>
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	685a      	ldr	r2, [r3, #4]
 800d9a6:	b10a      	cbz	r2, 800d9ac <_free_r+0x54>
 800d9a8:	42a2      	cmp	r2, r4
 800d9aa:	d9fa      	bls.n	800d9a2 <_free_r+0x4a>
 800d9ac:	6819      	ldr	r1, [r3, #0]
 800d9ae:	1858      	adds	r0, r3, r1
 800d9b0:	42a0      	cmp	r0, r4
 800d9b2:	d10b      	bne.n	800d9cc <_free_r+0x74>
 800d9b4:	6820      	ldr	r0, [r4, #0]
 800d9b6:	4401      	add	r1, r0
 800d9b8:	1858      	adds	r0, r3, r1
 800d9ba:	4282      	cmp	r2, r0
 800d9bc:	6019      	str	r1, [r3, #0]
 800d9be:	d1dd      	bne.n	800d97c <_free_r+0x24>
 800d9c0:	6810      	ldr	r0, [r2, #0]
 800d9c2:	6852      	ldr	r2, [r2, #4]
 800d9c4:	605a      	str	r2, [r3, #4]
 800d9c6:	4401      	add	r1, r0
 800d9c8:	6019      	str	r1, [r3, #0]
 800d9ca:	e7d7      	b.n	800d97c <_free_r+0x24>
 800d9cc:	d902      	bls.n	800d9d4 <_free_r+0x7c>
 800d9ce:	230c      	movs	r3, #12
 800d9d0:	602b      	str	r3, [r5, #0]
 800d9d2:	e7d3      	b.n	800d97c <_free_r+0x24>
 800d9d4:	6820      	ldr	r0, [r4, #0]
 800d9d6:	1821      	adds	r1, r4, r0
 800d9d8:	428a      	cmp	r2, r1
 800d9da:	bf04      	itt	eq
 800d9dc:	6811      	ldreq	r1, [r2, #0]
 800d9de:	6852      	ldreq	r2, [r2, #4]
 800d9e0:	6062      	str	r2, [r4, #4]
 800d9e2:	bf04      	itt	eq
 800d9e4:	1809      	addeq	r1, r1, r0
 800d9e6:	6021      	streq	r1, [r4, #0]
 800d9e8:	605c      	str	r4, [r3, #4]
 800d9ea:	e7c7      	b.n	800d97c <_free_r+0x24>
 800d9ec:	bd38      	pop	{r3, r4, r5, pc}
 800d9ee:	bf00      	nop
 800d9f0:	20000318 	.word	0x20000318

0800d9f4 <_malloc_r>:
 800d9f4:	b570      	push	{r4, r5, r6, lr}
 800d9f6:	1ccd      	adds	r5, r1, #3
 800d9f8:	f025 0503 	bic.w	r5, r5, #3
 800d9fc:	3508      	adds	r5, #8
 800d9fe:	2d0c      	cmp	r5, #12
 800da00:	bf38      	it	cc
 800da02:	250c      	movcc	r5, #12
 800da04:	2d00      	cmp	r5, #0
 800da06:	4606      	mov	r6, r0
 800da08:	db01      	blt.n	800da0e <_malloc_r+0x1a>
 800da0a:	42a9      	cmp	r1, r5
 800da0c:	d903      	bls.n	800da16 <_malloc_r+0x22>
 800da0e:	230c      	movs	r3, #12
 800da10:	6033      	str	r3, [r6, #0]
 800da12:	2000      	movs	r0, #0
 800da14:	bd70      	pop	{r4, r5, r6, pc}
 800da16:	f000 fa15 	bl	800de44 <__malloc_lock>
 800da1a:	4a21      	ldr	r2, [pc, #132]	; (800daa0 <_malloc_r+0xac>)
 800da1c:	6814      	ldr	r4, [r2, #0]
 800da1e:	4621      	mov	r1, r4
 800da20:	b991      	cbnz	r1, 800da48 <_malloc_r+0x54>
 800da22:	4c20      	ldr	r4, [pc, #128]	; (800daa4 <_malloc_r+0xb0>)
 800da24:	6823      	ldr	r3, [r4, #0]
 800da26:	b91b      	cbnz	r3, 800da30 <_malloc_r+0x3c>
 800da28:	4630      	mov	r0, r6
 800da2a:	f000 f9b5 	bl	800dd98 <_sbrk_r>
 800da2e:	6020      	str	r0, [r4, #0]
 800da30:	4629      	mov	r1, r5
 800da32:	4630      	mov	r0, r6
 800da34:	f000 f9b0 	bl	800dd98 <_sbrk_r>
 800da38:	1c43      	adds	r3, r0, #1
 800da3a:	d124      	bne.n	800da86 <_malloc_r+0x92>
 800da3c:	230c      	movs	r3, #12
 800da3e:	6033      	str	r3, [r6, #0]
 800da40:	4630      	mov	r0, r6
 800da42:	f000 fa00 	bl	800de46 <__malloc_unlock>
 800da46:	e7e4      	b.n	800da12 <_malloc_r+0x1e>
 800da48:	680b      	ldr	r3, [r1, #0]
 800da4a:	1b5b      	subs	r3, r3, r5
 800da4c:	d418      	bmi.n	800da80 <_malloc_r+0x8c>
 800da4e:	2b0b      	cmp	r3, #11
 800da50:	d90f      	bls.n	800da72 <_malloc_r+0x7e>
 800da52:	600b      	str	r3, [r1, #0]
 800da54:	50cd      	str	r5, [r1, r3]
 800da56:	18cc      	adds	r4, r1, r3
 800da58:	4630      	mov	r0, r6
 800da5a:	f000 f9f4 	bl	800de46 <__malloc_unlock>
 800da5e:	f104 000b 	add.w	r0, r4, #11
 800da62:	1d23      	adds	r3, r4, #4
 800da64:	f020 0007 	bic.w	r0, r0, #7
 800da68:	1ac3      	subs	r3, r0, r3
 800da6a:	d0d3      	beq.n	800da14 <_malloc_r+0x20>
 800da6c:	425a      	negs	r2, r3
 800da6e:	50e2      	str	r2, [r4, r3]
 800da70:	e7d0      	b.n	800da14 <_malloc_r+0x20>
 800da72:	428c      	cmp	r4, r1
 800da74:	684b      	ldr	r3, [r1, #4]
 800da76:	bf16      	itet	ne
 800da78:	6063      	strne	r3, [r4, #4]
 800da7a:	6013      	streq	r3, [r2, #0]
 800da7c:	460c      	movne	r4, r1
 800da7e:	e7eb      	b.n	800da58 <_malloc_r+0x64>
 800da80:	460c      	mov	r4, r1
 800da82:	6849      	ldr	r1, [r1, #4]
 800da84:	e7cc      	b.n	800da20 <_malloc_r+0x2c>
 800da86:	1cc4      	adds	r4, r0, #3
 800da88:	f024 0403 	bic.w	r4, r4, #3
 800da8c:	42a0      	cmp	r0, r4
 800da8e:	d005      	beq.n	800da9c <_malloc_r+0xa8>
 800da90:	1a21      	subs	r1, r4, r0
 800da92:	4630      	mov	r0, r6
 800da94:	f000 f980 	bl	800dd98 <_sbrk_r>
 800da98:	3001      	adds	r0, #1
 800da9a:	d0cf      	beq.n	800da3c <_malloc_r+0x48>
 800da9c:	6025      	str	r5, [r4, #0]
 800da9e:	e7db      	b.n	800da58 <_malloc_r+0x64>
 800daa0:	20000318 	.word	0x20000318
 800daa4:	2000031c 	.word	0x2000031c

0800daa8 <_realloc_r>:
 800daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daaa:	4607      	mov	r7, r0
 800daac:	4614      	mov	r4, r2
 800daae:	460e      	mov	r6, r1
 800dab0:	b921      	cbnz	r1, 800dabc <_realloc_r+0x14>
 800dab2:	4611      	mov	r1, r2
 800dab4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dab8:	f7ff bf9c 	b.w	800d9f4 <_malloc_r>
 800dabc:	b922      	cbnz	r2, 800dac8 <_realloc_r+0x20>
 800dabe:	f7ff ff4b 	bl	800d958 <_free_r>
 800dac2:	4625      	mov	r5, r4
 800dac4:	4628      	mov	r0, r5
 800dac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dac8:	f000 f9be 	bl	800de48 <_malloc_usable_size_r>
 800dacc:	42a0      	cmp	r0, r4
 800dace:	d20f      	bcs.n	800daf0 <_realloc_r+0x48>
 800dad0:	4621      	mov	r1, r4
 800dad2:	4638      	mov	r0, r7
 800dad4:	f7ff ff8e 	bl	800d9f4 <_malloc_r>
 800dad8:	4605      	mov	r5, r0
 800dada:	2800      	cmp	r0, #0
 800dadc:	d0f2      	beq.n	800dac4 <_realloc_r+0x1c>
 800dade:	4631      	mov	r1, r6
 800dae0:	4622      	mov	r2, r4
 800dae2:	f7ff fb03 	bl	800d0ec <memcpy>
 800dae6:	4631      	mov	r1, r6
 800dae8:	4638      	mov	r0, r7
 800daea:	f7ff ff35 	bl	800d958 <_free_r>
 800daee:	e7e9      	b.n	800dac4 <_realloc_r+0x1c>
 800daf0:	4635      	mov	r5, r6
 800daf2:	e7e7      	b.n	800dac4 <_realloc_r+0x1c>

0800daf4 <__ssputs_r>:
 800daf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daf8:	688e      	ldr	r6, [r1, #8]
 800dafa:	429e      	cmp	r6, r3
 800dafc:	4682      	mov	sl, r0
 800dafe:	460c      	mov	r4, r1
 800db00:	4690      	mov	r8, r2
 800db02:	4699      	mov	r9, r3
 800db04:	d837      	bhi.n	800db76 <__ssputs_r+0x82>
 800db06:	898a      	ldrh	r2, [r1, #12]
 800db08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db0c:	d031      	beq.n	800db72 <__ssputs_r+0x7e>
 800db0e:	6825      	ldr	r5, [r4, #0]
 800db10:	6909      	ldr	r1, [r1, #16]
 800db12:	1a6f      	subs	r7, r5, r1
 800db14:	6965      	ldr	r5, [r4, #20]
 800db16:	2302      	movs	r3, #2
 800db18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db1c:	fb95 f5f3 	sdiv	r5, r5, r3
 800db20:	f109 0301 	add.w	r3, r9, #1
 800db24:	443b      	add	r3, r7
 800db26:	429d      	cmp	r5, r3
 800db28:	bf38      	it	cc
 800db2a:	461d      	movcc	r5, r3
 800db2c:	0553      	lsls	r3, r2, #21
 800db2e:	d530      	bpl.n	800db92 <__ssputs_r+0x9e>
 800db30:	4629      	mov	r1, r5
 800db32:	f7ff ff5f 	bl	800d9f4 <_malloc_r>
 800db36:	4606      	mov	r6, r0
 800db38:	b950      	cbnz	r0, 800db50 <__ssputs_r+0x5c>
 800db3a:	230c      	movs	r3, #12
 800db3c:	f8ca 3000 	str.w	r3, [sl]
 800db40:	89a3      	ldrh	r3, [r4, #12]
 800db42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db46:	81a3      	strh	r3, [r4, #12]
 800db48:	f04f 30ff 	mov.w	r0, #4294967295
 800db4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db50:	463a      	mov	r2, r7
 800db52:	6921      	ldr	r1, [r4, #16]
 800db54:	f7ff faca 	bl	800d0ec <memcpy>
 800db58:	89a3      	ldrh	r3, [r4, #12]
 800db5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db62:	81a3      	strh	r3, [r4, #12]
 800db64:	6126      	str	r6, [r4, #16]
 800db66:	6165      	str	r5, [r4, #20]
 800db68:	443e      	add	r6, r7
 800db6a:	1bed      	subs	r5, r5, r7
 800db6c:	6026      	str	r6, [r4, #0]
 800db6e:	60a5      	str	r5, [r4, #8]
 800db70:	464e      	mov	r6, r9
 800db72:	454e      	cmp	r6, r9
 800db74:	d900      	bls.n	800db78 <__ssputs_r+0x84>
 800db76:	464e      	mov	r6, r9
 800db78:	4632      	mov	r2, r6
 800db7a:	4641      	mov	r1, r8
 800db7c:	6820      	ldr	r0, [r4, #0]
 800db7e:	f000 f948 	bl	800de12 <memmove>
 800db82:	68a3      	ldr	r3, [r4, #8]
 800db84:	1b9b      	subs	r3, r3, r6
 800db86:	60a3      	str	r3, [r4, #8]
 800db88:	6823      	ldr	r3, [r4, #0]
 800db8a:	441e      	add	r6, r3
 800db8c:	6026      	str	r6, [r4, #0]
 800db8e:	2000      	movs	r0, #0
 800db90:	e7dc      	b.n	800db4c <__ssputs_r+0x58>
 800db92:	462a      	mov	r2, r5
 800db94:	f7ff ff88 	bl	800daa8 <_realloc_r>
 800db98:	4606      	mov	r6, r0
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d1e2      	bne.n	800db64 <__ssputs_r+0x70>
 800db9e:	6921      	ldr	r1, [r4, #16]
 800dba0:	4650      	mov	r0, sl
 800dba2:	f7ff fed9 	bl	800d958 <_free_r>
 800dba6:	e7c8      	b.n	800db3a <__ssputs_r+0x46>

0800dba8 <_svfiprintf_r>:
 800dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbac:	461d      	mov	r5, r3
 800dbae:	898b      	ldrh	r3, [r1, #12]
 800dbb0:	061f      	lsls	r7, r3, #24
 800dbb2:	b09d      	sub	sp, #116	; 0x74
 800dbb4:	4680      	mov	r8, r0
 800dbb6:	460c      	mov	r4, r1
 800dbb8:	4616      	mov	r6, r2
 800dbba:	d50f      	bpl.n	800dbdc <_svfiprintf_r+0x34>
 800dbbc:	690b      	ldr	r3, [r1, #16]
 800dbbe:	b96b      	cbnz	r3, 800dbdc <_svfiprintf_r+0x34>
 800dbc0:	2140      	movs	r1, #64	; 0x40
 800dbc2:	f7ff ff17 	bl	800d9f4 <_malloc_r>
 800dbc6:	6020      	str	r0, [r4, #0]
 800dbc8:	6120      	str	r0, [r4, #16]
 800dbca:	b928      	cbnz	r0, 800dbd8 <_svfiprintf_r+0x30>
 800dbcc:	230c      	movs	r3, #12
 800dbce:	f8c8 3000 	str.w	r3, [r8]
 800dbd2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd6:	e0c8      	b.n	800dd6a <_svfiprintf_r+0x1c2>
 800dbd8:	2340      	movs	r3, #64	; 0x40
 800dbda:	6163      	str	r3, [r4, #20]
 800dbdc:	2300      	movs	r3, #0
 800dbde:	9309      	str	r3, [sp, #36]	; 0x24
 800dbe0:	2320      	movs	r3, #32
 800dbe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbe6:	2330      	movs	r3, #48	; 0x30
 800dbe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbec:	9503      	str	r5, [sp, #12]
 800dbee:	f04f 0b01 	mov.w	fp, #1
 800dbf2:	4637      	mov	r7, r6
 800dbf4:	463d      	mov	r5, r7
 800dbf6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dbfa:	b10b      	cbz	r3, 800dc00 <_svfiprintf_r+0x58>
 800dbfc:	2b25      	cmp	r3, #37	; 0x25
 800dbfe:	d13e      	bne.n	800dc7e <_svfiprintf_r+0xd6>
 800dc00:	ebb7 0a06 	subs.w	sl, r7, r6
 800dc04:	d00b      	beq.n	800dc1e <_svfiprintf_r+0x76>
 800dc06:	4653      	mov	r3, sl
 800dc08:	4632      	mov	r2, r6
 800dc0a:	4621      	mov	r1, r4
 800dc0c:	4640      	mov	r0, r8
 800dc0e:	f7ff ff71 	bl	800daf4 <__ssputs_r>
 800dc12:	3001      	adds	r0, #1
 800dc14:	f000 80a4 	beq.w	800dd60 <_svfiprintf_r+0x1b8>
 800dc18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc1a:	4453      	add	r3, sl
 800dc1c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc1e:	783b      	ldrb	r3, [r7, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	f000 809d 	beq.w	800dd60 <_svfiprintf_r+0x1b8>
 800dc26:	2300      	movs	r3, #0
 800dc28:	f04f 32ff 	mov.w	r2, #4294967295
 800dc2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc30:	9304      	str	r3, [sp, #16]
 800dc32:	9307      	str	r3, [sp, #28]
 800dc34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc38:	931a      	str	r3, [sp, #104]	; 0x68
 800dc3a:	462f      	mov	r7, r5
 800dc3c:	2205      	movs	r2, #5
 800dc3e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dc42:	4850      	ldr	r0, [pc, #320]	; (800dd84 <_svfiprintf_r+0x1dc>)
 800dc44:	f7f2 fad4 	bl	80001f0 <memchr>
 800dc48:	9b04      	ldr	r3, [sp, #16]
 800dc4a:	b9d0      	cbnz	r0, 800dc82 <_svfiprintf_r+0xda>
 800dc4c:	06d9      	lsls	r1, r3, #27
 800dc4e:	bf44      	itt	mi
 800dc50:	2220      	movmi	r2, #32
 800dc52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dc56:	071a      	lsls	r2, r3, #28
 800dc58:	bf44      	itt	mi
 800dc5a:	222b      	movmi	r2, #43	; 0x2b
 800dc5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dc60:	782a      	ldrb	r2, [r5, #0]
 800dc62:	2a2a      	cmp	r2, #42	; 0x2a
 800dc64:	d015      	beq.n	800dc92 <_svfiprintf_r+0xea>
 800dc66:	9a07      	ldr	r2, [sp, #28]
 800dc68:	462f      	mov	r7, r5
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	250a      	movs	r5, #10
 800dc6e:	4639      	mov	r1, r7
 800dc70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc74:	3b30      	subs	r3, #48	; 0x30
 800dc76:	2b09      	cmp	r3, #9
 800dc78:	d94d      	bls.n	800dd16 <_svfiprintf_r+0x16e>
 800dc7a:	b1b8      	cbz	r0, 800dcac <_svfiprintf_r+0x104>
 800dc7c:	e00f      	b.n	800dc9e <_svfiprintf_r+0xf6>
 800dc7e:	462f      	mov	r7, r5
 800dc80:	e7b8      	b.n	800dbf4 <_svfiprintf_r+0x4c>
 800dc82:	4a40      	ldr	r2, [pc, #256]	; (800dd84 <_svfiprintf_r+0x1dc>)
 800dc84:	1a80      	subs	r0, r0, r2
 800dc86:	fa0b f000 	lsl.w	r0, fp, r0
 800dc8a:	4318      	orrs	r0, r3
 800dc8c:	9004      	str	r0, [sp, #16]
 800dc8e:	463d      	mov	r5, r7
 800dc90:	e7d3      	b.n	800dc3a <_svfiprintf_r+0x92>
 800dc92:	9a03      	ldr	r2, [sp, #12]
 800dc94:	1d11      	adds	r1, r2, #4
 800dc96:	6812      	ldr	r2, [r2, #0]
 800dc98:	9103      	str	r1, [sp, #12]
 800dc9a:	2a00      	cmp	r2, #0
 800dc9c:	db01      	blt.n	800dca2 <_svfiprintf_r+0xfa>
 800dc9e:	9207      	str	r2, [sp, #28]
 800dca0:	e004      	b.n	800dcac <_svfiprintf_r+0x104>
 800dca2:	4252      	negs	r2, r2
 800dca4:	f043 0302 	orr.w	r3, r3, #2
 800dca8:	9207      	str	r2, [sp, #28]
 800dcaa:	9304      	str	r3, [sp, #16]
 800dcac:	783b      	ldrb	r3, [r7, #0]
 800dcae:	2b2e      	cmp	r3, #46	; 0x2e
 800dcb0:	d10c      	bne.n	800dccc <_svfiprintf_r+0x124>
 800dcb2:	787b      	ldrb	r3, [r7, #1]
 800dcb4:	2b2a      	cmp	r3, #42	; 0x2a
 800dcb6:	d133      	bne.n	800dd20 <_svfiprintf_r+0x178>
 800dcb8:	9b03      	ldr	r3, [sp, #12]
 800dcba:	1d1a      	adds	r2, r3, #4
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	9203      	str	r2, [sp, #12]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	bfb8      	it	lt
 800dcc4:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcc8:	3702      	adds	r7, #2
 800dcca:	9305      	str	r3, [sp, #20]
 800dccc:	4d2e      	ldr	r5, [pc, #184]	; (800dd88 <_svfiprintf_r+0x1e0>)
 800dcce:	7839      	ldrb	r1, [r7, #0]
 800dcd0:	2203      	movs	r2, #3
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	f7f2 fa8c 	bl	80001f0 <memchr>
 800dcd8:	b138      	cbz	r0, 800dcea <_svfiprintf_r+0x142>
 800dcda:	2340      	movs	r3, #64	; 0x40
 800dcdc:	1b40      	subs	r0, r0, r5
 800dcde:	fa03 f000 	lsl.w	r0, r3, r0
 800dce2:	9b04      	ldr	r3, [sp, #16]
 800dce4:	4303      	orrs	r3, r0
 800dce6:	3701      	adds	r7, #1
 800dce8:	9304      	str	r3, [sp, #16]
 800dcea:	7839      	ldrb	r1, [r7, #0]
 800dcec:	4827      	ldr	r0, [pc, #156]	; (800dd8c <_svfiprintf_r+0x1e4>)
 800dcee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcf2:	2206      	movs	r2, #6
 800dcf4:	1c7e      	adds	r6, r7, #1
 800dcf6:	f7f2 fa7b 	bl	80001f0 <memchr>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d038      	beq.n	800dd70 <_svfiprintf_r+0x1c8>
 800dcfe:	4b24      	ldr	r3, [pc, #144]	; (800dd90 <_svfiprintf_r+0x1e8>)
 800dd00:	bb13      	cbnz	r3, 800dd48 <_svfiprintf_r+0x1a0>
 800dd02:	9b03      	ldr	r3, [sp, #12]
 800dd04:	3307      	adds	r3, #7
 800dd06:	f023 0307 	bic.w	r3, r3, #7
 800dd0a:	3308      	adds	r3, #8
 800dd0c:	9303      	str	r3, [sp, #12]
 800dd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd10:	444b      	add	r3, r9
 800dd12:	9309      	str	r3, [sp, #36]	; 0x24
 800dd14:	e76d      	b.n	800dbf2 <_svfiprintf_r+0x4a>
 800dd16:	fb05 3202 	mla	r2, r5, r2, r3
 800dd1a:	2001      	movs	r0, #1
 800dd1c:	460f      	mov	r7, r1
 800dd1e:	e7a6      	b.n	800dc6e <_svfiprintf_r+0xc6>
 800dd20:	2300      	movs	r3, #0
 800dd22:	3701      	adds	r7, #1
 800dd24:	9305      	str	r3, [sp, #20]
 800dd26:	4619      	mov	r1, r3
 800dd28:	250a      	movs	r5, #10
 800dd2a:	4638      	mov	r0, r7
 800dd2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd30:	3a30      	subs	r2, #48	; 0x30
 800dd32:	2a09      	cmp	r2, #9
 800dd34:	d903      	bls.n	800dd3e <_svfiprintf_r+0x196>
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d0c8      	beq.n	800dccc <_svfiprintf_r+0x124>
 800dd3a:	9105      	str	r1, [sp, #20]
 800dd3c:	e7c6      	b.n	800dccc <_svfiprintf_r+0x124>
 800dd3e:	fb05 2101 	mla	r1, r5, r1, r2
 800dd42:	2301      	movs	r3, #1
 800dd44:	4607      	mov	r7, r0
 800dd46:	e7f0      	b.n	800dd2a <_svfiprintf_r+0x182>
 800dd48:	ab03      	add	r3, sp, #12
 800dd4a:	9300      	str	r3, [sp, #0]
 800dd4c:	4622      	mov	r2, r4
 800dd4e:	4b11      	ldr	r3, [pc, #68]	; (800dd94 <_svfiprintf_r+0x1ec>)
 800dd50:	a904      	add	r1, sp, #16
 800dd52:	4640      	mov	r0, r8
 800dd54:	f7fc fc96 	bl	800a684 <_printf_float>
 800dd58:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dd5c:	4681      	mov	r9, r0
 800dd5e:	d1d6      	bne.n	800dd0e <_svfiprintf_r+0x166>
 800dd60:	89a3      	ldrh	r3, [r4, #12]
 800dd62:	065b      	lsls	r3, r3, #25
 800dd64:	f53f af35 	bmi.w	800dbd2 <_svfiprintf_r+0x2a>
 800dd68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd6a:	b01d      	add	sp, #116	; 0x74
 800dd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd70:	ab03      	add	r3, sp, #12
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	4622      	mov	r2, r4
 800dd76:	4b07      	ldr	r3, [pc, #28]	; (800dd94 <_svfiprintf_r+0x1ec>)
 800dd78:	a904      	add	r1, sp, #16
 800dd7a:	4640      	mov	r0, r8
 800dd7c:	f7fc ff38 	bl	800abf0 <_printf_i>
 800dd80:	e7ea      	b.n	800dd58 <_svfiprintf_r+0x1b0>
 800dd82:	bf00      	nop
 800dd84:	0800ec7c 	.word	0x0800ec7c
 800dd88:	0800ec82 	.word	0x0800ec82
 800dd8c:	0800ec86 	.word	0x0800ec86
 800dd90:	0800a685 	.word	0x0800a685
 800dd94:	0800daf5 	.word	0x0800daf5

0800dd98 <_sbrk_r>:
 800dd98:	b538      	push	{r3, r4, r5, lr}
 800dd9a:	4c06      	ldr	r4, [pc, #24]	; (800ddb4 <_sbrk_r+0x1c>)
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	4605      	mov	r5, r0
 800dda0:	4608      	mov	r0, r1
 800dda2:	6023      	str	r3, [r4, #0]
 800dda4:	f7f5 fa54 	bl	8003250 <_sbrk>
 800dda8:	1c43      	adds	r3, r0, #1
 800ddaa:	d102      	bne.n	800ddb2 <_sbrk_r+0x1a>
 800ddac:	6823      	ldr	r3, [r4, #0]
 800ddae:	b103      	cbz	r3, 800ddb2 <_sbrk_r+0x1a>
 800ddb0:	602b      	str	r3, [r5, #0]
 800ddb2:	bd38      	pop	{r3, r4, r5, pc}
 800ddb4:	200005f4 	.word	0x200005f4

0800ddb8 <nanf>:
 800ddb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ddc0 <nanf+0x8>
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	7fc00000 	.word	0x7fc00000

0800ddc4 <strcpy>:
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddca:	f803 2b01 	strb.w	r2, [r3], #1
 800ddce:	2a00      	cmp	r2, #0
 800ddd0:	d1f9      	bne.n	800ddc6 <strcpy+0x2>
 800ddd2:	4770      	bx	lr

0800ddd4 <strncmp>:
 800ddd4:	b510      	push	{r4, lr}
 800ddd6:	b16a      	cbz	r2, 800ddf4 <strncmp+0x20>
 800ddd8:	3901      	subs	r1, #1
 800ddda:	1884      	adds	r4, r0, r2
 800dddc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dde0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d103      	bne.n	800ddf0 <strncmp+0x1c>
 800dde8:	42a0      	cmp	r0, r4
 800ddea:	d001      	beq.n	800ddf0 <strncmp+0x1c>
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d1f5      	bne.n	800dddc <strncmp+0x8>
 800ddf0:	1a98      	subs	r0, r3, r2
 800ddf2:	bd10      	pop	{r4, pc}
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	e7fc      	b.n	800ddf2 <strncmp+0x1e>

0800ddf8 <__ascii_wctomb>:
 800ddf8:	b149      	cbz	r1, 800de0e <__ascii_wctomb+0x16>
 800ddfa:	2aff      	cmp	r2, #255	; 0xff
 800ddfc:	bf85      	ittet	hi
 800ddfe:	238a      	movhi	r3, #138	; 0x8a
 800de00:	6003      	strhi	r3, [r0, #0]
 800de02:	700a      	strbls	r2, [r1, #0]
 800de04:	f04f 30ff 	movhi.w	r0, #4294967295
 800de08:	bf98      	it	ls
 800de0a:	2001      	movls	r0, #1
 800de0c:	4770      	bx	lr
 800de0e:	4608      	mov	r0, r1
 800de10:	4770      	bx	lr

0800de12 <memmove>:
 800de12:	4288      	cmp	r0, r1
 800de14:	b510      	push	{r4, lr}
 800de16:	eb01 0302 	add.w	r3, r1, r2
 800de1a:	d807      	bhi.n	800de2c <memmove+0x1a>
 800de1c:	1e42      	subs	r2, r0, #1
 800de1e:	4299      	cmp	r1, r3
 800de20:	d00a      	beq.n	800de38 <memmove+0x26>
 800de22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de26:	f802 4f01 	strb.w	r4, [r2, #1]!
 800de2a:	e7f8      	b.n	800de1e <memmove+0xc>
 800de2c:	4283      	cmp	r3, r0
 800de2e:	d9f5      	bls.n	800de1c <memmove+0xa>
 800de30:	1881      	adds	r1, r0, r2
 800de32:	1ad2      	subs	r2, r2, r3
 800de34:	42d3      	cmn	r3, r2
 800de36:	d100      	bne.n	800de3a <memmove+0x28>
 800de38:	bd10      	pop	{r4, pc}
 800de3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800de42:	e7f7      	b.n	800de34 <memmove+0x22>

0800de44 <__malloc_lock>:
 800de44:	4770      	bx	lr

0800de46 <__malloc_unlock>:
 800de46:	4770      	bx	lr

0800de48 <_malloc_usable_size_r>:
 800de48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de4c:	1f18      	subs	r0, r3, #4
 800de4e:	2b00      	cmp	r3, #0
 800de50:	bfbc      	itt	lt
 800de52:	580b      	ldrlt	r3, [r1, r0]
 800de54:	18c0      	addlt	r0, r0, r3
 800de56:	4770      	bx	lr

0800de58 <powf>:
 800de58:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800de5c:	ed2d 8b04 	vpush	{d8-d9}
 800de60:	4ca7      	ldr	r4, [pc, #668]	; (800e100 <powf+0x2a8>)
 800de62:	b08a      	sub	sp, #40	; 0x28
 800de64:	eef0 8a40 	vmov.f32	s17, s0
 800de68:	eeb0 8a60 	vmov.f32	s16, s1
 800de6c:	f000 f958 	bl	800e120 <__ieee754_powf>
 800de70:	f994 5000 	ldrsb.w	r5, [r4]
 800de74:	1c6b      	adds	r3, r5, #1
 800de76:	eeb0 9a40 	vmov.f32	s18, s0
 800de7a:	4626      	mov	r6, r4
 800de7c:	d05f      	beq.n	800df3e <powf+0xe6>
 800de7e:	eeb4 8a48 	vcmp.f32	s16, s16
 800de82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de86:	d65a      	bvs.n	800df3e <powf+0xe6>
 800de88:	eef4 8a68 	vcmp.f32	s17, s17
 800de8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de90:	d721      	bvc.n	800ded6 <powf+0x7e>
 800de92:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800de96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de9a:	d150      	bne.n	800df3e <powf+0xe6>
 800de9c:	2301      	movs	r3, #1
 800de9e:	9300      	str	r3, [sp, #0]
 800dea0:	4b98      	ldr	r3, [pc, #608]	; (800e104 <powf+0x2ac>)
 800dea2:	9301      	str	r3, [sp, #4]
 800dea4:	ee18 0a90 	vmov	r0, s17
 800dea8:	2300      	movs	r3, #0
 800deaa:	9308      	str	r3, [sp, #32]
 800deac:	f7f2 fb54 	bl	8000558 <__aeabi_f2d>
 800deb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800deb4:	ee18 0a10 	vmov	r0, s16
 800deb8:	f7f2 fb4e 	bl	8000558 <__aeabi_f2d>
 800debc:	4b92      	ldr	r3, [pc, #584]	; (800e108 <powf+0x2b0>)
 800debe:	2200      	movs	r2, #0
 800dec0:	2d02      	cmp	r5, #2
 800dec2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dec6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800deca:	d032      	beq.n	800df32 <powf+0xda>
 800decc:	4668      	mov	r0, sp
 800dece:	f000 fbea 	bl	800e6a6 <matherr>
 800ded2:	bb40      	cbnz	r0, 800df26 <powf+0xce>
 800ded4:	e065      	b.n	800dfa2 <powf+0x14a>
 800ded6:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800e10c <powf+0x2b4>
 800deda:	eef4 8a69 	vcmp.f32	s17, s19
 800dede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee2:	d163      	bne.n	800dfac <powf+0x154>
 800dee4:	eeb4 8a69 	vcmp.f32	s16, s19
 800dee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deec:	d12e      	bne.n	800df4c <powf+0xf4>
 800deee:	2301      	movs	r3, #1
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	4b84      	ldr	r3, [pc, #528]	; (800e104 <powf+0x2ac>)
 800def4:	9301      	str	r3, [sp, #4]
 800def6:	ee18 0a90 	vmov	r0, s17
 800defa:	2300      	movs	r3, #0
 800defc:	9308      	str	r3, [sp, #32]
 800defe:	f7f2 fb2b 	bl	8000558 <__aeabi_f2d>
 800df02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df06:	ee18 0a10 	vmov	r0, s16
 800df0a:	f7f2 fb25 	bl	8000558 <__aeabi_f2d>
 800df0e:	2200      	movs	r2, #0
 800df10:	2300      	movs	r3, #0
 800df12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800df1a:	2d00      	cmp	r5, #0
 800df1c:	d0d6      	beq.n	800decc <powf+0x74>
 800df1e:	4b7a      	ldr	r3, [pc, #488]	; (800e108 <powf+0x2b0>)
 800df20:	2200      	movs	r2, #0
 800df22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800df26:	9b08      	ldr	r3, [sp, #32]
 800df28:	b11b      	cbz	r3, 800df32 <powf+0xda>
 800df2a:	f7fc fae5 	bl	800a4f8 <__errno>
 800df2e:	9b08      	ldr	r3, [sp, #32]
 800df30:	6003      	str	r3, [r0, #0]
 800df32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df36:	f7f2 fe5f 	bl	8000bf8 <__aeabi_d2f>
 800df3a:	ee09 0a10 	vmov	s18, r0
 800df3e:	eeb0 0a49 	vmov.f32	s0, s18
 800df42:	b00a      	add	sp, #40	; 0x28
 800df44:	ecbd 8b04 	vpop	{d8-d9}
 800df48:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800df4c:	eeb0 0a48 	vmov.f32	s0, s16
 800df50:	f000 fbb2 	bl	800e6b8 <finitef>
 800df54:	2800      	cmp	r0, #0
 800df56:	d0f2      	beq.n	800df3e <powf+0xe6>
 800df58:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800df5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df60:	d5ed      	bpl.n	800df3e <powf+0xe6>
 800df62:	2301      	movs	r3, #1
 800df64:	9300      	str	r3, [sp, #0]
 800df66:	4b67      	ldr	r3, [pc, #412]	; (800e104 <powf+0x2ac>)
 800df68:	9301      	str	r3, [sp, #4]
 800df6a:	ee18 0a90 	vmov	r0, s17
 800df6e:	2300      	movs	r3, #0
 800df70:	9308      	str	r3, [sp, #32]
 800df72:	f7f2 faf1 	bl	8000558 <__aeabi_f2d>
 800df76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df7a:	ee18 0a10 	vmov	r0, s16
 800df7e:	f7f2 faeb 	bl	8000558 <__aeabi_f2d>
 800df82:	f994 3000 	ldrsb.w	r3, [r4]
 800df86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df8a:	b923      	cbnz	r3, 800df96 <powf+0x13e>
 800df8c:	2200      	movs	r2, #0
 800df8e:	2300      	movs	r3, #0
 800df90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800df94:	e79a      	b.n	800decc <powf+0x74>
 800df96:	495e      	ldr	r1, [pc, #376]	; (800e110 <powf+0x2b8>)
 800df98:	2000      	movs	r0, #0
 800df9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800df9e:	2b02      	cmp	r3, #2
 800dfa0:	d194      	bne.n	800decc <powf+0x74>
 800dfa2:	f7fc faa9 	bl	800a4f8 <__errno>
 800dfa6:	2321      	movs	r3, #33	; 0x21
 800dfa8:	6003      	str	r3, [r0, #0]
 800dfaa:	e7bc      	b.n	800df26 <powf+0xce>
 800dfac:	f000 fb84 	bl	800e6b8 <finitef>
 800dfb0:	4605      	mov	r5, r0
 800dfb2:	2800      	cmp	r0, #0
 800dfb4:	d173      	bne.n	800e09e <powf+0x246>
 800dfb6:	eeb0 0a68 	vmov.f32	s0, s17
 800dfba:	f000 fb7d 	bl	800e6b8 <finitef>
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d06d      	beq.n	800e09e <powf+0x246>
 800dfc2:	eeb0 0a48 	vmov.f32	s0, s16
 800dfc6:	f000 fb77 	bl	800e6b8 <finitef>
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d067      	beq.n	800e09e <powf+0x246>
 800dfce:	ee18 0a90 	vmov	r0, s17
 800dfd2:	f7f2 fac1 	bl	8000558 <__aeabi_f2d>
 800dfd6:	4680      	mov	r8, r0
 800dfd8:	ee18 0a10 	vmov	r0, s16
 800dfdc:	4689      	mov	r9, r1
 800dfde:	f7f2 fabb 	bl	8000558 <__aeabi_f2d>
 800dfe2:	eeb4 9a49 	vcmp.f32	s18, s18
 800dfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfea:	f994 4000 	ldrsb.w	r4, [r4]
 800dfee:	4b45      	ldr	r3, [pc, #276]	; (800e104 <powf+0x2ac>)
 800dff0:	d713      	bvc.n	800e01a <powf+0x1c2>
 800dff2:	2201      	movs	r2, #1
 800dff4:	e9cd 2300 	strd	r2, r3, [sp]
 800dff8:	9508      	str	r5, [sp, #32]
 800dffa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800dffe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e002:	2c00      	cmp	r4, #0
 800e004:	d0c2      	beq.n	800df8c <powf+0x134>
 800e006:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800e00a:	ee17 0a90 	vmov	r0, s15
 800e00e:	f7f2 faa3 	bl	8000558 <__aeabi_f2d>
 800e012:	2c02      	cmp	r4, #2
 800e014:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e018:	e7c2      	b.n	800dfa0 <powf+0x148>
 800e01a:	2203      	movs	r2, #3
 800e01c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e020:	e9cd 2300 	strd	r2, r3, [sp]
 800e024:	9508      	str	r5, [sp, #32]
 800e026:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e02a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e02e:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e032:	b9fc      	cbnz	r4, 800e074 <powf+0x21c>
 800e034:	4b37      	ldr	r3, [pc, #220]	; (800e114 <powf+0x2bc>)
 800e036:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800e03a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e042:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e046:	d553      	bpl.n	800e0f0 <powf+0x298>
 800e048:	eeb0 0a48 	vmov.f32	s0, s16
 800e04c:	f000 fb3e 	bl	800e6cc <rintf>
 800e050:	eeb4 0a48 	vcmp.f32	s0, s16
 800e054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e058:	d004      	beq.n	800e064 <powf+0x20c>
 800e05a:	4b2f      	ldr	r3, [pc, #188]	; (800e118 <powf+0x2c0>)
 800e05c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e060:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e064:	f996 3000 	ldrsb.w	r3, [r6]
 800e068:	2b02      	cmp	r3, #2
 800e06a:	d141      	bne.n	800e0f0 <powf+0x298>
 800e06c:	f7fc fa44 	bl	800a4f8 <__errno>
 800e070:	2322      	movs	r3, #34	; 0x22
 800e072:	e799      	b.n	800dfa8 <powf+0x150>
 800e074:	4b29      	ldr	r3, [pc, #164]	; (800e11c <powf+0x2c4>)
 800e076:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800e07a:	2200      	movs	r2, #0
 800e07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e080:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e084:	d5ee      	bpl.n	800e064 <powf+0x20c>
 800e086:	eeb0 0a48 	vmov.f32	s0, s16
 800e08a:	f000 fb1f 	bl	800e6cc <rintf>
 800e08e:	eeb4 0a48 	vcmp.f32	s0, s16
 800e092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e096:	d0e5      	beq.n	800e064 <powf+0x20c>
 800e098:	2200      	movs	r2, #0
 800e09a:	4b1d      	ldr	r3, [pc, #116]	; (800e110 <powf+0x2b8>)
 800e09c:	e7e0      	b.n	800e060 <powf+0x208>
 800e09e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a6:	f47f af4a 	bne.w	800df3e <powf+0xe6>
 800e0aa:	eeb0 0a68 	vmov.f32	s0, s17
 800e0ae:	f000 fb03 	bl	800e6b8 <finitef>
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	f43f af43 	beq.w	800df3e <powf+0xe6>
 800e0b8:	eeb0 0a48 	vmov.f32	s0, s16
 800e0bc:	f000 fafc 	bl	800e6b8 <finitef>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	f43f af3c 	beq.w	800df3e <powf+0xe6>
 800e0c6:	2304      	movs	r3, #4
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	4b0e      	ldr	r3, [pc, #56]	; (800e104 <powf+0x2ac>)
 800e0cc:	9301      	str	r3, [sp, #4]
 800e0ce:	ee18 0a90 	vmov	r0, s17
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	9308      	str	r3, [sp, #32]
 800e0d6:	f7f2 fa3f 	bl	8000558 <__aeabi_f2d>
 800e0da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0de:	ee18 0a10 	vmov	r0, s16
 800e0e2:	f7f2 fa39 	bl	8000558 <__aeabi_f2d>
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	e7b7      	b.n	800e060 <powf+0x208>
 800e0f0:	4668      	mov	r0, sp
 800e0f2:	f000 fad8 	bl	800e6a6 <matherr>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	f47f af15 	bne.w	800df26 <powf+0xce>
 800e0fc:	e7b6      	b.n	800e06c <powf+0x214>
 800e0fe:	bf00      	nop
 800e100:	20000264 	.word	0x20000264
 800e104:	0800ed8e 	.word	0x0800ed8e
 800e108:	3ff00000 	.word	0x3ff00000
 800e10c:	00000000 	.word	0x00000000
 800e110:	fff00000 	.word	0xfff00000
 800e114:	47efffff 	.word	0x47efffff
 800e118:	c7efffff 	.word	0xc7efffff
 800e11c:	7ff00000 	.word	0x7ff00000

0800e120 <__ieee754_powf>:
 800e120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e124:	ee10 5a90 	vmov	r5, s1
 800e128:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800e12c:	ed2d 8b02 	vpush	{d8}
 800e130:	eeb0 8a40 	vmov.f32	s16, s0
 800e134:	eef0 8a60 	vmov.f32	s17, s1
 800e138:	f000 8293 	beq.w	800e662 <__ieee754_powf+0x542>
 800e13c:	ee10 8a10 	vmov	r8, s0
 800e140:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800e144:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e148:	dc06      	bgt.n	800e158 <__ieee754_powf+0x38>
 800e14a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e14e:	dd0a      	ble.n	800e166 <__ieee754_powf+0x46>
 800e150:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e154:	f000 8285 	beq.w	800e662 <__ieee754_powf+0x542>
 800e158:	ecbd 8b02 	vpop	{d8}
 800e15c:	48d9      	ldr	r0, [pc, #868]	; (800e4c4 <__ieee754_powf+0x3a4>)
 800e15e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e162:	f7ff be29 	b.w	800ddb8 <nanf>
 800e166:	f1b8 0f00 	cmp.w	r8, #0
 800e16a:	da1d      	bge.n	800e1a8 <__ieee754_powf+0x88>
 800e16c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800e170:	da2c      	bge.n	800e1cc <__ieee754_powf+0xac>
 800e172:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e176:	db30      	blt.n	800e1da <__ieee754_powf+0xba>
 800e178:	15fb      	asrs	r3, r7, #23
 800e17a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e17e:	fa47 f603 	asr.w	r6, r7, r3
 800e182:	fa06 f303 	lsl.w	r3, r6, r3
 800e186:	42bb      	cmp	r3, r7
 800e188:	d127      	bne.n	800e1da <__ieee754_powf+0xba>
 800e18a:	f006 0601 	and.w	r6, r6, #1
 800e18e:	f1c6 0602 	rsb	r6, r6, #2
 800e192:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e196:	d122      	bne.n	800e1de <__ieee754_powf+0xbe>
 800e198:	2d00      	cmp	r5, #0
 800e19a:	f280 8268 	bge.w	800e66e <__ieee754_powf+0x54e>
 800e19e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e1a2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e1a6:	e00d      	b.n	800e1c4 <__ieee754_powf+0xa4>
 800e1a8:	2600      	movs	r6, #0
 800e1aa:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e1ae:	d1f0      	bne.n	800e192 <__ieee754_powf+0x72>
 800e1b0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e1b4:	f000 8255 	beq.w	800e662 <__ieee754_powf+0x542>
 800e1b8:	dd0a      	ble.n	800e1d0 <__ieee754_powf+0xb0>
 800e1ba:	2d00      	cmp	r5, #0
 800e1bc:	f280 8254 	bge.w	800e668 <__ieee754_powf+0x548>
 800e1c0:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800e4c8 <__ieee754_powf+0x3a8>
 800e1c4:	ecbd 8b02 	vpop	{d8}
 800e1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1cc:	2602      	movs	r6, #2
 800e1ce:	e7ec      	b.n	800e1aa <__ieee754_powf+0x8a>
 800e1d0:	2d00      	cmp	r5, #0
 800e1d2:	daf5      	bge.n	800e1c0 <__ieee754_powf+0xa0>
 800e1d4:	eeb1 0a68 	vneg.f32	s0, s17
 800e1d8:	e7f4      	b.n	800e1c4 <__ieee754_powf+0xa4>
 800e1da:	2600      	movs	r6, #0
 800e1dc:	e7d9      	b.n	800e192 <__ieee754_powf+0x72>
 800e1de:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800e1e2:	d102      	bne.n	800e1ea <__ieee754_powf+0xca>
 800e1e4:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e1e8:	e7ec      	b.n	800e1c4 <__ieee754_powf+0xa4>
 800e1ea:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800e1ee:	eeb0 0a48 	vmov.f32	s0, s16
 800e1f2:	d108      	bne.n	800e206 <__ieee754_powf+0xe6>
 800e1f4:	f1b8 0f00 	cmp.w	r8, #0
 800e1f8:	db05      	blt.n	800e206 <__ieee754_powf+0xe6>
 800e1fa:	ecbd 8b02 	vpop	{d8}
 800e1fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e202:	f000 ba4d 	b.w	800e6a0 <__ieee754_sqrtf>
 800e206:	f000 fa50 	bl	800e6aa <fabsf>
 800e20a:	b124      	cbz	r4, 800e216 <__ieee754_powf+0xf6>
 800e20c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800e210:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e214:	d117      	bne.n	800e246 <__ieee754_powf+0x126>
 800e216:	2d00      	cmp	r5, #0
 800e218:	bfbc      	itt	lt
 800e21a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800e21e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e222:	f1b8 0f00 	cmp.w	r8, #0
 800e226:	dacd      	bge.n	800e1c4 <__ieee754_powf+0xa4>
 800e228:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800e22c:	ea54 0306 	orrs.w	r3, r4, r6
 800e230:	d104      	bne.n	800e23c <__ieee754_powf+0x11c>
 800e232:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e236:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e23a:	e7c3      	b.n	800e1c4 <__ieee754_powf+0xa4>
 800e23c:	2e01      	cmp	r6, #1
 800e23e:	d1c1      	bne.n	800e1c4 <__ieee754_powf+0xa4>
 800e240:	eeb1 0a40 	vneg.f32	s0, s0
 800e244:	e7be      	b.n	800e1c4 <__ieee754_powf+0xa4>
 800e246:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800e24a:	3801      	subs	r0, #1
 800e24c:	ea56 0300 	orrs.w	r3, r6, r0
 800e250:	d104      	bne.n	800e25c <__ieee754_powf+0x13c>
 800e252:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e256:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e25a:	e7b3      	b.n	800e1c4 <__ieee754_powf+0xa4>
 800e25c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800e260:	dd6d      	ble.n	800e33e <__ieee754_powf+0x21e>
 800e262:	4b9a      	ldr	r3, [pc, #616]	; (800e4cc <__ieee754_powf+0x3ac>)
 800e264:	429c      	cmp	r4, r3
 800e266:	dc06      	bgt.n	800e276 <__ieee754_powf+0x156>
 800e268:	2d00      	cmp	r5, #0
 800e26a:	daa9      	bge.n	800e1c0 <__ieee754_powf+0xa0>
 800e26c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800e4d0 <__ieee754_powf+0x3b0>
 800e270:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e274:	e7a6      	b.n	800e1c4 <__ieee754_powf+0xa4>
 800e276:	4b97      	ldr	r3, [pc, #604]	; (800e4d4 <__ieee754_powf+0x3b4>)
 800e278:	429c      	cmp	r4, r3
 800e27a:	dd02      	ble.n	800e282 <__ieee754_powf+0x162>
 800e27c:	2d00      	cmp	r5, #0
 800e27e:	dcf5      	bgt.n	800e26c <__ieee754_powf+0x14c>
 800e280:	e79e      	b.n	800e1c0 <__ieee754_powf+0xa0>
 800e282:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e286:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e28a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800e4d8 <__ieee754_powf+0x3b8>
 800e28e:	eef1 6a40 	vneg.f32	s13, s0
 800e292:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e296:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e29a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e29e:	eee7 7a40 	vfms.f32	s15, s14, s0
 800e2a2:	ee60 0a00 	vmul.f32	s1, s0, s0
 800e2a6:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800e4dc <__ieee754_powf+0x3bc>
 800e2aa:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800e2ae:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800e4e0 <__ieee754_powf+0x3c0>
 800e2b2:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800e2b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e2ba:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e4e4 <__ieee754_powf+0x3c4>
 800e2be:	eeb0 6a67 	vmov.f32	s12, s15
 800e2c2:	eea0 6a07 	vfma.f32	s12, s0, s14
 800e2c6:	ee16 3a10 	vmov	r3, s12
 800e2ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e2ce:	f023 030f 	bic.w	r3, r3, #15
 800e2d2:	ee00 3a90 	vmov	s1, r3
 800e2d6:	eee6 0a87 	vfma.f32	s1, s13, s14
 800e2da:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e2de:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800e2e2:	f025 050f 	bic.w	r5, r5, #15
 800e2e6:	ee07 5a10 	vmov	s14, r5
 800e2ea:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e2ee:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e2f2:	ee07 3a90 	vmov	s15, r3
 800e2f6:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e2fa:	3e01      	subs	r6, #1
 800e2fc:	ea56 0200 	orrs.w	r2, r6, r0
 800e300:	ee07 5a10 	vmov	s14, r5
 800e304:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e308:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e30c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e310:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e314:	ee17 4a10 	vmov	r4, s14
 800e318:	bf08      	it	eq
 800e31a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800e31e:	2c00      	cmp	r4, #0
 800e320:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e324:	f340 8184 	ble.w	800e630 <__ieee754_powf+0x510>
 800e328:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800e32c:	f340 80fc 	ble.w	800e528 <__ieee754_powf+0x408>
 800e330:	eddf 7a67 	vldr	s15, [pc, #412]	; 800e4d0 <__ieee754_powf+0x3b0>
 800e334:	ee28 0a27 	vmul.f32	s0, s16, s15
 800e338:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e33c:	e742      	b.n	800e1c4 <__ieee754_powf+0xa4>
 800e33e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800e342:	bfbf      	itttt	lt
 800e344:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800e4e8 <__ieee754_powf+0x3c8>
 800e348:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e34c:	f06f 0217 	mvnlt.w	r2, #23
 800e350:	ee17 4a90 	vmovlt	r4, s15
 800e354:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800e358:	bfa8      	it	ge
 800e35a:	2200      	movge	r2, #0
 800e35c:	3b7f      	subs	r3, #127	; 0x7f
 800e35e:	4413      	add	r3, r2
 800e360:	4a62      	ldr	r2, [pc, #392]	; (800e4ec <__ieee754_powf+0x3cc>)
 800e362:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800e366:	4294      	cmp	r4, r2
 800e368:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800e36c:	dd06      	ble.n	800e37c <__ieee754_powf+0x25c>
 800e36e:	4a60      	ldr	r2, [pc, #384]	; (800e4f0 <__ieee754_powf+0x3d0>)
 800e370:	4294      	cmp	r4, r2
 800e372:	f340 80a5 	ble.w	800e4c0 <__ieee754_powf+0x3a0>
 800e376:	3301      	adds	r3, #1
 800e378:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e37c:	2400      	movs	r4, #0
 800e37e:	4a5d      	ldr	r2, [pc, #372]	; (800e4f4 <__ieee754_powf+0x3d4>)
 800e380:	00a7      	lsls	r7, r4, #2
 800e382:	443a      	add	r2, r7
 800e384:	ee07 1a90 	vmov	s15, r1
 800e388:	ed92 7a00 	vldr	s14, [r2]
 800e38c:	4a5a      	ldr	r2, [pc, #360]	; (800e4f8 <__ieee754_powf+0x3d8>)
 800e38e:	ee37 6a27 	vadd.f32	s12, s14, s15
 800e392:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e396:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800e39a:	1049      	asrs	r1, r1, #1
 800e39c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800e3a0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800e3a4:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800e3a8:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800e3ac:	ee06 1a10 	vmov	s12, r1
 800e3b0:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800e3b4:	ee14 ca90 	vmov	ip, s9
 800e3b8:	ea02 0c0c 	and.w	ip, r2, ip
 800e3bc:	ee05 ca10 	vmov	s10, ip
 800e3c0:	eeb1 4a45 	vneg.f32	s8, s10
 800e3c4:	eee4 5a06 	vfma.f32	s11, s8, s12
 800e3c8:	ee36 6a47 	vsub.f32	s12, s12, s14
 800e3cc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800e4fc <__ieee754_powf+0x3dc>
 800e3d0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800e3d4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800e3d8:	eee4 5a06 	vfma.f32	s11, s8, s12
 800e3dc:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800e3e0:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800e3e4:	eddf 5a46 	vldr	s11, [pc, #280]	; 800e500 <__ieee754_powf+0x3e0>
 800e3e8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e3ec:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e504 <__ieee754_powf+0x3e4>
 800e3f0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e3f4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e4d8 <__ieee754_powf+0x3b8>
 800e3f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e3fc:	eddf 5a42 	vldr	s11, [pc, #264]	; 800e508 <__ieee754_powf+0x3e8>
 800e400:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e404:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800e50c <__ieee754_powf+0x3ec>
 800e408:	ee75 6a24 	vadd.f32	s13, s10, s9
 800e40c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e410:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e414:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800e418:	eef0 7a65 	vmov.f32	s15, s11
 800e41c:	eee3 6a87 	vfma.f32	s13, s7, s14
 800e420:	eee5 7a05 	vfma.f32	s15, s10, s10
 800e424:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e428:	ee17 1a90 	vmov	r1, s15
 800e42c:	4011      	ands	r1, r2
 800e42e:	ee07 1a90 	vmov	s15, r1
 800e432:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800e436:	eddf 5a36 	vldr	s11, [pc, #216]	; 800e510 <__ieee754_powf+0x3f0>
 800e43a:	eea4 7a05 	vfma.f32	s14, s8, s10
 800e43e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e442:	ee27 7a24 	vmul.f32	s14, s14, s9
 800e446:	eea7 7a86 	vfma.f32	s14, s15, s12
 800e44a:	eeb0 6a47 	vmov.f32	s12, s14
 800e44e:	eea5 6a27 	vfma.f32	s12, s10, s15
 800e452:	ee16 1a10 	vmov	r1, s12
 800e456:	4011      	ands	r1, r2
 800e458:	ee06 1a90 	vmov	s13, r1
 800e45c:	eee4 6a27 	vfma.f32	s13, s8, s15
 800e460:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800e514 <__ieee754_powf+0x3f4>
 800e464:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e468:	ee06 1a10 	vmov	s12, r1
 800e46c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e470:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e518 <__ieee754_powf+0x3f8>
 800e474:	4929      	ldr	r1, [pc, #164]	; (800e51c <__ieee754_powf+0x3fc>)
 800e476:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e47a:	4439      	add	r1, r7
 800e47c:	edd1 7a00 	vldr	s15, [r1]
 800e480:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e484:	ee07 3a90 	vmov	s15, r3
 800e488:	eef0 0a47 	vmov.f32	s1, s14
 800e48c:	4b24      	ldr	r3, [pc, #144]	; (800e520 <__ieee754_powf+0x400>)
 800e48e:	eee6 0a25 	vfma.f32	s1, s12, s11
 800e492:	443b      	add	r3, r7
 800e494:	ed93 5a00 	vldr	s10, [r3]
 800e498:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e49c:	ee70 0a85 	vadd.f32	s1, s1, s10
 800e4a0:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800e4a4:	ee17 3a90 	vmov	r3, s15
 800e4a8:	4013      	ands	r3, r2
 800e4aa:	ee07 3a90 	vmov	s15, r3
 800e4ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e4b2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e4b6:	eee6 7a65 	vfms.f32	s15, s12, s11
 800e4ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4be:	e70e      	b.n	800e2de <__ieee754_powf+0x1be>
 800e4c0:	2401      	movs	r4, #1
 800e4c2:	e75c      	b.n	800e37e <__ieee754_powf+0x25e>
 800e4c4:	0800ec81 	.word	0x0800ec81
 800e4c8:	00000000 	.word	0x00000000
 800e4cc:	3f7ffff7 	.word	0x3f7ffff7
 800e4d0:	7149f2ca 	.word	0x7149f2ca
 800e4d4:	3f800007 	.word	0x3f800007
 800e4d8:	3eaaaaab 	.word	0x3eaaaaab
 800e4dc:	36eca570 	.word	0x36eca570
 800e4e0:	3fb8aa3b 	.word	0x3fb8aa3b
 800e4e4:	3fb8aa00 	.word	0x3fb8aa00
 800e4e8:	4b800000 	.word	0x4b800000
 800e4ec:	001cc471 	.word	0x001cc471
 800e4f0:	005db3d6 	.word	0x005db3d6
 800e4f4:	0800ed94 	.word	0x0800ed94
 800e4f8:	fffff000 	.word	0xfffff000
 800e4fc:	3e6c3255 	.word	0x3e6c3255
 800e500:	3e53f142 	.word	0x3e53f142
 800e504:	3e8ba305 	.word	0x3e8ba305
 800e508:	3edb6db7 	.word	0x3edb6db7
 800e50c:	3f19999a 	.word	0x3f19999a
 800e510:	3f763800 	.word	0x3f763800
 800e514:	3f76384f 	.word	0x3f76384f
 800e518:	369dc3a0 	.word	0x369dc3a0
 800e51c:	0800eda4 	.word	0x0800eda4
 800e520:	0800ed9c 	.word	0x0800ed9c
 800e524:	3338aa3c 	.word	0x3338aa3c
 800e528:	f040 8092 	bne.w	800e650 <__ieee754_powf+0x530>
 800e52c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800e524 <__ieee754_powf+0x404>
 800e530:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e534:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e538:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e540:	f73f aef6 	bgt.w	800e330 <__ieee754_powf+0x210>
 800e544:	15db      	asrs	r3, r3, #23
 800e546:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800e54a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e54e:	4103      	asrs	r3, r0
 800e550:	4423      	add	r3, r4
 800e552:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e556:	4947      	ldr	r1, [pc, #284]	; (800e674 <__ieee754_powf+0x554>)
 800e558:	3a7f      	subs	r2, #127	; 0x7f
 800e55a:	4111      	asrs	r1, r2
 800e55c:	ea23 0101 	bic.w	r1, r3, r1
 800e560:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800e564:	ee07 1a10 	vmov	s14, r1
 800e568:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e56c:	f1c2 0217 	rsb	r2, r2, #23
 800e570:	4110      	asrs	r0, r2
 800e572:	2c00      	cmp	r4, #0
 800e574:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e578:	bfb8      	it	lt
 800e57a:	4240      	neglt	r0, r0
 800e57c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e580:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e678 <__ieee754_powf+0x558>
 800e584:	ee17 3a10 	vmov	r3, s14
 800e588:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e58c:	f023 030f 	bic.w	r3, r3, #15
 800e590:	ee07 3a10 	vmov	s14, r3
 800e594:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e598:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e59c:	eddf 7a37 	vldr	s15, [pc, #220]	; 800e67c <__ieee754_powf+0x55c>
 800e5a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5a4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800e5a8:	eddf 6a35 	vldr	s13, [pc, #212]	; 800e680 <__ieee754_powf+0x560>
 800e5ac:	eeb0 0a67 	vmov.f32	s0, s15
 800e5b0:	eea7 0a26 	vfma.f32	s0, s14, s13
 800e5b4:	eeb0 6a40 	vmov.f32	s12, s0
 800e5b8:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e5bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e5c0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e5c4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800e684 <__ieee754_powf+0x564>
 800e5c8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800e688 <__ieee754_powf+0x568>
 800e5cc:	eea7 6a26 	vfma.f32	s12, s14, s13
 800e5d0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800e68c <__ieee754_powf+0x56c>
 800e5d4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e5d8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800e690 <__ieee754_powf+0x570>
 800e5dc:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e5e0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800e694 <__ieee754_powf+0x574>
 800e5e4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e5e8:	eeb0 6a40 	vmov.f32	s12, s0
 800e5ec:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e5f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e5f4:	eeb0 7a46 	vmov.f32	s14, s12
 800e5f8:	ee77 6a66 	vsub.f32	s13, s14, s13
 800e5fc:	ee20 6a06 	vmul.f32	s12, s0, s12
 800e600:	eee0 7a27 	vfma.f32	s15, s0, s15
 800e604:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e60c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e610:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e614:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e618:	ee10 3a10 	vmov	r3, s0
 800e61c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e620:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e624:	da1a      	bge.n	800e65c <__ieee754_powf+0x53c>
 800e626:	f000 f8ab 	bl	800e780 <scalbnf>
 800e62a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e62e:	e5c9      	b.n	800e1c4 <__ieee754_powf+0xa4>
 800e630:	4a19      	ldr	r2, [pc, #100]	; (800e698 <__ieee754_powf+0x578>)
 800e632:	4293      	cmp	r3, r2
 800e634:	dd02      	ble.n	800e63c <__ieee754_powf+0x51c>
 800e636:	eddf 7a19 	vldr	s15, [pc, #100]	; 800e69c <__ieee754_powf+0x57c>
 800e63a:	e67b      	b.n	800e334 <__ieee754_powf+0x214>
 800e63c:	d108      	bne.n	800e650 <__ieee754_powf+0x530>
 800e63e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e642:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e64a:	f6ff af7b 	blt.w	800e544 <__ieee754_powf+0x424>
 800e64e:	e7f2      	b.n	800e636 <__ieee754_powf+0x516>
 800e650:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800e654:	f73f af76 	bgt.w	800e544 <__ieee754_powf+0x424>
 800e658:	2000      	movs	r0, #0
 800e65a:	e78f      	b.n	800e57c <__ieee754_powf+0x45c>
 800e65c:	ee00 3a10 	vmov	s0, r3
 800e660:	e7e3      	b.n	800e62a <__ieee754_powf+0x50a>
 800e662:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e666:	e5ad      	b.n	800e1c4 <__ieee754_powf+0xa4>
 800e668:	eeb0 0a68 	vmov.f32	s0, s17
 800e66c:	e5aa      	b.n	800e1c4 <__ieee754_powf+0xa4>
 800e66e:	eeb0 0a48 	vmov.f32	s0, s16
 800e672:	e5a7      	b.n	800e1c4 <__ieee754_powf+0xa4>
 800e674:	007fffff 	.word	0x007fffff
 800e678:	3f317218 	.word	0x3f317218
 800e67c:	35bfbe8c 	.word	0x35bfbe8c
 800e680:	3f317200 	.word	0x3f317200
 800e684:	3331bb4c 	.word	0x3331bb4c
 800e688:	b5ddea0e 	.word	0xb5ddea0e
 800e68c:	388ab355 	.word	0x388ab355
 800e690:	bb360b61 	.word	0xbb360b61
 800e694:	3e2aaaab 	.word	0x3e2aaaab
 800e698:	43160000 	.word	0x43160000
 800e69c:	0da24260 	.word	0x0da24260

0800e6a0 <__ieee754_sqrtf>:
 800e6a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e6a4:	4770      	bx	lr

0800e6a6 <matherr>:
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	4770      	bx	lr

0800e6aa <fabsf>:
 800e6aa:	ee10 3a10 	vmov	r3, s0
 800e6ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6b2:	ee00 3a10 	vmov	s0, r3
 800e6b6:	4770      	bx	lr

0800e6b8 <finitef>:
 800e6b8:	ee10 3a10 	vmov	r3, s0
 800e6bc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800e6c0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e6c4:	bfac      	ite	ge
 800e6c6:	2000      	movge	r0, #0
 800e6c8:	2001      	movlt	r0, #1
 800e6ca:	4770      	bx	lr

0800e6cc <rintf>:
 800e6cc:	b513      	push	{r0, r1, r4, lr}
 800e6ce:	ee10 1a10 	vmov	r1, s0
 800e6d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e6d6:	0ddc      	lsrs	r4, r3, #23
 800e6d8:	3c7f      	subs	r4, #127	; 0x7f
 800e6da:	2c16      	cmp	r4, #22
 800e6dc:	dc46      	bgt.n	800e76c <rintf+0xa0>
 800e6de:	b32b      	cbz	r3, 800e72c <rintf+0x60>
 800e6e0:	2c00      	cmp	r4, #0
 800e6e2:	ee10 2a10 	vmov	r2, s0
 800e6e6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800e6ea:	da21      	bge.n	800e730 <rintf+0x64>
 800e6ec:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800e6f0:	425b      	negs	r3, r3
 800e6f2:	4a21      	ldr	r2, [pc, #132]	; (800e778 <rintf+0xac>)
 800e6f4:	0a5b      	lsrs	r3, r3, #9
 800e6f6:	0d09      	lsrs	r1, r1, #20
 800e6f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6fc:	0509      	lsls	r1, r1, #20
 800e6fe:	430b      	orrs	r3, r1
 800e700:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e704:	ee07 3a90 	vmov	s15, r3
 800e708:	edd2 6a00 	vldr	s13, [r2]
 800e70c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800e710:	ed8d 7a01 	vstr	s14, [sp, #4]
 800e714:	eddd 7a01 	vldr	s15, [sp, #4]
 800e718:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e71c:	ee17 3a90 	vmov	r3, s15
 800e720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e724:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800e728:	ee00 3a10 	vmov	s0, r3
 800e72c:	b002      	add	sp, #8
 800e72e:	bd10      	pop	{r4, pc}
 800e730:	4b12      	ldr	r3, [pc, #72]	; (800e77c <rintf+0xb0>)
 800e732:	4123      	asrs	r3, r4
 800e734:	4219      	tst	r1, r3
 800e736:	d0f9      	beq.n	800e72c <rintf+0x60>
 800e738:	085b      	lsrs	r3, r3, #1
 800e73a:	4219      	tst	r1, r3
 800e73c:	d006      	beq.n	800e74c <rintf+0x80>
 800e73e:	ea21 0203 	bic.w	r2, r1, r3
 800e742:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e746:	fa43 f404 	asr.w	r4, r3, r4
 800e74a:	4322      	orrs	r2, r4
 800e74c:	4b0a      	ldr	r3, [pc, #40]	; (800e778 <rintf+0xac>)
 800e74e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e752:	ed90 7a00 	vldr	s14, [r0]
 800e756:	ee07 2a90 	vmov	s15, r2
 800e75a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e75e:	edcd 7a01 	vstr	s15, [sp, #4]
 800e762:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e766:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e76a:	e7df      	b.n	800e72c <rintf+0x60>
 800e76c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e770:	d3dc      	bcc.n	800e72c <rintf+0x60>
 800e772:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e776:	e7d9      	b.n	800e72c <rintf+0x60>
 800e778:	0800edac 	.word	0x0800edac
 800e77c:	007fffff 	.word	0x007fffff

0800e780 <scalbnf>:
 800e780:	b508      	push	{r3, lr}
 800e782:	ee10 2a10 	vmov	r2, s0
 800e786:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800e78a:	ed2d 8b02 	vpush	{d8}
 800e78e:	eef0 0a40 	vmov.f32	s1, s0
 800e792:	d004      	beq.n	800e79e <scalbnf+0x1e>
 800e794:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e798:	d306      	bcc.n	800e7a8 <scalbnf+0x28>
 800e79a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800e79e:	ecbd 8b02 	vpop	{d8}
 800e7a2:	eeb0 0a60 	vmov.f32	s0, s1
 800e7a6:	bd08      	pop	{r3, pc}
 800e7a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e7ac:	d21c      	bcs.n	800e7e8 <scalbnf+0x68>
 800e7ae:	4b1f      	ldr	r3, [pc, #124]	; (800e82c <scalbnf+0xac>)
 800e7b0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e830 <scalbnf+0xb0>
 800e7b4:	4298      	cmp	r0, r3
 800e7b6:	ee60 0a27 	vmul.f32	s1, s0, s15
 800e7ba:	db10      	blt.n	800e7de <scalbnf+0x5e>
 800e7bc:	ee10 2a90 	vmov	r2, s1
 800e7c0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800e7c4:	3b19      	subs	r3, #25
 800e7c6:	4403      	add	r3, r0
 800e7c8:	2bfe      	cmp	r3, #254	; 0xfe
 800e7ca:	dd0f      	ble.n	800e7ec <scalbnf+0x6c>
 800e7cc:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800e834 <scalbnf+0xb4>
 800e7d0:	eeb0 0a48 	vmov.f32	s0, s16
 800e7d4:	f000 f834 	bl	800e840 <copysignf>
 800e7d8:	ee60 0a08 	vmul.f32	s1, s0, s16
 800e7dc:	e7df      	b.n	800e79e <scalbnf+0x1e>
 800e7de:	eddf 7a16 	vldr	s15, [pc, #88]	; 800e838 <scalbnf+0xb8>
 800e7e2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e7e6:	e7da      	b.n	800e79e <scalbnf+0x1e>
 800e7e8:	0ddb      	lsrs	r3, r3, #23
 800e7ea:	e7ec      	b.n	800e7c6 <scalbnf+0x46>
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	dd06      	ble.n	800e7fe <scalbnf+0x7e>
 800e7f0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e7f4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e7f8:	ee00 3a90 	vmov	s1, r3
 800e7fc:	e7cf      	b.n	800e79e <scalbnf+0x1e>
 800e7fe:	f113 0f16 	cmn.w	r3, #22
 800e802:	da06      	bge.n	800e812 <scalbnf+0x92>
 800e804:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e808:	4298      	cmp	r0, r3
 800e80a:	dcdf      	bgt.n	800e7cc <scalbnf+0x4c>
 800e80c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800e838 <scalbnf+0xb8>
 800e810:	e7de      	b.n	800e7d0 <scalbnf+0x50>
 800e812:	3319      	adds	r3, #25
 800e814:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e818:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e81c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e83c <scalbnf+0xbc>
 800e820:	ee07 3a10 	vmov	s14, r3
 800e824:	ee67 0a27 	vmul.f32	s1, s14, s15
 800e828:	e7b9      	b.n	800e79e <scalbnf+0x1e>
 800e82a:	bf00      	nop
 800e82c:	ffff3cb0 	.word	0xffff3cb0
 800e830:	4c000000 	.word	0x4c000000
 800e834:	7149f2ca 	.word	0x7149f2ca
 800e838:	0da24260 	.word	0x0da24260
 800e83c:	33000000 	.word	0x33000000

0800e840 <copysignf>:
 800e840:	ee10 3a10 	vmov	r3, s0
 800e844:	ee10 2a90 	vmov	r2, s1
 800e848:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e84c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e850:	4313      	orrs	r3, r2
 800e852:	ee00 3a10 	vmov	s0, r3
 800e856:	4770      	bx	lr

0800e858 <_init>:
 800e858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e85a:	bf00      	nop
 800e85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e85e:	bc08      	pop	{r3}
 800e860:	469e      	mov	lr, r3
 800e862:	4770      	bx	lr

0800e864 <_fini>:
 800e864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e866:	bf00      	nop
 800e868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e86a:	bc08      	pop	{r3}
 800e86c:	469e      	mov	lr, r3
 800e86e:	4770      	bx	lr
